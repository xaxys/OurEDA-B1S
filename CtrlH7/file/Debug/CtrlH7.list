
CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800c16c  0800c16c  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c280  0800c280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c284  0800c284  0001c284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800c288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a04  20000014  0800c29c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004a18  0800c29c  00024a18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000293d0  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004751  00000000  00000000  00049412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0004db68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001528  00000000  00000000  0004f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039311  00000000  00000000  00050720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c5f8  00000000  00000000  00089a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b7ff  00000000  00000000  000a6029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00211828  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dd0  00000000  00000000  0021187c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c154 	.word	0x0800c154

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800c154 	.word	0x0800c154

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <DownDetectPoint>:
static u8 *GY39SensorIO = 0;
static u8 *WT931SensorIO = 0;

//下传数据读取初始化
void DownDetectPoint(u8 *RXString)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	PDBegin = RXString;
 80005e0:	4a24      	ldr	r2, [pc, #144]	; (8000674 <DownDetectPoint+0x9c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
	PDStraight = (u16*) (RXString + 1);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <DownDetectPoint+0xa0>)
 80005ec:	6013      	str	r3, [r2, #0]
	PDRotate = (u16*) (RXString + 3);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3303      	adds	r3, #3
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <DownDetectPoint+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]
	PDVertical = (u16*) (RXString + 5);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3305      	adds	r3, #5
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <DownDetectPoint+0xa8>)
 80005fc:	6013      	str	r3, [r2, #0]
	PDLight = (u16*) (RXString + 7);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3307      	adds	r3, #7
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <DownDetectPoint+0xac>)
 8000604:	6013      	str	r3, [r2, #0]
	PDTH = (u16*) (RXString + 9);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3309      	adds	r3, #9
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <DownDetectPoint+0xb0>)
 800060c:	6013      	str	r3, [r2, #0]
	PDTransp = (u16*) (RXString + 11);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	330b      	adds	r3, #11
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <DownDetectPoint+0xb4>)
 8000614:	6013      	str	r3, [r2, #0]
	PDArm[0] = (u16*) (RXString + 13);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	330d      	adds	r3, #13
 800061a:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <DownDetectPoint+0xb8>)
 800061c:	6013      	str	r3, [r2, #0]
	PDArm[1] = (u16*) (RXString + 15);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	330f      	adds	r3, #15
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <DownDetectPoint+0xb8>)
 8000624:	6053      	str	r3, [r2, #4]
	PDArm[2] = (u16*) (RXString + 17);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3311      	adds	r3, #17
 800062a:	4a19      	ldr	r2, [pc, #100]	; (8000690 <DownDetectPoint+0xb8>)
 800062c:	6093      	str	r3, [r2, #8]
	PDArm[3] = (u16*) (RXString + 19);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3313      	adds	r3, #19
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <DownDetectPoint+0xb8>)
 8000634:	60d3      	str	r3, [r2, #12]
	PDArm[4] = (u16*) (RXString + 21);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3315      	adds	r3, #21
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <DownDetectPoint+0xb8>)
 800063c:	6113      	str	r3, [r2, #16]
	PDArm[5] = (u16*) (RXString + 23);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3317      	adds	r3, #23
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <DownDetectPoint+0xb8>)
 8000644:	6153      	str	r3, [r2, #20]
	PDRes = (u16*) (RXString + 25);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3319      	adds	r3, #25
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <DownDetectPoint+0xbc>)
 800064c:	6013      	str	r3, [r2, #0]
	PDMode = RXString + 27;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	331b      	adds	r3, #27
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <DownDetectPoint+0xc0>)
 8000654:	6013      	str	r3, [r2, #0]
	PDId = RXString + 28;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	331c      	adds	r3, #28
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <DownDetectPoint+0xc4>)
 800065c:	6013      	str	r3, [r2, #0]
	PDEnd = RXString + 29;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	331d      	adds	r3, #29
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <DownDetectPoint+0xc8>)
 8000664:	6013      	str	r3, [r2, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000030 	.word	0x20000030
 8000678:	20000034 	.word	0x20000034
 800067c:	20000038 	.word	0x20000038
 8000680:	2000003c 	.word	0x2000003c
 8000684:	20000040 	.word	0x20000040
 8000688:	20000044 	.word	0x20000044
 800068c:	20000048 	.word	0x20000048
 8000690:	2000004c 	.word	0x2000004c
 8000694:	20000064 	.word	0x20000064
 8000698:	20000068 	.word	0x20000068
 800069c:	2000006c 	.word	0x2000006c
 80006a0:	20000070 	.word	0x20000070

080006a4 <DownMoveDetect>:

}

//运动模式判断
u8 DownMoveDetect(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
#ifdef CtrlSide
	return *PDMode & 6;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <DownMoveDetect+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f003 0306 	and.w	r3, r3, #6
 80006b2:	b2db      	uxtb	r3, r3
#endif
#ifdef PowerSide
	return *PDMode & 4;
#endif
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000068 	.word	0x20000068

080006c4 <SpecialMovePID>:

}

//特殊运动模式处理
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	80bb      	strh	r3, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	807b      	strh	r3, [r7, #2]
	//累计积分位置
	static float LocSum;
	//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	f040 808e 	bne.w	80007fa <SpecialMovePID+0x136>
	{
		PIDData = 0;
 80006de:	4b98      	ldr	r3, [pc, #608]	; (8000940 <SpecialMovePID+0x27c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	4b94      	ldr	r3, [pc, #592]	; (8000944 <SpecialMovePID+0x280>)
 80006f4:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 80006f8:	4b93      	ldr	r3, [pc, #588]	; (8000948 <SpecialMovePID+0x284>)
 80006fa:	ed93 7a00 	vldr	s14, [r3]
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <SpecialMovePID+0x280>)
 8000700:	edd3 7a00 	vldr	s15, [r3]
 8000704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000708:	4b8f      	ldr	r3, [pc, #572]	; (8000948 <SpecialMovePID+0x284>)
 800070a:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc = (u16) (1500
				+ range(
 800070e:	4b8d      	ldr	r3, [pc, #564]	; (8000944 <SpecialMovePID+0x280>)
 8000710:	edd3 7a00 	vldr	s15, [r3]
 8000714:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800094c <SpecialMovePID+0x288>
 8000718:	ee27 7a87 	vmul.f32	s14, s15, s14
 800071c:	4b8a      	ldr	r3, [pc, #552]	; (8000948 <SpecialMovePID+0x284>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800072a:	4b89      	ldr	r3, [pc, #548]	; (8000950 <SpecialMovePID+0x28c>)
 800072c:	edd3 6a00 	vldr	s13, [r3]
 8000730:	4b84      	ldr	r3, [pc, #528]	; (8000944 <SpecialMovePID+0x280>)
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800073a:	eddf 6a86 	vldr	s13, [pc, #536]	; 8000954 <SpecialMovePID+0x290>
 800073e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074a:	ee17 3a90 	vmov	r3, s15
 800074e:	b21b      	sxth	r3, r3
		PIDLoc = (u16) (1500
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000754:	da4c      	bge.n	80007f0 <SpecialMovePID+0x12c>
				+ range(
 8000756:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <SpecialMovePID+0x280>)
 8000758:	edd3 7a00 	vldr	s15, [r3]
 800075c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800094c <SpecialMovePID+0x288>
 8000760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000764:	4b78      	ldr	r3, [pc, #480]	; (8000948 <SpecialMovePID+0x284>)
 8000766:	edd3 7a00 	vldr	s15, [r3]
 800076a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800076e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000772:	4b77      	ldr	r3, [pc, #476]	; (8000950 <SpecialMovePID+0x28c>)
 8000774:	edd3 6a00 	vldr	s13, [r3]
 8000778:	4b72      	ldr	r3, [pc, #456]	; (8000944 <SpecialMovePID+0x280>)
 800077a:	edd3 7a00 	vldr	s15, [r3]
 800077e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000782:	eddf 6a74 	vldr	s13, [pc, #464]	; 8000954 <SpecialMovePID+0x290>
 8000786:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000792:	ee17 3a90 	vmov	r3, s15
 8000796:	b21b      	sxth	r3, r3
 8000798:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800079c:	dd25      	ble.n	80007ea <SpecialMovePID+0x126>
 800079e:	4b69      	ldr	r3, [pc, #420]	; (8000944 <SpecialMovePID+0x280>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800094c <SpecialMovePID+0x288>
 80007a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ac:	4b66      	ldr	r3, [pc, #408]	; (8000948 <SpecialMovePID+0x284>)
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007ba:	4b65      	ldr	r3, [pc, #404]	; (8000950 <SpecialMovePID+0x28c>)
 80007bc:	edd3 6a00 	vldr	s13, [r3]
 80007c0:	4b60      	ldr	r3, [pc, #384]	; (8000944 <SpecialMovePID+0x280>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007ca:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000954 <SpecialMovePID+0x290>
 80007ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007da:	ee17 3a90 	vmov	r3, s15
 80007de:	b21b      	sxth	r3, r3
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	e004      	b.n	80007f4 <SpecialMovePID+0x130>
 80007ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ee:	e001      	b.n	80007f4 <SpecialMovePID+0x130>
		PIDLoc = (u16) (1500
 80007f0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007f4:	81bb      	strh	r3, [r7, #12]
						(int16_t ) (PID_D_Kp * Ek + (PID_D_Ki * LocSum)
								+ PID_D_Kd * (Ek1 - Ek)), -1000, 1000));
		return PIDLoc;
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	e09b      	b.n	8000932 <SpecialMovePID+0x26e>
	}
	else if (ModeType == 2)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	f040 8088 	bne.w	8000912 <SpecialMovePID+0x24e>
	{
		PIDData = 0;
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <SpecialMovePID+0x27c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000808:	88ba      	ldrh	r2, [r7, #4]
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	ee07 3a90 	vmov	s15, r3
 8000812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <SpecialMovePID+0x280>)
 8000818:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 800081c:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <SpecialMovePID+0x284>)
 800081e:	ed93 7a00 	vldr	s14, [r3]
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <SpecialMovePID+0x280>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <SpecialMovePID+0x284>)
 800082e:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc = (u16) (1500
				+ range(
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <SpecialMovePID+0x280>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000958 <SpecialMovePID+0x294>
 800083c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <SpecialMovePID+0x284>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <SpecialMovePID+0x28c>)
 800084c:	edd3 6a00 	vldr	s13, [r3]
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <SpecialMovePID+0x280>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800085a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800095c <SpecialMovePID+0x298>
 800085e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800086a:	ee17 3a90 	vmov	r3, s15
 800086e:	b21b      	sxth	r3, r3
		PIDLoc = (u16) (1500
 8000870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000874:	da48      	bge.n	8000908 <SpecialMovePID+0x244>
				+ range(
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <SpecialMovePID+0x280>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000958 <SpecialMovePID+0x294>
 8000880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000884:	4b30      	ldr	r3, [pc, #192]	; (8000948 <SpecialMovePID+0x284>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <SpecialMovePID+0x28c>)
 8000890:	edd3 6a00 	vldr	s13, [r3]
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <SpecialMovePID+0x280>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800089e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800095c <SpecialMovePID+0x298>
 80008a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	ee17 3a90 	vmov	r3, s15
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80008b8:	dd23      	ble.n	8000902 <SpecialMovePID+0x23e>
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SpecialMovePID+0x280>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000958 <SpecialMovePID+0x294>
 80008c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SpecialMovePID+0x284>)
 80008ca:	edd3 7a00 	vldr	s15, [r3]
 80008ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <SpecialMovePID+0x28c>)
 80008d4:	edd3 6a00 	vldr	s13, [r3]
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <SpecialMovePID+0x280>)
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008e2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800095c <SpecialMovePID+0x298>
 80008e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f2:	ee17 3a90 	vmov	r3, s15
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80008fe:	b29b      	uxth	r3, r3
 8000900:	e004      	b.n	800090c <SpecialMovePID+0x248>
 8000902:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000906:	e001      	b.n	800090c <SpecialMovePID+0x248>
		PIDLoc = (u16) (1500
 8000908:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800090c:	81fb      	strh	r3, [r7, #14]
						(int16_t ) (PID_O_Kp * Ek + (PID_O_Ki * LocSum)
								+ PID_O_Kd * (Ek1 - Ek)), -1000, 1000));
		return PIDLoc;
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	e00f      	b.n	8000932 <SpecialMovePID+0x26e>
	}
	else
	{
		if (!PIDData)
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <SpecialMovePID+0x27c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <SpecialMovePID+0x26c>
		{
			PIDData = 1;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <SpecialMovePID+0x27c>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <SpecialMovePID+0x280>)
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <SpecialMovePID+0x284>)
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000930:	2300      	movs	r3, #0
	}

}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000d4 	.word	0x200000d4
 8000944:	200000d8 	.word	0x200000d8
 8000948:	200000dc 	.word	0x200000dc
 800094c:	43480000 	.word	0x43480000
 8000950:	200000e0 	.word	0x200000e0
 8000954:	43960000 	.word	0x43960000
 8000958:	42c80000 	.word	0x42c80000
 800095c:	43160000 	.word	0x43160000

08000960 <SendBackPoint>:

//回传指针初始化
void SendBackPoint(u8 *TXString, u8 *DeepSIO, u8 *WT931SIO, u8 *GY39SIO)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	DeepSensorIO = DeepSIO;
 800096e:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <SendBackPoint+0xf4>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	6013      	str	r3, [r2, #0]
	WT931SensorIO = WT931SIO;
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <SendBackPoint+0xf8>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
	GY39SensorIO = GY39SIO;
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <SendBackPoint+0xfc>)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	6013      	str	r3, [r2, #0]
	TXString[0] = 0x25;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2225      	movs	r2, #37	; 0x25
 8000984:	701a      	strb	r2, [r3, #0]
	TXString[39] = 0xFF;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3327      	adds	r3, #39	; 0x27
 800098a:	22ff      	movs	r2, #255	; 0xff
 800098c:	701a      	strb	r2, [r3, #0]
	TXString[40] = 0xFF;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3328      	adds	r3, #40	; 0x28
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	701a      	strb	r2, [r3, #0]
	PUString = TXString;
 8000996:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <SendBackPoint+0x100>)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6013      	str	r3, [r2, #0]
	PUCabin = TXString + 1;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <SendBackPoint+0x104>)
 80009a2:	6013      	str	r3, [r2, #0]
	PUTemp = (u16*) (TXString + 2);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3302      	adds	r3, #2
 80009a8:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <SendBackPoint+0x108>)
 80009aa:	6013      	str	r3, [r2, #0]
	PUBaro[0] = (u16*) (TXString + 4);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3304      	adds	r3, #4
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <SendBackPoint+0x10c>)
 80009b2:	6013      	str	r3, [r2, #0]
	PUBaro[1] = (u16*) (TXString + 6);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3306      	adds	r3, #6
 80009b8:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <SendBackPoint+0x10c>)
 80009ba:	6053      	str	r3, [r2, #4]
	PUHum = (u16*) (TXString + 8);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3308      	adds	r3, #8
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <SendBackPoint+0x110>)
 80009c2:	6013      	str	r3, [r2, #0]
	PUAcc[0] = (u16*) (TXString + 10);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	330a      	adds	r3, #10
 80009c8:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <SendBackPoint+0x114>)
 80009ca:	6013      	str	r3, [r2, #0]
	PUAcc[1] = (u16*) (TXString + 12);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	330c      	adds	r3, #12
 80009d0:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <SendBackPoint+0x114>)
 80009d2:	6053      	str	r3, [r2, #4]
	PUAcc[2] = (u16*) (TXString + 14);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	330e      	adds	r3, #14
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <SendBackPoint+0x114>)
 80009da:	6093      	str	r3, [r2, #8]
	PURot[0] = (u16*) (TXString + 16);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3310      	adds	r3, #16
 80009e0:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <SendBackPoint+0x118>)
 80009e2:	6013      	str	r3, [r2, #0]
	PURot[1] = (u16*) (TXString + 18);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3312      	adds	r3, #18
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <SendBackPoint+0x118>)
 80009ea:	6053      	str	r3, [r2, #4]
	PURot[2] = (u16*) (TXString + 20);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3314      	adds	r3, #20
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SendBackPoint+0x118>)
 80009f2:	6093      	str	r3, [r2, #8]
	PUEul[0] = (u16*) (TXString + 22);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3316      	adds	r3, #22
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <SendBackPoint+0x11c>)
 80009fa:	6013      	str	r3, [r2, #0]
	PUEul[1] = (u16*) (TXString + 24);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3318      	adds	r3, #24
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <SendBackPoint+0x11c>)
 8000a02:	6053      	str	r3, [r2, #4]
	PUEul[2] = (u16*) (TXString + 26);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	331a      	adds	r3, #26
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <SendBackPoint+0x11c>)
 8000a0a:	6093      	str	r3, [r2, #8]
	PUMag[0] = (u16*) (TXString + 28);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	331c      	adds	r3, #28
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SendBackPoint+0x120>)
 8000a12:	6013      	str	r3, [r2, #0]
	PUMag[1] = (u16*) (TXString + 30);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	331e      	adds	r3, #30
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <SendBackPoint+0x120>)
 8000a1a:	6053      	str	r3, [r2, #4]
	PUMag[2] = (u16*) (TXString + 32);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3320      	adds	r3, #32
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <SendBackPoint+0x120>)
 8000a22:	6093      	str	r3, [r2, #8]
	PUWaterT = (u16*) (TXString + 34);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3322      	adds	r3, #34	; 0x22
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <SendBackPoint+0x124>)
 8000a2a:	6013      	str	r3, [r2, #0]
	PUWaterD = (u16*) (TXString + 36);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3324      	adds	r3, #36	; 0x24
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <SendBackPoint+0x128>)
 8000a32:	6013      	str	r3, [r2, #0]
	PUId = TXString + 38;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3326      	adds	r3, #38	; 0x26
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <SendBackPoint+0x12c>)
 8000a3a:	6013      	str	r3, [r2, #0]
	*PUId = XorCaculate(TXString, 38);
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <SendBackPoint+0x12c>)
 8000a3e:	681c      	ldr	r4, [r3, #0]
 8000a40:	2126      	movs	r1, #38	; 0x26
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f8f8 	bl	8000c38 <XorCaculate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	7023      	strb	r3, [r4, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	200000d0 	.word	0x200000d0
 8000a5c:	200000cc 	.word	0x200000cc
 8000a60:	20000074 	.word	0x20000074
 8000a64:	20000078 	.word	0x20000078
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000080 	.word	0x20000080
 8000a70:	20000088 	.word	0x20000088
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	20000098 	.word	0x20000098
 8000a7c:	200000a4 	.word	0x200000a4
 8000a80:	200000b0 	.word	0x200000b0
 8000a84:	200000bc 	.word	0x200000bc
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	200000c4 	.word	0x200000c4

08000a90 <SendBack>:

//上传数据处理
void SendBack(u8 WaterDetect, u16 TempNum, u16 BaroNum[2], u16 HumNum,
		u16 AccNum[3], u16 RotNum[3], u16 EulNum[3], u16 MagNum[3],
		u16 WaterTNum, u16 WaterDNum)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	81bb      	strh	r3, [r7, #12]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]
	*PUCabin = CabinNum;
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <SendBack+0x11c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	if (WaterDetect)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <SendBack+0x34>
	{
		*PUCabin += WaterNum;
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <SendBack+0x11c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <SendBack+0x11c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3202      	adds	r2, #2
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	701a      	strb	r2, [r3, #0]
	}
	if (!(*GY39SensorIO))
 8000ac4:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <SendBack+0x120>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d111      	bne.n	8000af2 <SendBack+0x62>
	{
		*PUTemp = TempNum;
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <SendBack+0x124>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	89ba      	ldrh	r2, [r7, #12]
 8000ad4:	801a      	strh	r2, [r3, #0]
		*PUBaro[0] = BaroNum[0];
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <SendBack+0x128>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	801a      	strh	r2, [r3, #0]
		*PUBaro[1] = BaroNum[1];
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <SendBack+0x128>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	8852      	ldrh	r2, [r2, #2]
 8000ae8:	801a      	strh	r2, [r3, #0]
		*PUHum = HumNum;
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <SendBack+0x12c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	801a      	strh	r2, [r3, #0]
	}
	if (!(*WT931SensorIO))
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <SendBack+0x130>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d13b      	bne.n	8000b74 <SendBack+0xe4>
	{
		*PUAcc[0] = AccNum[0];
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <SendBack+0x134>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	8812      	ldrh	r2, [r2, #0]
 8000b04:	801a      	strh	r2, [r3, #0]
		*PUAcc[1] = AccNum[1];
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <SendBack+0x134>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	8852      	ldrh	r2, [r2, #2]
 8000b0e:	801a      	strh	r2, [r3, #0]
		*PUAcc[2] = AccNum[2];
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <SendBack+0x134>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	6a3a      	ldr	r2, [r7, #32]
 8000b16:	8892      	ldrh	r2, [r2, #4]
 8000b18:	801a      	strh	r2, [r3, #0]
		*PURot[0] = RotNum[0];
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <SendBack+0x138>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b20:	8812      	ldrh	r2, [r2, #0]
 8000b22:	801a      	strh	r2, [r3, #0]
		*PURot[1] = RotNum[1];
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <SendBack+0x138>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2a:	8852      	ldrh	r2, [r2, #2]
 8000b2c:	801a      	strh	r2, [r3, #0]
		*PURot[2] = RotNum[2];
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SendBack+0x138>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b34:	8892      	ldrh	r2, [r2, #4]
 8000b36:	801a      	strh	r2, [r3, #0]
		*PUEul[0] = EulNum[0];
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SendBack+0x13c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3e:	8812      	ldrh	r2, [r2, #0]
 8000b40:	801a      	strh	r2, [r3, #0]
		*PUEul[1] = EulNum[1];
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <SendBack+0x13c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b48:	8852      	ldrh	r2, [r2, #2]
 8000b4a:	801a      	strh	r2, [r3, #0]
		*PUEul[2] = EulNum[2];
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <SendBack+0x13c>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b52:	8892      	ldrh	r2, [r2, #4]
 8000b54:	801a      	strh	r2, [r3, #0]
		*PUMag[0] = MagNum[0];
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <SendBack+0x140>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	801a      	strh	r2, [r3, #0]
		*PUMag[1] = MagNum[1];
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <SendBack+0x140>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b66:	8852      	ldrh	r2, [r2, #2]
 8000b68:	801a      	strh	r2, [r3, #0]
		*PUMag[2] = MagNum[2];
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <SendBack+0x140>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b70:	8892      	ldrh	r2, [r2, #4]
 8000b72:	801a      	strh	r2, [r3, #0]
	}
#ifdef CtrlSide
	if (!(*DeepSensorIO))
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <SendBack+0x144>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d107      	bne.n	8000b8e <SendBack+0xfe>
	{
		*PUWaterT = WaterTNum;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <SendBack+0x148>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b84:	801a      	strh	r2, [r3, #0]
		*PUWaterD = WaterDNum;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <SendBack+0x14c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b8c:	801a      	strh	r2, [r3, #0]

#ifdef PowerSide
	*PUWaterT = NULL;
	*PUWaterD = NULL;
#endif
	*PUId = XorCaculate(PUString, 38);
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <SendBack+0x150>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <SendBack+0x154>)
 8000b94:	6814      	ldr	r4, [r2, #0]
 8000b96:	2126      	movs	r1, #38	; 0x26
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f84d 	bl	8000c38 <XorCaculate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	200000cc 	.word	0x200000cc
 8000bb4:	2000007c 	.word	0x2000007c
 8000bb8:	20000080 	.word	0x20000080
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	200000d0 	.word	0x200000d0
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	200000b0 	.word	0x200000b0
 8000bd4:	200000c8 	.word	0x200000c8
 8000bd8:	200000bc 	.word	0x200000bc
 8000bdc:	200000c0 	.word	0x200000c0
 8000be0:	20000074 	.word	0x20000074
 8000be4:	200000c4 	.word	0x200000c4

08000be8 <IdTest>:

//异或运算位检查，其中Format上传格式为1下传格式为0，正确为1错误为0
u8 IdTest(u8 *String, u8 Format)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
#ifdef DataIdentify
	if (Format)
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00d      	beq.n	8000c16 <IdTest+0x2e>
	{
		if (*(String + 38) == XorCaculate(String, 38))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3326      	adds	r3, #38	; 0x26
 8000bfe:	781c      	ldrb	r4, [r3, #0]
 8000c00:	2126      	movs	r1, #38	; 0x26
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f818 	bl	8000c38 <XorCaculate>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d101      	bne.n	8000c12 <IdTest+0x2a>
		{
			return 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e00c      	b.n	8000c30 <IdTest+0x48>
		}
	}
	else
	{
		if (*(String + 28) == XorCaculate(String, 28))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	331c      	adds	r3, #28
 8000c1a:	781c      	ldrb	r4, [r3, #0]
 8000c1c:	211c      	movs	r1, #28
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f80a 	bl	8000c38 <XorCaculate>
 8000c24:	4603      	mov	r3, r0
 8000c26:	429c      	cmp	r4, r3
 8000c28:	d101      	bne.n	8000c2e <IdTest+0x46>
		{
			return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000c2e:	2300      	movs	r3, #0
		}
	}
#endif
	return 1;
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <XorCaculate>:

//异或运算位计算
u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	u8 CacResult = CacString[0];
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73bb      	strb	r3, [r7, #14]
 8000c4e:	e009      	b.n	8000c64 <XorCaculate+0x2c>
	{
		CacResult ^= CacString[i];
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4053      	eors	r3, r2
 8000c5c:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73bb      	strb	r3, [r7, #14]
 8000c64:	7bba      	ldrb	r2, [r7, #14]
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d3f1      	bcc.n	8000c50 <XorCaculate+0x18>
	}
	return CacResult;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <DeepPoint>:
const u8 TSendStr[3] =
{ 0xA5, 0x52, 0xF7 };

//水深数据指针定向
void DeepPoint(u8 *SerialData)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	DDepthPos = (u16*) (SerialData);
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <DeepPoint+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
	DWaterTemperturePos = (u16*) (SerialData + 2);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <DeepPoint+0x28>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	200000e8 	.word	0x200000e8

08000ca8 <DeepTake>:
//
//}

//水深数据输出
void DeepTake(u16 *DepthNum, u16 *WaterTempertureNum)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	*DepthNum = *DDepthPos;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <DeepTake+0x2c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	801a      	strh	r2, [r3, #0]
	*WaterTempertureNum = *DWaterTemperturePos;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <DeepTake+0x30>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	801a      	strh	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000e4 	.word	0x200000e4
 8000cd8:	200000e8 	.word	0x200000e8

08000cdc <WT931Point>:

//WT931数据指针定向
void WT931Point(u8 *SerialData)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	PAccPos[0] = (u16*) (SerialData + 2);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <WT931Point+0x94>)
 8000cea:	6013      	str	r3, [r2, #0]
	PAccPos[1] = (u16*) (SerialData + 4);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3304      	adds	r3, #4
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <WT931Point+0x94>)
 8000cf2:	6053      	str	r3, [r2, #4]
	PAccPos[2] = (u16*) (SerialData + 6);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3306      	adds	r3, #6
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <WT931Point+0x94>)
 8000cfa:	6093      	str	r3, [r2, #8]
	PInsTemPos[0] = (u16*) (SerialData + 8);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3308      	adds	r3, #8
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <WT931Point+0x98>)
 8000d02:	6013      	str	r3, [r2, #0]
	PRotPos[0] = (u16*) (SerialData + 13);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	330d      	adds	r3, #13
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <WT931Point+0x9c>)
 8000d0a:	6013      	str	r3, [r2, #0]
	PRotPos[1] = (u16*) (SerialData + 15);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	330f      	adds	r3, #15
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <WT931Point+0x9c>)
 8000d12:	6053      	str	r3, [r2, #4]
	PRotPos[2] = (u16*) (SerialData + 17);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3311      	adds	r3, #17
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <WT931Point+0x9c>)
 8000d1a:	6093      	str	r3, [r2, #8]
	PInsTemPos[1] = (u16*) (SerialData + 19);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3313      	adds	r3, #19
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <WT931Point+0x98>)
 8000d22:	6053      	str	r3, [r2, #4]
	PEulPos[0] = (u16*) (SerialData + 24);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3318      	adds	r3, #24
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <WT931Point+0xa0>)
 8000d2a:	6013      	str	r3, [r2, #0]
	PEulPos[1] = (u16*) (SerialData + 26);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	331a      	adds	r3, #26
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <WT931Point+0xa0>)
 8000d32:	6053      	str	r3, [r2, #4]
	PEulPos[2] = (u16*) (SerialData + 28);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	331c      	adds	r3, #28
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <WT931Point+0xa0>)
 8000d3a:	6093      	str	r3, [r2, #8]
	PInsTemPos[2] = (u16*) (SerialData + 30);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	331e      	adds	r3, #30
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <WT931Point+0x98>)
 8000d42:	6093      	str	r3, [r2, #8]
	PMagPos[0] = (u16*) (SerialData + 35);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3323      	adds	r3, #35	; 0x23
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <WT931Point+0xa4>)
 8000d4a:	6013      	str	r3, [r2, #0]
	PMagPos[1] = (u16*) (SerialData + 37);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3325      	adds	r3, #37	; 0x25
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <WT931Point+0xa4>)
 8000d52:	6053      	str	r3, [r2, #4]
	PMagPos[2] = (u16*) (SerialData + 39);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3327      	adds	r3, #39	; 0x27
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <WT931Point+0xa4>)
 8000d5a:	6093      	str	r3, [r2, #8]
	PInsTemPos[2] = (u16*) (SerialData + 41);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3329      	adds	r3, #41	; 0x29
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <WT931Point+0x98>)
 8000d62:	6093      	str	r3, [r2, #8]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	200000ec 	.word	0x200000ec
 8000d74:	2000011c 	.word	0x2000011c
 8000d78:	200000f8 	.word	0x200000f8
 8000d7c:	20000104 	.word	0x20000104
 8000d80:	20000110 	.word	0x20000110

08000d84 <WT931Take>:

//WT931数据输出
void WT931Take(u16 *AccelerationNum, u16 *RotSpeedNum, u16 *EulerAngleNum,
		u16 *MagnetismNum)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]

	AccelerationNum[0] = *PAccPos[0];
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <WT931Take+0xa4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	801a      	strh	r2, [r3, #0]
	AccelerationNum[1] = *PAccPos[1];
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <WT931Take+0xa4>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3302      	adds	r3, #2
 8000da4:	8812      	ldrh	r2, [r2, #0]
 8000da6:	801a      	strh	r2, [r3, #0]
	AccelerationNum[2] = *PAccPos[2];
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <WT931Take+0xa4>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3304      	adds	r3, #4
 8000db0:	8812      	ldrh	r2, [r2, #0]
 8000db2:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[0] = *PRotPos[0];
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <WT931Take+0xa8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	881a      	ldrh	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[1] = *PRotPos[1];
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <WT931Take+0xa8>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[2] = *PRotPos[2];
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <WT931Take+0xa8>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[0] = *PEulPos[0];
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <WT931Take+0xac>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[1] = *PEulPos[1];
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <WT931Take+0xac>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3302      	adds	r3, #2
 8000de8:	8812      	ldrh	r2, [r2, #0]
 8000dea:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[2] = *PEulPos[2];
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <WT931Take+0xac>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3304      	adds	r3, #4
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	801a      	strh	r2, [r3, #0]
	MagnetismNum[0] = *PMagPos[0];
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <WT931Take+0xb0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	801a      	strh	r2, [r3, #0]
	MagnetismNum[1] = *PMagPos[1];
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <WT931Take+0xb0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	801a      	strh	r2, [r3, #0]
	MagnetismNum[2] = *PMagPos[2];
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <WT931Take+0xb0>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	3304      	adds	r3, #4
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	801a      	strh	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200000ec 	.word	0x200000ec
 8000e2c:	200000f8 	.word	0x200000f8
 8000e30:	20000104 	.word	0x20000104
 8000e34:	20000110 	.word	0x20000110

08000e38 <GY39InitStr>:

//读取GY39初始化指令
void GY39InitStr(u8 TXCache[3])
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	TXCache[0] = TInitStr[0];
 8000e40:	22a5      	movs	r2, #165	; 0xa5
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	701a      	strb	r2, [r3, #0]
	TXCache[1] = TInitStr[1];
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	701a      	strb	r2, [r3, #0]
	TXCache[2] = TInitStr[2];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3302      	adds	r3, #2
 8000e52:	2225      	movs	r2, #37	; 0x25
 8000e54:	701a      	strb	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <GY39Point>:
//	TXCache[2]=TSendStr[2];
//}

//GY39数据指针定向
void GY39Point(u8 *SerialData)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	TTemPos = (u16*) (SerialData + 2);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <GY39Point+0x34>)
 8000e72:	6013      	str	r3, [r2, #0]
	TBaroPos[0] = (u16*) (SerialData + 4);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <GY39Point+0x38>)
 8000e7a:	6013      	str	r3, [r2, #0]
	TBaroPos[1] = (u16*) (SerialData + 6);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3306      	adds	r3, #6
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <GY39Point+0x38>)
 8000e82:	6053      	str	r3, [r2, #4]
	THumPos = (u16*) (SerialData + 8);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3308      	adds	r3, #8
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <GY39Point+0x3c>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	2000012c 	.word	0x2000012c
 8000e9c:	20000130 	.word	0x20000130
 8000ea0:	20000138 	.word	0x20000138

08000ea4 <GY39Take>:

//GY39数据输出
void GY39Take(u16 *TemNum, u16 BaroNum[2], u16 *HumNum)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	*TemNum = *TTemPos;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <GY39Take+0x44>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	801a      	strh	r2, [r3, #0]
	BaroNum[0] = *TBaroPos[0];
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <GY39Take+0x48>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	881a      	ldrh	r2, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	801a      	strh	r2, [r3, #0]
	BaroNum[1] = *TBaroPos[1];
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <GY39Take+0x48>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	8812      	ldrh	r2, [r2, #0]
 8000ece:	801a      	strh	r2, [r3, #0]
	*HumNum = *THumPos;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <GY39Take+0x4c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	881a      	ldrh	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	801a      	strh	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000012c 	.word	0x2000012c
 8000eec:	20000130 	.word	0x20000130
 8000ef0:	20000138 	.word	0x20000138

08000ef4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000013c 	.word	0x2000013c
 8000f24:	20000190 	.word	0x20000190

08000f28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b0a6      	sub	sp, #152	; 0x98
 8000f2c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <main+0x1d0>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d11b      	bne.n	8000f72 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
}
 8000f3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f40:	f3bf 8f6f 	isb	sy
}
 8000f44:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f46:	4b6c      	ldr	r3, [pc, #432]	; (80010f8 <main+0x1d0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4e:	f3bf 8f4f 	dsb	sy
}
 8000f52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f54:	f3bf 8f6f 	isb	sy
}
 8000f58:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f5a:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <main+0x1d0>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <main+0x1d0>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f66:	f3bf 8f4f 	dsb	sy
}
 8000f6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6c:	f3bf 8f6f 	isb	sy
}
 8000f70:	e000      	b.n	8000f74 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f72:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <main+0x1d0>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d143      	bne.n	8001008 <main+0xe0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f80:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <main+0x1d0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f88:	f3bf 8f4f 	dsb	sy
}
 8000f8c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <main+0x1d0>)
 8000f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f9c:	0b5b      	lsrs	r3, r3, #13
 8000f9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fbe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000fc4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fc6:	494c      	ldr	r1, [pc, #304]	; (80010f8 <main+0x1d0>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1eb      	bne.n	8000fb4 <main+0x8c>
    } while(sets-- != 0U);
 8000fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1dd      	bne.n	8000fa6 <main+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fea:	f3bf 8f4f 	dsb	sy
}
 8000fee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <main+0x1d0>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <main+0x1d0>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffc:	f3bf 8f4f 	dsb	sy
}
 8001000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001002:	f3bf 8f6f 	isb	sy
}
 8001006:	e000      	b.n	800100a <main+0xe2>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001008:	bf00      	nop
	SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800100a:	f001 feb9 	bl	8002d80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100e:	f000 f889 	bl	8001124 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001012:	f000 f90d 	bl	8001230 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001016:	f000 fb41 	bl	800169c <MX_GPIO_Init>
	MX_DMA_Init();
 800101a:	f000 facf 	bl	80015bc <MX_DMA_Init>
	MX_IWDG1_Init();
 800101e:	f000 f933 	bl	8001288 <MX_IWDG1_Init>
	MX_UART4_Init();
 8001022:	f000 f94f 	bl	80012c4 <MX_UART4_Init>
	MX_UART8_Init();
 8001026:	f000 f999 	bl	800135c <MX_UART8_Init>
	MX_USART1_UART_Init();
 800102a:	f000 f9e3 	bl	80013f4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800102e:	f000 fa2d 	bl	800148c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001032:	f000 fa77 	bl	8001524 <MX_USART3_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of UpTask */
	osThreadDef(UpTask, UpTaskF, osPriorityNormal, 0, 128);
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <main+0x1d4>)
 8001038:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800103c:	461d      	mov	r5, r3
 800103e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UpTaskHandle = osThreadCreate(osThread(UpTask), NULL);
 800104a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f009 fd06 	bl	800aa62 <osThreadCreate>
 8001056:	4603      	mov	r3, r0
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <main+0x1d8>)
 800105a:	6013      	str	r3, [r2, #0]

	/* definition and creation of DownTask */
	osThreadDef(DownTask, DownTaskF, osPriorityNormal, 0, 128);
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <main+0x1dc>)
 800105e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001062:	461d      	mov	r5, r3
 8001064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	DownTaskHandle = osThreadCreate(osThread(DownTask), NULL);
 8001070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f009 fcf3 	bl	800aa62 <osThreadCreate>
 800107c:	4603      	mov	r3, r0
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <main+0x1e0>)
 8001080:	6013      	str	r3, [r2, #0]

	/* definition and creation of InitialTask */
	osThreadDef(InitialTask, InitialTaskF, osPriorityRealtime, 0, 128);
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <main+0x1e4>)
 8001084:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001088:	461d      	mov	r5, r3
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	InitialTaskHandle = osThreadCreate(osThread(InitialTask), NULL);
 8001096:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fce0 	bl	800aa62 <osThreadCreate>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <main+0x1e8>)
 80010a6:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0x1ec>)
 80010aa:	f107 041c 	add.w	r4, r7, #28
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 fccd 	bl	800aa62 <osThreadCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <main+0x1f0>)
 80010cc:	6013      	str	r3, [r2, #0]

	/* definition and creation of EmptyTask */
	osThreadDef(EmptyTask, EmptyTaskF, osPriorityIdle, 0, 128);
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <main+0x1f4>)
 80010d0:	463c      	mov	r4, r7
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	EmptyTaskHandle = osThreadCreate(osThread(EmptyTask), NULL);
 80010e0:	463b      	mov	r3, r7
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 fcbc 	bl	800aa62 <osThreadCreate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <main+0x1f8>)
 80010ee:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80010f0:	f009 fcb0 	bl	800aa54 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80010f4:	e7fe      	b.n	80010f4 <main+0x1cc>
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	0800c1a4 	.word	0x0800c1a4
 8001100:	200046ec 	.word	0x200046ec
 8001104:	0800c1c0 	.word	0x0800c1c0
 8001108:	2000491c 	.word	0x2000491c
 800110c:	0800c1dc 	.word	0x0800c1dc
 8001110:	20004920 	.word	0x20004920
 8001114:	0800c1f8 	.word	0x0800c1f8
 8001118:	20004124 	.word	0x20004124
 800111c:	0800c214 	.word	0x0800c214
 8001120:	20004374 	.word	0x20004374

08001124 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	; 0x70
 8001128:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f00b f806 	bl	800c144 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f800 	bl	800c144 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001144:	2002      	movs	r0, #2
 8001146:	f004 ffe9 	bl	800611c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <SystemClock_Config+0x100>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <SystemClock_Config+0x100>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	62d3      	str	r3, [r2, #44]	; 0x2c
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <SystemClock_Config+0x100>)
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <SystemClock_Config+0x104>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <SystemClock_Config+0x104>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <SystemClock_Config+0x104>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800117c:	bf00      	nop
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <SystemClock_Config+0x104>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800118a:	d1f8      	bne.n	800117e <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <SystemClock_Config+0x108>)
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <SystemClock_Config+0x108>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800119c:	2309      	movs	r3, #9
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80011b2:	2305      	movs	r3, #5
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80011be:	2306      	movs	r3, #6
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011c6:	2308      	movs	r3, #8
 80011c8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 ffda 	bl	8006190 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80011e2:	f000 fd9f 	bl	8001d24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011e6:	233f      	movs	r3, #63	; 0x3f
 80011e8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011f2:	2308      	movs	r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001204:	2340      	movs	r3, #64	; 0x40
 8001206:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2102      	movs	r1, #2
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fbcf 	bl	80069b0 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8001218:	f000 fd84 	bl	8001d24 <Error_Handler>
	}
}
 800121c:	bf00      	nop
 800121e:	3770      	adds	r7, #112	; 0x70
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58000400 	.word	0x58000400
 8001228:	58024800 	.word	0x58024800
 800122c:	58024400 	.word	0x58024400

08001230 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0b0      	sub	sp, #192	; 0xc0
 8001234:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	22bc      	movs	r2, #188	; 0xbc
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f00a ff81 	bl	800c144 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8
 8001242:	2303      	movs	r3, #3
 8001244:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001246:	2319      	movs	r3, #25
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800124a:	23c0      	movs	r3, #192	; 0xc0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800125e:	2300      	movs	r3, #0
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 8001266:	2302      	movs	r3, #2
 8001268:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800126a:	2310      	movs	r3, #16
 800126c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4618      	mov	r0, r3
 8001272:	f005 ff6b 	bl	800714c <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 800127c:	f000 fd52 	bl	8001d24 <Error_Handler>
	}
}
 8001280:	bf00      	nop
 8001282:	37c0      	adds	r7, #192	; 0xc0
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_IWDG1_Init+0x34>)
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <MX_IWDG1_Init+0x38>)
 8001290:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_IWDG1_Init+0x34>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 2047;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_IWDG1_Init+0x34>)
 800129a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800129e:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 2047;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_IWDG1_Init+0x34>)
 80012a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012a6:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_IWDG1_Init+0x34>)
 80012aa:	f004 fed8 	bl	800605e <HAL_IWDG_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 80012b4:	f000 fd36 	bl	8001d24 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20004218 	.word	0x20004218
 80012c0:	58004800 	.word	0x58004800

080012c4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_UART4_Init+0x90>)
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <MX_UART4_Init+0x94>)
 80012cc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_UART4_Init+0x90>)
 80012d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80012d4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_UART4_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_UART4_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_UART4_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_UART4_Init+0x90>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_UART4_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_UART4_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_UART4_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_UART4_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_UART4_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_UART4_Init+0x90>)
 800130e:	f007 fd51 	bl	8008db4 <HAL_UART_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8001318:	f000 fd04 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 800131c:	2100      	movs	r1, #0
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_UART4_Init+0x90>)
 8001320:	f009 fab6 	bl	800a890 <HAL_UARTEx_SetTxFifoThreshold>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800132a:	f000 fcfb 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_UART4_Init+0x90>)
 8001332:	f009 faeb 	bl	800a90c <HAL_UARTEx_SetRxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800133c:	f000 fcf2 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_UART4_Init+0x90>)
 8001342:	f009 fa6c 	bl	800a81e <HAL_UARTEx_DisableFifoMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800134c:	f000 fcea 	bl	8001d24 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200047dc 	.word	0x200047dc
 8001358:	40004c00 	.word	0x40004c00

0800135c <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_UART8_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_UART8_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_UART8_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_UART8_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_UART8_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_UART8_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_UART8_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_UART8_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_UART8_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_UART8_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_UART8_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_UART8_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_UART8_Init+0x90>)
 80013a6:	f007 fd05 	bl	8008db4 <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 80013b0:	f000 fcb8 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_UART8_Init+0x90>)
 80013b8:	f009 fa6a 	bl	800a890 <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80013c2:	f000 fcaf 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_UART8_Init+0x90>)
 80013ca:	f009 fa9f 	bl	800a90c <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80013d4:	f000 fca6 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_UART8_Init+0x90>)
 80013da:	f009 fa20 	bl	800a81e <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 80013e4:	f000 fc9e 	bl	8001d24 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20004710 	.word	0x20004710
 80013f0:	40007c00 	.word	0x40007c00

080013f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_USART1_UART_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <MX_USART1_UART_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001400:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001404:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800143e:	f007 fcb9 	bl	8008db4 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001448:	f000 fc6c 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001450:	f009 fa1e 	bl	800a890 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800145a:	f000 fc63 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001462:	f009 fa53 	bl	800a90c <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800146c:	f000 fc5a 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001472:	f009 f9d4 	bl	800a81e <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 800147c:	f000 fc52 	bl	8001d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20004558 	.word	0x20004558
 8001488:	40011000 	.word	0x40011000

0800148c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_USART2_UART_Init+0x90>)
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MX_USART2_UART_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_USART2_UART_Init+0x90>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014d6:	f007 fc6d 	bl	8008db4 <HAL_UART_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80014e0:	f000 fc20 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014e8:	f009 f9d2 	bl	800a890 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80014f2:	f000 fc17 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014fa:	f009 fa07 	bl	800a90c <HAL_UARTEx_SetRxFifoThreshold>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001504:	f000 fc0e 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_USART2_UART_Init+0x90>)
 800150a:	f009 f988 	bl	800a81e <HAL_UARTEx_DisableFifoMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001514:	f000 fc06 	bl	8001d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000486c 	.word	0x2000486c
 8001520:	40004400 	.word	0x40004400

08001524 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <MX_USART3_UART_Init+0x94>)
 800152c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800156e:	f007 fc21 	bl	8008db4 <HAL_UART_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001578:	f000 fbd4 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001580:	f009 f986 	bl	800a890 <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800158a:	f000 fbcb 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800158e:	2100      	movs	r1, #0
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001592:	f009 f9bb 	bl	800a90c <HAL_UARTEx_SetRxFifoThreshold>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800159c:	f000 fbc2 	bl	8001d24 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 80015a2:	f009 f93c 	bl	800a81e <HAL_UARTEx_DisableFifoMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 80015ac:	f000 fbba 	bl	8001d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200042d4 	.word	0x200042d4
 80015b8:	40004800 	.word	0x40004800

080015bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <MX_DMA_Init+0xdc>)
 80015c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c8:	4a33      	ldr	r2, [pc, #204]	; (8001698 <MX_DMA_Init+0xdc>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <MX_DMA_Init+0xdc>)
 80015d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_DMA_Init+0xdc>)
 80015e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e6:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <MX_DMA_Init+0xdc>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_DMA_Init+0xdc>)
 80015f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	200b      	movs	r0, #11
 8001604:	f001 fcdc 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001608:	200b      	movs	r0, #11
 800160a:	f001 fcf3 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	200c      	movs	r0, #12
 8001614:	f001 fcd4 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001618:	200c      	movs	r0, #12
 800161a:	f001 fceb 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2105      	movs	r1, #5
 8001622:	200d      	movs	r0, #13
 8001624:	f001 fccc 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001628:	200d      	movs	r0, #13
 800162a:	f001 fce3 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2105      	movs	r1, #5
 8001632:	200e      	movs	r0, #14
 8001634:	f001 fcc4 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001638:	200e      	movs	r0, #14
 800163a:	f001 fcdb 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2105      	movs	r1, #5
 8001642:	200f      	movs	r0, #15
 8001644:	f001 fcbc 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001648:	200f      	movs	r0, #15
 800164a:	f001 fcd3 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	2010      	movs	r0, #16
 8001654:	f001 fcb4 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001658:	2010      	movs	r0, #16
 800165a:	f001 fccb 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2105      	movs	r1, #5
 8001662:	2011      	movs	r0, #17
 8001664:	f001 fcac 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001668:	2011      	movs	r0, #17
 800166a:	f001 fcc3 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2105      	movs	r1, #5
 8001672:	202f      	movs	r0, #47	; 0x2f
 8001674:	f001 fca4 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001678:	202f      	movs	r0, #47	; 0x2f
 800167a:	f001 fcbb 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	2038      	movs	r0, #56	; 0x38
 8001684:	f001 fc9c 	bl	8002fc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001688:	2038      	movs	r0, #56	; 0x38
 800168a:	f001 fcb3 	bl	8002ff4 <HAL_NVIC_EnableIRQ>

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	58024400 	.word	0x58024400

0800169c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4a35      	ldr	r2, [pc, #212]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <MX_GPIO_Init+0xf4>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <MX_GPIO_Init+0xf4>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <MX_GPIO_Init+0xf4>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_GPIO_Init+0xf4>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_GPIO_Init+0xf4>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <MX_GPIO_Init+0xf4>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_GPIO_Init+0xf4>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <MX_GPIO_Init+0xf8>)
 800174e:	f004 fc6d 	bl	800602c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001752:	2310      	movs	r3, #16
 8001754:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <MX_GPIO_Init+0xf8>)
 800176a:	f004 fa97 	bl	8005c9c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_GPIO_Init+0xf8>)
 8001782:	f004 fa8b 	bl	8005c9c <HAL_GPIO_Init>

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	58024400 	.word	0x58024400
 8001794:	58021000 	.word	0x58021000

08001798 <UpTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_UpTaskF */
void UpTaskF(void const *argument)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af06      	add	r7, sp, #24
 800179e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		while (!UpSideFinish)
 80017a0:	e002      	b.n	80017a8 <UpTaskF+0x10>
		{
			osDelay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f009 f9a9 	bl	800aafa <osDelay>
		while (!UpSideFinish)
 80017a8:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <UpTaskF+0x128>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f8      	beq.n	80017a2 <UpTaskF+0xa>
		}
		UpSideFinish = 0;
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <UpTaskF+0x128>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
		if (IdTest(UART1RXCache, 0))
 80017b6:	2100      	movs	r1, #0
 80017b8:	4842      	ldr	r0, [pc, #264]	; (80018c4 <UpTaskF+0x12c>)
 80017ba:	f7ff fa15 	bl	8000be8 <IdTest>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01d      	beq.n	8001800 <UpTaskF+0x68>
		{
			while (UpIO)
 80017c4:	e002      	b.n	80017cc <UpTaskF+0x34>
			{
				osDelay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f009 f997 	bl	800aafa <osDelay>
			while (UpIO)
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <UpTaskF+0x130>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f7      	bne.n	80017c6 <UpTaskF+0x2e>
			}
			UpIO = 1;
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <UpTaskF+0x130>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART1RXLen; ++i)
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e008      	b.n	80017f4 <UpTaskF+0x5c>
			{
				UpCache[i] = UART1RXCache[i];
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	4937      	ldr	r1, [pc, #220]	; (80018c4 <UpTaskF+0x12c>)
 80017e8:	5c89      	ldrb	r1, [r1, r2]
 80017ea:	4a38      	ldr	r2, [pc, #224]	; (80018cc <UpTaskF+0x134>)
 80017ec:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART1RXLen; ++i)
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	3301      	adds	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b1d      	cmp	r3, #29
 80017f8:	d9f3      	bls.n	80017e2 <UpTaskF+0x4a>
			}
			UpIO = 0;
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <UpTaskF+0x130>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <UpTaskF+0x138>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <UpTaskF+0x138>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0210 	orr.w	r2, r2, #16
 800180e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, UART1RXCache, UART1RXLen);
 8001810:	221e      	movs	r2, #30
 8001812:	492c      	ldr	r1, [pc, #176]	; (80018c4 <UpTaskF+0x12c>)
 8001814:	482e      	ldr	r0, [pc, #184]	; (80018d0 <UpTaskF+0x138>)
 8001816:	f007 fb9d 	bl	8008f54 <HAL_UART_Receive_DMA>
		DownEn = 1;
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <UpTaskF+0x13c>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
		if (SensorCabin)
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <UpTaskF+0x140>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <UpTaskF+0xd8>
		{
			while (DownIO)
 8001828:	e002      	b.n	8001830 <UpTaskF+0x98>
			{
				osDelay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f009 f965 	bl	800aafa <osDelay>
			while (DownIO)
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <UpTaskF+0x144>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f7      	bne.n	800182a <UpTaskF+0x92>
			}
			DownIO = 1;
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <UpTaskF+0x144>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART1TXLen; ++i)
 8001840:	2300      	movs	r3, #0
 8001842:	73bb      	strb	r3, [r7, #14]
 8001844:	e008      	b.n	8001858 <UpTaskF+0xc0>
			{
				UART1TXCache_P[i] = DownCache[i];
 8001846:	7bba      	ldrb	r2, [r7, #14]
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	4925      	ldr	r1, [pc, #148]	; (80018e0 <UpTaskF+0x148>)
 800184c:	5c89      	ldrb	r1, [r1, r2]
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <UpTaskF+0x14c>)
 8001850:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART1TXLen; ++i)
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	73bb      	strb	r3, [r7, #14]
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	2b28      	cmp	r3, #40	; 0x28
 800185c:	d9f3      	bls.n	8001846 <UpTaskF+0xae>
			}
			DownIO = 0;
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <UpTaskF+0x144>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart1, UART1TXCache_P, UART1TXLen);
 8001864:	2229      	movs	r2, #41	; 0x29
 8001866:	491f      	ldr	r1, [pc, #124]	; (80018e4 <UpTaskF+0x14c>)
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <UpTaskF+0x138>)
 800186a:	f007 faf3 	bl	8008e54 <HAL_UART_Transmit_DMA>
 800186e:	e01c      	b.n	80018aa <UpTaskF+0x112>
		}
		else
		{
			SendBack(WaterDetect, TemCache, BaroCache, HumCache,
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <UpTaskF+0x150>)
 8001872:	7818      	ldrb	r0, [r3, #0]
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <UpTaskF+0x154>)
 8001876:	8819      	ldrh	r1, [r3, #0]
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <UpTaskF+0x158>)
 800187a:	881c      	ldrh	r4, [r3, #0]
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <UpTaskF+0x15c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <UpTaskF+0x160>)
 8001882:	8812      	ldrh	r2, [r2, #0]
 8001884:	9205      	str	r2, [sp, #20]
 8001886:	9304      	str	r3, [sp, #16]
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <UpTaskF+0x164>)
 800188a:	9303      	str	r3, [sp, #12]
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <UpTaskF+0x168>)
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <UpTaskF+0x16c>)
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <UpTaskF+0x170>)
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4623      	mov	r3, r4
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <UpTaskF+0x174>)
 800189c:	f7ff f8f8 	bl	8000a90 <SendBack>
					AccelerationCache, RotSpeedCache, EulerAngleCache,
					MagnetisCache, WaterTempertureCache, DepthCache);
			HAL_UART_Transmit_DMA(&huart1, UART1TXCache_C, UART1TXLen);
 80018a0:	2229      	movs	r2, #41	; 0x29
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <UpTaskF+0x178>)
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <UpTaskF+0x138>)
 80018a6:	f007 fad5 	bl	8008e54 <HAL_UART_Transmit_DMA>
		}
		SensorCabin = ~SensorCabin;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <UpTaskF+0x140>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <UpTaskF+0x140>)
 80018b4:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 80018b6:	4817      	ldr	r0, [pc, #92]	; (8001914 <UpTaskF+0x17c>)
 80018b8:	f004 fc20 	bl	80060fc <HAL_IWDG_Refresh>
		while (!UpSideFinish)
 80018bc:	e774      	b.n	80017a8 <UpTaskF+0x10>
 80018be:	bf00      	nop
 80018c0:	20000391 	.word	0x20000391
 80018c4:	200046f0 	.word	0x200046f0
 80018c8:	20000399 	.word	0x20000399
 80018cc:	200046a0 	.word	0x200046a0
 80018d0:	20004558 	.word	0x20004558
 80018d4:	2000039a 	.word	0x2000039a
 80018d8:	20000390 	.word	0x20000390
 80018dc:	2000039b 	.word	0x2000039b
 80018e0:	20004230 	.word	0x20004230
 80018e4:	20004924 	.word	0x20004924
 80018e8:	2000039c 	.word	0x2000039c
 80018ec:	200003be 	.word	0x200003be
 80018f0:	200003c4 	.word	0x200003c4
 80018f4:	200003c8 	.word	0x200003c8
 80018f8:	200003c6 	.word	0x200003c6
 80018fc:	200003b8 	.word	0x200003b8
 8001900:	200003b0 	.word	0x200003b0
 8001904:	200003a8 	.word	0x200003a8
 8001908:	200003a0 	.word	0x200003a0
 800190c:	200003c0 	.word	0x200003c0
 8001910:	200046c0 	.word	0x200046c0
 8001914:	20004218 	.word	0x20004218

08001918 <DownTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DownTaskF */
void DownTaskF(void const *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DownTaskF */
	while (!DownEn)
 8001920:	e002      	b.n	8001928 <DownTaskF+0x10>
	{
		osDelay(1);
 8001922:	2001      	movs	r0, #1
 8001924:	f009 f8e9 	bl	800aafa <osDelay>
	while (!DownEn)
 8001928:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <DownTaskF+0x14c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f8      	beq.n	8001922 <DownTaskF+0xa>
	}
	/* Infinite loop */
	for (;;)
	{
		if (DownMoveDetect() == 2)
 8001930:	f7fe feb8 	bl	80006a4 <DownMoveDetect>
 8001934:	4603      	mov	r3, r0
 8001936:	2b02      	cmp	r3, #2
 8001938:	d113      	bne.n	8001962 <DownTaskF+0x4a>
		{
			if (DIPFlag == 0)
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <DownTaskF+0x150>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <DownTaskF+0x38>
			{
				DIPFlag = 1;
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <DownTaskF+0x150>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				DIPStartNum = EulerAngleCache[2];
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <DownTaskF+0x154>)
 800194a:	889a      	ldrh	r2, [r3, #4]
 800194c:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <DownTaskF+0x158>)
 800194e:	801a      	strh	r2, [r3, #0]
			}
			SpecialMovePID(2, DIPStartNum, EulerAngleCache[2]);
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <DownTaskF+0x158>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <DownTaskF+0x154>)
 8001956:	8892      	ldrh	r2, [r2, #4]
 8001958:	4619      	mov	r1, r3
 800195a:	2002      	movs	r0, #2
 800195c:	f7fe feb2 	bl	80006c4 <SpecialMovePID>
 8001960:	e01f      	b.n	80019a2 <DownTaskF+0x8a>
		}
		else if (DownMoveDetect() == 4)
 8001962:	f7fe fe9f 	bl	80006a4 <DownMoveDetect>
 8001966:	4603      	mov	r3, r0
 8001968:	2b04      	cmp	r3, #4
 800196a:	d113      	bne.n	8001994 <DownTaskF+0x7c>
		{
			if (DIPFlag == 0)
 800196c:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <DownTaskF+0x150>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <DownTaskF+0x6a>
			{
				DIPFlag = 1;
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <DownTaskF+0x150>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
				DIPStartNum = DepthCache;
 800197a:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <DownTaskF+0x15c>)
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <DownTaskF+0x158>)
 8001980:	801a      	strh	r2, [r3, #0]
			}
			SpecialMovePID(4, DIPStartNum, DepthCache);
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <DownTaskF+0x158>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <DownTaskF+0x15c>)
 8001988:	8812      	ldrh	r2, [r2, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	2004      	movs	r0, #4
 800198e:	f7fe fe99 	bl	80006c4 <SpecialMovePID>
 8001992:	e006      	b.n	80019a2 <DownTaskF+0x8a>
		}
		else
		{
			DIPFlag = 0;
 8001994:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <DownTaskF+0x150>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
		}
		while (UpIO)
 800199a:	e002      	b.n	80019a2 <DownTaskF+0x8a>
		{
			osDelay(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f009 f8ac 	bl	800aafa <osDelay>
		while (UpIO)
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <DownTaskF+0x160>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f7      	bne.n	800199c <DownTaskF+0x84>
		}
		UpIO = 1;
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <DownTaskF+0x160>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
		for (u8 i = 0; i < UART8TXLen; ++i)
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e008      	b.n	80019ca <DownTaskF+0xb2>
		{
			UART8TXCache[i] = UpCache[i];
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	492f      	ldr	r1, [pc, #188]	; (8001a7c <DownTaskF+0x164>)
 80019be:	5c89      	ldrb	r1, [r1, r2]
 80019c0:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <DownTaskF+0x168>)
 80019c2:	54d1      	strb	r1, [r2, r3]
		for (u8 i = 0; i < UART8TXLen; ++i)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b1d      	cmp	r3, #29
 80019ce:	d9f3      	bls.n	80019b8 <DownTaskF+0xa0>
		}
		UpIO = 0;
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <DownTaskF+0x160>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart8, UART8TXCache, UART8TXLen);
 80019d6:	221e      	movs	r2, #30
 80019d8:	4929      	ldr	r1, [pc, #164]	; (8001a80 <DownTaskF+0x168>)
 80019da:	482a      	ldr	r0, [pc, #168]	; (8001a84 <DownTaskF+0x16c>)
 80019dc:	f007 fa3a 	bl	8008e54 <HAL_UART_Transmit_DMA>
		while (!DownSideFinish)
 80019e0:	e002      	b.n	80019e8 <DownTaskF+0xd0>
		{
			osDelay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f009 f889 	bl	800aafa <osDelay>
		while (!DownSideFinish)
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <DownTaskF+0x170>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f8      	beq.n	80019e2 <DownTaskF+0xca>
		}
		DownSideFinish = 0;
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <DownTaskF+0x170>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		if (IdTest(UART8RXCache, 1))
 80019f6:	2101      	movs	r1, #1
 80019f8:	4824      	ldr	r0, [pc, #144]	; (8001a8c <DownTaskF+0x174>)
 80019fa:	f7ff f8f5 	bl	8000be8 <IdTest>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01d      	beq.n	8001a40 <DownTaskF+0x128>
		{
			while (DownIO)
 8001a04:	e002      	b.n	8001a0c <DownTaskF+0xf4>
			{
				osDelay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f009 f877 	bl	800aafa <osDelay>
			while (DownIO)
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <DownTaskF+0x178>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f7      	bne.n	8001a06 <DownTaskF+0xee>
			}
			DownIO = 1;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <DownTaskF+0x178>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART8RXLen; ++i)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73bb      	strb	r3, [r7, #14]
 8001a20:	e008      	b.n	8001a34 <DownTaskF+0x11c>
			{
				DownCache[i] = UART8RXCache[i];
 8001a22:	7bba      	ldrb	r2, [r7, #14]
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	4919      	ldr	r1, [pc, #100]	; (8001a8c <DownTaskF+0x174>)
 8001a28:	5c89      	ldrb	r1, [r1, r2]
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <DownTaskF+0x17c>)
 8001a2c:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART8RXLen; ++i)
 8001a2e:	7bbb      	ldrb	r3, [r7, #14]
 8001a30:	3301      	adds	r3, #1
 8001a32:	73bb      	strb	r3, [r7, #14]
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	2b28      	cmp	r3, #40	; 0x28
 8001a38:	d9f3      	bls.n	8001a22 <DownTaskF+0x10a>
			}
			DownIO = 0;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <DownTaskF+0x178>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_ENABLE_IT(&huart8, UART_IT_IDLE);
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <DownTaskF+0x16c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <DownTaskF+0x16c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0210 	orr.w	r2, r2, #16
 8001a4e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart8, UART8RXCache, UART8RXLen);
 8001a50:	2229      	movs	r2, #41	; 0x29
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <DownTaskF+0x174>)
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <DownTaskF+0x16c>)
 8001a56:	f007 fa7d 	bl	8008f54 <HAL_UART_Receive_DMA>
		HAL_IWDG_Refresh(&hiwdg1);
 8001a5a:	480f      	ldr	r0, [pc, #60]	; (8001a98 <DownTaskF+0x180>)
 8001a5c:	f004 fb4e 	bl	80060fc <HAL_IWDG_Refresh>
		if (DownMoveDetect() == 2)
 8001a60:	e766      	b.n	8001930 <DownTaskF+0x18>
 8001a62:	bf00      	nop
 8001a64:	2000039a 	.word	0x2000039a
 8001a68:	200003cb 	.word	0x200003cb
 8001a6c:	200003b0 	.word	0x200003b0
 8001a70:	200003cc 	.word	0x200003cc
 8001a74:	200003c6 	.word	0x200003c6
 8001a78:	20000399 	.word	0x20000399
 8001a7c:	200046a0 	.word	0x200046a0
 8001a80:	200048fc 	.word	0x200048fc
 8001a84:	20004710 	.word	0x20004710
 8001a88:	20000392 	.word	0x20000392
 8001a8c:	20004674 	.word	0x20004674
 8001a90:	2000039b 	.word	0x2000039b
 8001a94:	20004230 	.word	0x20004230
 8001a98:	20004218 	.word	0x20004218

08001a9c <InitialTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_InitialTaskF */
void InitialTaskF(void const *argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN InitialTaskF */
	vTaskSuspend(SensorTaskHandle);
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <InitialTaskF+0x78>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fab5 	bl	800b018 <vTaskSuspend>
	vTaskSuspend(UpTaskHandle);
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <InitialTaskF+0x7c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f009 fab0 	bl	800b018 <vTaskSuspend>
	vTaskSuspend(DownTaskHandle);
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <InitialTaskF+0x80>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 faab 	bl	800b018 <vTaskSuspend>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4816      	ldr	r0, [pc, #88]	; (8001b20 <InitialTaskF+0x84>)
 8001ac8:	f004 fab0 	bl	800602c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4813      	ldr	r0, [pc, #76]	; (8001b20 <InitialTaskF+0x84>)
 8001ad2:	f004 faab 	bl	800602c <HAL_GPIO_WritePin>
	SendBackPoint(UART1TXCache_C, &DeepIO, &WT931IO, &GY39IO);
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <InitialTaskF+0x88>)
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <InitialTaskF+0x8c>)
 8001ada:	4914      	ldr	r1, [pc, #80]	; (8001b2c <InitialTaskF+0x90>)
 8001adc:	4814      	ldr	r0, [pc, #80]	; (8001b30 <InitialTaskF+0x94>)
 8001ade:	f7fe ff3f 	bl	8000960 <SendBackPoint>
	DownDetectPoint(UpCache);
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <InitialTaskF+0x98>)
 8001ae4:	f7fe fd78 	bl	80005d8 <DownDetectPoint>
	vTaskResume(UpTaskHandle);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <InitialTaskF+0x7c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f009 fb57 	bl	800b1a0 <vTaskResume>
	vTaskResume(SensorTaskHandle);
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <InitialTaskF+0x78>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f009 fb52 	bl	800b1a0 <vTaskResume>
	HAL_IWDG_Refresh(&hiwdg1);
 8001afc:	480e      	ldr	r0, [pc, #56]	; (8001b38 <InitialTaskF+0x9c>)
 8001afe:	f004 fafd 	bl	80060fc <HAL_IWDG_Refresh>
	vTaskSuspend(InitialTaskHandle);
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <InitialTaskF+0xa0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f009 fa86 	bl	800b018 <vTaskSuspend>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f008 fff4 	bl	800aafa <osDelay>
 8001b12:	e7fb      	b.n	8001b0c <InitialTaskF+0x70>
 8001b14:	20004124 	.word	0x20004124
 8001b18:	200046ec 	.word	0x200046ec
 8001b1c:	2000491c 	.word	0x2000491c
 8001b20:	58021000 	.word	0x58021000
 8001b24:	20000397 	.word	0x20000397
 8001b28:	20000398 	.word	0x20000398
 8001b2c:	20000396 	.word	0x20000396
 8001b30:	200046c0 	.word	0x200046c0
 8001b34:	200046a0 	.word	0x200046a0
 8001b38:	20004218 	.word	0x20004218
 8001b3c:	20004920 	.word	0x20004920

08001b40 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN SensorTaskF */
	WT931Point(UART8RXCache);
 8001b48:	484c      	ldr	r0, [pc, #304]	; (8001c7c <SensorTaskF+0x13c>)
 8001b4a:	f7ff f8c7 	bl	8000cdc <WT931Point>
	GY39InitStr(UART2TXCache);
 8001b4e:	484c      	ldr	r0, [pc, #304]	; (8001c80 <SensorTaskF+0x140>)
 8001b50:	f7ff f972 	bl	8000e38 <GY39InitStr>
	HAL_UART_Transmit_DMA(&huart2, UART2TXCache, UART2TXLen);
 8001b54:	2203      	movs	r2, #3
 8001b56:	494a      	ldr	r1, [pc, #296]	; (8001c80 <SensorTaskF+0x140>)
 8001b58:	484a      	ldr	r0, [pc, #296]	; (8001c84 <SensorTaskF+0x144>)
 8001b5a:	f007 f97b 	bl	8008e54 <HAL_UART_Transmit_DMA>
	GY39Point(UART3RXCache);
 8001b5e:	484a      	ldr	r0, [pc, #296]	; (8001c88 <SensorTaskF+0x148>)
 8001b60:	f7ff f980 	bl	8000e64 <GY39Point>
	DeepPoint(UART4TXCache);
 8001b64:	4849      	ldr	r0, [pc, #292]	; (8001c8c <SensorTaskF+0x14c>)
 8001b66:	f7ff f889 	bl	8000c7c <DeepPoint>
	/* Infinite loop */
	for (;;)
	{
		WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	4848      	ldr	r0, [pc, #288]	; (8001c90 <SensorTaskF+0x150>)
 8001b6e:	f004 fa45 	bl	8005ffc <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <SensorTaskF+0x154>)
 8001b78:	701a      	strb	r2, [r3, #0]
		if (WT931Finish)
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <SensorTaskF+0x158>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d028      	beq.n	8001bd4 <SensorTaskF+0x94>
		{
			while (WT931IO)
 8001b82:	e002      	b.n	8001b8a <SensorTaskF+0x4a>
			{
				osDelay(1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f008 ffb8 	bl	800aafa <osDelay>
			while (WT931IO)
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <SensorTaskF+0x15c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f7      	bne.n	8001b84 <SensorTaskF+0x44>
			}
			WT931IO = 1;
 8001b94:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <SensorTaskF+0x15c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
			if (WT931Len == 44)
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <SensorTaskF+0x160>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba0:	d105      	bne.n	8001bae <SensorTaskF+0x6e>
			{
				WT931Take(AccelerationCache, RotSpeedCache, EulerAngleCache,
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <SensorTaskF+0x164>)
 8001ba4:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <SensorTaskF+0x168>)
 8001ba6:	4941      	ldr	r1, [pc, #260]	; (8001cac <SensorTaskF+0x16c>)
 8001ba8:	4841      	ldr	r0, [pc, #260]	; (8001cb0 <SensorTaskF+0x170>)
 8001baa:	f7ff f8eb 	bl	8000d84 <WT931Take>
						MagnetisCache);
			}
			WT931Finish = 0;
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <SensorTaskF+0x158>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, UART3RXCache, UART3RXLen);
 8001bb4:	223c      	movs	r2, #60	; 0x3c
 8001bb6:	4934      	ldr	r1, [pc, #208]	; (8001c88 <SensorTaskF+0x148>)
 8001bb8:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <SensorTaskF+0x174>)
 8001bba:	f007 f9cb 	bl	8008f54 <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <SensorTaskF+0x174>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <SensorTaskF+0x174>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0210 	orr.w	r2, r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]
			WT931IO = 0;
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <SensorTaskF+0x15c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]

		}
		if (GY39Finish)
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <SensorTaskF+0x178>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <SensorTaskF+0xe4>
		{
			while (GY39IO)
 8001bdc:	e002      	b.n	8001be4 <SensorTaskF+0xa4>
			{
				osDelay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f008 ff8b 	bl	800aafa <osDelay>
			while (GY39IO)
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <SensorTaskF+0x17c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f7      	bne.n	8001bde <SensorTaskF+0x9e>
			}
			GY39IO = 1;
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <SensorTaskF+0x17c>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
			GY39Take(&TemCache, BaroCache, &HumCache);
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <SensorTaskF+0x180>)
 8001bf6:	4933      	ldr	r1, [pc, #204]	; (8001cc4 <SensorTaskF+0x184>)
 8001bf8:	4833      	ldr	r0, [pc, #204]	; (8001cc8 <SensorTaskF+0x188>)
 8001bfa:	f7ff f953 	bl	8000ea4 <GY39Take>
			GY39Finish = 0;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <SensorTaskF+0x178>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, UART2RXCache, UART2RXLen);
 8001c04:	220f      	movs	r2, #15
 8001c06:	4931      	ldr	r1, [pc, #196]	; (8001ccc <SensorTaskF+0x18c>)
 8001c08:	481e      	ldr	r0, [pc, #120]	; (8001c84 <SensorTaskF+0x144>)
 8001c0a:	f007 f9a3 	bl	8008f54 <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <SensorTaskF+0x144>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <SensorTaskF+0x144>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0210 	orr.w	r2, r2, #16
 8001c1c:	601a      	str	r2, [r3, #0]
			GY39IO = 0;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SensorTaskF+0x17c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

		}
		if (DeepFinish)
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <SensorTaskF+0x190>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <SensorTaskF+0x132>
		{
			while (DeepIO)
 8001c2c:	e002      	b.n	8001c34 <SensorTaskF+0xf4>
			{
				osDelay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f008 ff63 	bl	800aafa <osDelay>
			while (DeepIO)
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <SensorTaskF+0x194>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f7      	bne.n	8001c2e <SensorTaskF+0xee>
			}
			DeepIO = 1;
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <SensorTaskF+0x194>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
			DeepTake(&DepthCache, &WaterTempertureCache);
 8001c44:	4924      	ldr	r1, [pc, #144]	; (8001cd8 <SensorTaskF+0x198>)
 8001c46:	4825      	ldr	r0, [pc, #148]	; (8001cdc <SensorTaskF+0x19c>)
 8001c48:	f7ff f82e 	bl	8000ca8 <DeepTake>
			DeepFinish = 0;
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <SensorTaskF+0x190>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, UART4RXCache, UART4RXLen);
 8001c52:	2204      	movs	r2, #4
 8001c54:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <SensorTaskF+0x1a0>)
 8001c56:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <SensorTaskF+0x1a4>)
 8001c58:	f007 f97c 	bl	8008f54 <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <SensorTaskF+0x1a4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <SensorTaskF+0x1a4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0210 	orr.w	r2, r2, #16
 8001c6a:	601a      	str	r2, [r3, #0]
			DeepIO = 0;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <SensorTaskF+0x194>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001c72:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <SensorTaskF+0x1a8>)
 8001c74:	f004 fa42 	bl	80060fc <HAL_IWDG_Refresh>
		WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8001c78:	e777      	b.n	8001b6a <SensorTaskF+0x2a>
 8001c7a:	bf00      	nop
 8001c7c:	20004674 	.word	0x20004674
 8001c80:	2000422c 	.word	0x2000422c
 8001c84:	2000486c 	.word	0x2000486c
 8001c88:	200047a0 	.word	0x200047a0
 8001c8c:	200045e8 	.word	0x200045e8
 8001c90:	58021000 	.word	0x58021000
 8001c94:	2000039c 	.word	0x2000039c
 8001c98:	20000395 	.word	0x20000395
 8001c9c:	20000398 	.word	0x20000398
 8001ca0:	200003ca 	.word	0x200003ca
 8001ca4:	200003b8 	.word	0x200003b8
 8001ca8:	200003b0 	.word	0x200003b0
 8001cac:	200003a8 	.word	0x200003a8
 8001cb0:	200003a0 	.word	0x200003a0
 8001cb4:	200042d4 	.word	0x200042d4
 8001cb8:	20000394 	.word	0x20000394
 8001cbc:	20000397 	.word	0x20000397
 8001cc0:	200003c4 	.word	0x200003c4
 8001cc4:	200003c0 	.word	0x200003c0
 8001cc8:	200003be 	.word	0x200003be
 8001ccc:	20004364 	.word	0x20004364
 8001cd0:	20000393 	.word	0x20000393
 8001cd4:	20000396 	.word	0x20000396
 8001cd8:	200003c8 	.word	0x200003c8
 8001cdc:	200003c6 	.word	0x200003c6
 8001ce0:	20004228 	.word	0x20004228
 8001ce4:	200047dc 	.word	0x200047dc
 8001ce8:	20004218 	.word	0x20004218

08001cec <EmptyTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EmptyTaskF */
void EmptyTaskF(void const *argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EmptyTaskF */
	/* Infinite loop */
	for (;;)
	{
		HAL_IWDG_Refresh(&hiwdg1);
 8001cf4:	4801      	ldr	r0, [pc, #4]	; (8001cfc <EmptyTaskF+0x10>)
 8001cf6:	f004 fa01 	bl	80060fc <HAL_IWDG_Refresh>
 8001cfa:	e7fb      	b.n	8001cf4 <EmptyTaskF+0x8>
 8001cfc:	20004218 	.word	0x20004218

08001d00 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001d12:	f001 f871 	bl	8002df8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40001000 	.word	0x40001000

08001d24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d2c:	e7fe      	b.n	8001d2c <Error_Handler+0x8>
	...

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_MspInit+0x38>)
 8001d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_MspInit+0x38>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_MspInit+0x38>)
 8001d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	210f      	movs	r1, #15
 8001d58:	f06f 0001 	mvn.w	r0, #1
 8001d5c:	f001 f930 	bl	8002fc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	58024400 	.word	0x58024400

08001d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b092      	sub	sp, #72	; 0x48
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a95      	ldr	r2, [pc, #596]	; (8001fe0 <HAL_UART_MspInit+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	f040 8091 	bne.w	8001eb2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d90:	4b94      	ldr	r3, [pc, #592]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d96:	4a93      	ldr	r2, [pc, #588]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001da0:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	4a8b      	ldr	r2, [pc, #556]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001de4:	4619      	mov	r1, r3
 8001de6:	4880      	ldr	r0, [pc, #512]	; (8001fe8 <HAL_UART_MspInit+0x27c>)
 8001de8:	f003 ff58 	bl	8005c9c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream4;
 8001dec:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001dee:	4a80      	ldr	r2, [pc, #512]	; (8001ff0 <HAL_UART_MspInit+0x284>)
 8001df0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001df2:	4b7e      	ldr	r3, [pc, #504]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001df4:	223f      	movs	r2, #63	; 0x3f
 8001df6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df8:	4b7c      	ldr	r3, [pc, #496]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfe:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e04:	4b79      	ldr	r3, [pc, #484]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0c:	4b77      	ldr	r3, [pc, #476]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e12:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e18:	4b74      	ldr	r3, [pc, #464]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e24:	4b71      	ldr	r3, [pc, #452]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e2a:	4870      	ldr	r0, [pc, #448]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e2c:	f001 f8f0 	bl	8003010 <HAL_DMA_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e36:	f7ff ff75 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a6b      	ldr	r2, [pc, #428]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e3e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e40:	4a6a      	ldr	r2, [pc, #424]	; (8001fec <HAL_UART_MspInit+0x280>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream5;
 8001e46:	4b6b      	ldr	r3, [pc, #428]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e48:	4a6b      	ldr	r2, [pc, #428]	; (8001ff8 <HAL_UART_MspInit+0x28c>)
 8001e4a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001e4c:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e52:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e54:	2240      	movs	r2, #64	; 0x40
 8001e56:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e64:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e66:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e6c:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001e72:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001e84:	485b      	ldr	r0, [pc, #364]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e86:	f001 f8c3 	bl	8003010 <HAL_DMA_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001e90:	f7ff ff48 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a57      	ldr	r2, [pc, #348]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e98:	679a      	str	r2, [r3, #120]	; 0x78
 8001e9a:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_UART_MspInit+0x288>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	2034      	movs	r0, #52	; 0x34
 8001ea6:	f001 f88b 	bl	8002fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001eaa:	2034      	movs	r0, #52	; 0x34
 8001eac:	f001 f8a2 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb0:	e263      	b.n	800237a <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==UART8)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_UART_MspInit+0x290>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	f040 80ab 	bne.w	8002014 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec4:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001ec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ece:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001edc:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee2:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eec:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_UART_MspInit+0x278>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efa:	2303      	movs	r3, #3
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f12:	4619      	mov	r1, r3
 8001f14:	483a      	ldr	r0, [pc, #232]	; (8002000 <HAL_UART_MspInit+0x294>)
 8001f16:	f003 fec1 	bl	8005c9c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_UART_MspInit+0x29c>)
 8001f1e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f22:	2251      	movs	r2, #81	; 0x51
 8001f24:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f38:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001f58:	482a      	ldr	r0, [pc, #168]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f5a:	f001 f859 	bl	8003010 <HAL_DMA_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001f64:	f7ff fede 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f6c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f6e:	4a25      	ldr	r2, [pc, #148]	; (8002004 <HAL_UART_MspInit+0x298>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream7;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f76:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_UART_MspInit+0x2a4>)
 8001f78:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f7c:	2252      	movs	r2, #82	; 0x52
 8001f7e:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001fb2:	4816      	ldr	r0, [pc, #88]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001fb4:	f001 f82c 	bl	8003010 <HAL_DMA_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8001fbe:	f7ff feb1 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001fc6:	679a      	str	r2, [r3, #120]	; 0x78
 8001fc8:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_UART_MspInit+0x2a0>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	2053      	movs	r0, #83	; 0x53
 8001fd4:	f000 fff4 	bl	8002fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001fd8:	2053      	movs	r0, #83	; 0x53
 8001fda:	f001 f80b 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
}
 8001fde:	e1cc      	b.n	800237a <HAL_UART_MspInit+0x60e>
 8001fe0:	40004c00 	.word	0x40004c00
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	58020000 	.word	0x58020000
 8001fec:	20004128 	.word	0x20004128
 8001ff0:	40020070 	.word	0x40020070
 8001ff4:	20004950 	.word	0x20004950
 8001ff8:	40020088 	.word	0x40020088
 8001ffc:	40007c00 	.word	0x40007c00
 8002000:	58021000 	.word	0x58021000
 8002004:	200044e0 	.word	0x200044e0
 8002008:	400200a0 	.word	0x400200a0
 800200c:	200045fc 	.word	0x200045fc
 8002010:	400200b8 	.word	0x400200b8
  else if(huart->Instance==USART1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a96      	ldr	r2, [pc, #600]	; (8002274 <HAL_UART_MspInit+0x508>)
 800201a:	4293      	cmp	r3, r2
 800201c:	f040 8092 	bne.w	8002144 <HAL_UART_MspInit+0x3d8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002020:	4b95      	ldr	r3, [pc, #596]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002026:	4a94      	ldr	r2, [pc, #592]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002030:	4b91      	ldr	r3, [pc, #580]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b8e      	ldr	r3, [pc, #568]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	4a8c      	ldr	r2, [pc, #560]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204e:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800205c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800206e:	2304      	movs	r3, #4
 8002070:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002076:	4619      	mov	r1, r3
 8002078:	4880      	ldr	r0, [pc, #512]	; (800227c <HAL_UART_MspInit+0x510>)
 800207a:	f003 fe0f 	bl	8005c9c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800207e:	4b80      	ldr	r3, [pc, #512]	; (8002280 <HAL_UART_MspInit+0x514>)
 8002080:	4a80      	ldr	r2, [pc, #512]	; (8002284 <HAL_UART_MspInit+0x518>)
 8002082:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002084:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <HAL_UART_MspInit+0x514>)
 8002086:	2229      	movs	r2, #41	; 0x29
 8002088:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208a:	4b7d      	ldr	r3, [pc, #500]	; (8002280 <HAL_UART_MspInit+0x514>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002090:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_UART_MspInit+0x514>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002096:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <HAL_UART_MspInit+0x514>)
 8002098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a4:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020aa:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b0:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b6:	4b72      	ldr	r3, [pc, #456]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020bc:	4870      	ldr	r0, [pc, #448]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020be:	f000 ffa7 	bl	8003010 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_MspInit+0x360>
      Error_Handler();
 80020c8:	f7ff fe2c 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a6c      	ldr	r2, [pc, #432]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020d0:	67da      	str	r2, [r3, #124]	; 0x7c
 80020d2:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <HAL_UART_MspInit+0x514>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80020d8:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <HAL_UART_MspInit+0x51c>)
 80020da:	4a6c      	ldr	r2, [pc, #432]	; (800228c <HAL_UART_MspInit+0x520>)
 80020dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020de:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_UART_MspInit+0x51c>)
 80020e0:	222a      	movs	r2, #42	; 0x2a
 80020e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e4:	4b68      	ldr	r3, [pc, #416]	; (8002288 <HAL_UART_MspInit+0x51c>)
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ea:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_UART_MspInit+0x51c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f0:	4b65      	ldr	r3, [pc, #404]	; (8002288 <HAL_UART_MspInit+0x51c>)
 80020f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f8:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_UART_MspInit+0x51c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fe:	4b62      	ldr	r3, [pc, #392]	; (8002288 <HAL_UART_MspInit+0x51c>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002104:	4b60      	ldr	r3, [pc, #384]	; (8002288 <HAL_UART_MspInit+0x51c>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800210a:	4b5f      	ldr	r3, [pc, #380]	; (8002288 <HAL_UART_MspInit+0x51c>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002110:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <HAL_UART_MspInit+0x51c>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002116:	485c      	ldr	r0, [pc, #368]	; (8002288 <HAL_UART_MspInit+0x51c>)
 8002118:	f000 ff7a 	bl	8003010 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8002122:	f7ff fdff 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_UART_MspInit+0x51c>)
 800212a:	679a      	str	r2, [r3, #120]	; 0x78
 800212c:	4a56      	ldr	r2, [pc, #344]	; (8002288 <HAL_UART_MspInit+0x51c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2105      	movs	r1, #5
 8002136:	2025      	movs	r0, #37	; 0x25
 8002138:	f000 ff42 	bl	8002fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800213c:	2025      	movs	r0, #37	; 0x25
 800213e:	f000 ff59 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
}
 8002142:	e11a      	b.n	800237a <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==USART2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_UART_MspInit+0x524>)
 800214a:	4293      	cmp	r3, r2
 800214c:	f040 80ac 	bne.w	80022a8 <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002150:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002156:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002160:	4b45      	ldr	r3, [pc, #276]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	4b42      	ldr	r3, [pc, #264]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002174:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217e:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_UART_MspInit+0x50c>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800218c:	230c      	movs	r3, #12
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219c:	2307      	movs	r3, #7
 800219e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a4:	4619      	mov	r1, r3
 80021a6:	483b      	ldr	r0, [pc, #236]	; (8002294 <HAL_UART_MspInit+0x528>)
 80021a8:	f003 fd78 	bl	8005c9c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021ae:	4a3b      	ldr	r2, [pc, #236]	; (800229c <HAL_UART_MspInit+0x530>)
 80021b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021b4:	222b      	movs	r2, #43	; 0x2b
 80021b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c4:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021de:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021ea:	482b      	ldr	r0, [pc, #172]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021ec:	f000 ff10 	bl	8003010 <HAL_DMA_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_MspInit+0x48e>
      Error_Handler();
 80021f6:	f7ff fd95 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_UART_MspInit+0x52c>)
 80021fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8002200:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_UART_MspInit+0x52c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream0;
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002208:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_UART_MspInit+0x538>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_UART_MspInit+0x534>)
 800220e:	222c      	movs	r2, #44	; 0x2c
 8002210:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_UART_MspInit+0x534>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002224:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002228:	2200      	movs	r2, #0
 800222a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_UART_MspInit+0x534>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002234:	2200      	movs	r2, #0
 8002236:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_UART_MspInit+0x534>)
 800223a:	2200      	movs	r2, #0
 800223c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002244:	4816      	ldr	r0, [pc, #88]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002246:	f000 fee3 	bl	8003010 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x4e8>
      Error_Handler();
 8002250:	f7ff fd68 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <HAL_UART_MspInit+0x534>)
 8002258:	679a      	str	r2, [r3, #120]	; 0x78
 800225a:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_UART_MspInit+0x534>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2105      	movs	r1, #5
 8002264:	2026      	movs	r0, #38	; 0x26
 8002266:	f000 feab 	bl	8002fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800226a:	2026      	movs	r0, #38	; 0x26
 800226c:	f000 fec2 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
}
 8002270:	e083      	b.n	800237a <HAL_UART_MspInit+0x60e>
 8002272:	bf00      	nop
 8002274:	40011000 	.word	0x40011000
 8002278:	58024400 	.word	0x58024400
 800227c:	58020400 	.word	0x58020400
 8002280:	200043f0 	.word	0x200043f0
 8002284:	40020010 	.word	0x40020010
 8002288:	20004378 	.word	0x20004378
 800228c:	40020028 	.word	0x40020028
 8002290:	40004400 	.word	0x40004400
 8002294:	58020000 	.word	0x58020000
 8002298:	200041a0 	.word	0x200041a0
 800229c:	40020040 	.word	0x40020040
 80022a0:	20004468 	.word	0x20004468
 80022a4:	40020410 	.word	0x40020410
  else if(huart->Instance==USART3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a35      	ldr	r2, [pc, #212]	; (8002384 <HAL_UART_MspInit+0x618>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d163      	bne.n	800237a <HAL_UART_MspInit+0x60e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b2:	4b35      	ldr	r3, [pc, #212]	; (8002388 <HAL_UART_MspInit+0x61c>)
 80022b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <HAL_UART_MspInit+0x61c>)
 80022ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_UART_MspInit+0x61c>)
 80022c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_UART_MspInit+0x61c>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d6:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <HAL_UART_MspInit+0x61c>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_UART_MspInit+0x61c>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002300:	2307      	movs	r3, #7
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002308:	4619      	mov	r1, r3
 800230a:	4820      	ldr	r0, [pc, #128]	; (800238c <HAL_UART_MspInit+0x620>)
 800230c:	f003 fcc6 	bl	8005c9c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002312:	4a20      	ldr	r2, [pc, #128]	; (8002394 <HAL_UART_MspInit+0x628>)
 8002314:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002318:	222d      	movs	r2, #45	; 0x2d
 800231a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_UART_MspInit+0x624>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002324:	2200      	movs	r2, #0
 8002326:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_UART_MspInit+0x624>)
 800232a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_UART_MspInit+0x624>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0x624>)
 800234a:	2200      	movs	r2, #0
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800234e:	4810      	ldr	r0, [pc, #64]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002350:	f000 fe5e 	bl	8003010 <HAL_DMA_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 800235a:	f7ff fce3 	bl	8001d24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002362:	67da      	str	r2, [r3, #124]	; 0x7c
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_UART_MspInit+0x624>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2105      	movs	r1, #5
 800236e:	2027      	movs	r0, #39	; 0x27
 8002370:	f000 fe26 	bl	8002fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002374:	2027      	movs	r0, #39	; 0x27
 8002376:	f000 fe3d 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3748      	adds	r7, #72	; 0x48
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40004800 	.word	0x40004800
 8002388:	58024400 	.word	0x58024400
 800238c:	58020400 	.word	0x58020400
 8002390:	2000425c 	.word	0x2000425c
 8002394:	40020058 	.word	0x40020058

08002398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b090      	sub	sp, #64	; 0x40
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	d827      	bhi.n	80023f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80023a6:	2200      	movs	r2, #0
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	2036      	movs	r0, #54	; 0x36
 80023ac:	f000 fe08 	bl	8002fc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b0:	2036      	movs	r0, #54	; 0x36
 80023b2:	f000 fe1f 	bl	8002ff4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023b6:	4a29      	ldr	r2, [pc, #164]	; (800245c <HAL_InitTick+0xc4>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_InitTick+0xc8>)
 80023be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c2:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_InitTick+0xc8>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_InitTick+0xc8>)
 80023ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023da:	f107 0210 	add.w	r2, r7, #16
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 fe6f 	bl	80070c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_InitTick+0x6a>
 80023f4:	e001      	b.n	80023fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e02b      	b.n	8002452 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023fa:	f004 fe39 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 80023fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002400:	e004      	b.n	800240c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002402:	f004 fe35 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 8002406:	4603      	mov	r3, r0
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240e:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_InitTick+0xcc>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	3b01      	subs	r3, #1
 8002418:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_InitTick+0xd0>)
 800241c:	4a13      	ldr	r2, [pc, #76]	; (800246c <HAL_InitTick+0xd4>)
 800241e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_InitTick+0xd0>)
 8002422:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002426:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_InitTick+0xd0>)
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_InitTick+0xd0>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_InitTick+0xd0>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800243a:	480b      	ldr	r0, [pc, #44]	; (8002468 <HAL_InitTick+0xd0>)
 800243c:	f006 f9e8 	bl	8008810 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <HAL_InitTick+0xd0>)
 8002448:	f006 fa44 	bl	80088d4 <HAL_TIM_Base_Start_IT>
 800244c:	4603      	mov	r3, r0
 800244e:	e000      	b.n	8002452 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	3740      	adds	r7, #64	; 0x40
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000008 	.word	0x20000008
 8002460:	58024400 	.word	0x58024400
 8002464:	431bde83 	.word	0x431bde83
 8002468:	200049c8 	.word	0x200049c8
 800246c:	40001000 	.word	0x40001000

08002470 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <DMA1_Stream0_IRQHandler+0x10>)
 80024a2:	f002 f8dd 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200043f0 	.word	0x200043f0

080024b0 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Stream1_IRQHandler+0x10>)
 80024b6:	f002 f8d3 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20004378 	.word	0x20004378

080024c4 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA1_Stream2_IRQHandler+0x10>)
 80024ca:	f002 f8c9 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200041a0 	.word	0x200041a0

080024d8 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA1_Stream3_IRQHandler+0x10>)
 80024de:	f002 f8bf 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000425c 	.word	0x2000425c

080024ec <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <DMA1_Stream4_IRQHandler+0x10>)
 80024f2:	f002 f8b5 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20004128 	.word	0x20004128

08002500 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <DMA1_Stream5_IRQHandler+0x10>)
 8002506:	f002 f8ab 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20004950 	.word	0x20004950

08002514 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <DMA1_Stream6_IRQHandler+0x10>)
 800251a:	f002 f8a1 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200044e0 	.word	0x200044e0

08002528 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <USART1_IRQHandler+0x108>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b10      	cmp	r3, #16
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d068      	beq.n	8002620 <USART1_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <USART1_IRQHandler+0x108>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2210      	movs	r2, #16
 8002554:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002556:	4836      	ldr	r0, [pc, #216]	; (8002630 <USART1_IRQHandler+0x108>)
 8002558:	f006 fd42 	bl	8008fe0 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <USART1_IRQHandler+0x10c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a35      	ldr	r2, [pc, #212]	; (8002638 <USART1_IRQHandler+0x110>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d04a      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <USART1_IRQHandler+0x10c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a34      	ldr	r2, [pc, #208]	; (800263c <USART1_IRQHandler+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d045      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <USART1_IRQHandler+0x10c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a32      	ldr	r2, [pc, #200]	; (8002640 <USART1_IRQHandler+0x118>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d040      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <USART1_IRQHandler+0x10c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a31      	ldr	r2, [pc, #196]	; (8002644 <USART1_IRQHandler+0x11c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d03b      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <USART1_IRQHandler+0x10c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <USART1_IRQHandler+0x120>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d036      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <USART1_IRQHandler+0x10c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2e      	ldr	r2, [pc, #184]	; (800264c <USART1_IRQHandler+0x124>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d031      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <USART1_IRQHandler+0x10c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <USART1_IRQHandler+0x128>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02c      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <USART1_IRQHandler+0x12c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d027      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a29      	ldr	r2, [pc, #164]	; (8002658 <USART1_IRQHandler+0x130>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d022      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a28      	ldr	r2, [pc, #160]	; (800265c <USART1_IRQHandler+0x134>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d01d      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <USART1_IRQHandler+0x138>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d018      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a25      	ldr	r2, [pc, #148]	; (8002664 <USART1_IRQHandler+0x13c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a23      	ldr	r2, [pc, #140]	; (8002668 <USART1_IRQHandler+0x140>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a22      	ldr	r2, [pc, #136]	; (800266c <USART1_IRQHandler+0x144>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d009      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <USART1_IRQHandler+0x148>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <USART1_IRQHandler+0xd4>
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <USART1_IRQHandler+0x14c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d103      	bne.n	8002604 <USART1_IRQHandler+0xdc>
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <USART1_IRQHandler+0x10c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	e002      	b.n	800260a <USART1_IRQHandler+0xe2>
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <USART1_IRQHandler+0x10c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <USART1_IRQHandler+0x108>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <USART1_IRQHandler+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0210 	bic.w	r2, r2, #16
 8002618:	601a      	str	r2, [r3, #0]
		UpSideFinish = 1;
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <USART1_IRQHandler+0x150>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <USART1_IRQHandler+0x108>)
 8002622:	f006 fd4d 	bl	80090c0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20004558 	.word	0x20004558
 8002634:	200043f0 	.word	0x200043f0
 8002638:	40020010 	.word	0x40020010
 800263c:	40020028 	.word	0x40020028
 8002640:	40020040 	.word	0x40020040
 8002644:	40020058 	.word	0x40020058
 8002648:	40020070 	.word	0x40020070
 800264c:	40020088 	.word	0x40020088
 8002650:	400200a0 	.word	0x400200a0
 8002654:	400200b8 	.word	0x400200b8
 8002658:	40020410 	.word	0x40020410
 800265c:	40020428 	.word	0x40020428
 8002660:	40020440 	.word	0x40020440
 8002664:	40020458 	.word	0x40020458
 8002668:	40020470 	.word	0x40020470
 800266c:	40020488 	.word	0x40020488
 8002670:	400204a0 	.word	0x400204a0
 8002674:	400204b8 	.word	0x400204b8
 8002678:	20000391 	.word	0x20000391

0800267c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <USART2_IRQHandler+0x108>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d068      	beq.n	8002774 <USART2_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <USART2_IRQHandler+0x108>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2210      	movs	r2, #16
 80026a8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 80026aa:	4836      	ldr	r0, [pc, #216]	; (8002784 <USART2_IRQHandler+0x108>)
 80026ac:	f006 fc98 	bl	8008fe0 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a35      	ldr	r2, [pc, #212]	; (800278c <USART2_IRQHandler+0x110>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d04a      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <USART2_IRQHandler+0x114>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d045      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a32      	ldr	r2, [pc, #200]	; (8002794 <USART2_IRQHandler+0x118>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d040      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026ce:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a31      	ldr	r2, [pc, #196]	; (8002798 <USART2_IRQHandler+0x11c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2f      	ldr	r2, [pc, #188]	; (800279c <USART2_IRQHandler+0x120>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d036      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2e      	ldr	r2, [pc, #184]	; (80027a0 <USART2_IRQHandler+0x124>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d031      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026ec:	4b26      	ldr	r3, [pc, #152]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <USART2_IRQHandler+0x128>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02c      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <USART2_IRQHandler+0x10c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <USART2_IRQHandler+0x12c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d027      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <USART2_IRQHandler+0x10c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <USART2_IRQHandler+0x130>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 800270a:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <USART2_IRQHandler+0x10c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <USART2_IRQHandler+0x134>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <USART2_IRQHandler+0x10c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <USART2_IRQHandler+0x138>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <USART2_IRQHandler+0x10c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <USART2_IRQHandler+0x13c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <USART2_IRQHandler+0x10c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <USART2_IRQHandler+0x140>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <USART2_IRQHandler+0x10c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <USART2_IRQHandler+0x144>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <USART2_IRQHandler+0x10c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <USART2_IRQHandler+0x148>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <USART2_IRQHandler+0xd4>
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <USART2_IRQHandler+0x10c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <USART2_IRQHandler+0x14c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d103      	bne.n	8002758 <USART2_IRQHandler+0xdc>
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <USART2_IRQHandler+0x10c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	e002      	b.n	800275e <USART2_IRQHandler+0xe2>
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <USART2_IRQHandler+0x10c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <USART2_IRQHandler+0x108>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <USART2_IRQHandler+0x108>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0210 	bic.w	r2, r2, #16
 800276c:	601a      	str	r2, [r3, #0]
		GY39Finish = 1;
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <USART2_IRQHandler+0x150>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <USART2_IRQHandler+0x108>)
 8002776:	f006 fca3 	bl	80090c0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000486c 	.word	0x2000486c
 8002788:	200041a0 	.word	0x200041a0
 800278c:	40020010 	.word	0x40020010
 8002790:	40020028 	.word	0x40020028
 8002794:	40020040 	.word	0x40020040
 8002798:	40020058 	.word	0x40020058
 800279c:	40020070 	.word	0x40020070
 80027a0:	40020088 	.word	0x40020088
 80027a4:	400200a0 	.word	0x400200a0
 80027a8:	400200b8 	.word	0x400200b8
 80027ac:	40020410 	.word	0x40020410
 80027b0:	40020428 	.word	0x40020428
 80027b4:	40020440 	.word	0x40020440
 80027b8:	40020458 	.word	0x40020458
 80027bc:	40020470 	.word	0x40020470
 80027c0:	40020488 	.word	0x40020488
 80027c4:	400204a0 	.word	0x400204a0
 80027c8:	400204b8 	.word	0x400204b8
 80027cc:	20000394 	.word	0x20000394

080027d0 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <USART3_IRQHandler+0x110>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d06c      	beq.n	80028d0 <USART3_IRQHandler+0x100>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <USART3_IRQHandler+0x110>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2210      	movs	r2, #16
 80027fc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 80027fe:	4838      	ldr	r0, [pc, #224]	; (80028e0 <USART3_IRQHandler+0x110>)
 8002800:	f006 fbee 	bl	8008fe0 <HAL_UART_DMAStop>
		WT931Len = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8002804:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a37      	ldr	r2, [pc, #220]	; (80028e8 <USART3_IRQHandler+0x118>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04a      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a36      	ldr	r2, [pc, #216]	; (80028ec <USART3_IRQHandler+0x11c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d045      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <USART3_IRQHandler+0x114>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <USART3_IRQHandler+0x120>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002822:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <USART3_IRQHandler+0x124>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03b      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <USART3_IRQHandler+0x114>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <USART3_IRQHandler+0x128>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d036      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a30      	ldr	r2, [pc, #192]	; (80028fc <USART3_IRQHandler+0x12c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <USART3_IRQHandler+0x130>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02c      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <USART3_IRQHandler+0x114>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <USART3_IRQHandler+0x134>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d027      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <USART3_IRQHandler+0x138>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <USART3_IRQHandler+0x13c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <USART3_IRQHandler+0x114>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <USART3_IRQHandler+0x140>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a27      	ldr	r2, [pc, #156]	; (8002914 <USART3_IRQHandler+0x144>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <USART3_IRQHandler+0x114>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a25      	ldr	r2, [pc, #148]	; (8002918 <USART3_IRQHandler+0x148>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a24      	ldr	r2, [pc, #144]	; (800291c <USART3_IRQHandler+0x14c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <USART3_IRQHandler+0x114>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <USART3_IRQHandler+0x150>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <USART3_IRQHandler+0xd4>
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <USART3_IRQHandler+0x114>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <USART3_IRQHandler+0x154>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d104      	bne.n	80028ae <USART3_IRQHandler+0xde>
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <USART3_IRQHandler+0x114>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e003      	b.n	80028b6 <USART3_IRQHandler+0xe6>
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <USART3_IRQHandler+0x114>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <USART3_IRQHandler+0x158>)
 80028b8:	7013      	strb	r3, [r2, #0]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <USART3_IRQHandler+0x110>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <USART3_IRQHandler+0x110>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0210 	bic.w	r2, r2, #16
 80028c8:	601a      	str	r2, [r3, #0]
		WT931Finish = 1;
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <USART3_IRQHandler+0x15c>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80028d0:	4803      	ldr	r0, [pc, #12]	; (80028e0 <USART3_IRQHandler+0x110>)
 80028d2:	f006 fbf5 	bl	80090c0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200042d4 	.word	0x200042d4
 80028e4:	2000425c 	.word	0x2000425c
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	200003ca 	.word	0x200003ca
 800292c:	20000395 	.word	0x20000395

08002930 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <DMA1_Stream7_IRQHandler+0x10>)
 8002936:	f001 fe93 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200045fc 	.word	0x200045fc

08002944 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <UART4_IRQHandler+0x108>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d068      	beq.n	8002a3c <UART4_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <UART4_IRQHandler+0x108>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2210      	movs	r2, #16
 8002970:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8002972:	4836      	ldr	r0, [pc, #216]	; (8002a4c <UART4_IRQHandler+0x108>)
 8002974:	f006 fb34 	bl	8008fe0 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <UART4_IRQHandler+0x10c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <UART4_IRQHandler+0x110>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04a      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <UART4_IRQHandler+0x10c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <UART4_IRQHandler+0x114>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d045      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <UART4_IRQHandler+0x10c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a32      	ldr	r2, [pc, #200]	; (8002a5c <UART4_IRQHandler+0x118>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d040      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <UART4_IRQHandler+0x10c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <UART4_IRQHandler+0x11c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d03b      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <UART4_IRQHandler+0x120>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d036      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <UART4_IRQHandler+0x124>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d031      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <UART4_IRQHandler+0x128>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02c      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2b      	ldr	r2, [pc, #172]	; (8002a70 <UART4_IRQHandler+0x12c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d027      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <UART4_IRQHandler+0x130>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d022      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <UART4_IRQHandler+0x134>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d01d      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <UART4_IRQHandler+0x138>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d018      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <UART4_IRQHandler+0x13c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a23      	ldr	r2, [pc, #140]	; (8002a84 <UART4_IRQHandler+0x140>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <UART4_IRQHandler+0x10c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <UART4_IRQHandler+0x144>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <UART4_IRQHandler+0x10c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <UART4_IRQHandler+0x148>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <UART4_IRQHandler+0xd4>
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <UART4_IRQHandler+0x10c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <UART4_IRQHandler+0x14c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <UART4_IRQHandler+0xdc>
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <UART4_IRQHandler+0x10c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	e002      	b.n	8002a26 <UART4_IRQHandler+0xe2>
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <UART4_IRQHandler+0x10c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <UART4_IRQHandler+0x108>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <UART4_IRQHandler+0x108>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0210 	bic.w	r2, r2, #16
 8002a34:	601a      	str	r2, [r3, #0]
		DeepFinish = 1;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <UART4_IRQHandler+0x150>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8002a3c:	4803      	ldr	r0, [pc, #12]	; (8002a4c <UART4_IRQHandler+0x108>)
 8002a3e:	f006 fb3f 	bl	80090c0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200047dc 	.word	0x200047dc
 8002a50:	20004128 	.word	0x20004128
 8002a54:	40020010 	.word	0x40020010
 8002a58:	40020028 	.word	0x40020028
 8002a5c:	40020040 	.word	0x40020040
 8002a60:	40020058 	.word	0x40020058
 8002a64:	40020070 	.word	0x40020070
 8002a68:	40020088 	.word	0x40020088
 8002a6c:	400200a0 	.word	0x400200a0
 8002a70:	400200b8 	.word	0x400200b8
 8002a74:	40020410 	.word	0x40020410
 8002a78:	40020428 	.word	0x40020428
 8002a7c:	40020440 	.word	0x40020440
 8002a80:	40020458 	.word	0x40020458
 8002a84:	40020470 	.word	0x40020470
 8002a88:	40020488 	.word	0x40020488
 8002a8c:	400204a0 	.word	0x400204a0
 8002a90:	400204b8 	.word	0x400204b8
 8002a94:	20000393 	.word	0x20000393

08002a98 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <TIM6_DAC_IRQHandler+0x10>)
 8002a9e:	f005 ff89 	bl	80089b4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200049c8 	.word	0x200049c8

08002aac <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <DMA2_Stream0_IRQHandler+0x10>)
 8002ab2:	f001 fdd5 	bl	8004660 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20004468 	.word	0x20004468

08002ac0 <UART8_IRQHandler>:

/**
 * @brief This function handles UART8 global interrupt.
 */
void UART8_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <UART8_IRQHandler+0x108>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d068      	beq.n	8002bb8 <UART8_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <UART8_IRQHandler+0x108>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2210      	movs	r2, #16
 8002aec:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8002aee:	4836      	ldr	r0, [pc, #216]	; (8002bc8 <UART8_IRQHandler+0x108>)
 8002af0:	f006 fa76 	bl	8008fe0 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a35      	ldr	r2, [pc, #212]	; (8002bd0 <UART8_IRQHandler+0x110>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04a      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <UART8_IRQHandler+0x114>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d045      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <UART8_IRQHandler+0x118>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d040      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b12:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <UART8_IRQHandler+0x11c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d03b      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <UART8_IRQHandler+0x120>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d036      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <UART8_IRQHandler+0x124>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d031      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <UART8_IRQHandler+0x128>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02c      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <UART8_IRQHandler+0x12c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d027      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <UART8_IRQHandler+0x130>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d022      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <UART8_IRQHandler+0x134>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d01d      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b58:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <UART8_IRQHandler+0x138>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <UART8_IRQHandler+0x13c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <UART8_IRQHandler+0x140>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00e      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <UART8_IRQHandler+0x144>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <UART8_IRQHandler+0x148>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <UART8_IRQHandler+0xd4>
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <UART8_IRQHandler+0x14c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d103      	bne.n	8002b9c <UART8_IRQHandler+0xdc>
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	e002      	b.n	8002ba2 <UART8_IRQHandler+0xe2>
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <UART8_IRQHandler+0x10c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <UART8_IRQHandler+0x108>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <UART8_IRQHandler+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0210 	bic.w	r2, r2, #16
 8002bb0:	601a      	str	r2, [r3, #0]
		DownSideFinish = 1;
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <UART8_IRQHandler+0x150>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END UART8_IRQn 0 */
	HAL_UART_IRQHandler(&huart8);
 8002bb8:	4803      	ldr	r0, [pc, #12]	; (8002bc8 <UART8_IRQHandler+0x108>)
 8002bba:	f006 fa81 	bl	80090c0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART8_IRQn 1 */

	/* USER CODE END UART8_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20004710 	.word	0x20004710
 8002bcc:	200044e0 	.word	0x200044e0
 8002bd0:	40020010 	.word	0x40020010
 8002bd4:	40020028 	.word	0x40020028
 8002bd8:	40020040 	.word	0x40020040
 8002bdc:	40020058 	.word	0x40020058
 8002be0:	40020070 	.word	0x40020070
 8002be4:	40020088 	.word	0x40020088
 8002be8:	400200a0 	.word	0x400200a0
 8002bec:	400200b8 	.word	0x400200b8
 8002bf0:	40020410 	.word	0x40020410
 8002bf4:	40020428 	.word	0x40020428
 8002bf8:	40020440 	.word	0x40020440
 8002bfc:	40020458 	.word	0x40020458
 8002c00:	40020470 	.word	0x40020470
 8002c04:	40020488 	.word	0x40020488
 8002c08:	400204a0 	.word	0x400204a0
 8002c0c:	400204b8 	.word	0x400204b8
 8002c10:	20000392 	.word	0x20000392

08002c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <SystemInit+0xec>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <SystemInit+0xec>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <SystemInit+0xf0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d807      	bhi.n	8002c44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c34:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <SystemInit+0xf0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 030f 	bic.w	r3, r3, #15
 8002c3c:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <SystemInit+0xf0>)
 8002c3e:	f043 0307 	orr.w	r3, r3, #7
 8002c42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <SystemInit+0xf4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2f      	ldr	r2, [pc, #188]	; (8002d08 <SystemInit+0xf4>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <SystemInit+0xf4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <SystemInit+0xf4>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	492b      	ldr	r1, [pc, #172]	; (8002d08 <SystemInit+0xf4>)
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <SystemInit+0xf8>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <SystemInit+0xf0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <SystemInit+0xf0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 030f 	bic.w	r3, r3, #15
 8002c76:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <SystemInit+0xf0>)
 8002c78:	f043 0307 	orr.w	r3, r3, #7
 8002c7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c7e:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <SystemInit+0xf4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <SystemInit+0xf4>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <SystemInit+0xf4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <SystemInit+0xf4>)
 8002c92:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <SystemInit+0xfc>)
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <SystemInit+0xf4>)
 8002c98:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <SystemInit+0x100>)
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <SystemInit+0xf4>)
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <SystemInit+0x104>)
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <SystemInit+0xf4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <SystemInit+0xf4>)
 8002caa:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <SystemInit+0x104>)
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <SystemInit+0xf4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <SystemInit+0xf4>)
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <SystemInit+0x104>)
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <SystemInit+0xf4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <SystemInit+0xf4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <SystemInit+0xf4>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <SystemInit+0xf4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <SystemInit+0x108>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <SystemInit+0x10c>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cde:	d202      	bcs.n	8002ce6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <SystemInit+0x110>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <SystemInit+0x114>)
 8002ce8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002cec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SystemInit+0xec>)
 8002cf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cf4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	52002000 	.word	0x52002000
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d10:	02020200 	.word	0x02020200
 8002d14:	01ff0000 	.word	0x01ff0000
 8002d18:	01010280 	.word	0x01010280
 8002d1c:	5c001000 	.word	0x5c001000
 8002d20:	ffff0000 	.word	0xffff0000
 8002d24:	51008108 	.word	0x51008108
 8002d28:	52004000 	.word	0x52004000

08002d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d30:	f7ff ff70 	bl	8002c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d36:	490d      	ldr	r1, [pc, #52]	; (8002d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5a:	f009 f9cf 	bl	800c0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5e:	f7fe f8e3 	bl	8000f28 <main>
  bx  lr
 8002d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002d70:	0800c288 	.word	0x0800c288
  ldr r2, =_sbss
 8002d74:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002d78:	20004a18 	.word	0x20004a18

08002d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC3_IRQHandler>
	...

08002d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d86:	2003      	movs	r0, #3
 8002d88:	f000 f90f 	bl	8002faa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d8c:	f003 ffc6 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_Init+0x68>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4913      	ldr	r1, [pc, #76]	; (8002dec <HAL_Init+0x6c>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_Init+0x68>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_Init+0x6c>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_Init+0x70>)
 8002dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_Init+0x74>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff fae4 	bl	8002398 <HAL_InitTick>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e002      	b.n	8002de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dda:	f7fe ffa9 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	58024400 	.word	0x58024400
 8002dec:	0800c238 	.word	0x0800c238
 8002df0:	20000004 	.word	0x20000004
 8002df4:	20000000 	.word	0x20000000

08002df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_IncTick+0x20>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x24>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_IncTick+0x24>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	20004a14 	.word	0x20004a14

08002e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_GetTick+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20004a14 	.word	0x20004a14

08002e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_GetREVID+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0c1b      	lsrs	r3, r3, #16
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	5c001000 	.word	0x5c001000

08002e50 <__NVIC_SetPriorityGrouping>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <__NVIC_SetPriorityGrouping+0x40>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <__NVIC_SetPriorityGrouping+0x40>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	05fa0000 	.word	0x05fa0000

08002e98 <__NVIC_GetPriorityGrouping>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff4c 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fce:	f7ff ff63 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 8002fd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	6978      	ldr	r0, [r7, #20]
 8002fda:	f7ff ffb3 	bl	8002f44 <NVIC_EncodePriority>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff82 	bl	8002ef0 <__NVIC_SetPriority>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff56 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff ff02 	bl	8002e20 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e316      	b.n	8003656 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a66      	ldr	r2, [pc, #408]	; (80031c8 <HAL_DMA_Init+0x1b8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d04a      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_DMA_Init+0x1bc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d045      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a63      	ldr	r2, [pc, #396]	; (80031d0 <HAL_DMA_Init+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d040      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a62      	ldr	r2, [pc, #392]	; (80031d4 <HAL_DMA_Init+0x1c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d03b      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a60      	ldr	r2, [pc, #384]	; (80031d8 <HAL_DMA_Init+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d036      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5f      	ldr	r2, [pc, #380]	; (80031dc <HAL_DMA_Init+0x1cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d031      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5d      	ldr	r2, [pc, #372]	; (80031e0 <HAL_DMA_Init+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d02c      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5c      	ldr	r2, [pc, #368]	; (80031e4 <HAL_DMA_Init+0x1d4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d027      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a5a      	ldr	r2, [pc, #360]	; (80031e8 <HAL_DMA_Init+0x1d8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a59      	ldr	r2, [pc, #356]	; (80031ec <HAL_DMA_Init+0x1dc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d01d      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_DMA_Init+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d018      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a56      	ldr	r2, [pc, #344]	; (80031f4 <HAL_DMA_Init+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d013      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <HAL_DMA_Init+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a53      	ldr	r2, [pc, #332]	; (80031fc <HAL_DMA_Init+0x1ec>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a51      	ldr	r2, [pc, #324]	; (8003200 <HAL_DMA_Init+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_DMA_Init+0xb8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a50      	ldr	r2, [pc, #320]	; (8003204 <HAL_DMA_Init+0x1f4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Init+0xbc>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_DMA_Init+0xbe>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 813b 	beq.w	800334a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a37      	ldr	r2, [pc, #220]	; (80031c8 <HAL_DMA_Init+0x1b8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04a      	beq.n	8003184 <HAL_DMA_Init+0x174>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a36      	ldr	r2, [pc, #216]	; (80031cc <HAL_DMA_Init+0x1bc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d045      	beq.n	8003184 <HAL_DMA_Init+0x174>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <HAL_DMA_Init+0x1c0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d040      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_DMA_Init+0x1c4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d03b      	beq.n	8003184 <HAL_DMA_Init+0x174>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a31      	ldr	r2, [pc, #196]	; (80031d8 <HAL_DMA_Init+0x1c8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d036      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a30      	ldr	r2, [pc, #192]	; (80031dc <HAL_DMA_Init+0x1cc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d031      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2e      	ldr	r2, [pc, #184]	; (80031e0 <HAL_DMA_Init+0x1d0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02c      	beq.n	8003184 <HAL_DMA_Init+0x174>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2d      	ldr	r2, [pc, #180]	; (80031e4 <HAL_DMA_Init+0x1d4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d027      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_DMA_Init+0x1d8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_DMA_Init+0x174>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2a      	ldr	r2, [pc, #168]	; (80031ec <HAL_DMA_Init+0x1dc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d01d      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <HAL_DMA_Init+0x1e0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_DMA_Init+0x1e4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_DMA_Init+0x174>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <HAL_DMA_Init+0x1e8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a24      	ldr	r2, [pc, #144]	; (80031fc <HAL_DMA_Init+0x1ec>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_DMA_Init+0x174>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_DMA_Init+0x1f0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Init+0x174>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a21      	ldr	r2, [pc, #132]	; (8003204 <HAL_DMA_Init+0x1f4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <HAL_DMA_Init+0x186>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e007      	b.n	80031a6 <HAL_DMA_Init+0x196>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031a6:	e02f      	b.n	8003208 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a8:	f7ff fe3a 	bl	8002e20 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d928      	bls.n	8003208 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2203      	movs	r2, #3
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e246      	b.n	8003656 <HAL_DMA_Init+0x646>
 80031c8:	40020010 	.word	0x40020010
 80031cc:	40020028 	.word	0x40020028
 80031d0:	40020040 	.word	0x40020040
 80031d4:	40020058 	.word	0x40020058
 80031d8:	40020070 	.word	0x40020070
 80031dc:	40020088 	.word	0x40020088
 80031e0:	400200a0 	.word	0x400200a0
 80031e4:	400200b8 	.word	0x400200b8
 80031e8:	40020410 	.word	0x40020410
 80031ec:	40020428 	.word	0x40020428
 80031f0:	40020440 	.word	0x40020440
 80031f4:	40020458 	.word	0x40020458
 80031f8:	40020470 	.word	0x40020470
 80031fc:	40020488 	.word	0x40020488
 8003200:	400204a0 	.word	0x400204a0
 8003204:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1c8      	bne.n	80031a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4b83      	ldr	r3, [pc, #524]	; (8003430 <HAL_DMA_Init+0x420>)
 8003222:	4013      	ands	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800322e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4313      	orrs	r3, r2
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800326c:	4b71      	ldr	r3, [pc, #452]	; (8003434 <HAL_DMA_Init+0x424>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b71      	ldr	r3, [pc, #452]	; (8003438 <HAL_DMA_Init+0x428>)
 8003272:	4013      	ands	r3, r2
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003278:	d328      	bcc.n	80032cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b28      	cmp	r3, #40	; 0x28
 8003280:	d903      	bls.n	800328a <HAL_DMA_Init+0x27a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b2e      	cmp	r3, #46	; 0x2e
 8003288:	d917      	bls.n	80032ba <HAL_DMA_Init+0x2aa>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b3e      	cmp	r3, #62	; 0x3e
 8003290:	d903      	bls.n	800329a <HAL_DMA_Init+0x28a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b42      	cmp	r3, #66	; 0x42
 8003298:	d90f      	bls.n	80032ba <HAL_DMA_Init+0x2aa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b46      	cmp	r3, #70	; 0x46
 80032a0:	d903      	bls.n	80032aa <HAL_DMA_Init+0x29a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b48      	cmp	r3, #72	; 0x48
 80032a8:	d907      	bls.n	80032ba <HAL_DMA_Init+0x2aa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b4e      	cmp	r3, #78	; 0x4e
 80032b0:	d905      	bls.n	80032be <HAL_DMA_Init+0x2ae>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b52      	cmp	r3, #82	; 0x52
 80032b8:	d801      	bhi.n	80032be <HAL_DMA_Init+0x2ae>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_DMA_Init+0x2b0>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0307 	bic.w	r3, r3, #7
 80032e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d117      	bne.n	8003326 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f002 fb3d 	bl	8005988 <DMA_CheckFifoParam>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e197      	b.n	8003656 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f002 fa78 	bl	8005824 <DMA_CalcBaseAndBitshift>
 8003334:	4603      	mov	r3, r0
 8003336:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	223f      	movs	r2, #63	; 0x3f
 8003342:	409a      	lsls	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	e0cd      	b.n	80034e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a3b      	ldr	r2, [pc, #236]	; (800343c <HAL_DMA_Init+0x42c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <HAL_DMA_Init+0x38a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_DMA_Init+0x430>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <HAL_DMA_Init+0x38a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a38      	ldr	r2, [pc, #224]	; (8003444 <HAL_DMA_Init+0x434>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <HAL_DMA_Init+0x38a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_DMA_Init+0x438>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_DMA_Init+0x38a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a35      	ldr	r2, [pc, #212]	; (800344c <HAL_DMA_Init+0x43c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_DMA_Init+0x38a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a33      	ldr	r2, [pc, #204]	; (8003450 <HAL_DMA_Init+0x440>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <HAL_DMA_Init+0x38a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a32      	ldr	r2, [pc, #200]	; (8003454 <HAL_DMA_Init+0x444>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_DMA_Init+0x38a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a30      	ldr	r2, [pc, #192]	; (8003458 <HAL_DMA_Init+0x448>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d101      	bne.n	800339e <HAL_DMA_Init+0x38e>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_DMA_Init+0x390>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8097 	beq.w	80034d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	; (800343c <HAL_DMA_Init+0x42c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d021      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <HAL_DMA_Init+0x430>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01c      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	; (8003444 <HAL_DMA_Init+0x434>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d017      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <HAL_DMA_Init+0x438>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d012      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	; (800344c <HAL_DMA_Init+0x43c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00d      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <HAL_DMA_Init+0x440>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d008      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <HAL_DMA_Init+0x444>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <HAL_DMA_Init+0x3e4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_DMA_Init+0x448>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_DMA_Init+0x44c>)
 8003412:	4013      	ands	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d020      	beq.n	8003460 <HAL_DMA_Init+0x450>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d102      	bne.n	800342c <HAL_DMA_Init+0x41c>
 8003426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800342a:	e01a      	b.n	8003462 <HAL_DMA_Init+0x452>
 800342c:	2300      	movs	r3, #0
 800342e:	e018      	b.n	8003462 <HAL_DMA_Init+0x452>
 8003430:	fe10803f 	.word	0xfe10803f
 8003434:	5c001000 	.word	0x5c001000
 8003438:	ffff0000 	.word	0xffff0000
 800343c:	58025408 	.word	0x58025408
 8003440:	5802541c 	.word	0x5802541c
 8003444:	58025430 	.word	0x58025430
 8003448:	58025444 	.word	0x58025444
 800344c:	58025458 	.word	0x58025458
 8003450:	5802546c 	.word	0x5802546c
 8003454:	58025480 	.word	0x58025480
 8003458:	58025494 	.word	0x58025494
 800345c:	fffe000f 	.word	0xfffe000f
 8003460:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68d2      	ldr	r2, [r2, #12]
 8003466:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003490:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <HAL_DMA_Init+0x650>)
 80034a8:	4413      	add	r3, r2
 80034aa:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_DMA_Init+0x654>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	009a      	lsls	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f002 f9b3 	bl	8005824 <DMA_CalcBaseAndBitshift>
 80034be:	4603      	mov	r3, r0
 80034c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2201      	movs	r2, #1
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e008      	b.n	80034e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0b7      	b.n	8003656 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5f      	ldr	r2, [pc, #380]	; (8003668 <HAL_DMA_Init+0x658>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d072      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_DMA_Init+0x65c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d06d      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_DMA_Init+0x660>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d068      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <HAL_DMA_Init+0x664>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d063      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a59      	ldr	r2, [pc, #356]	; (8003678 <HAL_DMA_Init+0x668>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d05e      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_DMA_Init+0x66c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d059      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a56      	ldr	r2, [pc, #344]	; (8003680 <HAL_DMA_Init+0x670>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d054      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_DMA_Init+0x674>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d04f      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a53      	ldr	r2, [pc, #332]	; (8003688 <HAL_DMA_Init+0x678>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04a      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a51      	ldr	r2, [pc, #324]	; (800368c <HAL_DMA_Init+0x67c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d045      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a50      	ldr	r2, [pc, #320]	; (8003690 <HAL_DMA_Init+0x680>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d040      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_DMA_Init+0x684>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <HAL_DMA_Init+0x688>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d036      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a4b      	ldr	r2, [pc, #300]	; (800369c <HAL_DMA_Init+0x68c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4a      	ldr	r2, [pc, #296]	; (80036a0 <HAL_DMA_Init+0x690>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02c      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a48      	ldr	r2, [pc, #288]	; (80036a4 <HAL_DMA_Init+0x694>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d027      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <HAL_DMA_Init+0x698>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a45      	ldr	r2, [pc, #276]	; (80036ac <HAL_DMA_Init+0x69c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <HAL_DMA_Init+0x6a0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <HAL_DMA_Init+0x6a4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <HAL_DMA_Init+0x6a8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <HAL_DMA_Init+0x6ac>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3e      	ldr	r2, [pc, #248]	; (80036c0 <HAL_DMA_Init+0x6b0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_Init+0x5c6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <HAL_DMA_Init+0x6b4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_DMA_Init+0x5ca>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_DMA_Init+0x5cc>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d032      	beq.n	8003646 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f002 fa4d 	bl	8005a80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d102      	bne.n	80035f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003608:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_DMA_Init+0x624>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d80c      	bhi.n	8003634 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f002 faca 	bl	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e008      	b.n	8003646 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	a7fdabf8 	.word	0xa7fdabf8
 8003664:	cccccccd 	.word	0xcccccccd
 8003668:	40020010 	.word	0x40020010
 800366c:	40020028 	.word	0x40020028
 8003670:	40020040 	.word	0x40020040
 8003674:	40020058 	.word	0x40020058
 8003678:	40020070 	.word	0x40020070
 800367c:	40020088 	.word	0x40020088
 8003680:	400200a0 	.word	0x400200a0
 8003684:	400200b8 	.word	0x400200b8
 8003688:	40020410 	.word	0x40020410
 800368c:	40020428 	.word	0x40020428
 8003690:	40020440 	.word	0x40020440
 8003694:	40020458 	.word	0x40020458
 8003698:	40020470 	.word	0x40020470
 800369c:	40020488 	.word	0x40020488
 80036a0:	400204a0 	.word	0x400204a0
 80036a4:	400204b8 	.word	0x400204b8
 80036a8:	58025408 	.word	0x58025408
 80036ac:	5802541c 	.word	0x5802541c
 80036b0:	58025430 	.word	0x58025430
 80036b4:	58025444 	.word	0x58025444
 80036b8:	58025458 	.word	0x58025458
 80036bc:	5802546c 	.word	0x5802546c
 80036c0:	58025480 	.word	0x58025480
 80036c4:	58025494 	.word	0x58025494

080036c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e226      	b.n	8003b32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_DMA_Start_IT+0x2a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e21f      	b.n	8003b32 <HAL_DMA_Start_IT+0x46a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	f040 820a 	bne.w	8003b1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a68      	ldr	r2, [pc, #416]	; (80038bc <HAL_DMA_Start_IT+0x1f4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04a      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a66      	ldr	r2, [pc, #408]	; (80038c0 <HAL_DMA_Start_IT+0x1f8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d045      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_DMA_Start_IT+0x1fc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a63      	ldr	r2, [pc, #396]	; (80038c8 <HAL_DMA_Start_IT+0x200>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a62      	ldr	r2, [pc, #392]	; (80038cc <HAL_DMA_Start_IT+0x204>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d036      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_DMA_Start_IT+0x208>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5f      	ldr	r2, [pc, #380]	; (80038d4 <HAL_DMA_Start_IT+0x20c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02c      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <HAL_DMA_Start_IT+0x210>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_DMA_Start_IT+0x214>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a5a      	ldr	r2, [pc, #360]	; (80038e0 <HAL_DMA_Start_IT+0x218>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <HAL_DMA_Start_IT+0x21c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_DMA_Start_IT+0x220>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a56      	ldr	r2, [pc, #344]	; (80038ec <HAL_DMA_Start_IT+0x224>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <HAL_DMA_Start_IT+0x228>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a53      	ldr	r2, [pc, #332]	; (80038f4 <HAL_DMA_Start_IT+0x22c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Start_IT+0xee>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_DMA_Start_IT+0x230>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d108      	bne.n	80037c8 <HAL_DMA_Start_IT+0x100>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e007      	b.n	80037d8 <HAL_DMA_Start_IT+0x110>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f001 fe74 	bl	80054cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a34      	ldr	r2, [pc, #208]	; (80038bc <HAL_DMA_Start_IT+0x1f4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_DMA_Start_IT+0x1f8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a31      	ldr	r2, [pc, #196]	; (80038c4 <HAL_DMA_Start_IT+0x1fc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <HAL_DMA_Start_IT+0x200>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2e      	ldr	r2, [pc, #184]	; (80038cc <HAL_DMA_Start_IT+0x204>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_DMA_Start_IT+0x208>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <HAL_DMA_Start_IT+0x20c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_DMA_Start_IT+0x210>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_DMA_Start_IT+0x214>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_DMA_Start_IT+0x218>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <HAL_DMA_Start_IT+0x21c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <HAL_DMA_Start_IT+0x220>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_DMA_Start_IT+0x224>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <HAL_DMA_Start_IT+0x228>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <HAL_DMA_Start_IT+0x22c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_Start_IT+0x1bc>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_DMA_Start_IT+0x230>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Start_IT+0x1c0>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_DMA_Start_IT+0x1c2>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d036      	beq.n	80038fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 021e 	bic.w	r2, r3, #30
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0216 	orr.w	r2, r2, #22
 80038a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03e      	beq.n	8003928 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0208 	orr.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e035      	b.n	8003928 <HAL_DMA_Start_IT+0x260>
 80038bc:	40020010 	.word	0x40020010
 80038c0:	40020028 	.word	0x40020028
 80038c4:	40020040 	.word	0x40020040
 80038c8:	40020058 	.word	0x40020058
 80038cc:	40020070 	.word	0x40020070
 80038d0:	40020088 	.word	0x40020088
 80038d4:	400200a0 	.word	0x400200a0
 80038d8:	400200b8 	.word	0x400200b8
 80038dc:	40020410 	.word	0x40020410
 80038e0:	40020428 	.word	0x40020428
 80038e4:	40020440 	.word	0x40020440
 80038e8:	40020458 	.word	0x40020458
 80038ec:	40020470 	.word	0x40020470
 80038f0:	40020488 	.word	0x40020488
 80038f4:	400204a0 	.word	0x400204a0
 80038f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 020e 	bic.w	r2, r3, #14
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 020a 	orr.w	r2, r2, #10
 800390e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0204 	orr.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a83      	ldr	r2, [pc, #524]	; (8003b3c <HAL_DMA_Start_IT+0x474>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d072      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a82      	ldr	r2, [pc, #520]	; (8003b40 <HAL_DMA_Start_IT+0x478>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d06d      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_DMA_Start_IT+0x47c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d068      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7f      	ldr	r2, [pc, #508]	; (8003b48 <HAL_DMA_Start_IT+0x480>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d063      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7d      	ldr	r2, [pc, #500]	; (8003b4c <HAL_DMA_Start_IT+0x484>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d05e      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7c      	ldr	r2, [pc, #496]	; (8003b50 <HAL_DMA_Start_IT+0x488>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d059      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7a      	ldr	r2, [pc, #488]	; (8003b54 <HAL_DMA_Start_IT+0x48c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d054      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a79      	ldr	r2, [pc, #484]	; (8003b58 <HAL_DMA_Start_IT+0x490>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04f      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a77      	ldr	r2, [pc, #476]	; (8003b5c <HAL_DMA_Start_IT+0x494>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d04a      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a76      	ldr	r2, [pc, #472]	; (8003b60 <HAL_DMA_Start_IT+0x498>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d045      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a74      	ldr	r2, [pc, #464]	; (8003b64 <HAL_DMA_Start_IT+0x49c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d040      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a73      	ldr	r2, [pc, #460]	; (8003b68 <HAL_DMA_Start_IT+0x4a0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d03b      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a71      	ldr	r2, [pc, #452]	; (8003b6c <HAL_DMA_Start_IT+0x4a4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d036      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a70      	ldr	r2, [pc, #448]	; (8003b70 <HAL_DMA_Start_IT+0x4a8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d031      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_DMA_Start_IT+0x4ac>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d02c      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6d      	ldr	r2, [pc, #436]	; (8003b78 <HAL_DMA_Start_IT+0x4b0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d027      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6b      	ldr	r2, [pc, #428]	; (8003b7c <HAL_DMA_Start_IT+0x4b4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d022      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <HAL_DMA_Start_IT+0x4b8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d01d      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a68      	ldr	r2, [pc, #416]	; (8003b84 <HAL_DMA_Start_IT+0x4bc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d018      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a67      	ldr	r2, [pc, #412]	; (8003b88 <HAL_DMA_Start_IT+0x4c0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d013      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a65      	ldr	r2, [pc, #404]	; (8003b8c <HAL_DMA_Start_IT+0x4c4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00e      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a64      	ldr	r2, [pc, #400]	; (8003b90 <HAL_DMA_Start_IT+0x4c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d009      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a62      	ldr	r2, [pc, #392]	; (8003b94 <HAL_DMA_Start_IT+0x4cc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_DMA_Start_IT+0x350>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a61      	ldr	r2, [pc, #388]	; (8003b98 <HAL_DMA_Start_IT+0x4d0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_DMA_Start_IT+0x354>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_DMA_Start_IT+0x356>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01a      	beq.n	8003a58 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a56:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a37      	ldr	r2, [pc, #220]	; (8003b3c <HAL_DMA_Start_IT+0x474>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a36      	ldr	r2, [pc, #216]	; (8003b40 <HAL_DMA_Start_IT+0x478>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_DMA_Start_IT+0x47c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <HAL_DMA_Start_IT+0x480>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a31      	ldr	r2, [pc, #196]	; (8003b4c <HAL_DMA_Start_IT+0x484>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <HAL_DMA_Start_IT+0x488>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_DMA_Start_IT+0x48c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <HAL_DMA_Start_IT+0x490>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <HAL_DMA_Start_IT+0x494>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_DMA_Start_IT+0x498>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_DMA_Start_IT+0x49c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMA_Start_IT+0x4a0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_DMA_Start_IT+0x4a4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_DMA_Start_IT+0x4a8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <HAL_DMA_Start_IT+0x4ac>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_Start_IT+0x430>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_DMA_Start_IT+0x4b0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <HAL_DMA_Start_IT+0x442>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e012      	b.n	8003b30 <HAL_DMA_Start_IT+0x468>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e009      	b.n	8003b30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40020010 	.word	0x40020010
 8003b40:	40020028 	.word	0x40020028
 8003b44:	40020040 	.word	0x40020040
 8003b48:	40020058 	.word	0x40020058
 8003b4c:	40020070 	.word	0x40020070
 8003b50:	40020088 	.word	0x40020088
 8003b54:	400200a0 	.word	0x400200a0
 8003b58:	400200b8 	.word	0x400200b8
 8003b5c:	40020410 	.word	0x40020410
 8003b60:	40020428 	.word	0x40020428
 8003b64:	40020440 	.word	0x40020440
 8003b68:	40020458 	.word	0x40020458
 8003b6c:	40020470 	.word	0x40020470
 8003b70:	40020488 	.word	0x40020488
 8003b74:	400204a0 	.word	0x400204a0
 8003b78:	400204b8 	.word	0x400204b8
 8003b7c:	58025408 	.word	0x58025408
 8003b80:	5802541c 	.word	0x5802541c
 8003b84:	58025430 	.word	0x58025430
 8003b88:	58025444 	.word	0x58025444
 8003b8c:	58025458 	.word	0x58025458
 8003b90:	5802546c 	.word	0x5802546c
 8003b94:	58025480 	.word	0x58025480
 8003b98:	58025494 	.word	0x58025494

08003b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff f93c 	bl	8002e20 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e2dc      	b.n	800416e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d008      	beq.n	8003bd2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e2cd      	b.n	800416e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a76      	ldr	r2, [pc, #472]	; (8003db0 <HAL_DMA_Abort+0x214>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d04a      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a74      	ldr	r2, [pc, #464]	; (8003db4 <HAL_DMA_Abort+0x218>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d045      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a73      	ldr	r2, [pc, #460]	; (8003db8 <HAL_DMA_Abort+0x21c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d040      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a71      	ldr	r2, [pc, #452]	; (8003dbc <HAL_DMA_Abort+0x220>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d03b      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a70      	ldr	r2, [pc, #448]	; (8003dc0 <HAL_DMA_Abort+0x224>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d036      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_DMA_Abort+0x228>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d031      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6d      	ldr	r2, [pc, #436]	; (8003dc8 <HAL_DMA_Abort+0x22c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d02c      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6b      	ldr	r2, [pc, #428]	; (8003dcc <HAL_DMA_Abort+0x230>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d027      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <HAL_DMA_Abort+0x234>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d022      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_DMA_Abort+0x238>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01d      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <HAL_DMA_Abort+0x23c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a65      	ldr	r2, [pc, #404]	; (8003ddc <HAL_DMA_Abort+0x240>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a64      	ldr	r2, [pc, #400]	; (8003de0 <HAL_DMA_Abort+0x244>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00e      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a62      	ldr	r2, [pc, #392]	; (8003de4 <HAL_DMA_Abort+0x248>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a61      	ldr	r2, [pc, #388]	; (8003de8 <HAL_DMA_Abort+0x24c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_DMA_Abort+0xd6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5f      	ldr	r2, [pc, #380]	; (8003dec <HAL_DMA_Abort+0x250>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_DMA_Abort+0xda>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_DMA_Abort+0xdc>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 021e 	bic.w	r2, r2, #30
 8003c8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e00a      	b.n	8003cba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 020e 	bic.w	r2, r2, #14
 8003cb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a3c      	ldr	r2, [pc, #240]	; (8003db0 <HAL_DMA_Abort+0x214>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d072      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <HAL_DMA_Abort+0x218>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d06d      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <HAL_DMA_Abort+0x21c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d068      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a37      	ldr	r2, [pc, #220]	; (8003dbc <HAL_DMA_Abort+0x220>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d063      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a36      	ldr	r2, [pc, #216]	; (8003dc0 <HAL_DMA_Abort+0x224>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d05e      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <HAL_DMA_Abort+0x228>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d059      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a33      	ldr	r2, [pc, #204]	; (8003dc8 <HAL_DMA_Abort+0x22c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d054      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <HAL_DMA_Abort+0x230>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04f      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <HAL_DMA_Abort+0x234>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <HAL_DMA_Abort+0x238>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <HAL_DMA_Abort+0x23c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <HAL_DMA_Abort+0x240>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <HAL_DMA_Abort+0x244>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <HAL_DMA_Abort+0x248>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_DMA_Abort+0x24c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a25      	ldr	r2, [pc, #148]	; (8003dec <HAL_DMA_Abort+0x250>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <HAL_DMA_Abort+0x254>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_DMA_Abort+0x258>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a21      	ldr	r2, [pc, #132]	; (8003df8 <HAL_DMA_Abort+0x25c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <HAL_DMA_Abort+0x260>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <HAL_DMA_Abort+0x264>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_DMA_Abort+0x268>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_DMA_Abort+0x26c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_Abort+0x20e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_DMA_Abort+0x270>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d132      	bne.n	8003e10 <HAL_DMA_Abort+0x274>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e031      	b.n	8003e12 <HAL_DMA_Abort+0x276>
 8003dae:	bf00      	nop
 8003db0:	40020010 	.word	0x40020010
 8003db4:	40020028 	.word	0x40020028
 8003db8:	40020040 	.word	0x40020040
 8003dbc:	40020058 	.word	0x40020058
 8003dc0:	40020070 	.word	0x40020070
 8003dc4:	40020088 	.word	0x40020088
 8003dc8:	400200a0 	.word	0x400200a0
 8003dcc:	400200b8 	.word	0x400200b8
 8003dd0:	40020410 	.word	0x40020410
 8003dd4:	40020428 	.word	0x40020428
 8003dd8:	40020440 	.word	0x40020440
 8003ddc:	40020458 	.word	0x40020458
 8003de0:	40020470 	.word	0x40020470
 8003de4:	40020488 	.word	0x40020488
 8003de8:	400204a0 	.word	0x400204a0
 8003dec:	400204b8 	.word	0x400204b8
 8003df0:	58025408 	.word	0x58025408
 8003df4:	5802541c 	.word	0x5802541c
 8003df8:	58025430 	.word	0x58025430
 8003dfc:	58025444 	.word	0x58025444
 8003e00:	58025458 	.word	0x58025458
 8003e04:	5802546c 	.word	0x5802546c
 8003e08:	58025480 	.word	0x58025480
 8003e0c:	58025494 	.word	0x58025494
 8003e10:	2300      	movs	r3, #0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6d      	ldr	r2, [pc, #436]	; (8003fe0 <HAL_DMA_Abort+0x444>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04a      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6b      	ldr	r2, [pc, #428]	; (8003fe4 <HAL_DMA_Abort+0x448>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d045      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6a      	ldr	r2, [pc, #424]	; (8003fe8 <HAL_DMA_Abort+0x44c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d040      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a68      	ldr	r2, [pc, #416]	; (8003fec <HAL_DMA_Abort+0x450>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a67      	ldr	r2, [pc, #412]	; (8003ff0 <HAL_DMA_Abort+0x454>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d036      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a65      	ldr	r2, [pc, #404]	; (8003ff4 <HAL_DMA_Abort+0x458>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a64      	ldr	r2, [pc, #400]	; (8003ff8 <HAL_DMA_Abort+0x45c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a62      	ldr	r2, [pc, #392]	; (8003ffc <HAL_DMA_Abort+0x460>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d027      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a61      	ldr	r2, [pc, #388]	; (8004000 <HAL_DMA_Abort+0x464>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5f      	ldr	r2, [pc, #380]	; (8004004 <HAL_DMA_Abort+0x468>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5e      	ldr	r2, [pc, #376]	; (8004008 <HAL_DMA_Abort+0x46c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5c      	ldr	r2, [pc, #368]	; (800400c <HAL_DMA_Abort+0x470>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5b      	ldr	r2, [pc, #364]	; (8004010 <HAL_DMA_Abort+0x474>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a59      	ldr	r2, [pc, #356]	; (8004014 <HAL_DMA_Abort+0x478>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_DMA_Abort+0x47c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_DMA_Abort+0x32a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a56      	ldr	r2, [pc, #344]	; (800401c <HAL_DMA_Abort+0x480>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <HAL_DMA_Abort+0x33c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <HAL_DMA_Abort+0x34c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ee8:	e013      	b.n	8003f12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eea:	f7fe ff99 	bl	8002e20 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d90c      	bls.n	8003f12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e12d      	b.n	800416e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <HAL_DMA_Abort+0x444>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d04a      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <HAL_DMA_Abort+0x448>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d045      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <HAL_DMA_Abort+0x44c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d040      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <HAL_DMA_Abort+0x450>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d03b      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a29      	ldr	r2, [pc, #164]	; (8003ff0 <HAL_DMA_Abort+0x454>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d036      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <HAL_DMA_Abort+0x458>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d031      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <HAL_DMA_Abort+0x45c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d02c      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <HAL_DMA_Abort+0x460>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d027      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a23      	ldr	r2, [pc, #140]	; (8004000 <HAL_DMA_Abort+0x464>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d022      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <HAL_DMA_Abort+0x468>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a20      	ldr	r2, [pc, #128]	; (8004008 <HAL_DMA_Abort+0x46c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d018      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	; (800400c <HAL_DMA_Abort+0x470>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <HAL_DMA_Abort+0x474>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <HAL_DMA_Abort+0x478>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <HAL_DMA_Abort+0x47c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_DMA_Abort+0x422>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_DMA_Abort+0x480>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_DMA_Abort+0x426>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_DMA_Abort+0x428>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02b      	beq.n	8004020 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	223f      	movs	r2, #63	; 0x3f
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	e02a      	b.n	8004036 <HAL_DMA_Abort+0x49a>
 8003fe0:	40020010 	.word	0x40020010
 8003fe4:	40020028 	.word	0x40020028
 8003fe8:	40020040 	.word	0x40020040
 8003fec:	40020058 	.word	0x40020058
 8003ff0:	40020070 	.word	0x40020070
 8003ff4:	40020088 	.word	0x40020088
 8003ff8:	400200a0 	.word	0x400200a0
 8003ffc:	400200b8 	.word	0x400200b8
 8004000:	40020410 	.word	0x40020410
 8004004:	40020428 	.word	0x40020428
 8004008:	40020440 	.word	0x40020440
 800400c:	40020458 	.word	0x40020458
 8004010:	40020470 	.word	0x40020470
 8004014:	40020488 	.word	0x40020488
 8004018:	400204a0 	.word	0x400204a0
 800401c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2201      	movs	r2, #1
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a4f      	ldr	r2, [pc, #316]	; (8004178 <HAL_DMA_Abort+0x5dc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d072      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a4d      	ldr	r2, [pc, #308]	; (800417c <HAL_DMA_Abort+0x5e0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d06d      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a4c      	ldr	r2, [pc, #304]	; (8004180 <HAL_DMA_Abort+0x5e4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d068      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a4a      	ldr	r2, [pc, #296]	; (8004184 <HAL_DMA_Abort+0x5e8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d063      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a49      	ldr	r2, [pc, #292]	; (8004188 <HAL_DMA_Abort+0x5ec>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d05e      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a47      	ldr	r2, [pc, #284]	; (800418c <HAL_DMA_Abort+0x5f0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d059      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a46      	ldr	r2, [pc, #280]	; (8004190 <HAL_DMA_Abort+0x5f4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d054      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a44      	ldr	r2, [pc, #272]	; (8004194 <HAL_DMA_Abort+0x5f8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d04f      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a43      	ldr	r2, [pc, #268]	; (8004198 <HAL_DMA_Abort+0x5fc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d04a      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a41      	ldr	r2, [pc, #260]	; (800419c <HAL_DMA_Abort+0x600>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d045      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a40      	ldr	r2, [pc, #256]	; (80041a0 <HAL_DMA_Abort+0x604>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d040      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3e      	ldr	r2, [pc, #248]	; (80041a4 <HAL_DMA_Abort+0x608>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d03b      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <HAL_DMA_Abort+0x60c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d036      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_DMA_Abort+0x610>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d031      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3a      	ldr	r2, [pc, #232]	; (80041b0 <HAL_DMA_Abort+0x614>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d02c      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <HAL_DMA_Abort+0x618>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d027      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a37      	ldr	r2, [pc, #220]	; (80041b8 <HAL_DMA_Abort+0x61c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d022      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a35      	ldr	r2, [pc, #212]	; (80041bc <HAL_DMA_Abort+0x620>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01d      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a34      	ldr	r2, [pc, #208]	; (80041c0 <HAL_DMA_Abort+0x624>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d018      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <HAL_DMA_Abort+0x628>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a31      	ldr	r2, [pc, #196]	; (80041c8 <HAL_DMA_Abort+0x62c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <HAL_DMA_Abort+0x630>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <HAL_DMA_Abort+0x634>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_DMA_Abort+0x58a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <HAL_DMA_Abort+0x638>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <HAL_DMA_Abort+0x58e>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_DMA_Abort+0x590>
 800412a:	2300      	movs	r3, #0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004138:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004150:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800415a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40020010 	.word	0x40020010
 800417c:	40020028 	.word	0x40020028
 8004180:	40020040 	.word	0x40020040
 8004184:	40020058 	.word	0x40020058
 8004188:	40020070 	.word	0x40020070
 800418c:	40020088 	.word	0x40020088
 8004190:	400200a0 	.word	0x400200a0
 8004194:	400200b8 	.word	0x400200b8
 8004198:	40020410 	.word	0x40020410
 800419c:	40020428 	.word	0x40020428
 80041a0:	40020440 	.word	0x40020440
 80041a4:	40020458 	.word	0x40020458
 80041a8:	40020470 	.word	0x40020470
 80041ac:	40020488 	.word	0x40020488
 80041b0:	400204a0 	.word	0x400204a0
 80041b4:	400204b8 	.word	0x400204b8
 80041b8:	58025408 	.word	0x58025408
 80041bc:	5802541c 	.word	0x5802541c
 80041c0:	58025430 	.word	0x58025430
 80041c4:	58025444 	.word	0x58025444
 80041c8:	58025458 	.word	0x58025458
 80041cc:	5802546c 	.word	0x5802546c
 80041d0:	58025480 	.word	0x58025480
 80041d4:	58025494 	.word	0x58025494

080041d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e205      	b.n	80045f6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e1fa      	b.n	80045f6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a8c      	ldr	r2, [pc, #560]	; (8004438 <HAL_DMA_Abort_IT+0x260>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a8b      	ldr	r2, [pc, #556]	; (800443c <HAL_DMA_Abort_IT+0x264>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a89      	ldr	r2, [pc, #548]	; (8004440 <HAL_DMA_Abort_IT+0x268>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a88      	ldr	r2, [pc, #544]	; (8004444 <HAL_DMA_Abort_IT+0x26c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a86      	ldr	r2, [pc, #536]	; (8004448 <HAL_DMA_Abort_IT+0x270>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a85      	ldr	r2, [pc, #532]	; (800444c <HAL_DMA_Abort_IT+0x274>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a83      	ldr	r2, [pc, #524]	; (8004450 <HAL_DMA_Abort_IT+0x278>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a82      	ldr	r2, [pc, #520]	; (8004454 <HAL_DMA_Abort_IT+0x27c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a80      	ldr	r2, [pc, #512]	; (8004458 <HAL_DMA_Abort_IT+0x280>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7f      	ldr	r2, [pc, #508]	; (800445c <HAL_DMA_Abort_IT+0x284>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a7d      	ldr	r2, [pc, #500]	; (8004460 <HAL_DMA_Abort_IT+0x288>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a7c      	ldr	r2, [pc, #496]	; (8004464 <HAL_DMA_Abort_IT+0x28c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a7a      	ldr	r2, [pc, #488]	; (8004468 <HAL_DMA_Abort_IT+0x290>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a79      	ldr	r2, [pc, #484]	; (800446c <HAL_DMA_Abort_IT+0x294>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a77      	ldr	r2, [pc, #476]	; (8004470 <HAL_DMA_Abort_IT+0x298>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_DMA_Abort_IT+0xc8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a76      	ldr	r2, [pc, #472]	; (8004474 <HAL_DMA_Abort_IT+0x29c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_DMA_Abort_IT+0xcc>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_DMA_Abort_IT+0xce>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d065      	beq.n	8004376 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2204      	movs	r2, #4
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a60      	ldr	r2, [pc, #384]	; (8004438 <HAL_DMA_Abort_IT+0x260>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d04a      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5e      	ldr	r2, [pc, #376]	; (800443c <HAL_DMA_Abort_IT+0x264>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d045      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a5d      	ldr	r2, [pc, #372]	; (8004440 <HAL_DMA_Abort_IT+0x268>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d040      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a5b      	ldr	r2, [pc, #364]	; (8004444 <HAL_DMA_Abort_IT+0x26c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d03b      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5a      	ldr	r2, [pc, #360]	; (8004448 <HAL_DMA_Abort_IT+0x270>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d036      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_DMA_Abort_IT+0x274>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d031      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a57      	ldr	r2, [pc, #348]	; (8004450 <HAL_DMA_Abort_IT+0x278>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d02c      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a55      	ldr	r2, [pc, #340]	; (8004454 <HAL_DMA_Abort_IT+0x27c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d027      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a54      	ldr	r2, [pc, #336]	; (8004458 <HAL_DMA_Abort_IT+0x280>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d022      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_DMA_Abort_IT+0x284>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01d      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a51      	ldr	r2, [pc, #324]	; (8004460 <HAL_DMA_Abort_IT+0x288>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d018      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a4f      	ldr	r2, [pc, #316]	; (8004464 <HAL_DMA_Abort_IT+0x28c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <HAL_DMA_Abort_IT+0x290>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a4c      	ldr	r2, [pc, #304]	; (800446c <HAL_DMA_Abort_IT+0x294>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a4b      	ldr	r2, [pc, #300]	; (8004470 <HAL_DMA_Abort_IT+0x298>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_DMA_Abort_IT+0x17a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a49      	ldr	r2, [pc, #292]	; (8004474 <HAL_DMA_Abort_IT+0x29c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <HAL_DMA_Abort_IT+0x18c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e147      	b.n	80045f4 <HAL_DMA_Abort_IT+0x41c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e13e      	b.n	80045f4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 020e 	bic.w	r2, r2, #14
 8004384:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_DMA_Abort_IT+0x260>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d04a      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a29      	ldr	r2, [pc, #164]	; (800443c <HAL_DMA_Abort_IT+0x264>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d045      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a28      	ldr	r2, [pc, #160]	; (8004440 <HAL_DMA_Abort_IT+0x268>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d040      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a26      	ldr	r2, [pc, #152]	; (8004444 <HAL_DMA_Abort_IT+0x26c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d03b      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a25      	ldr	r2, [pc, #148]	; (8004448 <HAL_DMA_Abort_IT+0x270>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d036      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a23      	ldr	r2, [pc, #140]	; (800444c <HAL_DMA_Abort_IT+0x274>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_DMA_Abort_IT+0x278>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d02c      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a20      	ldr	r2, [pc, #128]	; (8004454 <HAL_DMA_Abort_IT+0x27c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d027      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <HAL_DMA_Abort_IT+0x280>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_DMA_Abort_IT+0x284>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01d      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_DMA_Abort_IT+0x288>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d018      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_DMA_Abort_IT+0x28c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a19      	ldr	r2, [pc, #100]	; (8004468 <HAL_DMA_Abort_IT+0x290>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_DMA_Abort_IT+0x294>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_DMA_Abort_IT+0x298>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort_IT+0x24e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <HAL_DMA_Abort_IT+0x29c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d128      	bne.n	8004478 <HAL_DMA_Abort_IT+0x2a0>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e027      	b.n	8004488 <HAL_DMA_Abort_IT+0x2b0>
 8004438:	40020010 	.word	0x40020010
 800443c:	40020028 	.word	0x40020028
 8004440:	40020040 	.word	0x40020040
 8004444:	40020058 	.word	0x40020058
 8004448:	40020070 	.word	0x40020070
 800444c:	40020088 	.word	0x40020088
 8004450:	400200a0 	.word	0x400200a0
 8004454:	400200b8 	.word	0x400200b8
 8004458:	40020410 	.word	0x40020410
 800445c:	40020428 	.word	0x40020428
 8004460:	40020440 	.word	0x40020440
 8004464:	40020458 	.word	0x40020458
 8004468:	40020470 	.word	0x40020470
 800446c:	40020488 	.word	0x40020488
 8004470:	400204a0 	.word	0x400204a0
 8004474:	400204b8 	.word	0x400204b8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5c      	ldr	r2, [pc, #368]	; (8004600 <HAL_DMA_Abort_IT+0x428>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d072      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5b      	ldr	r2, [pc, #364]	; (8004604 <HAL_DMA_Abort_IT+0x42c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d06d      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a59      	ldr	r2, [pc, #356]	; (8004608 <HAL_DMA_Abort_IT+0x430>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d068      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a58      	ldr	r2, [pc, #352]	; (800460c <HAL_DMA_Abort_IT+0x434>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d063      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a56      	ldr	r2, [pc, #344]	; (8004610 <HAL_DMA_Abort_IT+0x438>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d05e      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a55      	ldr	r2, [pc, #340]	; (8004614 <HAL_DMA_Abort_IT+0x43c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d059      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a53      	ldr	r2, [pc, #332]	; (8004618 <HAL_DMA_Abort_IT+0x440>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d054      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_DMA_Abort_IT+0x444>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d04f      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a50      	ldr	r2, [pc, #320]	; (8004620 <HAL_DMA_Abort_IT+0x448>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d04a      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4f      	ldr	r2, [pc, #316]	; (8004624 <HAL_DMA_Abort_IT+0x44c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d045      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a4d      	ldr	r2, [pc, #308]	; (8004628 <HAL_DMA_Abort_IT+0x450>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d040      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4c      	ldr	r2, [pc, #304]	; (800462c <HAL_DMA_Abort_IT+0x454>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d03b      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <HAL_DMA_Abort_IT+0x458>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d036      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a49      	ldr	r2, [pc, #292]	; (8004634 <HAL_DMA_Abort_IT+0x45c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d031      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a47      	ldr	r2, [pc, #284]	; (8004638 <HAL_DMA_Abort_IT+0x460>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d02c      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a46      	ldr	r2, [pc, #280]	; (800463c <HAL_DMA_Abort_IT+0x464>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d027      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a44      	ldr	r2, [pc, #272]	; (8004640 <HAL_DMA_Abort_IT+0x468>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d022      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a43      	ldr	r2, [pc, #268]	; (8004644 <HAL_DMA_Abort_IT+0x46c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d01d      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a41      	ldr	r2, [pc, #260]	; (8004648 <HAL_DMA_Abort_IT+0x470>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a40      	ldr	r2, [pc, #256]	; (800464c <HAL_DMA_Abort_IT+0x474>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <HAL_DMA_Abort_IT+0x478>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3d      	ldr	r2, [pc, #244]	; (8004654 <HAL_DMA_Abort_IT+0x47c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3b      	ldr	r2, [pc, #236]	; (8004658 <HAL_DMA_Abort_IT+0x480>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_DMA_Abort_IT+0x3a0>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3a      	ldr	r2, [pc, #232]	; (800465c <HAL_DMA_Abort_IT+0x484>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_DMA_Abort_IT+0x3a4>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_DMA_Abort_IT+0x3a6>
 800457c:	2300      	movs	r3, #0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	40020040 	.word	0x40020040
 800460c:	40020058 	.word	0x40020058
 8004610:	40020070 	.word	0x40020070
 8004614:	40020088 	.word	0x40020088
 8004618:	400200a0 	.word	0x400200a0
 800461c:	400200b8 	.word	0x400200b8
 8004620:	40020410 	.word	0x40020410
 8004624:	40020428 	.word	0x40020428
 8004628:	40020440 	.word	0x40020440
 800462c:	40020458 	.word	0x40020458
 8004630:	40020470 	.word	0x40020470
 8004634:	40020488 	.word	0x40020488
 8004638:	400204a0 	.word	0x400204a0
 800463c:	400204b8 	.word	0x400204b8
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	58025444 	.word	0x58025444
 8004650:	58025458 	.word	0x58025458
 8004654:	5802546c 	.word	0x5802546c
 8004658:	58025480 	.word	0x58025480
 800465c:	58025494 	.word	0x58025494

08004660 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800466c:	4b67      	ldr	r3, [pc, #412]	; (800480c <HAL_DMA_IRQHandler+0x1ac>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a67      	ldr	r2, [pc, #412]	; (8004810 <HAL_DMA_IRQHandler+0x1b0>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	0a9b      	lsrs	r3, r3, #10
 8004678:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5f      	ldr	r2, [pc, #380]	; (8004814 <HAL_DMA_IRQHandler+0x1b4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d04a      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5d      	ldr	r2, [pc, #372]	; (8004818 <HAL_DMA_IRQHandler+0x1b8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d045      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a5c      	ldr	r2, [pc, #368]	; (800481c <HAL_DMA_IRQHandler+0x1bc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d040      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <HAL_DMA_IRQHandler+0x1c0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d03b      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a59      	ldr	r2, [pc, #356]	; (8004824 <HAL_DMA_IRQHandler+0x1c4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d036      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_DMA_IRQHandler+0x1c8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d031      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a56      	ldr	r2, [pc, #344]	; (800482c <HAL_DMA_IRQHandler+0x1cc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d02c      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a54      	ldr	r2, [pc, #336]	; (8004830 <HAL_DMA_IRQHandler+0x1d0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d027      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a53      	ldr	r2, [pc, #332]	; (8004834 <HAL_DMA_IRQHandler+0x1d4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d022      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a51      	ldr	r2, [pc, #324]	; (8004838 <HAL_DMA_IRQHandler+0x1d8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01d      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a50      	ldr	r2, [pc, #320]	; (800483c <HAL_DMA_IRQHandler+0x1dc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a4e      	ldr	r2, [pc, #312]	; (8004840 <HAL_DMA_IRQHandler+0x1e0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4d      	ldr	r2, [pc, #308]	; (8004844 <HAL_DMA_IRQHandler+0x1e4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a4b      	ldr	r2, [pc, #300]	; (8004848 <HAL_DMA_IRQHandler+0x1e8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a4a      	ldr	r2, [pc, #296]	; (800484c <HAL_DMA_IRQHandler+0x1ec>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_DMA_IRQHandler+0xd2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a48      	ldr	r2, [pc, #288]	; (8004850 <HAL_DMA_IRQHandler+0x1f0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <HAL_DMA_IRQHandler+0xd6>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_DMA_IRQHandler+0xd8>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 842b 	beq.w	8004f94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2208      	movs	r2, #8
 8004748:	409a      	lsls	r2, r3
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80a2 	beq.w	8004898 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_DMA_IRQHandler+0x1b4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d04a      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <HAL_DMA_IRQHandler+0x1b8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d045      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <HAL_DMA_IRQHandler+0x1bc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d040      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <HAL_DMA_IRQHandler+0x1c0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d03b      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a28      	ldr	r2, [pc, #160]	; (8004824 <HAL_DMA_IRQHandler+0x1c4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d036      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a27      	ldr	r2, [pc, #156]	; (8004828 <HAL_DMA_IRQHandler+0x1c8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d031      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a25      	ldr	r2, [pc, #148]	; (800482c <HAL_DMA_IRQHandler+0x1cc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02c      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a24      	ldr	r2, [pc, #144]	; (8004830 <HAL_DMA_IRQHandler+0x1d0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d027      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a22      	ldr	r2, [pc, #136]	; (8004834 <HAL_DMA_IRQHandler+0x1d4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a21      	ldr	r2, [pc, #132]	; (8004838 <HAL_DMA_IRQHandler+0x1d8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d01d      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_DMA_IRQHandler+0x1dc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <HAL_DMA_IRQHandler+0x1e0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <HAL_DMA_IRQHandler+0x1e4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <HAL_DMA_IRQHandler+0x1e8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_DMA_IRQHandler+0x1ec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x194>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_DMA_IRQHandler+0x1f0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d12f      	bne.n	8004854 <HAL_DMA_IRQHandler+0x1f4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e02e      	b.n	8004868 <HAL_DMA_IRQHandler+0x208>
 800480a:	bf00      	nop
 800480c:	20000000 	.word	0x20000000
 8004810:	1b4e81b5 	.word	0x1b4e81b5
 8004814:	40020010 	.word	0x40020010
 8004818:	40020028 	.word	0x40020028
 800481c:	40020040 	.word	0x40020040
 8004820:	40020058 	.word	0x40020058
 8004824:	40020070 	.word	0x40020070
 8004828:	40020088 	.word	0x40020088
 800482c:	400200a0 	.word	0x400200a0
 8004830:	400200b8 	.word	0x400200b8
 8004834:	40020410 	.word	0x40020410
 8004838:	40020428 	.word	0x40020428
 800483c:	40020440 	.word	0x40020440
 8004840:	40020458 	.word	0x40020458
 8004844:	40020470 	.word	0x40020470
 8004848:	40020488 	.word	0x40020488
 800484c:	400204a0 	.word	0x400204a0
 8004850:	400204b8 	.word	0x400204b8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2208      	movs	r2, #8
 8004886:	409a      	lsls	r2, r3
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06e      	beq.n	800498c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a69      	ldr	r2, [pc, #420]	; (8004a58 <HAL_DMA_IRQHandler+0x3f8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d04a      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a67      	ldr	r2, [pc, #412]	; (8004a5c <HAL_DMA_IRQHandler+0x3fc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d045      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a66      	ldr	r2, [pc, #408]	; (8004a60 <HAL_DMA_IRQHandler+0x400>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d040      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a64      	ldr	r2, [pc, #400]	; (8004a64 <HAL_DMA_IRQHandler+0x404>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d03b      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_DMA_IRQHandler+0x408>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d036      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a61      	ldr	r2, [pc, #388]	; (8004a6c <HAL_DMA_IRQHandler+0x40c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d031      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a60      	ldr	r2, [pc, #384]	; (8004a70 <HAL_DMA_IRQHandler+0x410>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d02c      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a5e      	ldr	r2, [pc, #376]	; (8004a74 <HAL_DMA_IRQHandler+0x414>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d027      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a5d      	ldr	r2, [pc, #372]	; (8004a78 <HAL_DMA_IRQHandler+0x418>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d022      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a5b      	ldr	r2, [pc, #364]	; (8004a7c <HAL_DMA_IRQHandler+0x41c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01d      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a5a      	ldr	r2, [pc, #360]	; (8004a80 <HAL_DMA_IRQHandler+0x420>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a58      	ldr	r2, [pc, #352]	; (8004a84 <HAL_DMA_IRQHandler+0x424>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a57      	ldr	r2, [pc, #348]	; (8004a88 <HAL_DMA_IRQHandler+0x428>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a55      	ldr	r2, [pc, #340]	; (8004a8c <HAL_DMA_IRQHandler+0x42c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a54      	ldr	r2, [pc, #336]	; (8004a90 <HAL_DMA_IRQHandler+0x430>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_DMA_IRQHandler+0x2ee>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a52      	ldr	r2, [pc, #328]	; (8004a94 <HAL_DMA_IRQHandler+0x434>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d10a      	bne.n	8004964 <HAL_DMA_IRQHandler+0x304>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e003      	b.n	800496c <HAL_DMA_IRQHandler+0x30c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	f043 0202 	orr.w	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	2204      	movs	r2, #4
 8004996:	409a      	lsls	r2, r3
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 808f 	beq.w	8004ac0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_DMA_IRQHandler+0x3f8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_DMA_IRQHandler+0x3fc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_DMA_IRQHandler+0x400>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_DMA_IRQHandler+0x404>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_DMA_IRQHandler+0x408>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_DMA_IRQHandler+0x40c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_DMA_IRQHandler+0x410>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <HAL_DMA_IRQHandler+0x414>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_DMA_IRQHandler+0x418>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <HAL_DMA_IRQHandler+0x41c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_DMA_IRQHandler+0x420>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <HAL_DMA_IRQHandler+0x424>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_DMA_IRQHandler+0x428>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_DMA_IRQHandler+0x42c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <HAL_DMA_IRQHandler+0x430>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x3e2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <HAL_DMA_IRQHandler+0x434>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d12a      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x438>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e023      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x440>
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2204      	movs	r2, #4
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f043 0204 	orr.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2210      	movs	r2, #16
 8004aca:	409a      	lsls	r2, r3
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80a6 	beq.w	8004c22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a85      	ldr	r2, [pc, #532]	; (8004cf0 <HAL_DMA_IRQHandler+0x690>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a83      	ldr	r2, [pc, #524]	; (8004cf4 <HAL_DMA_IRQHandler+0x694>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a82      	ldr	r2, [pc, #520]	; (8004cf8 <HAL_DMA_IRQHandler+0x698>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <HAL_DMA_IRQHandler+0x69c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7f      	ldr	r2, [pc, #508]	; (8004d00 <HAL_DMA_IRQHandler+0x6a0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a7d      	ldr	r2, [pc, #500]	; (8004d04 <HAL_DMA_IRQHandler+0x6a4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <HAL_DMA_IRQHandler+0x6a8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7a      	ldr	r2, [pc, #488]	; (8004d0c <HAL_DMA_IRQHandler+0x6ac>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a79      	ldr	r2, [pc, #484]	; (8004d10 <HAL_DMA_IRQHandler+0x6b0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a77      	ldr	r2, [pc, #476]	; (8004d14 <HAL_DMA_IRQHandler+0x6b4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a76      	ldr	r2, [pc, #472]	; (8004d18 <HAL_DMA_IRQHandler+0x6b8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a74      	ldr	r2, [pc, #464]	; (8004d1c <HAL_DMA_IRQHandler+0x6bc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a73      	ldr	r2, [pc, #460]	; (8004d20 <HAL_DMA_IRQHandler+0x6c0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a71      	ldr	r2, [pc, #452]	; (8004d24 <HAL_DMA_IRQHandler+0x6c4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a70      	ldr	r2, [pc, #448]	; (8004d28 <HAL_DMA_IRQHandler+0x6c8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x516>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6e      	ldr	r2, [pc, #440]	; (8004d2c <HAL_DMA_IRQHandler+0x6cc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10a      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x52c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e009      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x540>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d03e      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2210      	movs	r2, #16
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d018      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d108      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d024      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
 8004be0:	e01f      	b.n	8004c22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01b      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
 8004bf2:	e016      	b.n	8004c22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0208 	bic.w	r2, r2, #8
 8004c10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8110 	beq.w	8004e58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2c      	ldr	r2, [pc, #176]	; (8004cf0 <HAL_DMA_IRQHandler+0x690>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d04a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <HAL_DMA_IRQHandler+0x694>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d045      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <HAL_DMA_IRQHandler+0x698>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d040      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <HAL_DMA_IRQHandler+0x69c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d03b      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <HAL_DMA_IRQHandler+0x6a0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d036      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <HAL_DMA_IRQHandler+0x6a4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d031      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <HAL_DMA_IRQHandler+0x6a8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d02c      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <HAL_DMA_IRQHandler+0x6ac>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d027      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <HAL_DMA_IRQHandler+0x6b0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d022      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_DMA_IRQHandler+0x6b4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d01d      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <HAL_DMA_IRQHandler+0x6b8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d018      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_DMA_IRQHandler+0x6bc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <HAL_DMA_IRQHandler+0x6c0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_DMA_IRQHandler+0x6c4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <HAL_DMA_IRQHandler+0x6c8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x678>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <HAL_DMA_IRQHandler+0x6cc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d12b      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x6d0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	e02a      	b.n	8004d44 <HAL_DMA_IRQHandler+0x6e4>
 8004cee:	bf00      	nop
 8004cf0:	40020010 	.word	0x40020010
 8004cf4:	40020028 	.word	0x40020028
 8004cf8:	40020040 	.word	0x40020040
 8004cfc:	40020058 	.word	0x40020058
 8004d00:	40020070 	.word	0x40020070
 8004d04:	40020088 	.word	0x40020088
 8004d08:	400200a0 	.word	0x400200a0
 8004d0c:	400200b8 	.word	0x400200b8
 8004d10:	40020410 	.word	0x40020410
 8004d14:	40020428 	.word	0x40020428
 8004d18:	40020440 	.word	0x40020440
 8004d1c:	40020458 	.word	0x40020458
 8004d20:	40020470 	.word	0x40020470
 8004d24:	40020488 	.word	0x40020488
 8004d28:	400204a0 	.word	0x400204a0
 8004d2c:	400204b8 	.word	0x400204b8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8087 	beq.w	8004e58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2220      	movs	r2, #32
 8004d54:	409a      	lsls	r2, r3
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d139      	bne.n	8004dda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0216 	bic.w	r2, r2, #22
 8004d74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x736>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0208 	bic.w	r2, r2, #8
 8004da4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	223f      	movs	r2, #63	; 0x3f
 8004db0:	409a      	lsls	r2, r3
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 834a 	beq.w	8005464 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
          }
          return;
 8004dd8:	e344      	b.n	8005464 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d018      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02c      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
 8004e06:	e027      	b.n	8004e58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d023      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
 8004e18:	e01e      	b.n	8004e58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0210 	bic.w	r2, r2, #16
 8004e36:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8306 	beq.w	800546e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8088 	beq.w	8004f80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2204      	movs	r2, #4
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a7a      	ldr	r2, [pc, #488]	; (8005068 <HAL_DMA_IRQHandler+0xa08>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d04a      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a79      	ldr	r2, [pc, #484]	; (800506c <HAL_DMA_IRQHandler+0xa0c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d045      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a77      	ldr	r2, [pc, #476]	; (8005070 <HAL_DMA_IRQHandler+0xa10>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d040      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a76      	ldr	r2, [pc, #472]	; (8005074 <HAL_DMA_IRQHandler+0xa14>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d03b      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a74      	ldr	r2, [pc, #464]	; (8005078 <HAL_DMA_IRQHandler+0xa18>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d036      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a73      	ldr	r2, [pc, #460]	; (800507c <HAL_DMA_IRQHandler+0xa1c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d031      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a71      	ldr	r2, [pc, #452]	; (8005080 <HAL_DMA_IRQHandler+0xa20>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02c      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a70      	ldr	r2, [pc, #448]	; (8005084 <HAL_DMA_IRQHandler+0xa24>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d027      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_DMA_IRQHandler+0xa28>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6d      	ldr	r2, [pc, #436]	; (800508c <HAL_DMA_IRQHandler+0xa2c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01d      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a6b      	ldr	r2, [pc, #428]	; (8005090 <HAL_DMA_IRQHandler+0xa30>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a6a      	ldr	r2, [pc, #424]	; (8005094 <HAL_DMA_IRQHandler+0xa34>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a68      	ldr	r2, [pc, #416]	; (8005098 <HAL_DMA_IRQHandler+0xa38>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a67      	ldr	r2, [pc, #412]	; (800509c <HAL_DMA_IRQHandler+0xa3c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a65      	ldr	r2, [pc, #404]	; (80050a0 <HAL_DMA_IRQHandler+0xa40>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x8b8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a64      	ldr	r2, [pc, #400]	; (80050a4 <HAL_DMA_IRQHandler+0xa44>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d108      	bne.n	8004f2a <HAL_DMA_IRQHandler+0x8ca>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e007      	b.n	8004f3a <HAL_DMA_IRQHandler+0x8da>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0201 	bic.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d307      	bcc.n	8004f56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f2      	bne.n	8004f3a <HAL_DMA_IRQHandler+0x8da>
 8004f54:	e000      	b.n	8004f58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f56:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2203      	movs	r2, #3
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f76:	e003      	b.n	8004f80 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8272 	beq.w	800546e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
 8004f92:	e26c      	b.n	800546e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a43      	ldr	r2, [pc, #268]	; (80050a8 <HAL_DMA_IRQHandler+0xa48>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d022      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a42      	ldr	r2, [pc, #264]	; (80050ac <HAL_DMA_IRQHandler+0xa4c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01d      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a40      	ldr	r2, [pc, #256]	; (80050b0 <HAL_DMA_IRQHandler+0xa50>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d018      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3f      	ldr	r2, [pc, #252]	; (80050b4 <HAL_DMA_IRQHandler+0xa54>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <HAL_DMA_IRQHandler+0xa58>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <HAL_DMA_IRQHandler+0xa5c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a3a      	ldr	r2, [pc, #232]	; (80050c0 <HAL_DMA_IRQHandler+0xa60>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x984>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a39      	ldr	r2, [pc, #228]	; (80050c4 <HAL_DMA_IRQHandler+0xa64>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0x988>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_DMA_IRQHandler+0x98a>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 823f 	beq.w	800546e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2204      	movs	r2, #4
 8005002:	409a      	lsls	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80cd 	beq.w	80051a8 <HAL_DMA_IRQHandler+0xb48>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80c7 	beq.w	80051a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2204      	movs	r2, #4
 8005024:	409a      	lsls	r2, r3
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d049      	beq.n	80050c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8210 	beq.w	8005468 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005050:	e20a      	b.n	8005468 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8206 	beq.w	8005468 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005064:	e200      	b.n	8005468 <HAL_DMA_IRQHandler+0xe08>
 8005066:	bf00      	nop
 8005068:	40020010 	.word	0x40020010
 800506c:	40020028 	.word	0x40020028
 8005070:	40020040 	.word	0x40020040
 8005074:	40020058 	.word	0x40020058
 8005078:	40020070 	.word	0x40020070
 800507c:	40020088 	.word	0x40020088
 8005080:	400200a0 	.word	0x400200a0
 8005084:	400200b8 	.word	0x400200b8
 8005088:	40020410 	.word	0x40020410
 800508c:	40020428 	.word	0x40020428
 8005090:	40020440 	.word	0x40020440
 8005094:	40020458 	.word	0x40020458
 8005098:	40020470 	.word	0x40020470
 800509c:	40020488 	.word	0x40020488
 80050a0:	400204a0 	.word	0x400204a0
 80050a4:	400204b8 	.word	0x400204b8
 80050a8:	58025408 	.word	0x58025408
 80050ac:	5802541c 	.word	0x5802541c
 80050b0:	58025430 	.word	0x58025430
 80050b4:	58025444 	.word	0x58025444
 80050b8:	58025458 	.word	0x58025458
 80050bc:	5802546c 	.word	0x5802546c
 80050c0:	58025480 	.word	0x58025480
 80050c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d160      	bne.n	8005194 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a8c      	ldr	r2, [pc, #560]	; (8005308 <HAL_DMA_IRQHandler+0xca8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04a      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a8a      	ldr	r2, [pc, #552]	; (800530c <HAL_DMA_IRQHandler+0xcac>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d045      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a89      	ldr	r2, [pc, #548]	; (8005310 <HAL_DMA_IRQHandler+0xcb0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d040      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a87      	ldr	r2, [pc, #540]	; (8005314 <HAL_DMA_IRQHandler+0xcb4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d03b      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a86      	ldr	r2, [pc, #536]	; (8005318 <HAL_DMA_IRQHandler+0xcb8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d036      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a84      	ldr	r2, [pc, #528]	; (800531c <HAL_DMA_IRQHandler+0xcbc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a83      	ldr	r2, [pc, #524]	; (8005320 <HAL_DMA_IRQHandler+0xcc0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d02c      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a81      	ldr	r2, [pc, #516]	; (8005324 <HAL_DMA_IRQHandler+0xcc4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d027      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a80      	ldr	r2, [pc, #512]	; (8005328 <HAL_DMA_IRQHandler+0xcc8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a7e      	ldr	r2, [pc, #504]	; (800532c <HAL_DMA_IRQHandler+0xccc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a7d      	ldr	r2, [pc, #500]	; (8005330 <HAL_DMA_IRQHandler+0xcd0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a7b      	ldr	r2, [pc, #492]	; (8005334 <HAL_DMA_IRQHandler+0xcd4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7a      	ldr	r2, [pc, #488]	; (8005338 <HAL_DMA_IRQHandler+0xcd8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a78      	ldr	r2, [pc, #480]	; (800533c <HAL_DMA_IRQHandler+0xcdc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a77      	ldr	r2, [pc, #476]	; (8005340 <HAL_DMA_IRQHandler+0xce0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_DMA_IRQHandler+0xb12>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a75      	ldr	r2, [pc, #468]	; (8005344 <HAL_DMA_IRQHandler+0xce4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <HAL_DMA_IRQHandler+0xb24>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0208 	bic.w	r2, r2, #8
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e007      	b.n	8005194 <HAL_DMA_IRQHandler+0xb34>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8165 	beq.w	8005468 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a6:	e15f      	b.n	8005468 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2202      	movs	r2, #2
 80051b2:	409a      	lsls	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80c5 	beq.w	8005348 <HAL_DMA_IRQHandler+0xce8>
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80bf 	beq.w	8005348 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	2202      	movs	r2, #2
 80051d4:	409a      	lsls	r2, r3
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d018      	beq.n	8005216 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 813a 	beq.w	800546c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005200:	e134      	b.n	800546c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8130 	beq.w	800546c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005214:	e12a      	b.n	800546c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d168      	bne.n	80052f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a38      	ldr	r2, [pc, #224]	; (8005308 <HAL_DMA_IRQHandler+0xca8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d04a      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a37      	ldr	r2, [pc, #220]	; (800530c <HAL_DMA_IRQHandler+0xcac>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d045      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a35      	ldr	r2, [pc, #212]	; (8005310 <HAL_DMA_IRQHandler+0xcb0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d040      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a34      	ldr	r2, [pc, #208]	; (8005314 <HAL_DMA_IRQHandler+0xcb4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d03b      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a32      	ldr	r2, [pc, #200]	; (8005318 <HAL_DMA_IRQHandler+0xcb8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d036      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a31      	ldr	r2, [pc, #196]	; (800531c <HAL_DMA_IRQHandler+0xcbc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d031      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <HAL_DMA_IRQHandler+0xcc0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02c      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2e      	ldr	r2, [pc, #184]	; (8005324 <HAL_DMA_IRQHandler+0xcc4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d027      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <HAL_DMA_IRQHandler+0xcc8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d022      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2b      	ldr	r2, [pc, #172]	; (800532c <HAL_DMA_IRQHandler+0xccc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d01d      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a29      	ldr	r2, [pc, #164]	; (8005330 <HAL_DMA_IRQHandler+0xcd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a28      	ldr	r2, [pc, #160]	; (8005334 <HAL_DMA_IRQHandler+0xcd4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a26      	ldr	r2, [pc, #152]	; (8005338 <HAL_DMA_IRQHandler+0xcd8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a25      	ldr	r2, [pc, #148]	; (800533c <HAL_DMA_IRQHandler+0xcdc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a23      	ldr	r2, [pc, #140]	; (8005340 <HAL_DMA_IRQHandler+0xce0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_DMA_IRQHandler+0xc60>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a22      	ldr	r2, [pc, #136]	; (8005344 <HAL_DMA_IRQHandler+0xce4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <HAL_DMA_IRQHandler+0xc72>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0214 	bic.w	r2, r2, #20
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e007      	b.n	80052e2 <HAL_DMA_IRQHandler+0xc82>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 020a 	bic.w	r2, r2, #10
 80052e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80b8 	beq.w	800546c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005304:	e0b2      	b.n	800546c <HAL_DMA_IRQHandler+0xe0c>
 8005306:	bf00      	nop
 8005308:	40020010 	.word	0x40020010
 800530c:	40020028 	.word	0x40020028
 8005310:	40020040 	.word	0x40020040
 8005314:	40020058 	.word	0x40020058
 8005318:	40020070 	.word	0x40020070
 800531c:	40020088 	.word	0x40020088
 8005320:	400200a0 	.word	0x400200a0
 8005324:	400200b8 	.word	0x400200b8
 8005328:	40020410 	.word	0x40020410
 800532c:	40020428 	.word	0x40020428
 8005330:	40020440 	.word	0x40020440
 8005334:	40020458 	.word	0x40020458
 8005338:	40020470 	.word	0x40020470
 800533c:	40020488 	.word	0x40020488
 8005340:	400204a0 	.word	0x400204a0
 8005344:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2208      	movs	r2, #8
 8005352:	409a      	lsls	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8088 	beq.w	800546e <HAL_DMA_IRQHandler+0xe0e>
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8082 	beq.w	800546e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a41      	ldr	r2, [pc, #260]	; (8005474 <HAL_DMA_IRQHandler+0xe14>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <HAL_DMA_IRQHandler+0xe18>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3e      	ldr	r2, [pc, #248]	; (800547c <HAL_DMA_IRQHandler+0xe1c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <HAL_DMA_IRQHandler+0xe20>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a3b      	ldr	r2, [pc, #236]	; (8005484 <HAL_DMA_IRQHandler+0xe24>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a39      	ldr	r2, [pc, #228]	; (8005488 <HAL_DMA_IRQHandler+0xe28>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a38      	ldr	r2, [pc, #224]	; (800548c <HAL_DMA_IRQHandler+0xe2c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a36      	ldr	r2, [pc, #216]	; (8005490 <HAL_DMA_IRQHandler+0xe30>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a35      	ldr	r2, [pc, #212]	; (8005494 <HAL_DMA_IRQHandler+0xe34>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a33      	ldr	r2, [pc, #204]	; (8005498 <HAL_DMA_IRQHandler+0xe38>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_DMA_IRQHandler+0xe3c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_DMA_IRQHandler+0xe40>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <HAL_DMA_IRQHandler+0xe44>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <HAL_DMA_IRQHandler+0xe48>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_DMA_IRQHandler+0xe4c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_DMA_IRQHandler+0xdaa>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <HAL_DMA_IRQHandler+0xe50>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d108      	bne.n	800541c <HAL_DMA_IRQHandler+0xdbc>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 021c 	bic.w	r2, r2, #28
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e007      	b.n	800542c <HAL_DMA_IRQHandler+0xdcc>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 020e 	bic.w	r2, r2, #14
 800542a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2201      	movs	r2, #1
 8005436:	409a      	lsls	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
 8005462:	e004      	b.n	800546e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005464:	bf00      	nop
 8005466:	e002      	b.n	800546e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800546c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800546e:	3728      	adds	r7, #40	; 0x28
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40020010 	.word	0x40020010
 8005478:	40020028 	.word	0x40020028
 800547c:	40020040 	.word	0x40020040
 8005480:	40020058 	.word	0x40020058
 8005484:	40020070 	.word	0x40020070
 8005488:	40020088 	.word	0x40020088
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400200b8 	.word	0x400200b8
 8005494:	40020410 	.word	0x40020410
 8005498:	40020428 	.word	0x40020428
 800549c:	40020440 	.word	0x40020440
 80054a0:	40020458 	.word	0x40020458
 80054a4:	40020470 	.word	0x40020470
 80054a8:	40020488 	.word	0x40020488
 80054ac:	400204a0 	.word	0x400204a0
 80054b0:	400204b8 	.word	0x400204b8

080054b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a84      	ldr	r2, [pc, #528]	; (80056fc <DMA_SetConfig+0x230>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d072      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a82      	ldr	r2, [pc, #520]	; (8005700 <DMA_SetConfig+0x234>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d06d      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a81      	ldr	r2, [pc, #516]	; (8005704 <DMA_SetConfig+0x238>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d068      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7f      	ldr	r2, [pc, #508]	; (8005708 <DMA_SetConfig+0x23c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d063      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7e      	ldr	r2, [pc, #504]	; (800570c <DMA_SetConfig+0x240>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d05e      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7c      	ldr	r2, [pc, #496]	; (8005710 <DMA_SetConfig+0x244>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d059      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7b      	ldr	r2, [pc, #492]	; (8005714 <DMA_SetConfig+0x248>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d054      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a79      	ldr	r2, [pc, #484]	; (8005718 <DMA_SetConfig+0x24c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d04f      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a78      	ldr	r2, [pc, #480]	; (800571c <DMA_SetConfig+0x250>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d04a      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a76      	ldr	r2, [pc, #472]	; (8005720 <DMA_SetConfig+0x254>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d045      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a75      	ldr	r2, [pc, #468]	; (8005724 <DMA_SetConfig+0x258>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d040      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a73      	ldr	r2, [pc, #460]	; (8005728 <DMA_SetConfig+0x25c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d03b      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a72      	ldr	r2, [pc, #456]	; (800572c <DMA_SetConfig+0x260>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d036      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a70      	ldr	r2, [pc, #448]	; (8005730 <DMA_SetConfig+0x264>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d031      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6f      	ldr	r2, [pc, #444]	; (8005734 <DMA_SetConfig+0x268>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d02c      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a6d      	ldr	r2, [pc, #436]	; (8005738 <DMA_SetConfig+0x26c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d027      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a6c      	ldr	r2, [pc, #432]	; (800573c <DMA_SetConfig+0x270>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d022      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a6a      	ldr	r2, [pc, #424]	; (8005740 <DMA_SetConfig+0x274>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01d      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a69      	ldr	r2, [pc, #420]	; (8005744 <DMA_SetConfig+0x278>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a67      	ldr	r2, [pc, #412]	; (8005748 <DMA_SetConfig+0x27c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a66      	ldr	r2, [pc, #408]	; (800574c <DMA_SetConfig+0x280>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a64      	ldr	r2, [pc, #400]	; (8005750 <DMA_SetConfig+0x284>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a63      	ldr	r2, [pc, #396]	; (8005754 <DMA_SetConfig+0x288>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <DMA_SetConfig+0x10a>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a61      	ldr	r2, [pc, #388]	; (8005758 <DMA_SetConfig+0x28c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d101      	bne.n	80055da <DMA_SetConfig+0x10e>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <DMA_SetConfig+0x110>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a3e      	ldr	r2, [pc, #248]	; (80056fc <DMA_SetConfig+0x230>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d04a      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <DMA_SetConfig+0x234>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d045      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a3b      	ldr	r2, [pc, #236]	; (8005704 <DMA_SetConfig+0x238>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d040      	beq.n	800569c <DMA_SetConfig+0x1d0>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3a      	ldr	r2, [pc, #232]	; (8005708 <DMA_SetConfig+0x23c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d03b      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a38      	ldr	r2, [pc, #224]	; (800570c <DMA_SetConfig+0x240>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d036      	beq.n	800569c <DMA_SetConfig+0x1d0>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a37      	ldr	r2, [pc, #220]	; (8005710 <DMA_SetConfig+0x244>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d031      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a35      	ldr	r2, [pc, #212]	; (8005714 <DMA_SetConfig+0x248>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02c      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a34      	ldr	r2, [pc, #208]	; (8005718 <DMA_SetConfig+0x24c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d027      	beq.n	800569c <DMA_SetConfig+0x1d0>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a32      	ldr	r2, [pc, #200]	; (800571c <DMA_SetConfig+0x250>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d022      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a31      	ldr	r2, [pc, #196]	; (8005720 <DMA_SetConfig+0x254>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d01d      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2f      	ldr	r2, [pc, #188]	; (8005724 <DMA_SetConfig+0x258>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <DMA_SetConfig+0x1d0>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2e      	ldr	r2, [pc, #184]	; (8005728 <DMA_SetConfig+0x25c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2c      	ldr	r2, [pc, #176]	; (800572c <DMA_SetConfig+0x260>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <DMA_SetConfig+0x1d0>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <DMA_SetConfig+0x264>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a29      	ldr	r2, [pc, #164]	; (8005734 <DMA_SetConfig+0x268>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <DMA_SetConfig+0x1d0>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a28      	ldr	r2, [pc, #160]	; (8005738 <DMA_SetConfig+0x26c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d101      	bne.n	80056a0 <DMA_SetConfig+0x1d4>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <DMA_SetConfig+0x1d6>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d05a      	beq.n	800575c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	223f      	movs	r2, #63	; 0x3f
 80056b0:	409a      	lsls	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d108      	bne.n	80056e8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056e6:	e087      	b.n	80057f8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
}
 80056f8:	e07e      	b.n	80057f8 <DMA_SetConfig+0x32c>
 80056fa:	bf00      	nop
 80056fc:	40020010 	.word	0x40020010
 8005700:	40020028 	.word	0x40020028
 8005704:	40020040 	.word	0x40020040
 8005708:	40020058 	.word	0x40020058
 800570c:	40020070 	.word	0x40020070
 8005710:	40020088 	.word	0x40020088
 8005714:	400200a0 	.word	0x400200a0
 8005718:	400200b8 	.word	0x400200b8
 800571c:	40020410 	.word	0x40020410
 8005720:	40020428 	.word	0x40020428
 8005724:	40020440 	.word	0x40020440
 8005728:	40020458 	.word	0x40020458
 800572c:	40020470 	.word	0x40020470
 8005730:	40020488 	.word	0x40020488
 8005734:	400204a0 	.word	0x400204a0
 8005738:	400204b8 	.word	0x400204b8
 800573c:	58025408 	.word	0x58025408
 8005740:	5802541c 	.word	0x5802541c
 8005744:	58025430 	.word	0x58025430
 8005748:	58025444 	.word	0x58025444
 800574c:	58025458 	.word	0x58025458
 8005750:	5802546c 	.word	0x5802546c
 8005754:	58025480 	.word	0x58025480
 8005758:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <DMA_SetConfig+0x338>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d022      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a27      	ldr	r2, [pc, #156]	; (8005808 <DMA_SetConfig+0x33c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d01d      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a25      	ldr	r2, [pc, #148]	; (800580c <DMA_SetConfig+0x340>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d018      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a24      	ldr	r2, [pc, #144]	; (8005810 <DMA_SetConfig+0x344>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d013      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <DMA_SetConfig+0x348>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00e      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <DMA_SetConfig+0x34c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d009      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <DMA_SetConfig+0x350>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <DMA_SetConfig+0x2e0>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <DMA_SetConfig+0x354>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d101      	bne.n	80057b0 <DMA_SetConfig+0x2e4>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <DMA_SetConfig+0x2e6>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d020      	beq.n	80057f8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2201      	movs	r2, #1
 80057c0:	409a      	lsls	r2, r3
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d108      	bne.n	80057e8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	60da      	str	r2, [r3, #12]
}
 80057e6:	e007      	b.n	80057f8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	58025408 	.word	0x58025408
 8005808:	5802541c 	.word	0x5802541c
 800580c:	58025430 	.word	0x58025430
 8005810:	58025444 	.word	0x58025444
 8005814:	58025458 	.word	0x58025458
 8005818:	5802546c 	.word	0x5802546c
 800581c:	58025480 	.word	0x58025480
 8005820:	58025494 	.word	0x58025494

08005824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a42      	ldr	r2, [pc, #264]	; (800593c <DMA_CalcBaseAndBitshift+0x118>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d04a      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a41      	ldr	r2, [pc, #260]	; (8005940 <DMA_CalcBaseAndBitshift+0x11c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d045      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <DMA_CalcBaseAndBitshift+0x120>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d040      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a3e      	ldr	r2, [pc, #248]	; (8005948 <DMA_CalcBaseAndBitshift+0x124>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d03b      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a3c      	ldr	r2, [pc, #240]	; (800594c <DMA_CalcBaseAndBitshift+0x128>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d036      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <DMA_CalcBaseAndBitshift+0x12c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d031      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a39      	ldr	r2, [pc, #228]	; (8005954 <DMA_CalcBaseAndBitshift+0x130>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02c      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a38      	ldr	r2, [pc, #224]	; (8005958 <DMA_CalcBaseAndBitshift+0x134>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d027      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a36      	ldr	r2, [pc, #216]	; (800595c <DMA_CalcBaseAndBitshift+0x138>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d022      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a35      	ldr	r2, [pc, #212]	; (8005960 <DMA_CalcBaseAndBitshift+0x13c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d01d      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a33      	ldr	r2, [pc, #204]	; (8005964 <DMA_CalcBaseAndBitshift+0x140>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a32      	ldr	r2, [pc, #200]	; (8005968 <DMA_CalcBaseAndBitshift+0x144>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a30      	ldr	r2, [pc, #192]	; (800596c <DMA_CalcBaseAndBitshift+0x148>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <DMA_CalcBaseAndBitshift+0x14c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2d      	ldr	r2, [pc, #180]	; (8005974 <DMA_CalcBaseAndBitshift+0x150>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <DMA_CalcBaseAndBitshift+0xa8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <DMA_CalcBaseAndBitshift+0x154>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d101      	bne.n	80058d0 <DMA_CalcBaseAndBitshift+0xac>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <DMA_CalcBaseAndBitshift+0xae>
 80058d0:	2300      	movs	r3, #0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d024      	beq.n	8005920 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	3b10      	subs	r3, #16
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <DMA_CalcBaseAndBitshift+0x158>)
 80058e0:	fba2 2303 	umull	r2, r3, r2, r3
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	4a24      	ldr	r2, [pc, #144]	; (8005980 <DMA_CalcBaseAndBitshift+0x15c>)
 80058f0:	5cd3      	ldrb	r3, [r2, r3]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d908      	bls.n	8005910 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <DMA_CalcBaseAndBitshift+0x160>)
 8005906:	4013      	ands	r3, r2
 8005908:	1d1a      	adds	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	659a      	str	r2, [r3, #88]	; 0x58
 800590e:	e00d      	b.n	800592c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <DMA_CalcBaseAndBitshift+0x160>)
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6593      	str	r3, [r2, #88]	; 0x58
 800591e:	e005      	b.n	800592c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8
 800597c:	aaaaaaab 	.word	0xaaaaaaab
 8005980:	0800c248 	.word	0x0800c248
 8005984:	fffffc00 	.word	0xfffffc00

08005988 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d120      	bne.n	80059de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d858      	bhi.n	8005a56 <DMA_CheckFifoParam+0xce>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <DMA_CheckFifoParam+0x24>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059bd 	.word	0x080059bd
 80059b0:	080059cf 	.word	0x080059cf
 80059b4:	080059bd 	.word	0x080059bd
 80059b8:	08005a57 	.word	0x08005a57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d048      	beq.n	8005a5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059cc:	e045      	b.n	8005a5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059d6:	d142      	bne.n	8005a5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059dc:	e03f      	b.n	8005a5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e6:	d123      	bne.n	8005a30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d838      	bhi.n	8005a62 <DMA_CheckFifoParam+0xda>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <DMA_CheckFifoParam+0x70>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a0f 	.word	0x08005a0f
 8005a00:	08005a09 	.word	0x08005a09
 8005a04:	08005a21 	.word	0x08005a21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0c:	e030      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d025      	beq.n	8005a66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a1e:	e022      	b.n	8005a66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a28:	d11f      	bne.n	8005a6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a2e:	e01c      	b.n	8005a6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d902      	bls.n	8005a3e <DMA_CheckFifoParam+0xb6>
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d003      	beq.n	8005a44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005a3c:	e018      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
        break;
 8005a42:	e015      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00e      	beq.n	8005a6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
    break;
 8005a54:	e00b      	b.n	8005a6e <DMA_CheckFifoParam+0xe6>
        break;
 8005a56:	bf00      	nop
 8005a58:	e00a      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e008      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e006      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        break;
 8005a62:	bf00      	nop
 8005a64:	e004      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <DMA_CheckFifoParam+0xe8>
    break;
 8005a6e:	bf00      	nop
    }
  }

  return status;
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a38      	ldr	r2, [pc, #224]	; (8005b74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d022      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a36      	ldr	r2, [pc, #216]	; (8005b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01d      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a35      	ldr	r2, [pc, #212]	; (8005b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a32      	ldr	r2, [pc, #200]	; (8005b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a30      	ldr	r2, [pc, #192]	; (8005b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2f      	ldr	r2, [pc, #188]	; (8005b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2d      	ldr	r2, [pc, #180]	; (8005b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d101      	bne.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01a      	beq.n	8005b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	3b08      	subs	r3, #8
 8005af0:	4a28      	ldr	r2, [pc, #160]	; (8005b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2201      	movs	r2, #1
 8005b16:	409a      	lsls	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b1c:	e024      	b.n	8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	3b10      	subs	r3, #16
 8005b26:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d806      	bhi.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d902      	bls.n	8005b46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3308      	adds	r3, #8
 8005b44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4b18      	ldr	r3, [pc, #96]	; (8005bac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005b58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2201      	movs	r2, #1
 8005b62:	409a      	lsls	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	58025408 	.word	0x58025408
 8005b78:	5802541c 	.word	0x5802541c
 8005b7c:	58025430 	.word	0x58025430
 8005b80:	58025444 	.word	0x58025444
 8005b84:	58025458 	.word	0x58025458
 8005b88:	5802546c 	.word	0x5802546c
 8005b8c:	58025480 	.word	0x58025480
 8005b90:	58025494 	.word	0x58025494
 8005b94:	cccccccd 	.word	0xcccccccd
 8005b98:	16009600 	.word	0x16009600
 8005b9c:	58025880 	.word	0x58025880
 8005ba0:	aaaaaaab 	.word	0xaaaaaaab
 8005ba4:	400204b8 	.word	0x400204b8
 8005ba8:	4002040f 	.word	0x4002040f
 8005bac:	10008200 	.word	0x10008200
 8005bb0:	40020880 	.word	0x40020880

08005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d04a      	beq.n	8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d847      	bhi.n	8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01d      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005c3c:	671a      	str	r2, [r3, #112]	; 0x70
 8005c3e:	e009      	b.n	8005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a11      	ldr	r2, [pc, #68]	; (8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005c52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	2201      	movs	r2, #1
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	58025408 	.word	0x58025408
 8005c70:	5802541c 	.word	0x5802541c
 8005c74:	58025430 	.word	0x58025430
 8005c78:	58025444 	.word	0x58025444
 8005c7c:	58025458 	.word	0x58025458
 8005c80:	5802546c 	.word	0x5802546c
 8005c84:	58025480 	.word	0x58025480
 8005c88:	58025494 	.word	0x58025494
 8005c8c:	1600963f 	.word	0x1600963f
 8005c90:	58025940 	.word	0x58025940
 8005c94:	1000823f 	.word	0x1000823f
 8005c98:	40020940 	.word	0x40020940

08005c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005caa:	4b89      	ldr	r3, [pc, #548]	; (8005ed0 <HAL_GPIO_Init+0x234>)
 8005cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cae:	e194      	b.n	8005fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8186 	beq.w	8005fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d00b      	beq.n	8005ce8 <HAL_GPIO_Init+0x4c>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d007      	beq.n	8005ce8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cdc:	2b11      	cmp	r3, #17
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b12      	cmp	r3, #18
 8005ce6:	d130      	bne.n	8005d4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d1e:	2201      	movs	r2, #1
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	f003 0201 	and.w	r2, r3, #1
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_Init+0xee>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b12      	cmp	r3, #18
 8005d88:	d123      	bne.n	8005dd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	08da      	lsrs	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3208      	adds	r2, #8
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	220f      	movs	r2, #15
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4013      	ands	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	08da      	lsrs	r2, r3, #3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3208      	adds	r2, #8
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	2203      	movs	r2, #3
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0203 	and.w	r2, r3, #3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80e0 	beq.w	8005fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e14:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <HAL_GPIO_Init+0x238>)
 8005e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e1a:	4a2e      	ldr	r2, [pc, #184]	; (8005ed4 <HAL_GPIO_Init+0x238>)
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e24:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <HAL_GPIO_Init+0x238>)
 8005e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e32:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <HAL_GPIO_Init+0x23c>)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	3302      	adds	r3, #2
 8005e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	220f      	movs	r2, #15
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <HAL_GPIO_Init+0x240>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d052      	beq.n	8005f04 <HAL_GPIO_Init+0x268>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <HAL_GPIO_Init+0x244>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d031      	beq.n	8005eca <HAL_GPIO_Init+0x22e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_GPIO_Init+0x248>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d02b      	beq.n	8005ec6 <HAL_GPIO_Init+0x22a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <HAL_GPIO_Init+0x24c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d025      	beq.n	8005ec2 <HAL_GPIO_Init+0x226>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <HAL_GPIO_Init+0x250>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01f      	beq.n	8005ebe <HAL_GPIO_Init+0x222>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_GPIO_Init+0x254>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d019      	beq.n	8005eba <HAL_GPIO_Init+0x21e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_GPIO_Init+0x258>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_GPIO_Init+0x21a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <HAL_GPIO_Init+0x25c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00d      	beq.n	8005eb2 <HAL_GPIO_Init+0x216>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a18      	ldr	r2, [pc, #96]	; (8005efc <HAL_GPIO_Init+0x260>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <HAL_GPIO_Init+0x212>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <HAL_GPIO_Init+0x264>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_GPIO_Init+0x20e>
 8005ea6:	2309      	movs	r3, #9
 8005ea8:	e02d      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eaa:	230a      	movs	r3, #10
 8005eac:	e02b      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	e029      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	e027      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eb6:	2306      	movs	r3, #6
 8005eb8:	e025      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eba:	2305      	movs	r3, #5
 8005ebc:	e023      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	e021      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e01f      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e01d      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e01b      	b.n	8005f06 <HAL_GPIO_Init+0x26a>
 8005ece:	bf00      	nop
 8005ed0:	58000080 	.word	0x58000080
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	58000400 	.word	0x58000400
 8005edc:	58020000 	.word	0x58020000
 8005ee0:	58020400 	.word	0x58020400
 8005ee4:	58020800 	.word	0x58020800
 8005ee8:	58020c00 	.word	0x58020c00
 8005eec:	58021000 	.word	0x58021000
 8005ef0:	58021400 	.word	0x58021400
 8005ef4:	58021800 	.word	0x58021800
 8005ef8:	58021c00 	.word	0x58021c00
 8005efc:	58022000 	.word	0x58022000
 8005f00:	58022400 	.word	0x58022400
 8005f04:	2300      	movs	r3, #0
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	f002 0203 	and.w	r2, r2, #3
 8005f0c:	0092      	lsls	r2, r2, #2
 8005f0e:	4093      	lsls	r3, r2
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f16:	4938      	ldr	r1, [pc, #224]	; (8005ff8 <HAL_GPIO_Init+0x35c>)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4013      	ands	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f ae63 	bne.w	8005cb0 <HAL_GPIO_Init+0x14>
  }
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	3724      	adds	r7, #36	; 0x24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	58000400 	.word	0x58000400

08005ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	887b      	ldrh	r3, [r7, #2]
 800600e:	4013      	ands	r3, r2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e001      	b.n	800601e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
 8006038:	4613      	mov	r3, r2
 800603a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800603c:	787b      	ldrb	r3, [r7, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006042:	887a      	ldrh	r2, [r7, #2]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006048:	e003      	b.n	8006052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	041a      	lsls	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	619a      	str	r2, [r3, #24]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e041      	b.n	80060f4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006078:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f245 5255 	movw	r2, #21845	; 0x5555
 8006082:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6852      	ldr	r2, [r2, #4]
 800608c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6892      	ldr	r2, [r2, #8]
 8006096:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006098:	f7fc fec2 	bl	8002e20 <HAL_GetTick>
 800609c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800609e:	e00f      	b.n	80060c0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80060a0:	f7fc febe 	bl	8002e20 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b30      	cmp	r3, #48	; 0x30
 80060ac:	d908      	bls.n	80060c0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e019      	b.n	80060f4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e8      	bne.n	80060a0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d005      	beq.n	80060e8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68d2      	ldr	r2, [r2, #12]
 80060e4:	611a      	str	r2, [r3, #16]
 80060e6:	e004      	b.n	80060f2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80060f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800610c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006124:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d00a      	beq.n	8006146 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006130:	4b16      	ldr	r3, [pc, #88]	; (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d001      	beq.n	8006142 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e01f      	b.n	8006182 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	e01d      	b.n	8006182 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 0207 	bic.w	r2, r3, #7
 800614e:	490f      	ldr	r1, [pc, #60]	; (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4313      	orrs	r3, r2
 8006154:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006156:	f7fc fe63 	bl	8002e20 <HAL_GetTick>
 800615a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800615c:	e009      	b.n	8006172 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800615e:	f7fc fe5f 	bl	8002e20 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616c:	d901      	bls.n	8006172 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e007      	b.n	8006182 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <HAL_PWREx_ConfigSupply+0x70>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800617a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617e:	d1ee      	bne.n	800615e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	58024800 	.word	0x58024800

08006190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e3ff      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8087 	beq.w	80062be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b0:	4b99      	ldr	r3, [pc, #612]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ba:	4b97      	ldr	r3, [pc, #604]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d007      	beq.n	80061d6 <HAL_RCC_OscConfig+0x46>
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b18      	cmp	r3, #24
 80061ca:	d110      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d10b      	bne.n	80061ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d6:	4b90      	ldr	r3, [pc, #576]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d06c      	beq.n	80062bc <HAL_RCC_OscConfig+0x12c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d168      	bne.n	80062bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e3d9      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d106      	bne.n	8006206 <HAL_RCC_OscConfig+0x76>
 80061f8:	4b87      	ldr	r3, [pc, #540]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a86      	ldr	r2, [pc, #536]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e02e      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x98>
 800620e:	4b82      	ldr	r3, [pc, #520]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a81      	ldr	r2, [pc, #516]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b7f      	ldr	r3, [pc, #508]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7e      	ldr	r2, [pc, #504]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e01d      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0xbc>
 8006232:	4b79      	ldr	r3, [pc, #484]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a78      	ldr	r2, [pc, #480]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b76      	ldr	r3, [pc, #472]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a75      	ldr	r2, [pc, #468]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0xd4>
 800624c:	4b72      	ldr	r3, [pc, #456]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a71      	ldr	r2, [pc, #452]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b6f      	ldr	r3, [pc, #444]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a6e      	ldr	r2, [pc, #440]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 800625e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d013      	beq.n	8006294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fc fdd8 	bl	8002e20 <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006274:	f7fc fdd4 	bl	8002e20 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b64      	cmp	r3, #100	; 0x64
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e38d      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006286:	4b64      	ldr	r3, [pc, #400]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0xe4>
 8006292:	e014      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7fc fdc4 	bl	8002e20 <HAL_GetTick>
 8006298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800629c:	f7fc fdc0 	bl	8002e20 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	; 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e379      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ae:	4b5a      	ldr	r3, [pc, #360]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x10c>
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80ae 	beq.w	8006428 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062cc:	4b52      	ldr	r3, [pc, #328]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062d6:	4b50      	ldr	r3, [pc, #320]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <HAL_RCC_OscConfig+0x162>
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	2b18      	cmp	r3, #24
 80062e6:	d13a      	bne.n	800635e <HAL_RCC_OscConfig+0x1ce>
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d135      	bne.n	800635e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f2:	4b49      	ldr	r3, [pc, #292]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <HAL_RCC_OscConfig+0x17a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e34b      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630a:	f7fc fd95 	bl	8002e38 <HAL_GetREVID>
 800630e:	4603      	mov	r3, r0
 8006310:	f241 0203 	movw	r2, #4099	; 0x1003
 8006314:	4293      	cmp	r3, r2
 8006316:	d817      	bhi.n	8006348 <HAL_RCC_OscConfig+0x1b8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	d108      	bne.n	8006332 <HAL_RCC_OscConfig+0x1a2>
 8006320:	4b3d      	ldr	r3, [pc, #244]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006328:	4a3b      	ldr	r2, [pc, #236]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006330:	e07a      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006332:	4b39      	ldr	r3, [pc, #228]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	031b      	lsls	r3, r3, #12
 8006340:	4935      	ldr	r1, [pc, #212]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006346:	e06f      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b33      	ldr	r3, [pc, #204]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	4930      	ldr	r1, [pc, #192]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800635c:	e064      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d045      	beq.n	80063f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006366:	4b2c      	ldr	r3, [pc, #176]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 0219 	bic.w	r2, r3, #25
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	4929      	ldr	r1, [pc, #164]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fc fd52 	bl	8002e20 <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006380:	f7fc fd4e 	bl	8002e20 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e307      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639e:	f7fc fd4b 	bl	8002e38 <HAL_GetREVID>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d817      	bhi.n	80063dc <HAL_RCC_OscConfig+0x24c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d108      	bne.n	80063c6 <HAL_RCC_OscConfig+0x236>
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c2:	6053      	str	r3, [r2, #4]
 80063c4:	e030      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	031b      	lsls	r3, r3, #12
 80063d4:	4910      	ldr	r1, [pc, #64]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	604b      	str	r3, [r1, #4]
 80063da:	e025      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
 80063dc:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	490b      	ldr	r1, [pc, #44]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	604b      	str	r3, [r1, #4]
 80063f0:	e01a      	b.n	8006428 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <HAL_RCC_OscConfig+0x288>)
 80063f8:	f023 0301 	bic.w	r3, r3, #1
 80063fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fe:	f7fc fd0f 	bl	8002e20 <HAL_GetTick>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006406:	f7fc fd0b 	bl	8002e20 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d903      	bls.n	800641c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e2c4      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
 8006418:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800641c:	4ba4      	ldr	r3, [pc, #656]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ee      	bne.n	8006406 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80a9 	beq.w	8006588 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006436:	4b9e      	ldr	r3, [pc, #632]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006440:	4b9b      	ldr	r3, [pc, #620]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d007      	beq.n	800645c <HAL_RCC_OscConfig+0x2cc>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b18      	cmp	r3, #24
 8006450:	d13a      	bne.n	80064c8 <HAL_RCC_OscConfig+0x338>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d135      	bne.n	80064c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800645c:	4b94      	ldr	r3, [pc, #592]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_RCC_OscConfig+0x2e4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d001      	beq.n	8006474 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e296      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006474:	f7fc fce0 	bl	8002e38 <HAL_GetREVID>
 8006478:	4603      	mov	r3, r0
 800647a:	f241 0203 	movw	r2, #4099	; 0x1003
 800647e:	4293      	cmp	r3, r2
 8006480:	d817      	bhi.n	80064b2 <HAL_RCC_OscConfig+0x322>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	2b20      	cmp	r3, #32
 8006488:	d108      	bne.n	800649c <HAL_RCC_OscConfig+0x30c>
 800648a:	4b89      	ldr	r3, [pc, #548]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006492:	4a87      	ldr	r2, [pc, #540]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006498:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800649a:	e075      	b.n	8006588 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800649c:	4b84      	ldr	r3, [pc, #528]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	069b      	lsls	r3, r3, #26
 80064aa:	4981      	ldr	r1, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064b0:	e06a      	b.n	8006588 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064b2:	4b7f      	ldr	r3, [pc, #508]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	497b      	ldr	r1, [pc, #492]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064c6:	e05f      	b.n	8006588 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d042      	beq.n	8006556 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064d0:	4b77      	ldr	r3, [pc, #476]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a76      	ldr	r2, [pc, #472]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fc fca0 	bl	8002e20 <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064e4:	f7fc fc9c 	bl	8002e20 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e255      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064f6:	4b6e      	ldr	r3, [pc, #440]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006502:	f7fc fc99 	bl	8002e38 <HAL_GetREVID>
 8006506:	4603      	mov	r3, r0
 8006508:	f241 0203 	movw	r2, #4099	; 0x1003
 800650c:	4293      	cmp	r3, r2
 800650e:	d817      	bhi.n	8006540 <HAL_RCC_OscConfig+0x3b0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	2b20      	cmp	r3, #32
 8006516:	d108      	bne.n	800652a <HAL_RCC_OscConfig+0x39a>
 8006518:	4b65      	ldr	r3, [pc, #404]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006520:	4a63      	ldr	r2, [pc, #396]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006526:	6053      	str	r3, [r2, #4]
 8006528:	e02e      	b.n	8006588 <HAL_RCC_OscConfig+0x3f8>
 800652a:	4b61      	ldr	r3, [pc, #388]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	069b      	lsls	r3, r3, #26
 8006538:	495d      	ldr	r1, [pc, #372]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800653a:	4313      	orrs	r3, r2
 800653c:	604b      	str	r3, [r1, #4]
 800653e:	e023      	b.n	8006588 <HAL_RCC_OscConfig+0x3f8>
 8006540:	4b5b      	ldr	r3, [pc, #364]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	4958      	ldr	r1, [pc, #352]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006550:	4313      	orrs	r3, r2
 8006552:	60cb      	str	r3, [r1, #12]
 8006554:	e018      	b.n	8006588 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006556:	4b56      	ldr	r3, [pc, #344]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800655c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006562:	f7fc fc5d 	bl	8002e20 <HAL_GetTick>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800656a:	f7fc fc59 	bl	8002e20 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e212      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800657c:	4b4c      	ldr	r3, [pc, #304]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d036      	beq.n	8006602 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d019      	beq.n	80065d0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800659c:	4b44      	ldr	r3, [pc, #272]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800659e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a0:	4a43      	ldr	r2, [pc, #268]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a8:	f7fc fc3a 	bl	8002e20 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b0:	f7fc fc36 	bl	8002e20 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e1ef      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065c2:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80065c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x420>
 80065ce:	e018      	b.n	8006602 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80065d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d4:	4a36      	ldr	r2, [pc, #216]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065dc:	f7fc fc20 	bl	8002e20 <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e4:	f7fc fc1c 	bl	8002e20 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e1d5      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 80065f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d036      	beq.n	800667c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d019      	beq.n	800664a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006616:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800661c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006620:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006622:	f7fc fbfd 	bl	8002e20 <HAL_GetTick>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800662a:	f7fc fbf9 	bl	8002e20 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e1b2      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800663c:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x49a>
 8006648:	e018      	b.n	800667c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800664a:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006654:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006656:	f7fc fbe3 	bl	8002e20 <HAL_GetTick>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800665e:	f7fc fbdf 	bl	8002e20 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e198      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <HAL_RCC_OscConfig+0x520>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f0      	bne.n	800665e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8085 	beq.w	8006794 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800668a:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <HAL_RCC_OscConfig+0x524>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <HAL_RCC_OscConfig+0x524>)
 8006690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006696:	f7fc fbc3 	bl	8002e20 <HAL_GetTick>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800669c:	e00c      	b.n	80066b8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800669e:	f7fc fbbf 	bl	8002e20 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b64      	cmp	r3, #100	; 0x64
 80066aa:	d905      	bls.n	80066b8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e178      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
 80066b0:	58024400 	.word	0x58024400
 80066b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b8:	4b96      	ldr	r3, [pc, #600]	; (8006914 <HAL_RCC_OscConfig+0x784>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0ec      	beq.n	800669e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d106      	bne.n	80066da <HAL_RCC_OscConfig+0x54a>
 80066cc:	4b92      	ldr	r3, [pc, #584]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4a91      	ldr	r2, [pc, #580]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
 80066d8:	e02d      	b.n	8006736 <HAL_RCC_OscConfig+0x5a6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10c      	bne.n	80066fc <HAL_RCC_OscConfig+0x56c>
 80066e2:	4b8d      	ldr	r3, [pc, #564]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a8c      	ldr	r2, [pc, #560]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	6713      	str	r3, [r2, #112]	; 0x70
 80066ee:	4b8a      	ldr	r3, [pc, #552]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	4a89      	ldr	r2, [pc, #548]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80066f4:	f023 0304 	bic.w	r3, r3, #4
 80066f8:	6713      	str	r3, [r2, #112]	; 0x70
 80066fa:	e01c      	b.n	8006736 <HAL_RCC_OscConfig+0x5a6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2b05      	cmp	r3, #5
 8006702:	d10c      	bne.n	800671e <HAL_RCC_OscConfig+0x58e>
 8006704:	4b84      	ldr	r3, [pc, #528]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006708:	4a83      	ldr	r2, [pc, #524]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800670a:	f043 0304 	orr.w	r3, r3, #4
 800670e:	6713      	str	r3, [r2, #112]	; 0x70
 8006710:	4b81      	ldr	r3, [pc, #516]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	4a80      	ldr	r2, [pc, #512]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6713      	str	r3, [r2, #112]	; 0x70
 800671c:	e00b      	b.n	8006736 <HAL_RCC_OscConfig+0x5a6>
 800671e:	4b7e      	ldr	r3, [pc, #504]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a7d      	ldr	r2, [pc, #500]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
 800672a:	4b7b      	ldr	r3, [pc, #492]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	4a7a      	ldr	r2, [pc, #488]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006730:	f023 0304 	bic.w	r3, r3, #4
 8006734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d015      	beq.n	800676a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fc fb6f 	bl	8002e20 <HAL_GetTick>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006744:	e00a      	b.n	800675c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006746:	f7fc fb6b 	bl	8002e20 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	f241 3288 	movw	r2, #5000	; 0x1388
 8006754:	4293      	cmp	r3, r2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e122      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800675c:	4b6e      	ldr	r3, [pc, #440]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0ee      	beq.n	8006746 <HAL_RCC_OscConfig+0x5b6>
 8006768:	e014      	b.n	8006794 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676a:	f7fc fb59 	bl	8002e20 <HAL_GetTick>
 800676e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006770:	e00a      	b.n	8006788 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fc fb55 	bl	8002e20 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e10c      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006788:	4b63      	ldr	r3, [pc, #396]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1ee      	bne.n	8006772 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8101 	beq.w	80069a0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800679e:	4b5e      	ldr	r3, [pc, #376]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a6:	2b18      	cmp	r3, #24
 80067a8:	f000 80bc 	beq.w	8006924 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	f040 8095 	bne.w	80068e0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b6:	4b58      	ldr	r3, [pc, #352]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a57      	ldr	r2, [pc, #348]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80067bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fc fb2d 	bl	8002e20 <HAL_GetTick>
 80067c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fc fb29 	bl	8002e20 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e0e2      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067dc:	4b4e      	ldr	r3, [pc, #312]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e8:	4b4b      	ldr	r3, [pc, #300]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80067ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ec:	4b4b      	ldr	r3, [pc, #300]	; (800691c <HAL_RCC_OscConfig+0x78c>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067f8:	0112      	lsls	r2, r2, #4
 80067fa:	430a      	orrs	r2, r1
 80067fc:	4946      	ldr	r1, [pc, #280]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	628b      	str	r3, [r1, #40]	; 0x28
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	3b01      	subs	r3, #1
 8006808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006810:	3b01      	subs	r3, #1
 8006812:	025b      	lsls	r3, r3, #9
 8006814:	b29b      	uxth	r3, r3
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	3b01      	subs	r3, #1
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	3b01      	subs	r3, #1
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006832:	4939      	ldr	r1, [pc, #228]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006834:	4313      	orrs	r3, r2
 8006836:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006838:	4b37      	ldr	r3, [pc, #220]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	4a36      	ldr	r2, [pc, #216]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006844:	4b34      	ldr	r3, [pc, #208]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <HAL_RCC_OscConfig+0x790>)
 800684a:	4013      	ands	r3, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006850:	00d2      	lsls	r2, r2, #3
 8006852:	4931      	ldr	r1, [pc, #196]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006854:	4313      	orrs	r3, r2
 8006856:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006858:	4b2f      	ldr	r3, [pc, #188]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	f023 020c 	bic.w	r2, r3, #12
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	492c      	ldr	r1, [pc, #176]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006866:	4313      	orrs	r3, r2
 8006868:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800686a:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	f023 0202 	bic.w	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	4928      	ldr	r1, [pc, #160]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006878:	4313      	orrs	r3, r2
 800687a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800687c:	4b26      	ldr	r3, [pc, #152]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006888:	4b23      	ldr	r3, [pc, #140]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a22      	ldr	r2, [pc, #136]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800688e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006894:	4b20      	ldr	r3, [pc, #128]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 800689a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800689e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80068a0:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a1c      	ldr	r2, [pc, #112]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b8:	f7fc fab2 	bl	8002e20 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fc faae 	bl	8002e20 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e067      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x730>
 80068de:	e05f      	b.n	80069a0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 80068e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fc fa98 	bl	8002e20 <HAL_GetTick>
 80068f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f4:	f7fc fa94 	bl	8002e20 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e04d      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006906:	4b04      	ldr	r3, [pc, #16]	; (8006918 <HAL_RCC_OscConfig+0x788>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x764>
 8006912:	e045      	b.n	80069a0 <HAL_RCC_OscConfig+0x810>
 8006914:	58024800 	.word	0x58024800
 8006918:	58024400 	.word	0x58024400
 800691c:	fffffc0c 	.word	0xfffffc0c
 8006920:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006924:	4b21      	ldr	r3, [pc, #132]	; (80069ac <HAL_RCC_OscConfig+0x81c>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800692a:	4b20      	ldr	r3, [pc, #128]	; (80069ac <HAL_RCC_OscConfig+0x81c>)
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b01      	cmp	r3, #1
 8006936:	d031      	beq.n	800699c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0203 	and.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006942:	429a      	cmp	r2, r3
 8006944:	d12a      	bne.n	800699c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006952:	429a      	cmp	r2, r3
 8006954:	d122      	bne.n	800699c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d11a      	bne.n	800699c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	0a5b      	lsrs	r3, r3, #9
 800696a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006972:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d111      	bne.n	800699c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d108      	bne.n	800699c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d001      	beq.n	80069a0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3730      	adds	r7, #48	; 0x30
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	58024400 	.word	0x58024400

080069b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e19c      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c4:	4b8a      	ldr	r3, [pc, #552]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d910      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b87      	ldr	r3, [pc, #540]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 020f 	bic.w	r2, r3, #15
 80069da:	4985      	ldr	r1, [pc, #532]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e2:	4b83      	ldr	r3, [pc, #524]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e184      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	4b7b      	ldr	r3, [pc, #492]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d908      	bls.n	8006a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a10:	4b78      	ldr	r3, [pc, #480]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4975      	ldr	r1, [pc, #468]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d010      	beq.n	8006a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	4b70      	ldr	r3, [pc, #448]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d908      	bls.n	8006a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a3e:	4b6d      	ldr	r3, [pc, #436]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	496a      	ldr	r1, [pc, #424]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0310 	and.w	r3, r3, #16
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	4b64      	ldr	r3, [pc, #400]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d908      	bls.n	8006a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a6c:	4b61      	ldr	r3, [pc, #388]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	495e      	ldr	r1, [pc, #376]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d010      	beq.n	8006aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69da      	ldr	r2, [r3, #28]
 8006a8e:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d908      	bls.n	8006aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a9a:	4b56      	ldr	r3, [pc, #344]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	4953      	ldr	r1, [pc, #332]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	4b4d      	ldr	r3, [pc, #308]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d908      	bls.n	8006ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac8:	4b4a      	ldr	r3, [pc, #296]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f023 020f 	bic.w	r2, r3, #15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4947      	ldr	r1, [pc, #284]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d055      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ae6:	4b43      	ldr	r3, [pc, #268]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4940      	ldr	r1, [pc, #256]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b00:	4b3c      	ldr	r3, [pc, #240]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d121      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0f6      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d107      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b18:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d115      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0ea      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d107      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b30:	4b30      	ldr	r3, [pc, #192]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0de      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b40:	4b2c      	ldr	r3, [pc, #176]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0d6      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f023 0207 	bic.w	r2, r3, #7
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4925      	ldr	r1, [pc, #148]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b62:	f7fc f95d 	bl	8002e20 <HAL_GetTick>
 8006b66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6a:	f7fc f959 	bl	8002e20 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0be      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b80:	4b1c      	ldr	r3, [pc, #112]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d1eb      	bne.n	8006b6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d010      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d208      	bcs.n	8006bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f023 020f 	bic.w	r2, r3, #15
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	490e      	ldr	r1, [pc, #56]	; (8006bf4 <HAL_RCC_ClockConfig+0x244>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d214      	bcs.n	8006bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 020f 	bic.w	r2, r3, #15
 8006bd6:	4906      	ldr	r1, [pc, #24]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <HAL_RCC_ClockConfig+0x240>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e086      	b.n	8006cfe <HAL_RCC_ClockConfig+0x34e>
 8006bf0:	52002000 	.word	0x52002000
 8006bf4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	4b3f      	ldr	r3, [pc, #252]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d208      	bcs.n	8006c26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c14:	4b3c      	ldr	r3, [pc, #240]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	4939      	ldr	r1, [pc, #228]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d010      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	4b34      	ldr	r3, [pc, #208]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d208      	bcs.n	8006c54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c42:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	492e      	ldr	r1, [pc, #184]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	4b28      	ldr	r3, [pc, #160]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d208      	bcs.n	8006c82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c70:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	4922      	ldr	r1, [pc, #136]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d208      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	4917      	ldr	r1, [pc, #92]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cb0:	f000 f834 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	4912      	ldr	r1, [pc, #72]	; (8006d0c <HAL_RCC_ClockConfig+0x35c>)
 8006cc2:	5ccb      	ldrb	r3, [r1, r3]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <HAL_RCC_ClockConfig+0x358>)
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <HAL_RCC_ClockConfig+0x35c>)
 8006cd8:	5cd3      	ldrb	r3, [r2, r3]
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce4:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <HAL_RCC_ClockConfig+0x360>)
 8006ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ce8:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <HAL_RCC_ClockConfig+0x364>)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_RCC_ClockConfig+0x368>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fb fb50 	bl	8002398 <HAL_InitTick>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	0800c238 	.word	0x0800c238
 8006d10:	20000004 	.word	0x20000004
 8006d14:	20000000 	.word	0x20000000
 8006d18:	20000008 	.word	0x20000008

08006d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	; 0x24
 8006d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d22:	4bb3      	ldr	r3, [pc, #716]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d2a:	2b18      	cmp	r3, #24
 8006d2c:	f200 8155 	bhi.w	8006fda <HAL_RCC_GetSysClockFreq+0x2be>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d9d 	.word	0x08006d9d
 8006d3c:	08006fdb 	.word	0x08006fdb
 8006d40:	08006fdb 	.word	0x08006fdb
 8006d44:	08006fdb 	.word	0x08006fdb
 8006d48:	08006fdb 	.word	0x08006fdb
 8006d4c:	08006fdb 	.word	0x08006fdb
 8006d50:	08006fdb 	.word	0x08006fdb
 8006d54:	08006fdb 	.word	0x08006fdb
 8006d58:	08006dc3 	.word	0x08006dc3
 8006d5c:	08006fdb 	.word	0x08006fdb
 8006d60:	08006fdb 	.word	0x08006fdb
 8006d64:	08006fdb 	.word	0x08006fdb
 8006d68:	08006fdb 	.word	0x08006fdb
 8006d6c:	08006fdb 	.word	0x08006fdb
 8006d70:	08006fdb 	.word	0x08006fdb
 8006d74:	08006fdb 	.word	0x08006fdb
 8006d78:	08006dc9 	.word	0x08006dc9
 8006d7c:	08006fdb 	.word	0x08006fdb
 8006d80:	08006fdb 	.word	0x08006fdb
 8006d84:	08006fdb 	.word	0x08006fdb
 8006d88:	08006fdb 	.word	0x08006fdb
 8006d8c:	08006fdb 	.word	0x08006fdb
 8006d90:	08006fdb 	.word	0x08006fdb
 8006d94:	08006fdb 	.word	0x08006fdb
 8006d98:	08006dcf 	.word	0x08006dcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d9c:	4b94      	ldr	r3, [pc, #592]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006da8:	4b91      	ldr	r3, [pc, #580]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	08db      	lsrs	r3, r3, #3
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	4a90      	ldr	r2, [pc, #576]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
 8006db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006dba:	e111      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006dbc:	4b8d      	ldr	r3, [pc, #564]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dbe:	61bb      	str	r3, [r7, #24]
    break;
 8006dc0:	e10e      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006dc2:	4b8d      	ldr	r3, [pc, #564]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dc4:	61bb      	str	r3, [r7, #24]
    break;
 8006dc6:	e10b      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006dc8:	4b8c      	ldr	r3, [pc, #560]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dca:	61bb      	str	r3, [r7, #24]
    break;
 8006dcc:	e108      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dce:	4b88      	ldr	r3, [pc, #544]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006dd8:	4b85      	ldr	r3, [pc, #532]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006de4:	4b82      	ldr	r3, [pc, #520]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006dee:	4b80      	ldr	r3, [pc, #512]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	fb02 f303 	mul.w	r3, r2, r3
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80e1 	beq.w	8006fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	f000 8083 	beq.w	8006f20 <HAL_RCC_GetSysClockFreq+0x204>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	f200 80a1 	bhi.w	8006f64 <HAL_RCC_GetSysClockFreq+0x248>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0x114>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d056      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e2e:	e099      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e30:	4b6f      	ldr	r3, [pc, #444]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02d      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e3c:	4b6c      	ldr	r3, [pc, #432]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	4a6b      	ldr	r2, [pc, #428]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b62      	ldr	r3, [pc, #392]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e96:	e087      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b51      	ldr	r3, [pc, #324]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eda:	e065      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b40      	ldr	r3, [pc, #256]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1e:	e043      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800700c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f62:	e021      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006fa8:	4b11      	ldr	r3, [pc, #68]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	0a5b      	lsrs	r3, r3, #9
 8006fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	ee07 3a90 	vmov	s15, r3
 8006fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fcc:	ee17 3a90 	vmov	r3, s15
 8006fd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006fd2:	e005      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61bb      	str	r3, [r7, #24]
    break;
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fdc:	61bb      	str	r3, [r7, #24]
    break;
 8006fde:	bf00      	nop
  }

  return sysclockfreq;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3724      	adds	r7, #36	; 0x24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	03d09000 	.word	0x03d09000
 8006ff8:	003d0900 	.word	0x003d0900
 8006ffc:	017d7840 	.word	0x017d7840
 8007000:	46000000 	.word	0x46000000
 8007004:	4c742400 	.word	0x4c742400
 8007008:	4a742400 	.word	0x4a742400
 800700c:	4bbebc20 	.word	0x4bbebc20

08007010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007016:	f7ff fe81 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 800701a:	4602      	mov	r2, r0
 800701c:	4b10      	ldr	r3, [pc, #64]	; (8007060 <HAL_RCC_GetHCLKFreq+0x50>)
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	490f      	ldr	r1, [pc, #60]	; (8007064 <HAL_RCC_GetHCLKFreq+0x54>)
 8007028:	5ccb      	ldrb	r3, [r1, r3]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <HAL_RCC_GetHCLKFreq+0x50>)
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	4a09      	ldr	r2, [pc, #36]	; (8007064 <HAL_RCC_GetHCLKFreq+0x54>)
 800703e:	5cd3      	ldrb	r3, [r2, r3]
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	4a07      	ldr	r2, [pc, #28]	; (8007068 <HAL_RCC_GetHCLKFreq+0x58>)
 800704c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800704e:	4a07      	ldr	r2, [pc, #28]	; (800706c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <HAL_RCC_GetHCLKFreq+0x58>)
 8007056:	681b      	ldr	r3, [r3, #0]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	58024400 	.word	0x58024400
 8007064:	0800c238 	.word	0x0800c238
 8007068:	20000004 	.word	0x20000004
 800706c:	20000000 	.word	0x20000000

08007070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007074:	f7ff ffcc 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 8007078:	4602      	mov	r2, r0
 800707a:	4b06      	ldr	r3, [pc, #24]	; (8007094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	4904      	ldr	r1, [pc, #16]	; (8007098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007086:	5ccb      	ldrb	r3, [r1, r3]
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400
 8007098:	0800c238 	.word	0x0800c238

0800709c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070a0:	f7ff ffb6 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4904      	ldr	r1, [pc, #16]	; (80070c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070b2:	5ccb      	ldrb	r3, [r1, r3]
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	58024400 	.word	0x58024400
 80070c4:	0800c238 	.word	0x0800c238

080070c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	223f      	movs	r2, #63	; 0x3f
 80070d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070d8:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0207 	and.w	r2, r3, #7
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80070e4:	4b17      	ldr	r3, [pc, #92]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80070f0:	4b14      	ldr	r3, [pc, #80]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	f003 020f 	and.w	r2, r3, #15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007120:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_RCC_GetClockConfig+0x7c>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <HAL_RCC_GetClockConfig+0x80>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	58024400 	.word	0x58024400
 8007148:	52002000 	.word	0x52002000

0800714c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007154:	2300      	movs	r3, #0
 8007156:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007158:	2300      	movs	r3, #0
 800715a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d03f      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007170:	d02a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007172:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007176:	d824      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717c:	d018      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800717e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007182:	d81e      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718c:	d007      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800718e:	e018      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007190:	4bab      	ldr	r3, [pc, #684]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4aaa      	ldr	r2, [pc, #680]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800719c:	e015      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2102      	movs	r1, #2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 f9cf 	bl	8008548 <RCCEx_PLL2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071ae:	e00c      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fa78 	bl	80086ac <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
      break;
 80071c6:	e000      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071d0:	4b9b      	ldr	r3, [pc, #620]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071dc:	4998      	ldr	r1, [pc, #608]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	650b      	str	r3, [r1, #80]	; 0x50
 80071e2:	e001      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d03d      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d826      	bhi.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007219 	.word	0x08007219
 8007208:	08007227 	.word	0x08007227
 800720c:	08007239 	.word	0x08007239
 8007210:	08007251 	.word	0x08007251
 8007214:	08007251 	.word	0x08007251
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007218:	4b89      	ldr	r3, [pc, #548]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	4a88      	ldr	r2, [pc, #544]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007224:	e015      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f001 f98b 	bl	8008548 <RCCEx_PLL2_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007236:	e00c      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3324      	adds	r3, #36	; 0x24
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f001 fa34 	bl	80086ac <RCCEx_PLL3_Config>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
      break;
 800724e:	e000      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d109      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007258:	4b79      	ldr	r3, [pc, #484]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	f023 0207 	bic.w	r2, r3, #7
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	4976      	ldr	r1, [pc, #472]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	650b      	str	r3, [r1, #80]	; 0x50
 800726a:	e001      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007278:	2b00      	cmp	r3, #0
 800727a:	d042      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007284:	d02b      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728a:	d825      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800728c:	2bc0      	cmp	r3, #192	; 0xc0
 800728e:	d028      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007290:	2bc0      	cmp	r3, #192	; 0xc0
 8007292:	d821      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d016      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d81d      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d007      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80072a4:	e018      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a6:	4b66      	ldr	r3, [pc, #408]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	4a65      	ldr	r2, [pc, #404]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072b2:	e017      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 f944 	bl	8008548 <RCCEx_PLL2_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072c4:	e00e      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3324      	adds	r3, #36	; 0x24
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 f9ed 	bl	80086ac <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072d6:	e005      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072de:	bf00      	nop
 80072e0:	e000      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072ea:	4b55      	ldr	r3, [pc, #340]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f6:	4952      	ldr	r1, [pc, #328]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	650b      	str	r3, [r1, #80]	; 0x50
 80072fc:	e001      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730a:	2b00      	cmp	r3, #0
 800730c:	d049      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007318:	d030      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800731a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731e:	d82a      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007320:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007324:	d02c      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007326:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800732a:	d824      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800732c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007330:	d018      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007336:	d81e      	bhi.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800733c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007340:	d007      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007342:	e018      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007344:	4b3e      	ldr	r3, [pc, #248]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	4a3d      	ldr	r2, [pc, #244]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800734a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800734e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007350:	e017      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3304      	adds	r3, #4
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f8f5 	bl	8008548 <RCCEx_PLL2_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007362:	e00e      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3324      	adds	r3, #36	; 0x24
 8007368:	2100      	movs	r1, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f001 f99e 	bl	80086ac <RCCEx_PLL3_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007374:	e005      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
      break;
 800737a:	e002      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800737c:	bf00      	nop
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007388:	4b2d      	ldr	r3, [pc, #180]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007396:	492a      	ldr	r1, [pc, #168]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007398:	4313      	orrs	r3, r2
 800739a:	658b      	str	r3, [r1, #88]	; 0x58
 800739c:	e001      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04c      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073b8:	d030      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80073ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073be:	d82a      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073c4:	d02c      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80073c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073ca:	d824      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d0:	d018      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80073d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d6:	d81e      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80073dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073e0:	d007      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80073e2:	e018      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e4:	4b16      	ldr	r3, [pc, #88]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073f0:	e017      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 f8a5 	bl	8008548 <RCCEx_PLL2_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007402:	e00e      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3324      	adds	r3, #36	; 0x24
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f94e 	bl	80086ac <RCCEx_PLL3_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007414:	e005      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	75fb      	strb	r3, [r7, #23]
      break;
 800741a:	e002      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800741c:	bf00      	nop
 800741e:	e000      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10d      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007436:	4902      	ldr	r1, [pc, #8]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007438:	4313      	orrs	r3, r2
 800743a:	658b      	str	r3, [r1, #88]	; 0x58
 800743c:	e004      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d032      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007458:	2b30      	cmp	r3, #48	; 0x30
 800745a:	d01c      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800745c:	2b30      	cmp	r3, #48	; 0x30
 800745e:	d817      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007460:	2b20      	cmp	r3, #32
 8007462:	d00c      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007464:	2b20      	cmp	r3, #32
 8007466:	d813      	bhi.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d016      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800746c:	2b10      	cmp	r3, #16
 800746e:	d10f      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007470:	4baf      	ldr	r3, [pc, #700]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4aae      	ldr	r2, [pc, #696]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800747c:	e00e      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	2102      	movs	r1, #2
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f85f 	bl	8008548 <RCCEx_PLL2_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800748e:	e005      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]
      break;
 8007494:	e002      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800749a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074a2:	4ba3      	ldr	r3, [pc, #652]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ae:	49a0      	ldr	r1, [pc, #640]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074b4:	e001      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d047      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ce:	d030      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80074d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d4:	d82a      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074da:	d02c      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80074dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074e0:	d824      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	d018      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80074e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ec:	d81e      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80074f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f6:	d007      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80074f8:	e018      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fa:	4b8d      	ldr	r3, [pc, #564]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	4a8c      	ldr	r2, [pc, #560]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007506:	e017      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
 800750c:	2100      	movs	r1, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f81a 	bl	8008548 <RCCEx_PLL2_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007518:	e00e      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3324      	adds	r3, #36	; 0x24
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f8c3 	bl	80086ac <RCCEx_PLL3_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800752a:	e005      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	75fb      	strb	r3, [r7, #23]
      break;
 8007530:	e002      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800753e:	4b7c      	ldr	r3, [pc, #496]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754a:	4979      	ldr	r1, [pc, #484]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800754c:	4313      	orrs	r3, r2
 800754e:	650b      	str	r3, [r1, #80]	; 0x50
 8007550:	e001      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d049      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800756a:	d02e      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800756c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007570:	d828      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007576:	d02a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800757c:	d822      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800757e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007582:	d026      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007588:	d81c      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800758a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800758e:	d010      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007594:	d816      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01d      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800759a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759e:	d111      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	2101      	movs	r1, #1
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 ffce 	bl	8008548 <RCCEx_PLL2_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075b0:	e012      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3324      	adds	r3, #36	; 0x24
 80075b6:	2101      	movs	r1, #1
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 f877 	bl	80086ac <RCCEx_PLL3_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075c2:	e009      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	e006      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075ca:	bf00      	nop
 80075cc:	e004      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075de:	4b54      	ldr	r3, [pc, #336]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ea:	4951      	ldr	r1, [pc, #324]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	650b      	str	r3, [r1, #80]	; 0x50
 80075f0:	e001      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d04b      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800760c:	d02e      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800760e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007612:	d828      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007618:	d02a      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d822      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007624:	d026      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007626:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800762a:	d81c      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800762c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007630:	d010      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007636:	d816      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01d      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800763c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007640:	d111      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	2101      	movs	r1, #1
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ff7d 	bl	8008548 <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007652:	e012      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3324      	adds	r3, #36	; 0x24
 8007658:	2101      	movs	r1, #1
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f826 	bl	80086ac <RCCEx_PLL3_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007664:	e009      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
      break;
 800766a:	e006      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800766c:	bf00      	nop
 800766e:	e004      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007670:	bf00      	nop
 8007672:	e002      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007674:	bf00      	nop
 8007676:	e000      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007680:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007684:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800768e:	4928      	ldr	r1, [pc, #160]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007690:	4313      	orrs	r3, r2
 8007692:	658b      	str	r3, [r1, #88]	; 0x58
 8007694:	e001      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02f      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d00e      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d814      	bhi.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d015      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80076ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076be:	d10f      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c0:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	4a1a      	ldr	r2, [pc, #104]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076cc:	e00c      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3304      	adds	r3, #4
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff37 	bl	8008548 <RCCEx_PLL2_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076de:	e003      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
      break;
 80076e4:	e000      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80076e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fa:	490d      	ldr	r1, [pc, #52]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007700:	e001      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d033      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	2b03      	cmp	r3, #3
 8007718:	d81c      	bhi.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	0800775b 	.word	0x0800775b
 8007724:	08007735 	.word	0x08007735
 8007728:	08007743 	.word	0x08007743
 800772c:	0800775b 	.word	0x0800775b
 8007730:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007734:	4bb8      	ldr	r3, [pc, #736]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	4ab7      	ldr	r2, [pc, #732]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800773a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007740:	e00c      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f000 fefd 	bl	8008548 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007752:	e003      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	75fb      	strb	r3, [r7, #23]
      break;
 8007758:	e000      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800775a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007762:	4bad      	ldr	r3, [pc, #692]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007766:	f023 0203 	bic.w	r2, r3, #3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776e:	49aa      	ldr	r1, [pc, #680]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007770:	4313      	orrs	r3, r2
 8007772:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007774:	e001      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 8086 	beq.w	8007894 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007788:	4ba4      	ldr	r3, [pc, #656]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4aa3      	ldr	r2, [pc, #652]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800778e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007794:	f7fb fb44 	bl	8002e20 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800779a:	e009      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800779c:	f7fb fb40 	bl	8002e20 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b64      	cmp	r3, #100	; 0x64
 80077a8:	d902      	bls.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	75fb      	strb	r3, [r7, #23]
        break;
 80077ae:	e005      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b0:	4b9a      	ldr	r3, [pc, #616]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0ef      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d166      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077c2:	4b95      	ldr	r3, [pc, #596]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077cc:	4053      	eors	r3, r2
 80077ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d013      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077d6:	4b90      	ldr	r3, [pc, #576]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077e0:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e4:	4a8c      	ldr	r2, [pc, #560]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077ec:	4b8a      	ldr	r3, [pc, #552]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	4a89      	ldr	r2, [pc, #548]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077f8:	4a87      	ldr	r2, [pc, #540]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007808:	d115      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780a:	f7fb fb09 	bl	8002e20 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007810:	e00b      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007812:	f7fb fb05 	bl	8002e20 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d902      	bls.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	75fb      	strb	r3, [r7, #23]
            break;
 8007828:	e005      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800782a:	4b7b      	ldr	r3, [pc, #492]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0ed      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d126      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800784a:	d10d      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800784c:	4b72      	ldr	r3, [pc, #456]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800785a:	0919      	lsrs	r1, r3, #4
 800785c:	4b70      	ldr	r3, [pc, #448]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800785e:	400b      	ands	r3, r1
 8007860:	496d      	ldr	r1, [pc, #436]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007862:	4313      	orrs	r3, r2
 8007864:	610b      	str	r3, [r1, #16]
 8007866:	e005      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007868:	4b6b      	ldr	r3, [pc, #428]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	4a6a      	ldr	r2, [pc, #424]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800786e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007872:	6113      	str	r3, [r2, #16]
 8007874:	4b68      	ldr	r3, [pc, #416]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800787e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007882:	4965      	ldr	r1, [pc, #404]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007884:	4313      	orrs	r3, r2
 8007886:	670b      	str	r3, [r1, #112]	; 0x70
 8007888:	e004      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	75bb      	strb	r3, [r7, #22]
 800788e:	e001      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d07e      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a4:	2b28      	cmp	r3, #40	; 0x28
 80078a6:	d867      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	0800797f 	.word	0x0800797f
 80078b4:	08007979 	.word	0x08007979
 80078b8:	08007979 	.word	0x08007979
 80078bc:	08007979 	.word	0x08007979
 80078c0:	08007979 	.word	0x08007979
 80078c4:	08007979 	.word	0x08007979
 80078c8:	08007979 	.word	0x08007979
 80078cc:	08007979 	.word	0x08007979
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007979 	.word	0x08007979
 80078d8:	08007979 	.word	0x08007979
 80078dc:	08007979 	.word	0x08007979
 80078e0:	08007979 	.word	0x08007979
 80078e4:	08007979 	.word	0x08007979
 80078e8:	08007979 	.word	0x08007979
 80078ec:	08007979 	.word	0x08007979
 80078f0:	08007967 	.word	0x08007967
 80078f4:	08007979 	.word	0x08007979
 80078f8:	08007979 	.word	0x08007979
 80078fc:	08007979 	.word	0x08007979
 8007900:	08007979 	.word	0x08007979
 8007904:	08007979 	.word	0x08007979
 8007908:	08007979 	.word	0x08007979
 800790c:	08007979 	.word	0x08007979
 8007910:	0800797f 	.word	0x0800797f
 8007914:	08007979 	.word	0x08007979
 8007918:	08007979 	.word	0x08007979
 800791c:	08007979 	.word	0x08007979
 8007920:	08007979 	.word	0x08007979
 8007924:	08007979 	.word	0x08007979
 8007928:	08007979 	.word	0x08007979
 800792c:	08007979 	.word	0x08007979
 8007930:	0800797f 	.word	0x0800797f
 8007934:	08007979 	.word	0x08007979
 8007938:	08007979 	.word	0x08007979
 800793c:	08007979 	.word	0x08007979
 8007940:	08007979 	.word	0x08007979
 8007944:	08007979 	.word	0x08007979
 8007948:	08007979 	.word	0x08007979
 800794c:	08007979 	.word	0x08007979
 8007950:	0800797f 	.word	0x0800797f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	2101      	movs	r1, #1
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fdf4 	bl	8008548 <RCCEx_PLL2_Config>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007964:	e00c      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3324      	adds	r3, #36	; 0x24
 800796a:	2101      	movs	r1, #1
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fe9d 	bl	80086ac <RCCEx_PLL3_Config>
 8007972:	4603      	mov	r3, r0
 8007974:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007976:	e003      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
      break;
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800797e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007986:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007992:	4921      	ldr	r1, [pc, #132]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007994:	4313      	orrs	r3, r2
 8007996:	654b      	str	r3, [r1, #84]	; 0x54
 8007998:	e001      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d03e      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	d820      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079fb 	.word	0x080079fb
 80079bc:	080079d1 	.word	0x080079d1
 80079c0:	080079e3 	.word	0x080079e3
 80079c4:	080079fb 	.word	0x080079fb
 80079c8:	080079fb 	.word	0x080079fb
 80079cc:	080079fb 	.word	0x080079fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	2101      	movs	r1, #1
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fdb6 	bl	8008548 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079e0:	e00c      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3324      	adds	r3, #36	; 0x24
 80079e6:	2101      	movs	r1, #1
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fe5f 	bl	80086ac <RCCEx_PLL3_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079f2:	e003      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]
      break;
 80079f8:	e000      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80079fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d110      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a06:	f023 0207 	bic.w	r2, r3, #7
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0e:	4902      	ldr	r1, [pc, #8]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	654b      	str	r3, [r1, #84]	; 0x54
 8007a14:	e008      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	58024800 	.word	0x58024800
 8007a20:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d039      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d820      	bhi.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a87 	.word	0x08007a87
 8007a48:	08007a5d 	.word	0x08007a5d
 8007a4c:	08007a6f 	.word	0x08007a6f
 8007a50:	08007a87 	.word	0x08007a87
 8007a54:	08007a87 	.word	0x08007a87
 8007a58:	08007a87 	.word	0x08007a87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	2101      	movs	r1, #1
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fd70 	bl	8008548 <RCCEx_PLL2_Config>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a6c:	e00c      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3324      	adds	r3, #36	; 0x24
 8007a72:	2101      	movs	r1, #1
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fe19 	bl	80086ac <RCCEx_PLL3_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a7e:	e003      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
      break;
 8007a84:	e000      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a8e:	4bb7      	ldr	r3, [pc, #732]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	f023 0207 	bic.w	r2, r3, #7
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9c:	49b3      	ldr	r1, [pc, #716]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8007aa2:	e001      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d04b      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007abe:	d02e      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac4:	d828      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d02a      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad0:	d822      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ad6:	d026      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007adc:	d81c      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae2:	d010      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae8:	d816      	bhi.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01d      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af2:	d111      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fd24 	bl	8008548 <RCCEx_PLL2_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b04:	e012      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3324      	adds	r3, #36	; 0x24
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fdcd 	bl	80086ac <RCCEx_PLL3_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b16:	e009      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b32:	4b8e      	ldr	r3, [pc, #568]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b40:	498a      	ldr	r1, [pc, #552]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	654b      	str	r3, [r1, #84]	; 0x54
 8007b46:	e001      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d04b      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b62:	d02e      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007b64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b68:	d828      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6e:	d02a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b74:	d822      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b7a:	d026      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b80:	d81c      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b86:	d010      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8c:	d816      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01d      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b96:	d111      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fcd2 	bl	8008548 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ba8:	e012      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3324      	adds	r3, #36	; 0x24
 8007bae:	2102      	movs	r1, #2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fd7b 	bl	80086ac <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bba:	e009      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc0:	e006      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e004      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bd6:	4b65      	ldr	r3, [pc, #404]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be4:	4961      	ldr	r1, [pc, #388]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	658b      	str	r3, [r1, #88]	; 0x58
 8007bea:	e001      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d04b      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c06:	d02e      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007c08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c0c:	d828      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c12:	d02a      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c18:	d822      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c1e:	d026      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007c20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c24:	d81c      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c2a:	d010      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c30:	d816      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d01d      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3a:	d111      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	2100      	movs	r1, #0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fc80 	bl	8008548 <RCCEx_PLL2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c4c:	e012      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3324      	adds	r3, #36	; 0x24
 8007c52:	2102      	movs	r1, #2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fd29 	bl	80086ac <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c5e:	e009      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
      break;
 8007c64:	e006      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c66:	bf00      	nop
 8007c68:	e004      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e002      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c6e:	bf00      	nop
 8007c70:	e000      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c7a:	4b3c      	ldr	r3, [pc, #240]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c88:	4938      	ldr	r1, [pc, #224]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c8e:	e001      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007caa:	d10a      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3324      	adds	r3, #36	; 0x24
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fcfa 	bl	80086ac <RCCEx_PLL3_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cc2:	4b2a      	ldr	r3, [pc, #168]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cd0:	4926      	ldr	r1, [pc, #152]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d01a      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cec:	d10a      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3324      	adds	r3, #36	; 0x24
 8007cf2:	2102      	movs	r1, #2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fcd9 	bl	80086ac <RCCEx_PLL3_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d12:	4916      	ldr	r1, [pc, #88]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d036      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2e:	d01f      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d34:	d817      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d3e:	d009      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007d40:	e011      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3304      	adds	r3, #4
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fbfd 	bl	8008548 <RCCEx_PLL2_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d52:	e00e      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3324      	adds	r3, #36	; 0x24
 8007d58:	2102      	movs	r1, #2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fca6 	bl	80086ac <RCCEx_PLL3_Config>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d64:	e005      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6a:	e002      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007d6c:	58024400 	.word	0x58024400
      break;
 8007d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d78:	4b93      	ldr	r3, [pc, #588]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d86:	4990      	ldr	r1, [pc, #576]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d8c:	e001      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d033      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007da8:	d01c      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007daa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dae:	d816      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dba:	d007      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007dbc:	e00f      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b82      	ldr	r3, [pc, #520]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a81      	ldr	r2, [pc, #516]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007dca:	e00c      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3324      	adds	r3, #36	; 0x24
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fc6a 	bl	80086ac <RCCEx_PLL3_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ddc:	e003      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	75fb      	strb	r3, [r7, #23]
      break;
 8007de2:	e000      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dec:	4b76      	ldr	r3, [pc, #472]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfa:	4973      	ldr	r1, [pc, #460]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	654b      	str	r3, [r1, #84]	; 0x54
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d029      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1e:	d007      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e22:	4b69      	ldr	r3, [pc, #420]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	4a68      	ldr	r2, [pc, #416]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e2e:	e00b      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3304      	adds	r3, #4
 8007e34:	2102      	movs	r1, #2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fb86 	bl	8008548 <RCCEx_PLL2_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]
      break;
 8007e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e4e:	4b5e      	ldr	r3, [pc, #376]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5a:	495b      	ldr	r1, [pc, #364]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e60:	e001      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	2102      	movs	r1, #2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fc17 	bl	80086ac <RCCEx_PLL3_Config>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d030      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e9c:	d017      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea2:	d811      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea8:	d013      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eae:	d80b      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eba:	4b43      	ldr	r3, [pc, #268]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	4a42      	ldr	r2, [pc, #264]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007ec6:	e007      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ecc:	e004      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ede:	4b3a      	ldr	r3, [pc, #232]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eea:	4937      	ldr	r1, [pc, #220]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	654b      	str	r3, [r1, #84]	; 0x54
 8007ef0:	e001      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f02:	4b31      	ldr	r3, [pc, #196]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0e:	492e      	ldr	r1, [pc, #184]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f20:	4b29      	ldr	r3, [pc, #164]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f2e:	4926      	ldr	r1, [pc, #152]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f40:	4b21      	ldr	r3, [pc, #132]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f4c:	491e      	ldr	r1, [pc, #120]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00d      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f5e:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f68:	6113      	str	r3, [r2, #16]
 8007f6a:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f74:	4914      	ldr	r1, [pc, #80]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da08      	bge.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8e:	490e      	ldr	r1, [pc, #56]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fa0:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fae:	4906      	ldr	r1, [pc, #24]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e000      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	58024400 	.word	0x58024400

08007fcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fd0:	f7ff f81e 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	091b      	lsrs	r3, r3, #4
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	4904      	ldr	r1, [pc, #16]	; (8007ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fe2:	5ccb      	ldrb	r3, [r1, r3]
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	0800c238 	.word	0x0800c238

08007ff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b089      	sub	sp, #36	; 0x24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008000:	4ba1      	ldr	r3, [pc, #644]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008004:	f003 0303 	and.w	r3, r3, #3
 8008008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800800a:	4b9f      	ldr	r3, [pc, #636]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	0b1b      	lsrs	r3, r3, #12
 8008010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008016:	4b9c      	ldr	r3, [pc, #624]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	091b      	lsrs	r3, r3, #4
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008022:	4b99      	ldr	r3, [pc, #612]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	08db      	lsrs	r3, r3, #3
 8008028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	fb02 f303 	mul.w	r3, r2, r3
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8111 	beq.w	8008268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	2b02      	cmp	r3, #2
 800804a:	f000 8083 	beq.w	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	2b02      	cmp	r3, #2
 8008052:	f200 80a1 	bhi.w	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d056      	beq.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008062:	e099      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008064:	4b88      	ldr	r3, [pc, #544]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02d      	beq.n	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008070:	4b85      	ldr	r3, [pc, #532]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	08db      	lsrs	r3, r3, #3
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	4a84      	ldr	r2, [pc, #528]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800807c:	fa22 f303 	lsr.w	r3, r2, r3
 8008080:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b7b      	ldr	r3, [pc, #492]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080ca:	e087      	b.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b6a      	ldr	r3, [pc, #424]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800810e:	e065      	b.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800811e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008122:	4b59      	ldr	r3, [pc, #356]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008132:	ed97 6a03 	vldr	s12, [r7, #12]
 8008136:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008152:	e043      	b.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800829c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008166:	4b48      	ldr	r3, [pc, #288]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008176:	ed97 6a03 	vldr	s12, [r7, #12]
 800817a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800817e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800818a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008196:	e021      	b.n	80081dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081aa:	4b37      	ldr	r3, [pc, #220]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80081be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80081dc:	4b2a      	ldr	r3, [pc, #168]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	0a5b      	lsrs	r3, r3, #9
 80081e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008202:	ee17 2a90 	vmov	r2, s15
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008224:	edd7 6a07 	vldr	s13, [r7, #28]
 8008228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800822c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008230:	ee17 2a90 	vmov	r2, s15
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008238:	4b13      	ldr	r3, [pc, #76]	; (8008288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800824e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008252:	edd7 6a07 	vldr	s13, [r7, #28]
 8008256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825e:	ee17 2a90 	vmov	r2, s15
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008266:	e008      	b.n	800827a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	609a      	str	r2, [r3, #8]
}
 800827a:	bf00      	nop
 800827c:	3724      	adds	r7, #36	; 0x24
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	58024400 	.word	0x58024400
 800828c:	03d09000 	.word	0x03d09000
 8008290:	46000000 	.word	0x46000000
 8008294:	4c742400 	.word	0x4c742400
 8008298:	4a742400 	.word	0x4a742400
 800829c:	4bbebc20 	.word	0x4bbebc20

080082a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b089      	sub	sp, #36	; 0x24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a8:	4ba1      	ldr	r3, [pc, #644]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f003 0303 	and.w	r3, r3, #3
 80082b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80082b2:	4b9f      	ldr	r3, [pc, #636]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	0d1b      	lsrs	r3, r3, #20
 80082b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082be:	4b9c      	ldr	r3, [pc, #624]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80082ca:	4b99      	ldr	r3, [pc, #612]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ce:	08db      	lsrs	r3, r3, #3
 80082d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	fb02 f303 	mul.w	r3, r2, r3
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8111 	beq.w	8008510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	f000 8083 	beq.w	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	f200 80a1 	bhi.w	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d056      	beq.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800830a:	e099      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800830c:	4b88      	ldr	r3, [pc, #544]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d02d      	beq.n	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008318:	4b85      	ldr	r3, [pc, #532]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	08db      	lsrs	r3, r3, #3
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	4a84      	ldr	r2, [pc, #528]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
 8008328:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	ee07 3a90 	vmov	s15, r3
 8008330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b7b      	ldr	r3, [pc, #492]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008372:	e087      	b.n	8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b6a      	ldr	r3, [pc, #424]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b6:	e065      	b.n	8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b59      	ldr	r3, [pc, #356]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fa:	e043      	b.n	8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b48      	ldr	r3, [pc, #288]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008422:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800843e:	e021      	b.n	8008484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b37      	ldr	r3, [pc, #220]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a03 	vldr	s12, [r7, #12]
 8008466:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008484:	4b2a      	ldr	r3, [pc, #168]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	0a5b      	lsrs	r3, r3, #9
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800849a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849e:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084aa:	ee17 2a90 	vmov	r2, s15
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80084b2:	4b1f      	ldr	r3, [pc, #124]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d8:	ee17 2a90 	vmov	r2, s15
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80084e0:	4b13      	ldr	r3, [pc, #76]	; (8008530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	0e1b      	lsrs	r3, r3, #24
 80084e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80084fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008506:	ee17 2a90 	vmov	r2, s15
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800850e:	e008      	b.n	8008522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
}
 8008522:	bf00      	nop
 8008524:	3724      	adds	r7, #36	; 0x24
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	58024400 	.word	0x58024400
 8008534:	03d09000 	.word	0x03d09000
 8008538:	46000000 	.word	0x46000000
 800853c:	4c742400 	.word	0x4c742400
 8008540:	4a742400 	.word	0x4a742400
 8008544:	4bbebc20 	.word	0x4bbebc20

08008548 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008556:	4b53      	ldr	r3, [pc, #332]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b03      	cmp	r3, #3
 8008560:	d101      	bne.n	8008566 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e099      	b.n	800869a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008566:	4b4f      	ldr	r3, [pc, #316]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a4e      	ldr	r2, [pc, #312]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800856c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008572:	f7fa fc55 	bl	8002e20 <HAL_GetTick>
 8008576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008578:	e008      	b.n	800858c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800857a:	f7fa fc51 	bl	8002e20 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e086      	b.n	800869a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800858c:	4b45      	ldr	r3, [pc, #276]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f0      	bne.n	800857a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008598:	4b42      	ldr	r3, [pc, #264]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	031b      	lsls	r3, r3, #12
 80085a6:	493f      	ldr	r1, [pc, #252]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	628b      	str	r3, [r1, #40]	; 0x28
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	025b      	lsls	r3, r3, #9
 80085be:	b29b      	uxth	r3, r3
 80085c0:	431a      	orrs	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	061b      	lsls	r3, r3, #24
 80085d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085dc:	4931      	ldr	r1, [pc, #196]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80085e2:	4b30      	ldr	r3, [pc, #192]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	492d      	ldr	r1, [pc, #180]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085f4:	4b2b      	ldr	r3, [pc, #172]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	f023 0220 	bic.w	r2, r3, #32
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	4928      	ldr	r1, [pc, #160]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008602:	4313      	orrs	r3, r2
 8008604:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008606:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	4a26      	ldr	r2, [pc, #152]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800860c:	f023 0310 	bic.w	r3, r3, #16
 8008610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008612:	4b24      	ldr	r3, [pc, #144]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008616:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <RCCEx_PLL2_Config+0x160>)
 8008618:	4013      	ands	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	69d2      	ldr	r2, [r2, #28]
 800861e:	00d2      	lsls	r2, r2, #3
 8008620:	4920      	ldr	r1, [pc, #128]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008622:	4313      	orrs	r3, r2
 8008624:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008626:	4b1f      	ldr	r3, [pc, #124]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800862c:	f043 0310 	orr.w	r3, r3, #16
 8008630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008638:	4b1a      	ldr	r3, [pc, #104]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	4a19      	ldr	r2, [pc, #100]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800863e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008644:	e00f      	b.n	8008666 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d106      	bne.n	800865a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800864c:	4b15      	ldr	r3, [pc, #84]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008658:	e005      	b.n	8008666 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	4a11      	ldr	r2, [pc, #68]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008664:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a0e      	ldr	r2, [pc, #56]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800866c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008672:	f7fa fbd5 	bl	8002e20 <HAL_GetTick>
 8008676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008678:	e008      	b.n	800868c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800867a:	f7fa fbd1 	bl	8002e20 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d901      	bls.n	800868c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e006      	b.n	800869a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800868c:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <RCCEx_PLL2_Config+0x15c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f0      	beq.n	800867a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	58024400 	.word	0x58024400
 80086a8:	ffff0007 	.word	0xffff0007

080086ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086ba:	4b53      	ldr	r3, [pc, #332]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d101      	bne.n	80086ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e099      	b.n	80087fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086ca:	4b4f      	ldr	r3, [pc, #316]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a4e      	ldr	r2, [pc, #312]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80086d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086d6:	f7fa fba3 	bl	8002e20 <HAL_GetTick>
 80086da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086dc:	e008      	b.n	80086f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086de:	f7fa fb9f 	bl	8002e20 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e086      	b.n	80087fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086f0:	4b45      	ldr	r3, [pc, #276]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f0      	bne.n	80086de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086fc:	4b42      	ldr	r3, [pc, #264]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80086fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008700:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	051b      	lsls	r3, r3, #20
 800870a:	493f      	ldr	r1, [pc, #252]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 800870c:	4313      	orrs	r3, r2
 800870e:	628b      	str	r3, [r1, #40]	; 0x28
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	3b01      	subs	r3, #1
 8008716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	3b01      	subs	r3, #1
 8008720:	025b      	lsls	r3, r3, #9
 8008722:	b29b      	uxth	r3, r3
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	3b01      	subs	r3, #1
 800872c:	041b      	lsls	r3, r3, #16
 800872e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	3b01      	subs	r3, #1
 800873a:	061b      	lsls	r3, r3, #24
 800873c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008740:	4931      	ldr	r1, [pc, #196]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008746:	4b30      	ldr	r3, [pc, #192]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	492d      	ldr	r1, [pc, #180]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008758:	4b2b      	ldr	r3, [pc, #172]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	4928      	ldr	r1, [pc, #160]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008766:	4313      	orrs	r3, r2
 8008768:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800876a:	4b27      	ldr	r3, [pc, #156]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	4a26      	ldr	r2, [pc, #152]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008776:	4b24      	ldr	r3, [pc, #144]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800877a:	4b24      	ldr	r3, [pc, #144]	; (800880c <RCCEx_PLL3_Config+0x160>)
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	69d2      	ldr	r2, [r2, #28]
 8008782:	00d2      	lsls	r2, r2, #3
 8008784:	4920      	ldr	r1, [pc, #128]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008786:	4313      	orrs	r3, r2
 8008788:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800878a:	4b1f      	ldr	r3, [pc, #124]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 8008790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800879c:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	4a19      	ldr	r2, [pc, #100]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087a8:	e00f      	b.n	80087ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d106      	bne.n	80087be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087b0:	4b15      	ldr	r3, [pc, #84]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	4a14      	ldr	r2, [pc, #80]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087bc:	e005      	b.n	80087ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	4a11      	ldr	r2, [pc, #68]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80087ca:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d6:	f7fa fb23 	bl	8002e20 <HAL_GetTick>
 80087da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087dc:	e008      	b.n	80087f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087de:	f7fa fb1f 	bl	8002e20 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e006      	b.n	80087fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087f0:	4b05      	ldr	r3, [pc, #20]	; (8008808 <RCCEx_PLL3_Config+0x15c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0f0      	beq.n	80087de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	58024400 	.word	0x58024400
 800880c:	ffff0007 	.word	0xffff0007

08008810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e049      	b.n	80088b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f841 	bl	80088be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f000 f9f8 	bl	8008c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
	...

080088d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d001      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e04f      	b.n	800898c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0201 	orr.w	r2, r2, #1
 8008902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a23      	ldr	r2, [pc, #140]	; (8008998 <HAL_TIM_Base_Start_IT+0xc4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01d      	beq.n	800894a <HAL_TIM_Base_Start_IT+0x76>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008916:	d018      	beq.n	800894a <HAL_TIM_Base_Start_IT+0x76>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a1f      	ldr	r2, [pc, #124]	; (800899c <HAL_TIM_Base_Start_IT+0xc8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d013      	beq.n	800894a <HAL_TIM_Base_Start_IT+0x76>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00e      	beq.n	800894a <HAL_TIM_Base_Start_IT+0x76>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1c      	ldr	r2, [pc, #112]	; (80089a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d009      	beq.n	800894a <HAL_TIM_Base_Start_IT+0x76>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a1b      	ldr	r2, [pc, #108]	; (80089a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d004      	beq.n	800894a <HAL_TIM_Base_Start_IT+0x76>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a19      	ldr	r2, [pc, #100]	; (80089ac <HAL_TIM_Base_Start_IT+0xd8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d115      	bne.n	8008976 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008952:	4013      	ands	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b06      	cmp	r3, #6
 800895a:	d015      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0xb4>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008962:	d011      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0201 	orr.w	r2, r2, #1
 8008972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008974:	e008      	b.n	8008988 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0201 	orr.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e000      	b.n	800898a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40010000 	.word	0x40010000
 800899c:	40000400 	.word	0x40000400
 80089a0:	40000800 	.word	0x40000800
 80089a4:	40000c00 	.word	0x40000c00
 80089a8:	40010400 	.word	0x40010400
 80089ac:	40001800 	.word	0x40001800
 80089b0:	00010007 	.word	0x00010007

080089b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d122      	bne.n	8008a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d11b      	bne.n	8008a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f06f 0202 	mvn.w	r2, #2
 80089e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f905 	bl	8008c06 <HAL_TIM_IC_CaptureCallback>
 80089fc:	e005      	b.n	8008a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f8f7 	bl	8008bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f908 	bl	8008c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d122      	bne.n	8008a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d11b      	bne.n	8008a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f06f 0204 	mvn.w	r2, #4
 8008a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f8db 	bl	8008c06 <HAL_TIM_IC_CaptureCallback>
 8008a50:	e005      	b.n	8008a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f8cd 	bl	8008bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8de 	bl	8008c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d122      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d11b      	bne.n	8008ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f06f 0208 	mvn.w	r2, #8
 8008a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f8b1 	bl	8008c06 <HAL_TIM_IC_CaptureCallback>
 8008aa4:	e005      	b.n	8008ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f8a3 	bl	8008bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f8b4 	bl	8008c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0310 	and.w	r3, r3, #16
 8008ac2:	2b10      	cmp	r3, #16
 8008ac4:	d122      	bne.n	8008b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d11b      	bne.n	8008b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f06f 0210 	mvn.w	r2, #16
 8008adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f887 	bl	8008c06 <HAL_TIM_IC_CaptureCallback>
 8008af8:	e005      	b.n	8008b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f879 	bl	8008bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f88a 	bl	8008c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d10e      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d107      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f06f 0201 	mvn.w	r2, #1
 8008b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7f9 f8e4 	bl	8001d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b42:	2b80      	cmp	r3, #128	; 0x80
 8008b44:	d10e      	bne.n	8008b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b50:	2b80      	cmp	r3, #128	; 0x80
 8008b52:	d107      	bne.n	8008b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f914 	bl	8008d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b72:	d10e      	bne.n	8008b92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7e:	2b80      	cmp	r3, #128	; 0x80
 8008b80:	d107      	bne.n	8008b92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f907 	bl	8008da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d10e      	bne.n	8008bbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b40      	cmp	r3, #64	; 0x40
 8008bac:	d107      	bne.n	8008bbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f838 	bl	8008c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d10e      	bne.n	8008bea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d107      	bne.n	8008bea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f06f 0220 	mvn.w	r2, #32
 8008be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8c7 	bl	8008d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a40      	ldr	r2, [pc, #256]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c62:	d00f      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a3d      	ldr	r2, [pc, #244]	; (8008d5c <TIM_Base_SetConfig+0x118>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a3c      	ldr	r2, [pc, #240]	; (8008d60 <TIM_Base_SetConfig+0x11c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a3b      	ldr	r2, [pc, #236]	; (8008d64 <TIM_Base_SetConfig+0x120>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a3a      	ldr	r2, [pc, #232]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d108      	bne.n	8008c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2f      	ldr	r2, [pc, #188]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01f      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca4:	d01b      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a2c      	ldr	r2, [pc, #176]	; (8008d5c <TIM_Base_SetConfig+0x118>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d017      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a2b      	ldr	r2, [pc, #172]	; (8008d60 <TIM_Base_SetConfig+0x11c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d013      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2a      	ldr	r2, [pc, #168]	; (8008d64 <TIM_Base_SetConfig+0x120>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00f      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a29      	ldr	r2, [pc, #164]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00b      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a28      	ldr	r2, [pc, #160]	; (8008d6c <TIM_Base_SetConfig+0x128>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d007      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <TIM_Base_SetConfig+0x12c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_Base_SetConfig+0x9a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <TIM_Base_SetConfig+0x130>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d108      	bne.n	8008cf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a10      	ldr	r2, [pc, #64]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00f      	beq.n	8008d3c <TIM_Base_SetConfig+0xf8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00b      	beq.n	8008d3c <TIM_Base_SetConfig+0xf8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <TIM_Base_SetConfig+0x128>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d007      	beq.n	8008d3c <TIM_Base_SetConfig+0xf8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a10      	ldr	r2, [pc, #64]	; (8008d70 <TIM_Base_SetConfig+0x12c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_Base_SetConfig+0xf8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a0f      	ldr	r2, [pc, #60]	; (8008d74 <TIM_Base_SetConfig+0x130>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d103      	bne.n	8008d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	615a      	str	r2, [r3, #20]
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40000400 	.word	0x40000400
 8008d60:	40000800 	.word	0x40000800
 8008d64:	40000c00 	.word	0x40000c00
 8008d68:	40010400 	.word	0x40010400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40014400 	.word	0x40014400
 8008d74:	40014800 	.word	0x40014800

08008d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e042      	b.n	8008e4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d106      	bne.n	8008dde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7f8 ffc7 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2224      	movs	r2, #36	; 0x24
 8008de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0201 	bic.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fc5a 	bl	80096b0 <UART_SetConfig>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e022      	b.n	8008e4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f001 f9ae 	bl	800a170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fa35 	bl	800a2b4 <UART_CheckIdleState>
 8008e4a:	4603      	mov	r3, r0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e68:	2b20      	cmp	r3, #32
 8008e6a:	d168      	bne.n	8008f3e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <HAL_UART_Transmit_DMA+0x24>
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e061      	b.n	8008f40 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <HAL_UART_Transmit_DMA+0x36>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e05a      	b.n	8008f40 <HAL_UART_Transmit_DMA+0xec>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2221      	movs	r2, #33	; 0x21
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d02c      	beq.n	8008f1a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec4:	4a20      	ldr	r2, [pc, #128]	; (8008f48 <HAL_UART_Transmit_DMA+0xf4>)
 8008ec6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ecc:	4a1f      	ldr	r2, [pc, #124]	; (8008f4c <HAL_UART_Transmit_DMA+0xf8>)
 8008ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed4:	4a1e      	ldr	r2, [pc, #120]	; (8008f50 <HAL_UART_Transmit_DMA+0xfc>)
 8008ed6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008edc:	2200      	movs	r2, #0
 8008ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee8:	4619      	mov	r1, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3328      	adds	r3, #40	; 0x28
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	f7fa fbe8 	bl	80036c8 <HAL_DMA_Start_IT>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00d      	beq.n	8008f1a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2210      	movs	r2, #16
 8008f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e012      	b.n	8008f40 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2240      	movs	r2, #64	; 0x40
 8008f20:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f38:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e000      	b.n	8008f40 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008f3e:	2302      	movs	r3, #2
  }
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	0800a5c9 	.word	0x0800a5c9
 8008f4c:	0800a619 	.word	0x0800a619
 8008f50:	0800a703 	.word	0x0800a703

08008f54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	d131      	bne.n	8008fd0 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <HAL_UART_Receive_DMA+0x24>
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e02a      	b.n	8008fd2 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_UART_Receive_DMA+0x36>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e023      	b.n	8008fd2 <HAL_UART_Receive_DMA+0x7e>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a0f      	ldr	r2, [pc, #60]	; (8008fdc <HAL_UART_Receive_DMA+0x88>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00e      	beq.n	8008fc0 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fbe:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f001 fa40 	bl	800a44c <UART_Start_Receive_DMA>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	e000      	b.n	8008fd2 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
  }
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	58000c00 	.word	0x58000c00

08008fe0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fee:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009002:	2b80      	cmp	r3, #128	; 0x80
 8009004:	d127      	bne.n	8009056 <HAL_UART_DMAStop+0x76>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b21      	cmp	r3, #33	; 0x21
 800900a:	d124      	bne.n	8009056 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800901a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009020:	2b00      	cmp	r3, #0
 8009022:	d015      	beq.n	8009050 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009028:	4618      	mov	r0, r3
 800902a:	f7fa fdb7 	bl	8003b9c <HAL_DMA_Abort>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00d      	beq.n	8009050 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009038:	4618      	mov	r0, r3
 800903a:	f7fc fa3b 	bl	80054b4 <HAL_DMA_GetError>
 800903e:	4603      	mov	r3, r0
 8009040:	2b20      	cmp	r3, #32
 8009042:	d105      	bne.n	8009050 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2210      	movs	r2, #16
 8009048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e032      	b.n	80090b6 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 fa69 	bl	800a528 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d127      	bne.n	80090b4 <HAL_UART_DMAStop+0xd4>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b22      	cmp	r3, #34	; 0x22
 8009068:	d124      	bne.n	80090b4 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009078:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d015      	beq.n	80090ae <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009086:	4618      	mov	r0, r3
 8009088:	f7fa fd88 	bl	8003b9c <HAL_DMA_Abort>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00d      	beq.n	80090ae <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009096:	4618      	mov	r0, r3
 8009098:	f7fc fa0c 	bl	80054b4 <HAL_DMA_GetError>
 800909c:	4603      	mov	r3, r0
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d105      	bne.n	80090ae <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2210      	movs	r2, #16
 80090a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e003      	b.n	80090b6 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fa58 	bl	800a564 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80090e6:	4013      	ands	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d118      	bne.n	8009122 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d013      	beq.n	8009122 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	f003 0320 	and.w	r3, r3, #32
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8282 	beq.w	800961c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
      }
      return;
 8009120:	e27c      	b.n	800961c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 80ef 	beq.w	8009308 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	4b73      	ldr	r3, [pc, #460]	; (80092fc <HAL_UART_IRQHandler+0x23c>)
 800912e:	4013      	ands	r3, r2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d105      	bne.n	8009140 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4b72      	ldr	r3, [pc, #456]	; (8009300 <HAL_UART_IRQHandler+0x240>)
 8009138:	4013      	ands	r3, r2
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 80e4 	beq.w	8009308 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d010      	beq.n	800916c <HAL_UART_IRQHandler+0xac>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2201      	movs	r2, #1
 800915a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009162:	f043 0201 	orr.w	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d010      	beq.n	8009198 <HAL_UART_IRQHandler+0xd8>
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2202      	movs	r2, #2
 8009186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918e:	f043 0204 	orr.w	r2, r3, #4
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d010      	beq.n	80091c4 <HAL_UART_IRQHandler+0x104>
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2204      	movs	r2, #4
 80091b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ba:	f043 0202 	orr.w	r2, r3, #2
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d015      	beq.n	80091fa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4b48      	ldr	r3, [pc, #288]	; (80092fc <HAL_UART_IRQHandler+0x23c>)
 80091dc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2208      	movs	r2, #8
 80091e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f0:	f043 0208 	orr.w	r2, r3, #8
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009200:	2b00      	cmp	r3, #0
 8009202:	d011      	beq.n	8009228 <HAL_UART_IRQHandler+0x168>
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00c      	beq.n	8009228 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921e:	f043 0220 	orr.w	r2, r3, #32
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 81f6 	beq.w	8009620 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d007      	beq.n	8009262 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009268:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d004      	beq.n	8009282 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800927e:	2b00      	cmp	r3, #0
 8009280:	d031      	beq.n	80092e6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 f96e 	bl	800a564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009292:	2b40      	cmp	r3, #64	; 0x40
 8009294:	d123      	bne.n	80092de <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d013      	beq.n	80092d6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b2:	4a14      	ldr	r2, [pc, #80]	; (8009304 <HAL_UART_IRQHandler+0x244>)
 80092b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fa ff8c 	bl	80041d8 <HAL_DMA_Abort_IT>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d017      	beq.n	80092f6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d4:	e00f      	b.n	80092f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f9d4 	bl	8009684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	e00b      	b.n	80092f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f9d0 	bl	8009684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e4:	e007      	b.n	80092f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f9cc 	bl	8009684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80092f4:	e194      	b.n	8009620 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f6:	bf00      	nop
    return;
 80092f8:	e192      	b.n	8009620 <HAL_UART_IRQHandler+0x560>
 80092fa:	bf00      	nop
 80092fc:	10000001 	.word	0x10000001
 8009300:	04000120 	.word	0x04000120
 8009304:	0800a783 	.word	0x0800a783

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930c:	2b01      	cmp	r3, #1
 800930e:	f040 810f 	bne.w	8009530 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8109 	beq.w	8009530 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	f003 0310 	and.w	r3, r3, #16
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8103 	beq.w	8009530 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2210      	movs	r2, #16
 8009330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933c:	2b40      	cmp	r3, #64	; 0x40
 800933e:	f040 80bb 	bne.w	80094b8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a96      	ldr	r2, [pc, #600]	; (80095a4 <HAL_UART_IRQHandler+0x4e4>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d059      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a94      	ldr	r2, [pc, #592]	; (80095a8 <HAL_UART_IRQHandler+0x4e8>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d053      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a92      	ldr	r2, [pc, #584]	; (80095ac <HAL_UART_IRQHandler+0x4ec>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d04d      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a90      	ldr	r2, [pc, #576]	; (80095b0 <HAL_UART_IRQHandler+0x4f0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d047      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a8e      	ldr	r2, [pc, #568]	; (80095b4 <HAL_UART_IRQHandler+0x4f4>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d041      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a8c      	ldr	r2, [pc, #560]	; (80095b8 <HAL_UART_IRQHandler+0x4f8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d03b      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a8a      	ldr	r2, [pc, #552]	; (80095bc <HAL_UART_IRQHandler+0x4fc>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d035      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a88      	ldr	r2, [pc, #544]	; (80095c0 <HAL_UART_IRQHandler+0x500>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d02f      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a86      	ldr	r2, [pc, #536]	; (80095c4 <HAL_UART_IRQHandler+0x504>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d029      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a84      	ldr	r2, [pc, #528]	; (80095c8 <HAL_UART_IRQHandler+0x508>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d023      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a82      	ldr	r2, [pc, #520]	; (80095cc <HAL_UART_IRQHandler+0x50c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d01d      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a80      	ldr	r2, [pc, #512]	; (80095d0 <HAL_UART_IRQHandler+0x510>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d017      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a7e      	ldr	r2, [pc, #504]	; (80095d4 <HAL_UART_IRQHandler+0x514>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d011      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a7c      	ldr	r2, [pc, #496]	; (80095d8 <HAL_UART_IRQHandler+0x518>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00b      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a7a      	ldr	r2, [pc, #488]	; (80095dc <HAL_UART_IRQHandler+0x51c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d005      	beq.n	8009402 <HAL_UART_IRQHandler+0x342>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a78      	ldr	r2, [pc, #480]	; (80095e0 <HAL_UART_IRQHandler+0x520>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d105      	bne.n	800940e <HAL_UART_IRQHandler+0x34e>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	b29b      	uxth	r3, r3
 800940c:	e004      	b.n	8009418 <HAL_UART_IRQHandler+0x358>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b29b      	uxth	r3, r3
 8009418:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 8101 	beq.w	8009624 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009428:	893a      	ldrh	r2, [r7, #8]
 800942a:	429a      	cmp	r2, r3
 800942c:	f080 80fa 	bcs.w	8009624 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	893a      	ldrh	r2, [r7, #8]
 8009434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009442:	d02b      	beq.n	800949c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009452:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009472:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0210 	bic.w	r2, r2, #16
 8009490:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009496:	4618      	mov	r0, r3
 8009498:	f7fa fb80 	bl	8003b9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f8f1 	bl	8009698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094b6:	e0b5      	b.n	8009624 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 80a8 	beq.w	8009628 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80094d8:	897b      	ldrh	r3, [r7, #10]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 80a4 	beq.w	8009628 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6899      	ldr	r1, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b3a      	ldr	r3, [pc, #232]	; (80095e4 <HAL_UART_IRQHandler+0x524>)
 80094fc:	400b      	ands	r3, r1
 80094fe:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0210 	bic.w	r2, r2, #16
 8009522:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009524:	897b      	ldrh	r3, [r7, #10]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f8b5 	bl	8009698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800952e:	e07b      	b.n	8009628 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00d      	beq.n	8009556 <HAL_UART_IRQHandler+0x496>
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800954c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 f947 	bl	800a7e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009554:	e06b      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955c:	2b00      	cmp	r3, #0
 800955e:	d012      	beq.n	8009586 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009566:	2b00      	cmp	r3, #0
 8009568:	d104      	bne.n	8009574 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d008      	beq.n	8009586 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009578:	2b00      	cmp	r3, #0
 800957a:	d057      	beq.n	800962c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	4798      	blx	r3
    }
    return;
 8009584:	e052      	b.n	800962c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d02b      	beq.n	80095e8 <HAL_UART_IRQHandler+0x528>
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d026      	beq.n	80095e8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f907 	bl	800a7ae <UART_EndTransmit_IT>
    return;
 80095a0:	e045      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
 80095a2:	bf00      	nop
 80095a4:	40020010 	.word	0x40020010
 80095a8:	40020028 	.word	0x40020028
 80095ac:	40020040 	.word	0x40020040
 80095b0:	40020058 	.word	0x40020058
 80095b4:	40020070 	.word	0x40020070
 80095b8:	40020088 	.word	0x40020088
 80095bc:	400200a0 	.word	0x400200a0
 80095c0:	400200b8 	.word	0x400200b8
 80095c4:	40020410 	.word	0x40020410
 80095c8:	40020428 	.word	0x40020428
 80095cc:	40020440 	.word	0x40020440
 80095d0:	40020458 	.word	0x40020458
 80095d4:	40020470 	.word	0x40020470
 80095d8:	40020488 	.word	0x40020488
 80095dc:	400204a0 	.word	0x400204a0
 80095e0:	400204b8 	.word	0x400204b8
 80095e4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d008      	beq.n	8009604 <HAL_UART_IRQHandler+0x544>
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 f904 	bl	800a80a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009602:	e014      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00f      	beq.n	800962e <HAL_UART_IRQHandler+0x56e>
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	da0c      	bge.n	800962e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 f8ee 	bl	800a7f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800961a:	e008      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
      return;
 800961c:	bf00      	nop
 800961e:	e006      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
    return;
 8009620:	bf00      	nop
 8009622:	e004      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
      return;
 8009624:	bf00      	nop
 8009626:	e002      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
      return;
 8009628:	bf00      	nop
 800962a:	e000      	b.n	800962e <HAL_UART_IRQHandler+0x56e>
    return;
 800962c:	bf00      	nop
  }
}
 800962e:	3720      	adds	r7, #32
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096b0:	b5b0      	push	{r4, r5, r7, lr}
 80096b2:	b08e      	sub	sp, #56	; 0x38
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4bbf      	ldr	r3, [pc, #764]	; (80099dc <UART_SetConfig+0x32c>)
 80096de:	4013      	ands	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6812      	ldr	r2, [r2, #0]
 80096e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096e6:	430b      	orrs	r3, r1
 80096e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4ab5      	ldr	r2, [pc, #724]	; (80099e0 <UART_SetConfig+0x330>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d004      	beq.n	800971a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009716:	4313      	orrs	r3, r2
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	4bb0      	ldr	r3, [pc, #704]	; (80099e4 <UART_SetConfig+0x334>)
 8009722:	4013      	ands	r3, r2
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800972a:	430b      	orrs	r3, r1
 800972c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	f023 010f 	bic.w	r1, r3, #15
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4aa7      	ldr	r2, [pc, #668]	; (80099e8 <UART_SetConfig+0x338>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d176      	bne.n	800983c <UART_SetConfig+0x18c>
 800974e:	4ba7      	ldr	r3, [pc, #668]	; (80099ec <UART_SetConfig+0x33c>)
 8009750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009756:	2b28      	cmp	r3, #40	; 0x28
 8009758:	d86c      	bhi.n	8009834 <UART_SetConfig+0x184>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <UART_SetConfig+0xb0>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	08009805 	.word	0x08009805
 8009764:	08009835 	.word	0x08009835
 8009768:	08009835 	.word	0x08009835
 800976c:	08009835 	.word	0x08009835
 8009770:	08009835 	.word	0x08009835
 8009774:	08009835 	.word	0x08009835
 8009778:	08009835 	.word	0x08009835
 800977c:	08009835 	.word	0x08009835
 8009780:	0800980d 	.word	0x0800980d
 8009784:	08009835 	.word	0x08009835
 8009788:	08009835 	.word	0x08009835
 800978c:	08009835 	.word	0x08009835
 8009790:	08009835 	.word	0x08009835
 8009794:	08009835 	.word	0x08009835
 8009798:	08009835 	.word	0x08009835
 800979c:	08009835 	.word	0x08009835
 80097a0:	08009815 	.word	0x08009815
 80097a4:	08009835 	.word	0x08009835
 80097a8:	08009835 	.word	0x08009835
 80097ac:	08009835 	.word	0x08009835
 80097b0:	08009835 	.word	0x08009835
 80097b4:	08009835 	.word	0x08009835
 80097b8:	08009835 	.word	0x08009835
 80097bc:	08009835 	.word	0x08009835
 80097c0:	0800981d 	.word	0x0800981d
 80097c4:	08009835 	.word	0x08009835
 80097c8:	08009835 	.word	0x08009835
 80097cc:	08009835 	.word	0x08009835
 80097d0:	08009835 	.word	0x08009835
 80097d4:	08009835 	.word	0x08009835
 80097d8:	08009835 	.word	0x08009835
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009825 	.word	0x08009825
 80097e4:	08009835 	.word	0x08009835
 80097e8:	08009835 	.word	0x08009835
 80097ec:	08009835 	.word	0x08009835
 80097f0:	08009835 	.word	0x08009835
 80097f4:	08009835 	.word	0x08009835
 80097f8:	08009835 	.word	0x08009835
 80097fc:	08009835 	.word	0x08009835
 8009800:	0800982d 	.word	0x0800982d
 8009804:	2301      	movs	r3, #1
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e222      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e21e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e21a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e216      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009824:	2320      	movs	r3, #32
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e212      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800982c:	2340      	movs	r3, #64	; 0x40
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009832:	e20e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009834:	2380      	movs	r3, #128	; 0x80
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e20a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a6b      	ldr	r2, [pc, #428]	; (80099f0 <UART_SetConfig+0x340>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d130      	bne.n	80098a8 <UART_SetConfig+0x1f8>
 8009846:	4b69      	ldr	r3, [pc, #420]	; (80099ec <UART_SetConfig+0x33c>)
 8009848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	2b05      	cmp	r3, #5
 8009850:	d826      	bhi.n	80098a0 <UART_SetConfig+0x1f0>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0x1a8>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009871 	.word	0x08009871
 800985c:	08009879 	.word	0x08009879
 8009860:	08009881 	.word	0x08009881
 8009864:	08009889 	.word	0x08009889
 8009868:	08009891 	.word	0x08009891
 800986c:	08009899 	.word	0x08009899
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009876:	e1ec      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987e:	e1e8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009886:	e1e4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988e:	e1e0      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009890:	2320      	movs	r3, #32
 8009892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009896:	e1dc      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989e:	e1d8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a6:	e1d4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a51      	ldr	r2, [pc, #324]	; (80099f4 <UART_SetConfig+0x344>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d130      	bne.n	8009914 <UART_SetConfig+0x264>
 80098b2:	4b4e      	ldr	r3, [pc, #312]	; (80099ec <UART_SetConfig+0x33c>)
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d826      	bhi.n	800990c <UART_SetConfig+0x25c>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x214>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098dd 	.word	0x080098dd
 80098c8:	080098e5 	.word	0x080098e5
 80098cc:	080098ed 	.word	0x080098ed
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	08009905 	.word	0x08009905
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e2:	e1b6      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098e4:	2304      	movs	r3, #4
 80098e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ea:	e1b2      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098ec:	2308      	movs	r3, #8
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e1ae      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098f4:	2310      	movs	r3, #16
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e1aa      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80098fc:	2320      	movs	r3, #32
 80098fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009902:	e1a6      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990a:	e1a2      	b.n	8009c52 <UART_SetConfig+0x5a2>
 800990c:	2380      	movs	r3, #128	; 0x80
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e19e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a37      	ldr	r2, [pc, #220]	; (80099f8 <UART_SetConfig+0x348>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d130      	bne.n	8009980 <UART_SetConfig+0x2d0>
 800991e:	4b33      	ldr	r3, [pc, #204]	; (80099ec <UART_SetConfig+0x33c>)
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	2b05      	cmp	r3, #5
 8009928:	d826      	bhi.n	8009978 <UART_SetConfig+0x2c8>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0x280>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009949 	.word	0x08009949
 8009934:	08009951 	.word	0x08009951
 8009938:	08009959 	.word	0x08009959
 800993c:	08009961 	.word	0x08009961
 8009940:	08009969 	.word	0x08009969
 8009944:	08009971 	.word	0x08009971
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e180      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	e17c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	e178      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009966:	e174      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009968:	2320      	movs	r3, #32
 800996a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996e:	e170      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009976:	e16c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e168      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1d      	ldr	r2, [pc, #116]	; (80099fc <UART_SetConfig+0x34c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d142      	bne.n	8009a10 <UART_SetConfig+0x360>
 800998a:	4b18      	ldr	r3, [pc, #96]	; (80099ec <UART_SetConfig+0x33c>)
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b05      	cmp	r3, #5
 8009994:	d838      	bhi.n	8009a08 <UART_SetConfig+0x358>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0x2ec>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	080099c5 	.word	0x080099c5
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	08009a01 	.word	0x08009a01
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e14a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e146      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e142      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e13e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099d4:	2320      	movs	r3, #32
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e13a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 80099dc:	cfff69f3 	.word	0xcfff69f3
 80099e0:	58000c00 	.word	0x58000c00
 80099e4:	11fff4ff 	.word	0x11fff4ff
 80099e8:	40011000 	.word	0x40011000
 80099ec:	58024400 	.word	0x58024400
 80099f0:	40004400 	.word	0x40004400
 80099f4:	40004800 	.word	0x40004800
 80099f8:	40004c00 	.word	0x40004c00
 80099fc:	40005000 	.word	0x40005000
 8009a00:	2340      	movs	r3, #64	; 0x40
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e124      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	e120      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4acc      	ldr	r2, [pc, #816]	; (8009d48 <UART_SetConfig+0x698>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d176      	bne.n	8009b08 <UART_SetConfig+0x458>
 8009a1a:	4bcc      	ldr	r3, [pc, #816]	; (8009d4c <UART_SetConfig+0x69c>)
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a22:	2b28      	cmp	r3, #40	; 0x28
 8009a24:	d86c      	bhi.n	8009b00 <UART_SetConfig+0x450>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <UART_SetConfig+0x37c>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009b01 	.word	0x08009b01
 8009a34:	08009b01 	.word	0x08009b01
 8009a38:	08009b01 	.word	0x08009b01
 8009a3c:	08009b01 	.word	0x08009b01
 8009a40:	08009b01 	.word	0x08009b01
 8009a44:	08009b01 	.word	0x08009b01
 8009a48:	08009b01 	.word	0x08009b01
 8009a4c:	08009ad9 	.word	0x08009ad9
 8009a50:	08009b01 	.word	0x08009b01
 8009a54:	08009b01 	.word	0x08009b01
 8009a58:	08009b01 	.word	0x08009b01
 8009a5c:	08009b01 	.word	0x08009b01
 8009a60:	08009b01 	.word	0x08009b01
 8009a64:	08009b01 	.word	0x08009b01
 8009a68:	08009b01 	.word	0x08009b01
 8009a6c:	08009ae1 	.word	0x08009ae1
 8009a70:	08009b01 	.word	0x08009b01
 8009a74:	08009b01 	.word	0x08009b01
 8009a78:	08009b01 	.word	0x08009b01
 8009a7c:	08009b01 	.word	0x08009b01
 8009a80:	08009b01 	.word	0x08009b01
 8009a84:	08009b01 	.word	0x08009b01
 8009a88:	08009b01 	.word	0x08009b01
 8009a8c:	08009ae9 	.word	0x08009ae9
 8009a90:	08009b01 	.word	0x08009b01
 8009a94:	08009b01 	.word	0x08009b01
 8009a98:	08009b01 	.word	0x08009b01
 8009a9c:	08009b01 	.word	0x08009b01
 8009aa0:	08009b01 	.word	0x08009b01
 8009aa4:	08009b01 	.word	0x08009b01
 8009aa8:	08009b01 	.word	0x08009b01
 8009aac:	08009af1 	.word	0x08009af1
 8009ab0:	08009b01 	.word	0x08009b01
 8009ab4:	08009b01 	.word	0x08009b01
 8009ab8:	08009b01 	.word	0x08009b01
 8009abc:	08009b01 	.word	0x08009b01
 8009ac0:	08009b01 	.word	0x08009b01
 8009ac4:	08009b01 	.word	0x08009b01
 8009ac8:	08009b01 	.word	0x08009b01
 8009acc:	08009af9 	.word	0x08009af9
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e0bc      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e0b8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e0b4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e0b0      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009af0:	2320      	movs	r3, #32
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e0ac      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e0a8      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e0a4      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a90      	ldr	r2, [pc, #576]	; (8009d50 <UART_SetConfig+0x6a0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d130      	bne.n	8009b74 <UART_SetConfig+0x4c4>
 8009b12:	4b8e      	ldr	r3, [pc, #568]	; (8009d4c <UART_SetConfig+0x69c>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d826      	bhi.n	8009b6c <UART_SetConfig+0x4bc>
 8009b1e:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <UART_SetConfig+0x474>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b3d 	.word	0x08009b3d
 8009b28:	08009b45 	.word	0x08009b45
 8009b2c:	08009b4d 	.word	0x08009b4d
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e086      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e082      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e07e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e07a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e076      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e072      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e06e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a76      	ldr	r2, [pc, #472]	; (8009d54 <UART_SetConfig+0x6a4>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d130      	bne.n	8009be0 <UART_SetConfig+0x530>
 8009b7e:	4b73      	ldr	r3, [pc, #460]	; (8009d4c <UART_SetConfig+0x69c>)
 8009b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	d826      	bhi.n	8009bd8 <UART_SetConfig+0x528>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0x4e0>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009ba9 	.word	0x08009ba9
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bc9 	.word	0x08009bc9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e050      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e04c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e048      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e044      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e040      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e03c      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e038      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a5c      	ldr	r2, [pc, #368]	; (8009d58 <UART_SetConfig+0x6a8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d130      	bne.n	8009c4c <UART_SetConfig+0x59c>
 8009bea:	4b58      	ldr	r3, [pc, #352]	; (8009d4c <UART_SetConfig+0x69c>)
 8009bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	d826      	bhi.n	8009c44 <UART_SetConfig+0x594>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x54c>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c15 	.word	0x08009c15
 8009c00:	08009c1d 	.word	0x08009c1d
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c35 	.word	0x08009c35
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	2302      	movs	r3, #2
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e01a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e016      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e012      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c32:	e00e      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c34:	2320      	movs	r3, #32
 8009c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3a:	e00a      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e006      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c44:	2380      	movs	r3, #128	; 0x80
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e002      	b.n	8009c52 <UART_SetConfig+0x5a2>
 8009c4c:	2380      	movs	r3, #128	; 0x80
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a40      	ldr	r2, [pc, #256]	; (8009d58 <UART_SetConfig+0x6a8>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	f040 80ef 	bne.w	8009e3c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	dc46      	bgt.n	8009cf4 <UART_SetConfig+0x644>
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	f2c0 8081 	blt.w	8009d6e <UART_SetConfig+0x6be>
 8009c6c:	3b02      	subs	r3, #2
 8009c6e:	2b1e      	cmp	r3, #30
 8009c70:	d87d      	bhi.n	8009d6e <UART_SetConfig+0x6be>
 8009c72:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <UART_SetConfig+0x5c8>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009cfb 	.word	0x08009cfb
 8009c7c:	08009d6f 	.word	0x08009d6f
 8009c80:	08009d03 	.word	0x08009d03
 8009c84:	08009d6f 	.word	0x08009d6f
 8009c88:	08009d6f 	.word	0x08009d6f
 8009c8c:	08009d6f 	.word	0x08009d6f
 8009c90:	08009d13 	.word	0x08009d13
 8009c94:	08009d6f 	.word	0x08009d6f
 8009c98:	08009d6f 	.word	0x08009d6f
 8009c9c:	08009d6f 	.word	0x08009d6f
 8009ca0:	08009d6f 	.word	0x08009d6f
 8009ca4:	08009d6f 	.word	0x08009d6f
 8009ca8:	08009d6f 	.word	0x08009d6f
 8009cac:	08009d6f 	.word	0x08009d6f
 8009cb0:	08009d23 	.word	0x08009d23
 8009cb4:	08009d6f 	.word	0x08009d6f
 8009cb8:	08009d6f 	.word	0x08009d6f
 8009cbc:	08009d6f 	.word	0x08009d6f
 8009cc0:	08009d6f 	.word	0x08009d6f
 8009cc4:	08009d6f 	.word	0x08009d6f
 8009cc8:	08009d6f 	.word	0x08009d6f
 8009ccc:	08009d6f 	.word	0x08009d6f
 8009cd0:	08009d6f 	.word	0x08009d6f
 8009cd4:	08009d6f 	.word	0x08009d6f
 8009cd8:	08009d6f 	.word	0x08009d6f
 8009cdc:	08009d6f 	.word	0x08009d6f
 8009ce0:	08009d6f 	.word	0x08009d6f
 8009ce4:	08009d6f 	.word	0x08009d6f
 8009ce8:	08009d6f 	.word	0x08009d6f
 8009cec:	08009d6f 	.word	0x08009d6f
 8009cf0:	08009d61 	.word	0x08009d61
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	d036      	beq.n	8009d66 <UART_SetConfig+0x6b6>
 8009cf8:	e039      	b.n	8009d6e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cfa:	f7fe f967 	bl	8007fcc <HAL_RCCEx_GetD3PCLK1Freq>
 8009cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d00:	e03b      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d02:	f107 0314 	add.w	r3, r7, #20
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe f976 	bl	8007ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d10:	e033      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fac2 	bl	80082a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d20:	e02b      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d22:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <UART_SetConfig+0x69c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d2e:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <UART_SetConfig+0x69c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	08db      	lsrs	r3, r3, #3
 8009d34:	f003 0303 	and.w	r3, r3, #3
 8009d38:	4a08      	ldr	r2, [pc, #32]	; (8009d5c <UART_SetConfig+0x6ac>)
 8009d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d40:	e01b      	b.n	8009d7a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <UART_SetConfig+0x6ac>)
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d46:	e018      	b.n	8009d7a <UART_SetConfig+0x6ca>
 8009d48:	40011400 	.word	0x40011400
 8009d4c:	58024400 	.word	0x58024400
 8009d50:	40007800 	.word	0x40007800
 8009d54:	40007c00 	.word	0x40007c00
 8009d58:	58000c00 	.word	0x58000c00
 8009d5c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d60:	4bc4      	ldr	r3, [pc, #784]	; (800a074 <UART_SetConfig+0x9c4>)
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d64:	e009      	b.n	8009d7a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d6c:	e005      	b.n	8009d7a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 81da 	beq.w	800a136 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	4abc      	ldr	r2, [pc, #752]	; (800a078 <UART_SetConfig+0x9c8>)
 8009d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d94:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	6a3a      	ldr	r2, [r7, #32]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d305      	bcc.n	8009db2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d903      	bls.n	8009dba <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009db8:	e1bd      	b.n	800a136 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f04f 0100 	mov.w	r1, #0
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	4aac      	ldr	r2, [pc, #688]	; (800a078 <UART_SetConfig+0x9c8>)
 8009dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	f7f6 fa85 	bl	80002e0 <__aeabi_uldivmod>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	f04f 0300 	mov.w	r3, #0
 8009de6:	020b      	lsls	r3, r1, #8
 8009de8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dec:	0202      	lsls	r2, r0, #8
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	6849      	ldr	r1, [r1, #4]
 8009df2:	0849      	lsrs	r1, r1, #1
 8009df4:	4608      	mov	r0, r1
 8009df6:	f04f 0100 	mov.w	r1, #0
 8009dfa:	1814      	adds	r4, r2, r0
 8009dfc:	eb43 0501 	adc.w	r5, r3, r1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	461a      	mov	r2, r3
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fa67 	bl	80002e0 <__aeabi_uldivmod>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4613      	mov	r3, r2
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e20:	d308      	bcc.n	8009e34 <UART_SetConfig+0x784>
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e28:	d204      	bcs.n	8009e34 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e30:	60da      	str	r2, [r3, #12]
 8009e32:	e180      	b.n	800a136 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e3a:	e17c      	b.n	800a136 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e44:	f040 80bf 	bne.w	8009fc6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009e48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	dc49      	bgt.n	8009ee4 <UART_SetConfig+0x834>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	db7c      	blt.n	8009f4e <UART_SetConfig+0x89e>
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d87a      	bhi.n	8009f4e <UART_SetConfig+0x89e>
 8009e58:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <UART_SetConfig+0x7b0>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009ef3 	.word	0x08009ef3
 8009e68:	08009f4f 	.word	0x08009f4f
 8009e6c:	08009f4f 	.word	0x08009f4f
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009f4f 	.word	0x08009f4f
 8009e78:	08009f4f 	.word	0x08009f4f
 8009e7c:	08009f4f 	.word	0x08009f4f
 8009e80:	08009f0b 	.word	0x08009f0b
 8009e84:	08009f4f 	.word	0x08009f4f
 8009e88:	08009f4f 	.word	0x08009f4f
 8009e8c:	08009f4f 	.word	0x08009f4f
 8009e90:	08009f4f 	.word	0x08009f4f
 8009e94:	08009f4f 	.word	0x08009f4f
 8009e98:	08009f4f 	.word	0x08009f4f
 8009e9c:	08009f4f 	.word	0x08009f4f
 8009ea0:	08009f1b 	.word	0x08009f1b
 8009ea4:	08009f4f 	.word	0x08009f4f
 8009ea8:	08009f4f 	.word	0x08009f4f
 8009eac:	08009f4f 	.word	0x08009f4f
 8009eb0:	08009f4f 	.word	0x08009f4f
 8009eb4:	08009f4f 	.word	0x08009f4f
 8009eb8:	08009f4f 	.word	0x08009f4f
 8009ebc:	08009f4f 	.word	0x08009f4f
 8009ec0:	08009f4f 	.word	0x08009f4f
 8009ec4:	08009f4f 	.word	0x08009f4f
 8009ec8:	08009f4f 	.word	0x08009f4f
 8009ecc:	08009f4f 	.word	0x08009f4f
 8009ed0:	08009f4f 	.word	0x08009f4f
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f4f 	.word	0x08009f4f
 8009edc:	08009f4f 	.word	0x08009f4f
 8009ee0:	08009f41 	.word	0x08009f41
 8009ee4:	2b40      	cmp	r3, #64	; 0x40
 8009ee6:	d02e      	beq.n	8009f46 <UART_SetConfig+0x896>
 8009ee8:	e031      	b.n	8009f4e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eea:	f7fd f8c1 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 8009eee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef0:	e033      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ef2:	f7fd f8d3 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 8009ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef8:	e02f      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efa:	f107 0314 	add.w	r3, r7, #20
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe f87a 	bl	8007ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f08:	e027      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0a:	f107 0308 	add.w	r3, r7, #8
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe f9c6 	bl	80082a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f18:	e01f      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1a:	4b58      	ldr	r3, [pc, #352]	; (800a07c <UART_SetConfig+0x9cc>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f26:	4b55      	ldr	r3, [pc, #340]	; (800a07c <UART_SetConfig+0x9cc>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	4a53      	ldr	r2, [pc, #332]	; (800a080 <UART_SetConfig+0x9d0>)
 8009f32:	fa22 f303 	lsr.w	r3, r2, r3
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f38:	e00f      	b.n	8009f5a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009f3a:	4b51      	ldr	r3, [pc, #324]	; (800a080 <UART_SetConfig+0x9d0>)
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f3e:	e00c      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f40:	4b4c      	ldr	r3, [pc, #304]	; (800a074 <UART_SetConfig+0x9c4>)
 8009f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f44:	e009      	b.n	8009f5a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f4c:	e005      	b.n	8009f5a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80ea 	beq.w	800a136 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	4a44      	ldr	r2, [pc, #272]	; (800a078 <UART_SetConfig+0x9c8>)
 8009f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f74:	005a      	lsls	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	441a      	add	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2b0f      	cmp	r3, #15
 8009f8e:	d916      	bls.n	8009fbe <UART_SetConfig+0x90e>
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f96:	d212      	bcs.n	8009fbe <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f023 030f 	bic.w	r3, r3, #15
 8009fa0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	085b      	lsrs	r3, r3, #1
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	f003 0307 	and.w	r3, r3, #7
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fba:	60da      	str	r2, [r3, #12]
 8009fbc:	e0bb      	b.n	800a136 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fc4:	e0b7      	b.n	800a136 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fca:	2b20      	cmp	r3, #32
 8009fcc:	dc4a      	bgt.n	800a064 <UART_SetConfig+0x9b4>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f2c0 8086 	blt.w	800a0e0 <UART_SetConfig+0xa30>
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	f200 8083 	bhi.w	800a0e0 <UART_SetConfig+0xa30>
 8009fda:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <UART_SetConfig+0x930>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	0800a06b 	.word	0x0800a06b
 8009fe4:	0800a085 	.word	0x0800a085
 8009fe8:	0800a0e1 	.word	0x0800a0e1
 8009fec:	0800a0e1 	.word	0x0800a0e1
 8009ff0:	0800a08d 	.word	0x0800a08d
 8009ff4:	0800a0e1 	.word	0x0800a0e1
 8009ff8:	0800a0e1 	.word	0x0800a0e1
 8009ffc:	0800a0e1 	.word	0x0800a0e1
 800a000:	0800a09d 	.word	0x0800a09d
 800a004:	0800a0e1 	.word	0x0800a0e1
 800a008:	0800a0e1 	.word	0x0800a0e1
 800a00c:	0800a0e1 	.word	0x0800a0e1
 800a010:	0800a0e1 	.word	0x0800a0e1
 800a014:	0800a0e1 	.word	0x0800a0e1
 800a018:	0800a0e1 	.word	0x0800a0e1
 800a01c:	0800a0e1 	.word	0x0800a0e1
 800a020:	0800a0ad 	.word	0x0800a0ad
 800a024:	0800a0e1 	.word	0x0800a0e1
 800a028:	0800a0e1 	.word	0x0800a0e1
 800a02c:	0800a0e1 	.word	0x0800a0e1
 800a030:	0800a0e1 	.word	0x0800a0e1
 800a034:	0800a0e1 	.word	0x0800a0e1
 800a038:	0800a0e1 	.word	0x0800a0e1
 800a03c:	0800a0e1 	.word	0x0800a0e1
 800a040:	0800a0e1 	.word	0x0800a0e1
 800a044:	0800a0e1 	.word	0x0800a0e1
 800a048:	0800a0e1 	.word	0x0800a0e1
 800a04c:	0800a0e1 	.word	0x0800a0e1
 800a050:	0800a0e1 	.word	0x0800a0e1
 800a054:	0800a0e1 	.word	0x0800a0e1
 800a058:	0800a0e1 	.word	0x0800a0e1
 800a05c:	0800a0e1 	.word	0x0800a0e1
 800a060:	0800a0d3 	.word	0x0800a0d3
 800a064:	2b40      	cmp	r3, #64	; 0x40
 800a066:	d037      	beq.n	800a0d8 <UART_SetConfig+0xa28>
 800a068:	e03a      	b.n	800a0e0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a06a:	f7fd f801 	bl	8007070 <HAL_RCC_GetPCLK1Freq>
 800a06e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a070:	e03c      	b.n	800a0ec <UART_SetConfig+0xa3c>
 800a072:	bf00      	nop
 800a074:	003d0900 	.word	0x003d0900
 800a078:	0800c250 	.word	0x0800c250
 800a07c:	58024400 	.word	0x58024400
 800a080:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a084:	f7fd f80a 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 800a088:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a08a:	e02f      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08c:	f107 0314 	add.w	r3, r7, #20
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd ffb1 	bl	8007ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09a:	e027      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe f8fd 	bl	80082a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0aa:	e01f      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ac:	4b2c      	ldr	r3, [pc, #176]	; (800a160 <UART_SetConfig+0xab0>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0b8:	4b29      	ldr	r3, [pc, #164]	; (800a160 <UART_SetConfig+0xab0>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	4a28      	ldr	r2, [pc, #160]	; (800a164 <UART_SetConfig+0xab4>)
 800a0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ca:	e00f      	b.n	800a0ec <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a0cc:	4b25      	ldr	r3, [pc, #148]	; (800a164 <UART_SetConfig+0xab4>)
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d0:	e00c      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0d2:	4b25      	ldr	r3, [pc, #148]	; (800a168 <UART_SetConfig+0xab8>)
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d6:	e009      	b.n	800a0ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0de:	e005      	b.n	800a0ec <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0ea:	bf00      	nop
    }

    if (pclk != 0U)
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d021      	beq.n	800a136 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <UART_SetConfig+0xabc>)
 800a0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	fbb3 f2f2 	udiv	r2, r3, r2
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	441a      	add	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	b29b      	uxth	r3, r3
 800a116:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	2b0f      	cmp	r3, #15
 800a11c:	d908      	bls.n	800a130 <UART_SetConfig+0xa80>
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a124:	d204      	bcs.n	800a130 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a12c:	60da      	str	r2, [r3, #12]
 800a12e:	e002      	b.n	800a136 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a152:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a156:	4618      	mov	r0, r3
 800a158:	3738      	adds	r7, #56	; 0x38
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bdb0      	pop	{r4, r5, r7, pc}
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
 800a164:	03d09000 	.word	0x03d09000
 800a168:	003d0900 	.word	0x003d0900
 800a16c:	0800c250 	.word	0x0800c250

0800a170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00a      	beq.n	800a19a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a204:	f003 0310 	and.w	r3, r3, #16
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01a      	beq.n	800a286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26e:	d10a      	bne.n	800a286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2c4:	f7f8 fdac 	bl	8002e20 <HAL_GetTick>
 800a2c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0308 	and.w	r3, r3, #8
 800a2d4:	2b08      	cmp	r3, #8
 800a2d6:	d10e      	bne.n	800a2f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f82f 	bl	800a34a <UART_WaitOnFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e025      	b.n	800a342 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b04      	cmp	r3, #4
 800a302:	d10e      	bne.n	800a322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f819 	bl	800a34a <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e00f      	b.n	800a342 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2220      	movs	r2, #32
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60f8      	str	r0, [r7, #12]
 800a352:	60b9      	str	r1, [r7, #8]
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4613      	mov	r3, r2
 800a358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35a:	e062      	b.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a362:	d05e      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a364:	f7f8 fd5c 	bl	8002e20 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <UART_WaitOnFlagUntilTimeout+0x30>
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d11d      	bne.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a388:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e045      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d02e      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3d2:	d126      	bne.n	800a422 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0201 	bic.w	r2, r2, #1
 800a3fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2220      	movs	r2, #32
 800a40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2220      	movs	r2, #32
 800a412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e00f      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4013      	ands	r3, r2
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	429a      	cmp	r2, r3
 800a430:	bf0c      	ite	eq
 800a432:	2301      	moveq	r3, #1
 800a434:	2300      	movne	r3, #0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d08d      	beq.n	800a35c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	88fa      	ldrh	r2, [r7, #6]
 800a464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2222      	movs	r2, #34	; 0x22
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d02c      	beq.n	800a4da <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a484:	4a25      	ldr	r2, [pc, #148]	; (800a51c <UART_Start_Receive_DMA+0xd0>)
 800a486:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a48c:	4a24      	ldr	r2, [pc, #144]	; (800a520 <UART_Start_Receive_DMA+0xd4>)
 800a48e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a494:	4a23      	ldr	r2, [pc, #140]	; (800a524 <UART_Start_Receive_DMA+0xd8>)
 800a496:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a49c:	2200      	movs	r2, #0
 800a49e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3324      	adds	r3, #36	; 0x24
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	f7f9 f908 	bl	80036c8 <HAL_DMA_Start_IT>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00d      	beq.n	800a4da <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2210      	movs	r2, #16
 800a4c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e01c      	b.n	800a514 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0201 	orr.w	r2, r2, #1
 800a500:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a510:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	0800a635 	.word	0x0800a635
 800a520:	0800a6cb 	.word	0x0800a6cb
 800a524:	0800a703 	.word	0x0800a703

0800a528 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a53e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a54e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2220      	movs	r2, #32
 800a554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a57a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6899      	ldr	r1, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <UART_EndRxTransfer+0x60>)
 800a588:	400b      	ands	r3, r1
 800a58a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a590:	2b01      	cmp	r3, #1
 800a592:	d107      	bne.n	800a5a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 0210 	bic.w	r2, r2, #16
 800a5a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	effffffe 	.word	0xeffffffe

0800a5c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5de:	d014      	beq.n	800a60a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5f6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a606:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a608:	e002      	b.n	800a610 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff f812 	bl	8009634 <HAL_UART_TxCpltCallback>
}
 800a610:	bf00      	nop
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7ff f80e 	bl	8009648 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64a:	d02b      	beq.n	800a6a4 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a662:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0201 	bic.w	r2, r2, #1
 800a672:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a682:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d107      	bne.n	800a6a4 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0210 	bic.w	r2, r2, #16
 800a6a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d107      	bne.n	800a6bc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f7fe ffef 	bl	8009698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6ba:	e002      	b.n	800a6c2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7fe ffcd 	bl	800965c <HAL_UART_RxCpltCallback>
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d109      	bne.n	800a6f4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7fe ffd3 	bl	8009698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6f2:	e002      	b.n	800a6fa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f7fe ffbb 	bl	8009670 <HAL_UART_RxHalfCpltCallback>
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a716:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a72a:	2b80      	cmp	r3, #128	; 0x80
 800a72c:	d109      	bne.n	800a742 <UART_DMAError+0x40>
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	2b21      	cmp	r3, #33	; 0x21
 800a732:	d106      	bne.n	800a742 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2200      	movs	r2, #0
 800a738:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a73c:	6978      	ldr	r0, [r7, #20]
 800a73e:	f7ff fef3 	bl	800a528 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74c:	2b40      	cmp	r3, #64	; 0x40
 800a74e:	d109      	bne.n	800a764 <UART_DMAError+0x62>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b22      	cmp	r3, #34	; 0x22
 800a754:	d106      	bne.n	800a764 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a75e:	6978      	ldr	r0, [r7, #20]
 800a760:	f7ff ff00 	bl	800a564 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a76a:	f043 0210 	orr.w	r2, r3, #16
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a774:	6978      	ldr	r0, [r7, #20]
 800a776:	f7fe ff85 	bl	8009684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a77a:	bf00      	nop
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7fe ff6f 	bl	8009684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b082      	sub	sp, #8
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7fe ff2d 	bl	8009634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a812:	bf00      	nop
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a81e:	b480      	push	{r7}
 800a820:	b085      	sub	sp, #20
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_UARTEx_DisableFifoMode+0x16>
 800a830:	2302      	movs	r3, #2
 800a832:	e027      	b.n	800a884 <HAL_UARTEx_DisableFifoMode+0x66>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2224      	movs	r2, #36	; 0x24
 800a840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a862:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2220      	movs	r2, #32
 800a876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d101      	bne.n	800a8a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e02d      	b.n	800a904 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2224      	movs	r2, #36	; 0x24
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f022 0201 	bic.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f84f 	bl	800a988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a920:	2302      	movs	r3, #2
 800a922:	e02d      	b.n	800a980 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2224      	movs	r2, #36	; 0x24
 800a930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0201 	bic.w	r2, r2, #1
 800a94a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	430a      	orrs	r2, r1
 800a95e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f811 	bl	800a988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2220      	movs	r2, #32
 800a972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a994:	2b00      	cmp	r3, #0
 800a996:	d108      	bne.n	800a9aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9a8:	e031      	b.n	800aa0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9aa:	2310      	movs	r3, #16
 800a9ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	0e5b      	lsrs	r3, r3, #25
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	0f5b      	lsrs	r3, r3, #29
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	f003 0307 	and.w	r3, r3, #7
 800a9d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	7b3a      	ldrb	r2, [r7, #12]
 800a9d6:	4911      	ldr	r1, [pc, #68]	; (800aa1c <UARTEx_SetNbDataToProcess+0x94>)
 800a9d8:	5c8a      	ldrb	r2, [r1, r2]
 800a9da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9de:	7b3a      	ldrb	r2, [r7, #12]
 800a9e0:	490f      	ldr	r1, [pc, #60]	; (800aa20 <UARTEx_SetNbDataToProcess+0x98>)
 800a9e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	7b7a      	ldrb	r2, [r7, #13]
 800a9f4:	4909      	ldr	r1, [pc, #36]	; (800aa1c <UARTEx_SetNbDataToProcess+0x94>)
 800a9f6:	5c8a      	ldrb	r2, [r1, r2]
 800a9f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9fc:	7b7a      	ldrb	r2, [r7, #13]
 800a9fe:	4908      	ldr	r1, [pc, #32]	; (800aa20 <UARTEx_SetNbDataToProcess+0x98>)
 800aa00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa02:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa0e:	bf00      	nop
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	0800c268 	.word	0x0800c268
 800aa20:	0800c270 	.word	0x0800c270

0800aa24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aa32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa36:	2b84      	cmp	r3, #132	; 0x84
 800aa38:	d005      	beq.n	800aa46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	3303      	adds	r3, #3
 800aa44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aa58:	f000 fc00 	bl	800b25c <vTaskStartScheduler>
  
  return osOK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa64:	b089      	sub	sp, #36	; 0x24
 800aa66:	af04      	add	r7, sp, #16
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d020      	beq.n	800aab6 <osThreadCreate+0x54>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01c      	beq.n	800aab6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685c      	ldr	r4, [r3, #4]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681d      	ldr	r5, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691e      	ldr	r6, [r3, #16]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff ffc8 	bl	800aa24 <makeFreeRtosPriority>
 800aa94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa9e:	9202      	str	r2, [sp, #8]
 800aaa0:	9301      	str	r3, [sp, #4]
 800aaa2:	9100      	str	r1, [sp, #0]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 f8ed 	bl	800ac8a <xTaskCreateStatic>
 800aab0:	4603      	mov	r3, r0
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e01c      	b.n	800aaf0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685c      	ldr	r4, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aac2:	b29e      	uxth	r6, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff ffaa 	bl	800aa24 <makeFreeRtosPriority>
 800aad0:	4602      	mov	r2, r0
 800aad2:	f107 030c 	add.w	r3, r7, #12
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	9200      	str	r2, [sp, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	4632      	mov	r2, r6
 800aade:	4629      	mov	r1, r5
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 f92f 	bl	800ad44 <xTaskCreate>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d001      	beq.n	800aaf0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e000      	b.n	800aaf2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aafa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <osDelay+0x16>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	e000      	b.n	800ab12 <osDelay+0x18>
 800ab10:	2301      	movs	r3, #1
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fa4c 	bl	800afb0 <vTaskDelay>
  
  return osOK;
 800ab18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f103 0208 	add.w	r2, r3, #8
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f103 0208 	add.w	r2, r3, #8
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f103 0208 	add.w	r2, r3, #8
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	689a      	ldr	r2, [r3, #8]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	601a      	str	r2, [r3, #0]
}
 800abb8:	bf00      	nop
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	d103      	bne.n	800abe4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e00c      	b.n	800abfe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	3308      	adds	r3, #8
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e002      	b.n	800abf2 <vListInsert+0x2e>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d2f6      	bcs.n	800abec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	601a      	str	r2, [r3, #0]
}
 800ac2a:	bf00      	nop
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac36:	b480      	push	{r7}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6892      	ldr	r2, [r2, #8]
 800ac4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	6852      	ldr	r2, [r2, #4]
 800ac56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d103      	bne.n	800ac6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	1e5a      	subs	r2, r3, #1
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b08e      	sub	sp, #56	; 0x38
 800ac8e:	af04      	add	r7, sp, #16
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10a      	bne.n	800acb4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <xTaskCreateStatic+0x46>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	61fb      	str	r3, [r7, #28]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acd0:	2354      	movs	r3, #84	; 0x54
 800acd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b54      	cmp	r3, #84	; 0x54
 800acd8:	d00a      	beq.n	800acf0 <xTaskCreateStatic+0x66>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	61bb      	str	r3, [r7, #24]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acf0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01e      	beq.n	800ad36 <xTaskCreateStatic+0xac>
 800acf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d01b      	beq.n	800ad36 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad10:	2300      	movs	r3, #0
 800ad12:	9303      	str	r3, [sp, #12]
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	9302      	str	r3, [sp, #8]
 800ad18:	f107 0314 	add.w	r3, r7, #20
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 f850 	bl	800adce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad30:	f000 f8d4 	bl	800aedc <prvAddNewTaskToReadyList>
 800ad34:	e001      	b.n	800ad3a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad3a:	697b      	ldr	r3, [r7, #20]
	}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3728      	adds	r7, #40	; 0x28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08c      	sub	sp, #48	; 0x30
 800ad48:	af04      	add	r7, sp, #16
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	4613      	mov	r3, r2
 800ad52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 ffe5 	bl	800bd28 <pvPortMalloc>
 800ad5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00e      	beq.n	800ad84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad66:	2054      	movs	r0, #84	; 0x54
 800ad68:	f000 ffde 	bl	800bd28 <pvPortMalloc>
 800ad6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d003      	beq.n	800ad7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	631a      	str	r2, [r3, #48]	; 0x30
 800ad7a:	e005      	b.n	800ad88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad7c:	6978      	ldr	r0, [r7, #20]
 800ad7e:	f001 f89f 	bl	800bec0 <vPortFree>
 800ad82:	e001      	b.n	800ad88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad84:	2300      	movs	r3, #0
 800ad86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d017      	beq.n	800adbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad96:	88fa      	ldrh	r2, [r7, #6]
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	9302      	str	r3, [sp, #8]
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 f80e 	bl	800adce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adb2:	69f8      	ldr	r0, [r7, #28]
 800adb4:	f000 f892 	bl	800aedc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adb8:	2301      	movs	r3, #1
 800adba:	61bb      	str	r3, [r7, #24]
 800adbc:	e002      	b.n	800adc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adbe:	f04f 33ff 	mov.w	r3, #4294967295
 800adc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adc4:	69bb      	ldr	r3, [r7, #24]
	}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3720      	adds	r7, #32
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b088      	sub	sp, #32
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ade6:	440b      	add	r3, r1
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f023 0307 	bic.w	r3, r3, #7
 800adf4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00a      	beq.n	800ae16 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	617b      	str	r3, [r7, #20]
}
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01f      	beq.n	800ae5c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61fb      	str	r3, [r7, #28]
 800ae20:	e012      	b.n	800ae48 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	4413      	add	r3, r2
 800ae28:	7819      	ldrb	r1, [r3, #0]
 800ae2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	4413      	add	r3, r2
 800ae30:	3334      	adds	r3, #52	; 0x34
 800ae32:	460a      	mov	r2, r1
 800ae34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	3301      	adds	r3, #1
 800ae46:	61fb      	str	r3, [r7, #28]
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	2b0f      	cmp	r3, #15
 800ae4c:	d9e9      	bls.n	800ae22 <prvInitialiseNewTask+0x54>
 800ae4e:	e000      	b.n	800ae52 <prvInitialiseNewTask+0x84>
			{
				break;
 800ae50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae5a:	e003      	b.n	800ae64 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d901      	bls.n	800ae6e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae6a:	2306      	movs	r3, #6
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae78:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	3304      	adds	r3, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fe6c 	bl	800ab62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	3318      	adds	r3, #24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fe67 	bl	800ab62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	f1c3 0207 	rsb	r2, r3, #7
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	2200      	movs	r2, #0
 800aeae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	69b8      	ldr	r0, [r7, #24]
 800aebe:	f000 fd27 	bl	800b910 <pxPortInitialiseStack>
 800aec2:	4602      	mov	r2, r0
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed4:	bf00      	nop
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aee4:	f000 fe3e 	bl	800bb64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aee8:	4b2a      	ldr	r3, [pc, #168]	; (800af94 <prvAddNewTaskToReadyList+0xb8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3301      	adds	r3, #1
 800aeee:	4a29      	ldr	r2, [pc, #164]	; (800af94 <prvAddNewTaskToReadyList+0xb8>)
 800aef0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aef2:	4b29      	ldr	r3, [pc, #164]	; (800af98 <prvAddNewTaskToReadyList+0xbc>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d109      	bne.n	800af0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aefa:	4a27      	ldr	r2, [pc, #156]	; (800af98 <prvAddNewTaskToReadyList+0xbc>)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af00:	4b24      	ldr	r3, [pc, #144]	; (800af94 <prvAddNewTaskToReadyList+0xb8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d110      	bne.n	800af2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af08:	f000 fbde 	bl	800b6c8 <prvInitialiseTaskLists>
 800af0c:	e00d      	b.n	800af2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af0e:	4b23      	ldr	r3, [pc, #140]	; (800af9c <prvAddNewTaskToReadyList+0xc0>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d109      	bne.n	800af2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af16:	4b20      	ldr	r3, [pc, #128]	; (800af98 <prvAddNewTaskToReadyList+0xbc>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	429a      	cmp	r2, r3
 800af22:	d802      	bhi.n	800af2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af24:	4a1c      	ldr	r2, [pc, #112]	; (800af98 <prvAddNewTaskToReadyList+0xbc>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <prvAddNewTaskToReadyList+0xc4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	3301      	adds	r3, #1
 800af30:	4a1b      	ldr	r2, [pc, #108]	; (800afa0 <prvAddNewTaskToReadyList+0xc4>)
 800af32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	2201      	movs	r2, #1
 800af3a:	409a      	lsls	r2, r3
 800af3c:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <prvAddNewTaskToReadyList+0xc8>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4313      	orrs	r3, r2
 800af42:	4a18      	ldr	r2, [pc, #96]	; (800afa4 <prvAddNewTaskToReadyList+0xc8>)
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4a15      	ldr	r2, [pc, #84]	; (800afa8 <prvAddNewTaskToReadyList+0xcc>)
 800af54:	441a      	add	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3304      	adds	r3, #4
 800af5a:	4619      	mov	r1, r3
 800af5c:	4610      	mov	r0, r2
 800af5e:	f7ff fe0d 	bl	800ab7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af62:	f000 fe2f 	bl	800bbc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af66:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <prvAddNewTaskToReadyList+0xc0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00e      	beq.n	800af8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <prvAddNewTaskToReadyList+0xbc>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	429a      	cmp	r2, r3
 800af7a:	d207      	bcs.n	800af8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af7c:	4b0b      	ldr	r3, [pc, #44]	; (800afac <prvAddNewTaskToReadyList+0xd0>)
 800af7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	200004d0 	.word	0x200004d0
 800af98:	200003d0 	.word	0x200003d0
 800af9c:	200004dc 	.word	0x200004dc
 800afa0:	200004ec 	.word	0x200004ec
 800afa4:	200004d8 	.word	0x200004d8
 800afa8:	200003d4 	.word	0x200003d4
 800afac:	e000ed04 	.word	0xe000ed04

0800afb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afb8:	2300      	movs	r3, #0
 800afba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d017      	beq.n	800aff2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afc2:	4b13      	ldr	r3, [pc, #76]	; (800b010 <vTaskDelay+0x60>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <vTaskDelay+0x30>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	60bb      	str	r3, [r7, #8]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afe0:	f000 f99c 	bl	800b31c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afe4:	2100      	movs	r1, #0
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fc2c 	bl	800b844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afec:	f000 f9a4 	bl	800b338 <xTaskResumeAll>
 800aff0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d107      	bne.n	800b008 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aff8:	4b06      	ldr	r3, [pc, #24]	; (800b014 <vTaskDelay+0x64>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b008:	bf00      	nop
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	200004f8 	.word	0x200004f8
 800b014:	e000ed04 	.word	0xe000ed04

0800b018 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b020:	f000 fda0 	bl	800bb64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d102      	bne.n	800b030 <vTaskSuspend+0x18>
 800b02a:	4b3c      	ldr	r3, [pc, #240]	; (800b11c <vTaskSuspend+0x104>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	e000      	b.n	800b032 <vTaskSuspend+0x1a>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	3304      	adds	r3, #4
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff fdfc 	bl	800ac36 <uxListRemove>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d115      	bne.n	800b070 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b048:	4935      	ldr	r1, [pc, #212]	; (800b120 <vTaskSuspend+0x108>)
 800b04a:	4613      	mov	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	440b      	add	r3, r1
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <vTaskSuspend+0x58>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	2201      	movs	r2, #1
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	43da      	mvns	r2, r3
 800b066:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <vTaskSuspend+0x10c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4013      	ands	r3, r2
 800b06c:	4a2d      	ldr	r2, [pc, #180]	; (800b124 <vTaskSuspend+0x10c>)
 800b06e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b074:	2b00      	cmp	r3, #0
 800b076:	d004      	beq.n	800b082 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3318      	adds	r3, #24
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fdda 	bl	800ac36 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	3304      	adds	r3, #4
 800b086:	4619      	mov	r1, r3
 800b088:	4827      	ldr	r0, [pc, #156]	; (800b128 <vTaskSuspend+0x110>)
 800b08a:	f7ff fd77 	bl	800ab7c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b01      	cmp	r3, #1
 800b098:	d103      	bne.n	800b0a2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b0a2:	f000 fd8f 	bl	800bbc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b0a6:	4b21      	ldr	r3, [pc, #132]	; (800b12c <vTaskSuspend+0x114>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b0ae:	f000 fd59 	bl	800bb64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b0b2:	f000 fba7 	bl	800b804 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b0b6:	f000 fd85 	bl	800bbc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b0ba:	4b18      	ldr	r3, [pc, #96]	; (800b11c <vTaskSuspend+0x104>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d127      	bne.n	800b114 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <vTaskSuspend+0x114>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d017      	beq.n	800b0fc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b0cc:	4b18      	ldr	r3, [pc, #96]	; (800b130 <vTaskSuspend+0x118>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <vTaskSuspend+0xd2>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	60bb      	str	r3, [r7, #8]
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b0ea:	4b12      	ldr	r3, [pc, #72]	; (800b134 <vTaskSuspend+0x11c>)
 800b0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0fa:	e00b      	b.n	800b114 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <vTaskSuspend+0x110>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	4b0d      	ldr	r3, [pc, #52]	; (800b138 <vTaskSuspend+0x120>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d103      	bne.n	800b110 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b108:	4b04      	ldr	r3, [pc, #16]	; (800b11c <vTaskSuspend+0x104>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
	}
 800b10e:	e001      	b.n	800b114 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b110:	f000 fa66 	bl	800b5e0 <vTaskSwitchContext>
	}
 800b114:	bf00      	nop
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	200003d0 	.word	0x200003d0
 800b120:	200003d4 	.word	0x200003d4
 800b124:	200004d8 	.word	0x200004d8
 800b128:	200004bc 	.word	0x200004bc
 800b12c:	200004dc 	.word	0x200004dc
 800b130:	200004f8 	.word	0x200004f8
 800b134:	e000ed04 	.word	0xe000ed04
 800b138:	200004d0 	.word	0x200004d0

0800b13c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60fb      	str	r3, [r7, #12]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	4a0a      	ldr	r2, [pc, #40]	; (800b198 <prvTaskIsTaskSuspended+0x5c>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d10a      	bne.n	800b188 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	4a09      	ldr	r2, [pc, #36]	; (800b19c <prvTaskIsTaskSuspended+0x60>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d005      	beq.n	800b188 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b188:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b18a:	4618      	mov	r0, r3
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	200004bc 	.word	0x200004bc
 800b19c:	20000490 	.word	0x20000490

0800b1a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10a      	bne.n	800b1c8 <vTaskResume+0x28>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60bb      	str	r3, [r7, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b1c8:	4b20      	ldr	r3, [pc, #128]	; (800b24c <vTaskResume+0xac>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d037      	beq.n	800b242 <vTaskResume+0xa2>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d034      	beq.n	800b242 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800b1d8:	f000 fcc4 	bl	800bb64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7ff ffad 	bl	800b13c <prvTaskIsTaskSuspended>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d02a      	beq.n	800b23e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fd22 	bl	800ac36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	409a      	lsls	r2, r3
 800b1fa:	4b15      	ldr	r3, [pc, #84]	; (800b250 <vTaskResume+0xb0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	4a13      	ldr	r2, [pc, #76]	; (800b250 <vTaskResume+0xb0>)
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4613      	mov	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4a10      	ldr	r2, [pc, #64]	; (800b254 <vTaskResume+0xb4>)
 800b212:	441a      	add	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3304      	adds	r3, #4
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f7ff fcae 	bl	800ab7c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	4b09      	ldr	r3, [pc, #36]	; (800b24c <vTaskResume+0xac>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d307      	bcc.n	800b23e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b22e:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <vTaskResume+0xb8>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b23e:	f000 fcc1 	bl	800bbc4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	200003d0 	.word	0x200003d0
 800b250:	200004d8 	.word	0x200004d8
 800b254:	200003d4 	.word	0x200003d4
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08a      	sub	sp, #40	; 0x28
 800b260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b26a:	463a      	mov	r2, r7
 800b26c:	1d39      	adds	r1, r7, #4
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4618      	mov	r0, r3
 800b274:	f7f5 fe3e 	bl	8000ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	9202      	str	r2, [sp, #8]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	2300      	movs	r3, #0
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	2300      	movs	r3, #0
 800b288:	460a      	mov	r2, r1
 800b28a:	491e      	ldr	r1, [pc, #120]	; (800b304 <vTaskStartScheduler+0xa8>)
 800b28c:	481e      	ldr	r0, [pc, #120]	; (800b308 <vTaskStartScheduler+0xac>)
 800b28e:	f7ff fcfc 	bl	800ac8a <xTaskCreateStatic>
 800b292:	4603      	mov	r3, r0
 800b294:	4a1d      	ldr	r2, [pc, #116]	; (800b30c <vTaskStartScheduler+0xb0>)
 800b296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b298:	4b1c      	ldr	r3, [pc, #112]	; (800b30c <vTaskStartScheduler+0xb0>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e001      	b.n	800b2aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d116      	bne.n	800b2de <vTaskStartScheduler+0x82>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	613b      	str	r3, [r7, #16]
}
 800b2c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2c4:	4b12      	ldr	r3, [pc, #72]	; (800b310 <vTaskStartScheduler+0xb4>)
 800b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2cc:	4b11      	ldr	r3, [pc, #68]	; (800b314 <vTaskStartScheduler+0xb8>)
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2d2:	4b11      	ldr	r3, [pc, #68]	; (800b318 <vTaskStartScheduler+0xbc>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2d8:	f000 fba2 	bl	800ba20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2dc:	e00e      	b.n	800b2fc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e4:	d10a      	bne.n	800b2fc <vTaskStartScheduler+0xa0>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	60fb      	str	r3, [r7, #12]
}
 800b2f8:	bf00      	nop
 800b2fa:	e7fe      	b.n	800b2fa <vTaskStartScheduler+0x9e>
}
 800b2fc:	bf00      	nop
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	0800c230 	.word	0x0800c230
 800b308:	0800b699 	.word	0x0800b699
 800b30c:	200004f4 	.word	0x200004f4
 800b310:	200004f0 	.word	0x200004f0
 800b314:	200004dc 	.word	0x200004dc
 800b318:	200004d4 	.word	0x200004d4

0800b31c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b320:	4b04      	ldr	r3, [pc, #16]	; (800b334 <vTaskSuspendAll+0x18>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3301      	adds	r3, #1
 800b326:	4a03      	ldr	r2, [pc, #12]	; (800b334 <vTaskSuspendAll+0x18>)
 800b328:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b32a:	bf00      	nop
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	200004f8 	.word	0x200004f8

0800b338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b342:	2300      	movs	r3, #0
 800b344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b346:	4b41      	ldr	r3, [pc, #260]	; (800b44c <xTaskResumeAll+0x114>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <xTaskResumeAll+0x2c>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	603b      	str	r3, [r7, #0]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b364:	f000 fbfe 	bl	800bb64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b368:	4b38      	ldr	r3, [pc, #224]	; (800b44c <xTaskResumeAll+0x114>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	4a37      	ldr	r2, [pc, #220]	; (800b44c <xTaskResumeAll+0x114>)
 800b370:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b372:	4b36      	ldr	r3, [pc, #216]	; (800b44c <xTaskResumeAll+0x114>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d161      	bne.n	800b43e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b37a:	4b35      	ldr	r3, [pc, #212]	; (800b450 <xTaskResumeAll+0x118>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d05d      	beq.n	800b43e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b382:	e02e      	b.n	800b3e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b384:	4b33      	ldr	r3, [pc, #204]	; (800b454 <xTaskResumeAll+0x11c>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3318      	adds	r3, #24
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff fc50 	bl	800ac36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3304      	adds	r3, #4
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff fc4b 	bl	800ac36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	409a      	lsls	r2, r3
 800b3a8:	4b2b      	ldr	r3, [pc, #172]	; (800b458 <xTaskResumeAll+0x120>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	4a2a      	ldr	r2, [pc, #168]	; (800b458 <xTaskResumeAll+0x120>)
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4a27      	ldr	r2, [pc, #156]	; (800b45c <xTaskResumeAll+0x124>)
 800b3c0:	441a      	add	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f7ff fbd7 	bl	800ab7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	4b23      	ldr	r3, [pc, #140]	; (800b460 <xTaskResumeAll+0x128>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d302      	bcc.n	800b3e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b3dc:	4b21      	ldr	r3, [pc, #132]	; (800b464 <xTaskResumeAll+0x12c>)
 800b3de:	2201      	movs	r2, #1
 800b3e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3e2:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <xTaskResumeAll+0x11c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1cc      	bne.n	800b384 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3f0:	f000 fa08 	bl	800b804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3f4:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <xTaskResumeAll+0x130>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d010      	beq.n	800b422 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b400:	f000 f836 	bl	800b470 <xTaskIncrementTick>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b40a:	4b16      	ldr	r3, [pc, #88]	; (800b464 <xTaskResumeAll+0x12c>)
 800b40c:	2201      	movs	r2, #1
 800b40e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3b01      	subs	r3, #1
 800b414:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f1      	bne.n	800b400 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b41c:	4b12      	ldr	r3, [pc, #72]	; (800b468 <xTaskResumeAll+0x130>)
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b422:	4b10      	ldr	r3, [pc, #64]	; (800b464 <xTaskResumeAll+0x12c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d009      	beq.n	800b43e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b42a:	2301      	movs	r3, #1
 800b42c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <xTaskResumeAll+0x134>)
 800b430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b43e:	f000 fbc1 	bl	800bbc4 <vPortExitCritical>

	return xAlreadyYielded;
 800b442:	68bb      	ldr	r3, [r7, #8]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	200004f8 	.word	0x200004f8
 800b450:	200004d0 	.word	0x200004d0
 800b454:	20000490 	.word	0x20000490
 800b458:	200004d8 	.word	0x200004d8
 800b45c:	200003d4 	.word	0x200003d4
 800b460:	200003d0 	.word	0x200003d0
 800b464:	200004e4 	.word	0x200004e4
 800b468:	200004e0 	.word	0x200004e0
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b47a:	4b4e      	ldr	r3, [pc, #312]	; (800b5b4 <xTaskIncrementTick+0x144>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f040 808e 	bne.w	800b5a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b484:	4b4c      	ldr	r3, [pc, #304]	; (800b5b8 <xTaskIncrementTick+0x148>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3301      	adds	r3, #1
 800b48a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b48c:	4a4a      	ldr	r2, [pc, #296]	; (800b5b8 <xTaskIncrementTick+0x148>)
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d120      	bne.n	800b4da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b498:	4b48      	ldr	r3, [pc, #288]	; (800b5bc <xTaskIncrementTick+0x14c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	603b      	str	r3, [r7, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <xTaskIncrementTick+0x46>
 800b4b8:	4b40      	ldr	r3, [pc, #256]	; (800b5bc <xTaskIncrementTick+0x14c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	4b40      	ldr	r3, [pc, #256]	; (800b5c0 <xTaskIncrementTick+0x150>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a3e      	ldr	r2, [pc, #248]	; (800b5bc <xTaskIncrementTick+0x14c>)
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	4a3e      	ldr	r2, [pc, #248]	; (800b5c0 <xTaskIncrementTick+0x150>)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	4b3d      	ldr	r3, [pc, #244]	; (800b5c4 <xTaskIncrementTick+0x154>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	4a3c      	ldr	r2, [pc, #240]	; (800b5c4 <xTaskIncrementTick+0x154>)
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	f000 f995 	bl	800b804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4da:	4b3b      	ldr	r3, [pc, #236]	; (800b5c8 <xTaskIncrementTick+0x158>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d348      	bcc.n	800b576 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e4:	4b35      	ldr	r3, [pc, #212]	; (800b5bc <xTaskIncrementTick+0x14c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d104      	bne.n	800b4f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ee:	4b36      	ldr	r3, [pc, #216]	; (800b5c8 <xTaskIncrementTick+0x158>)
 800b4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f4:	601a      	str	r2, [r3, #0]
					break;
 800b4f6:	e03e      	b.n	800b576 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f8:	4b30      	ldr	r3, [pc, #192]	; (800b5bc <xTaskIncrementTick+0x14c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d203      	bcs.n	800b518 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b510:	4a2d      	ldr	r2, [pc, #180]	; (800b5c8 <xTaskIncrementTick+0x158>)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b516:	e02e      	b.n	800b576 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff fb8a 	bl	800ac36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b526:	2b00      	cmp	r3, #0
 800b528:	d004      	beq.n	800b534 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	3318      	adds	r3, #24
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff fb81 	bl	800ac36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	2201      	movs	r2, #1
 800b53a:	409a      	lsls	r2, r3
 800b53c:	4b23      	ldr	r3, [pc, #140]	; (800b5cc <xTaskIncrementTick+0x15c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	4a22      	ldr	r2, [pc, #136]	; (800b5cc <xTaskIncrementTick+0x15c>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a1f      	ldr	r2, [pc, #124]	; (800b5d0 <xTaskIncrementTick+0x160>)
 800b554:	441a      	add	r2, r3
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7ff fb0d 	bl	800ab7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	4b1b      	ldr	r3, [pc, #108]	; (800b5d4 <xTaskIncrementTick+0x164>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d3b9      	bcc.n	800b4e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b570:	2301      	movs	r3, #1
 800b572:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b574:	e7b6      	b.n	800b4e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b576:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <xTaskIncrementTick+0x164>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57c:	4914      	ldr	r1, [pc, #80]	; (800b5d0 <xTaskIncrementTick+0x160>)
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	440b      	add	r3, r1
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d901      	bls.n	800b592 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b58e:	2301      	movs	r3, #1
 800b590:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b592:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <xTaskIncrementTick+0x168>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d007      	beq.n	800b5aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b59a:	2301      	movs	r3, #1
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	e004      	b.n	800b5aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5a0:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <xTaskIncrementTick+0x16c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	4a0d      	ldr	r2, [pc, #52]	; (800b5dc <xTaskIncrementTick+0x16c>)
 800b5a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5aa:	697b      	ldr	r3, [r7, #20]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200004f8 	.word	0x200004f8
 800b5b8:	200004d4 	.word	0x200004d4
 800b5bc:	20000488 	.word	0x20000488
 800b5c0:	2000048c 	.word	0x2000048c
 800b5c4:	200004e8 	.word	0x200004e8
 800b5c8:	200004f0 	.word	0x200004f0
 800b5cc:	200004d8 	.word	0x200004d8
 800b5d0:	200003d4 	.word	0x200003d4
 800b5d4:	200003d0 	.word	0x200003d0
 800b5d8:	200004e4 	.word	0x200004e4
 800b5dc:	200004e0 	.word	0x200004e0

0800b5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5e6:	4b27      	ldr	r3, [pc, #156]	; (800b684 <vTaskSwitchContext+0xa4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d003      	beq.n	800b5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5ee:	4b26      	ldr	r3, [pc, #152]	; (800b688 <vTaskSwitchContext+0xa8>)
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5f4:	e03f      	b.n	800b676 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b5f6:	4b24      	ldr	r3, [pc, #144]	; (800b688 <vTaskSwitchContext+0xa8>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5fc:	4b23      	ldr	r3, [pc, #140]	; (800b68c <vTaskSwitchContext+0xac>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	fab3 f383 	clz	r3, r3
 800b608:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	f1c3 031f 	rsb	r3, r3, #31
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	491f      	ldr	r1, [pc, #124]	; (800b690 <vTaskSwitchContext+0xb0>)
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	440b      	add	r3, r1
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	607b      	str	r3, [r7, #4]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <vTaskSwitchContext+0x5a>
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4a12      	ldr	r2, [pc, #72]	; (800b690 <vTaskSwitchContext+0xb0>)
 800b648:	4413      	add	r3, r2
 800b64a:	613b      	str	r3, [r7, #16]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	605a      	str	r2, [r3, #4]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	3308      	adds	r3, #8
 800b65e:	429a      	cmp	r2, r3
 800b660:	d104      	bne.n	800b66c <vTaskSwitchContext+0x8c>
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	605a      	str	r2, [r3, #4]
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4a08      	ldr	r2, [pc, #32]	; (800b694 <vTaskSwitchContext+0xb4>)
 800b674:	6013      	str	r3, [r2, #0]
}
 800b676:	bf00      	nop
 800b678:	371c      	adds	r7, #28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	200004f8 	.word	0x200004f8
 800b688:	200004e4 	.word	0x200004e4
 800b68c:	200004d8 	.word	0x200004d8
 800b690:	200003d4 	.word	0x200003d4
 800b694:	200003d0 	.word	0x200003d0

0800b698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6a0:	f000 f852 	bl	800b748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6a4:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <prvIdleTask+0x28>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d9f9      	bls.n	800b6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6ac:	4b05      	ldr	r3, [pc, #20]	; (800b6c4 <prvIdleTask+0x2c>)
 800b6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6bc:	e7f0      	b.n	800b6a0 <prvIdleTask+0x8>
 800b6be:	bf00      	nop
 800b6c0:	200003d4 	.word	0x200003d4
 800b6c4:	e000ed04 	.word	0xe000ed04

0800b6c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	e00c      	b.n	800b6ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a12      	ldr	r2, [pc, #72]	; (800b728 <prvInitialiseTaskLists+0x60>)
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fa1d 	bl	800ab22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b06      	cmp	r3, #6
 800b6f2:	d9ef      	bls.n	800b6d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6f4:	480d      	ldr	r0, [pc, #52]	; (800b72c <prvInitialiseTaskLists+0x64>)
 800b6f6:	f7ff fa14 	bl	800ab22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6fa:	480d      	ldr	r0, [pc, #52]	; (800b730 <prvInitialiseTaskLists+0x68>)
 800b6fc:	f7ff fa11 	bl	800ab22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b700:	480c      	ldr	r0, [pc, #48]	; (800b734 <prvInitialiseTaskLists+0x6c>)
 800b702:	f7ff fa0e 	bl	800ab22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b706:	480c      	ldr	r0, [pc, #48]	; (800b738 <prvInitialiseTaskLists+0x70>)
 800b708:	f7ff fa0b 	bl	800ab22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b70c:	480b      	ldr	r0, [pc, #44]	; (800b73c <prvInitialiseTaskLists+0x74>)
 800b70e:	f7ff fa08 	bl	800ab22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b712:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <prvInitialiseTaskLists+0x78>)
 800b714:	4a05      	ldr	r2, [pc, #20]	; (800b72c <prvInitialiseTaskLists+0x64>)
 800b716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b718:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <prvInitialiseTaskLists+0x7c>)
 800b71a:	4a05      	ldr	r2, [pc, #20]	; (800b730 <prvInitialiseTaskLists+0x68>)
 800b71c:	601a      	str	r2, [r3, #0]
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200003d4 	.word	0x200003d4
 800b72c:	20000460 	.word	0x20000460
 800b730:	20000474 	.word	0x20000474
 800b734:	20000490 	.word	0x20000490
 800b738:	200004a4 	.word	0x200004a4
 800b73c:	200004bc 	.word	0x200004bc
 800b740:	20000488 	.word	0x20000488
 800b744:	2000048c 	.word	0x2000048c

0800b748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74e:	e019      	b.n	800b784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b750:	f000 fa08 	bl	800bb64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b754:	4b10      	ldr	r3, [pc, #64]	; (800b798 <prvCheckTasksWaitingTermination+0x50>)
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff fa68 	bl	800ac36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b766:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <prvCheckTasksWaitingTermination+0x54>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	4a0b      	ldr	r2, [pc, #44]	; (800b79c <prvCheckTasksWaitingTermination+0x54>)
 800b76e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3b01      	subs	r3, #1
 800b776:	4a0a      	ldr	r2, [pc, #40]	; (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b77a:	f000 fa23 	bl	800bbc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f810 	bl	800b7a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b784:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e1      	bne.n	800b750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200004a4 	.word	0x200004a4
 800b79c:	200004d0 	.word	0x200004d0
 800b7a0:	200004b8 	.word	0x200004b8

0800b7a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d108      	bne.n	800b7c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fb80 	bl	800bec0 <vPortFree>
				vPortFree( pxTCB );
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fb7d 	bl	800bec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7c6:	e018      	b.n	800b7fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d103      	bne.n	800b7da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fb74 	bl	800bec0 <vPortFree>
	}
 800b7d8:	e00f      	b.n	800b7fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d00a      	beq.n	800b7fa <prvDeleteTCB+0x56>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60fb      	str	r3, [r7, #12]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <prvDeleteTCB+0x54>
	}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b80a:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <prvResetNextTaskUnblockTime+0x38>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d104      	bne.n	800b81e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <prvResetNextTaskUnblockTime+0x3c>)
 800b816:	f04f 32ff 	mov.w	r2, #4294967295
 800b81a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b81c:	e008      	b.n	800b830 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <prvResetNextTaskUnblockTime+0x38>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	4a04      	ldr	r2, [pc, #16]	; (800b840 <prvResetNextTaskUnblockTime+0x3c>)
 800b82e:	6013      	str	r3, [r2, #0]
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000488 	.word	0x20000488
 800b840:	200004f0 	.word	0x200004f0

0800b844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b84e:	4b29      	ldr	r3, [pc, #164]	; (800b8f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b854:	4b28      	ldr	r3, [pc, #160]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff f9eb 	bl	800ac36 <uxListRemove>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10b      	bne.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b866:	4b24      	ldr	r3, [pc, #144]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	2201      	movs	r2, #1
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	43da      	mvns	r2, r3
 800b874:	4b21      	ldr	r3, [pc, #132]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4013      	ands	r3, r2
 800b87a:	4a20      	ldr	r2, [pc, #128]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b87c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b884:	d10a      	bne.n	800b89c <prvAddCurrentTaskToDelayedList+0x58>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d007      	beq.n	800b89c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b88c:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3304      	adds	r3, #4
 800b892:	4619      	mov	r1, r3
 800b894:	481a      	ldr	r0, [pc, #104]	; (800b900 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b896:	f7ff f971 	bl	800ab7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b89a:	e026      	b.n	800b8ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8a4:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d209      	bcs.n	800b8c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8b4:	4b13      	ldr	r3, [pc, #76]	; (800b904 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	f7ff f97f 	bl	800abc4 <vListInsert>
}
 800b8c6:	e010      	b.n	800b8ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	4b0a      	ldr	r3, [pc, #40]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f7ff f975 	bl	800abc4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8da:	4b0c      	ldr	r3, [pc, #48]	; (800b90c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d202      	bcs.n	800b8ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b8e4:	4a09      	ldr	r2, [pc, #36]	; (800b90c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6013      	str	r3, [r2, #0]
}
 800b8ea:	bf00      	nop
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200004d4 	.word	0x200004d4
 800b8f8:	200003d0 	.word	0x200003d0
 800b8fc:	200004d8 	.word	0x200004d8
 800b900:	200004bc 	.word	0x200004bc
 800b904:	2000048c 	.word	0x2000048c
 800b908:	20000488 	.word	0x20000488
 800b90c:	200004f0 	.word	0x200004f0

0800b910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3b04      	subs	r3, #4
 800b920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3b04      	subs	r3, #4
 800b92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f023 0201 	bic.w	r2, r3, #1
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3b04      	subs	r3, #4
 800b93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b940:	4a0c      	ldr	r2, [pc, #48]	; (800b974 <pxPortInitialiseStack+0x64>)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3b14      	subs	r3, #20
 800b94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3b04      	subs	r3, #4
 800b956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f06f 0202 	mvn.w	r2, #2
 800b95e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3b20      	subs	r3, #32
 800b964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b966:	68fb      	ldr	r3, [r7, #12]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	0800b979 	.word	0x0800b979

0800b978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <prvTaskExitError+0x54>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98a:	d00a      	beq.n	800b9a2 <prvTaskExitError+0x2a>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <prvTaskExitError+0x28>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	60bb      	str	r3, [r7, #8]
}
 800b9b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9b6:	bf00      	nop
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0fc      	beq.n	800b9b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	20000010 	.word	0x20000010

0800b9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <pxCurrentTCBConst2>)
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	6808      	ldr	r0, [r1, #0]
 800b9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	f380 8809 	msr	PSP, r0
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f04f 0000 	mov.w	r0, #0
 800b9e6:	f380 8811 	msr	BASEPRI, r0
 800b9ea:	4770      	bx	lr
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst2>:
 800b9f0:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop

0800b9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9f8:	4808      	ldr	r0, [pc, #32]	; (800ba1c <prvPortStartFirstTask+0x24>)
 800b9fa:	6800      	ldr	r0, [r0, #0]
 800b9fc:	6800      	ldr	r0, [r0, #0]
 800b9fe:	f380 8808 	msr	MSP, r0
 800ba02:	f04f 0000 	mov.w	r0, #0
 800ba06:	f380 8814 	msr	CONTROL, r0
 800ba0a:	b662      	cpsie	i
 800ba0c:	b661      	cpsie	f
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	df00      	svc	0
 800ba18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba1a:	bf00      	nop
 800ba1c:	e000ed08 	.word	0xe000ed08

0800ba20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba26:	4b46      	ldr	r3, [pc, #280]	; (800bb40 <xPortStartScheduler+0x120>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a46      	ldr	r2, [pc, #280]	; (800bb44 <xPortStartScheduler+0x124>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10a      	bne.n	800ba46 <xPortStartScheduler+0x26>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	613b      	str	r3, [r7, #16]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba46:	4b3e      	ldr	r3, [pc, #248]	; (800bb40 <xPortStartScheduler+0x120>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a3f      	ldr	r2, [pc, #252]	; (800bb48 <xPortStartScheduler+0x128>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10a      	bne.n	800ba66 <xPortStartScheduler+0x46>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	60fb      	str	r3, [r7, #12]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba66:	4b39      	ldr	r3, [pc, #228]	; (800bb4c <xPortStartScheduler+0x12c>)
 800ba68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	22ff      	movs	r2, #255	; 0xff
 800ba76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	4b31      	ldr	r3, [pc, #196]	; (800bb50 <xPortStartScheduler+0x130>)
 800ba8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba8e:	4b31      	ldr	r3, [pc, #196]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba90:	2207      	movs	r2, #7
 800ba92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba94:	e009      	b.n	800baaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba96:	4b2f      	ldr	r3, [pc, #188]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baaa:	78fb      	ldrb	r3, [r7, #3]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab2:	2b80      	cmp	r3, #128	; 0x80
 800bab4:	d0ef      	beq.n	800ba96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <xPortStartScheduler+0x134>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f1c3 0307 	rsb	r3, r3, #7
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d00a      	beq.n	800bad8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	60bb      	str	r3, [r7, #8]
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bad8:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <xPortStartScheduler+0x134>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	4a1d      	ldr	r2, [pc, #116]	; (800bb54 <xPortStartScheduler+0x134>)
 800bae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bae2:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <xPortStartScheduler+0x134>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baea:	4a1a      	ldr	r2, [pc, #104]	; (800bb54 <xPortStartScheduler+0x134>)
 800baec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baf6:	4b18      	ldr	r3, [pc, #96]	; (800bb58 <xPortStartScheduler+0x138>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <xPortStartScheduler+0x138>)
 800bafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb02:	4b15      	ldr	r3, [pc, #84]	; (800bb58 <xPortStartScheduler+0x138>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a14      	ldr	r2, [pc, #80]	; (800bb58 <xPortStartScheduler+0x138>)
 800bb08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb0e:	f000 f8dd 	bl	800bccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb12:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <xPortStartScheduler+0x13c>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb18:	f000 f8fc 	bl	800bd14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <xPortStartScheduler+0x140>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a0f      	ldr	r2, [pc, #60]	; (800bb60 <xPortStartScheduler+0x140>)
 800bb22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb28:	f7ff ff66 	bl	800b9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb2c:	f7ff fd58 	bl	800b5e0 <vTaskSwitchContext>
	prvTaskExitError();
 800bb30:	f7ff ff22 	bl	800b978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	e000ed00 	.word	0xe000ed00
 800bb44:	410fc271 	.word	0x410fc271
 800bb48:	410fc270 	.word	0x410fc270
 800bb4c:	e000e400 	.word	0xe000e400
 800bb50:	200004fc 	.word	0x200004fc
 800bb54:	20000500 	.word	0x20000500
 800bb58:	e000ed20 	.word	0xe000ed20
 800bb5c:	20000010 	.word	0x20000010
 800bb60:	e000ef34 	.word	0xe000ef34

0800bb64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	607b      	str	r3, [r7, #4]
}
 800bb7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb7e:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a0d      	ldr	r2, [pc, #52]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb88:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d10f      	bne.n	800bbb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <vPortEnterCritical+0x5c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	603b      	str	r3, [r7, #0]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <vPortEnterCritical+0x4a>
	}
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20000010 	.word	0x20000010
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbca:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <vPortExitCritical+0x50>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <vPortExitCritical+0x24>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	607b      	str	r3, [r7, #4]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <vPortExitCritical+0x50>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4a09      	ldr	r2, [pc, #36]	; (800bc14 <vPortExitCritical+0x50>)
 800bbf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbf2:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <vPortExitCritical+0x50>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <vPortExitCritical+0x42>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000010 	.word	0x20000010
	...

0800bc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc20:	f3ef 8009 	mrs	r0, PSP
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4b15      	ldr	r3, [pc, #84]	; (800bc80 <pxCurrentTCBConst>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	f01e 0f10 	tst.w	lr, #16
 800bc30:	bf08      	it	eq
 800bc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	6010      	str	r0, [r2, #0]
 800bc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc44:	f380 8811 	msr	BASEPRI, r0
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f7ff fcc6 	bl	800b5e0 <vTaskSwitchContext>
 800bc54:	f04f 0000 	mov.w	r0, #0
 800bc58:	f380 8811 	msr	BASEPRI, r0
 800bc5c:	bc09      	pop	{r0, r3}
 800bc5e:	6819      	ldr	r1, [r3, #0]
 800bc60:	6808      	ldr	r0, [r1, #0]
 800bc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc66:	f01e 0f10 	tst.w	lr, #16
 800bc6a:	bf08      	it	eq
 800bc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc70:	f380 8809 	msr	PSP, r0
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w

0800bc80 <pxCurrentTCBConst>:
 800bc80:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop

0800bc88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
}
 800bca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bca2:	f7ff fbe5 	bl	800b470 <xTaskIncrementTick>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <SysTick_Handler+0x40>)
 800bcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f383 8811 	msr	BASEPRI, r3
}
 800bcbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <vPortSetupTimerInterrupt+0x38>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <vPortSetupTimerInterrupt+0x3c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0a      	ldr	r2, [pc, #40]	; (800bd0c <vPortSetupTimerInterrupt+0x40>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	099b      	lsrs	r3, r3, #6
 800bce8:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <vPortSetupTimerInterrupt+0x44>)
 800bcea:	3b01      	subs	r3, #1
 800bcec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	e000e010 	.word	0xe000e010
 800bd04:	e000e018 	.word	0xe000e018
 800bd08:	20000000 	.word	0x20000000
 800bd0c:	10624dd3 	.word	0x10624dd3
 800bd10:	e000e014 	.word	0xe000e014

0800bd14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd24 <vPortEnableVFP+0x10>
 800bd18:	6801      	ldr	r1, [r0, #0]
 800bd1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd1e:	6001      	str	r1, [r0, #0]
 800bd20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd22:	bf00      	nop
 800bd24:	e000ed88 	.word	0xe000ed88

0800bd28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd34:	f7ff faf2 	bl	800b31c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd38:	4b5b      	ldr	r3, [pc, #364]	; (800bea8 <pvPortMalloc+0x180>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd40:	f000 f920 	bl	800bf84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd44:	4b59      	ldr	r3, [pc, #356]	; (800beac <pvPortMalloc+0x184>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f040 8093 	bne.w	800be78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d01d      	beq.n	800bd94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd58:	2208      	movs	r2, #8
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d014      	beq.n	800bd94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f023 0307 	bic.w	r3, r3, #7
 800bd70:	3308      	adds	r3, #8
 800bd72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <pvPortMalloc+0x6c>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	617b      	str	r3, [r7, #20]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d06e      	beq.n	800be78 <pvPortMalloc+0x150>
 800bd9a:	4b45      	ldr	r3, [pc, #276]	; (800beb0 <pvPortMalloc+0x188>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d869      	bhi.n	800be78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bda4:	4b43      	ldr	r3, [pc, #268]	; (800beb4 <pvPortMalloc+0x18c>)
 800bda6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bda8:	4b42      	ldr	r3, [pc, #264]	; (800beb4 <pvPortMalloc+0x18c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdae:	e004      	b.n	800bdba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d903      	bls.n	800bdcc <pvPortMalloc+0xa4>
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1f1      	bne.n	800bdb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdcc:	4b36      	ldr	r3, [pc, #216]	; (800bea8 <pvPortMalloc+0x180>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d050      	beq.n	800be78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2208      	movs	r2, #8
 800bddc:	4413      	add	r3, r2
 800bdde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	1ad2      	subs	r2, r2, r3
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d91f      	bls.n	800be38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <pvPortMalloc+0xf8>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	613b      	str	r3, [r7, #16]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	1ad2      	subs	r2, r2, r3
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be32:	69b8      	ldr	r0, [r7, #24]
 800be34:	f000 f908 	bl	800c048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be38:	4b1d      	ldr	r3, [pc, #116]	; (800beb0 <pvPortMalloc+0x188>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	4a1b      	ldr	r2, [pc, #108]	; (800beb0 <pvPortMalloc+0x188>)
 800be44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be46:	4b1a      	ldr	r3, [pc, #104]	; (800beb0 <pvPortMalloc+0x188>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b1b      	ldr	r3, [pc, #108]	; (800beb8 <pvPortMalloc+0x190>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d203      	bcs.n	800be5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be52:	4b17      	ldr	r3, [pc, #92]	; (800beb0 <pvPortMalloc+0x188>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a18      	ldr	r2, [pc, #96]	; (800beb8 <pvPortMalloc+0x190>)
 800be58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	4b13      	ldr	r3, [pc, #76]	; (800beac <pvPortMalloc+0x184>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	431a      	orrs	r2, r3
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be6e:	4b13      	ldr	r3, [pc, #76]	; (800bebc <pvPortMalloc+0x194>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	4a11      	ldr	r2, [pc, #68]	; (800bebc <pvPortMalloc+0x194>)
 800be76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be78:	f7ff fa5e 	bl	800b338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	f003 0307 	and.w	r3, r3, #7
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00a      	beq.n	800be9c <pvPortMalloc+0x174>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	60fb      	str	r3, [r7, #12]
}
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <pvPortMalloc+0x172>
	return pvReturn;
 800be9c:	69fb      	ldr	r3, [r7, #28]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3728      	adds	r7, #40	; 0x28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	2000410c 	.word	0x2000410c
 800beac:	20004120 	.word	0x20004120
 800beb0:	20004110 	.word	0x20004110
 800beb4:	20004104 	.word	0x20004104
 800beb8:	20004114 	.word	0x20004114
 800bebc:	20004118 	.word	0x20004118

0800bec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d04d      	beq.n	800bf6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bed2:	2308      	movs	r3, #8
 800bed4:	425b      	negs	r3, r3
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	4413      	add	r3, r2
 800beda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <vPortFree+0xb8>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4013      	ands	r3, r2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10a      	bne.n	800bf04 <vPortFree+0x44>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	60fb      	str	r3, [r7, #12]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <vPortFree+0x62>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60bb      	str	r3, [r7, #8]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	4b14      	ldr	r3, [pc, #80]	; (800bf78 <vPortFree+0xb8>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01e      	beq.n	800bf6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d11a      	bne.n	800bf6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <vPortFree+0xb8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	43db      	mvns	r3, r3
 800bf42:	401a      	ands	r2, r3
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf48:	f7ff f9e8 	bl	800b31c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <vPortFree+0xbc>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4413      	add	r3, r2
 800bf56:	4a09      	ldr	r2, [pc, #36]	; (800bf7c <vPortFree+0xbc>)
 800bf58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf5a:	6938      	ldr	r0, [r7, #16]
 800bf5c:	f000 f874 	bl	800c048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf60:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <vPortFree+0xc0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3301      	adds	r3, #1
 800bf66:	4a06      	ldr	r2, [pc, #24]	; (800bf80 <vPortFree+0xc0>)
 800bf68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf6a:	f7ff f9e5 	bl	800b338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf6e:	bf00      	nop
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20004120 	.word	0x20004120
 800bf7c:	20004110 	.word	0x20004110
 800bf80:	2000411c 	.word	0x2000411c

0800bf84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf90:	4b27      	ldr	r3, [pc, #156]	; (800c030 <prvHeapInit+0xac>)
 800bf92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00c      	beq.n	800bfb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3307      	adds	r3, #7
 800bfa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f023 0307 	bic.w	r3, r3, #7
 800bfaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	4a1f      	ldr	r2, [pc, #124]	; (800c030 <prvHeapInit+0xac>)
 800bfb4:	4413      	add	r3, r2
 800bfb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfbc:	4a1d      	ldr	r2, [pc, #116]	; (800c034 <prvHeapInit+0xb0>)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bfc2:	4b1c      	ldr	r3, [pc, #112]	; (800c034 <prvHeapInit+0xb0>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	4413      	add	r3, r2
 800bfce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bfd0:	2208      	movs	r2, #8
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	1a9b      	subs	r3, r3, r2
 800bfd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f023 0307 	bic.w	r3, r3, #7
 800bfde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4a15      	ldr	r2, [pc, #84]	; (800c038 <prvHeapInit+0xb4>)
 800bfe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bfe6:	4b14      	ldr	r3, [pc, #80]	; (800c038 <prvHeapInit+0xb4>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2200      	movs	r2, #0
 800bfec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfee:	4b12      	ldr	r3, [pc, #72]	; (800c038 <prvHeapInit+0xb4>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	1ad2      	subs	r2, r2, r3
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c004:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <prvHeapInit+0xb4>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	4a0a      	ldr	r2, [pc, #40]	; (800c03c <prvHeapInit+0xb8>)
 800c012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	4a09      	ldr	r2, [pc, #36]	; (800c040 <prvHeapInit+0xbc>)
 800c01a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c01c:	4b09      	ldr	r3, [pc, #36]	; (800c044 <prvHeapInit+0xc0>)
 800c01e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c022:	601a      	str	r2, [r3, #0]
}
 800c024:	bf00      	nop
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	20000504 	.word	0x20000504
 800c034:	20004104 	.word	0x20004104
 800c038:	2000410c 	.word	0x2000410c
 800c03c:	20004114 	.word	0x20004114
 800c040:	20004110 	.word	0x20004110
 800c044:	20004120 	.word	0x20004120

0800c048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c050:	4b28      	ldr	r3, [pc, #160]	; (800c0f4 <prvInsertBlockIntoFreeList+0xac>)
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	e002      	b.n	800c05c <prvInsertBlockIntoFreeList+0x14>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	429a      	cmp	r2, r3
 800c064:	d8f7      	bhi.n	800c056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	4413      	add	r3, r2
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d108      	bne.n	800c08a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	441a      	add	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	441a      	add	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d118      	bne.n	800c0d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	4b15      	ldr	r3, [pc, #84]	; (800c0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d00d      	beq.n	800c0c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	441a      	add	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	e008      	b.n	800c0d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	e003      	b.n	800c0d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d002      	beq.n	800c0e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0e6:	bf00      	nop
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	20004104 	.word	0x20004104
 800c0f8:	2000410c 	.word	0x2000410c

0800c0fc <__libc_init_array>:
 800c0fc:	b570      	push	{r4, r5, r6, lr}
 800c0fe:	4d0d      	ldr	r5, [pc, #52]	; (800c134 <__libc_init_array+0x38>)
 800c100:	4c0d      	ldr	r4, [pc, #52]	; (800c138 <__libc_init_array+0x3c>)
 800c102:	1b64      	subs	r4, r4, r5
 800c104:	10a4      	asrs	r4, r4, #2
 800c106:	2600      	movs	r6, #0
 800c108:	42a6      	cmp	r6, r4
 800c10a:	d109      	bne.n	800c120 <__libc_init_array+0x24>
 800c10c:	4d0b      	ldr	r5, [pc, #44]	; (800c13c <__libc_init_array+0x40>)
 800c10e:	4c0c      	ldr	r4, [pc, #48]	; (800c140 <__libc_init_array+0x44>)
 800c110:	f000 f820 	bl	800c154 <_init>
 800c114:	1b64      	subs	r4, r4, r5
 800c116:	10a4      	asrs	r4, r4, #2
 800c118:	2600      	movs	r6, #0
 800c11a:	42a6      	cmp	r6, r4
 800c11c:	d105      	bne.n	800c12a <__libc_init_array+0x2e>
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	f855 3b04 	ldr.w	r3, [r5], #4
 800c124:	4798      	blx	r3
 800c126:	3601      	adds	r6, #1
 800c128:	e7ee      	b.n	800c108 <__libc_init_array+0xc>
 800c12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c12e:	4798      	blx	r3
 800c130:	3601      	adds	r6, #1
 800c132:	e7f2      	b.n	800c11a <__libc_init_array+0x1e>
 800c134:	0800c280 	.word	0x0800c280
 800c138:	0800c280 	.word	0x0800c280
 800c13c:	0800c280 	.word	0x0800c280
 800c140:	0800c284 	.word	0x0800c284

0800c144 <memset>:
 800c144:	4402      	add	r2, r0
 800c146:	4603      	mov	r3, r0
 800c148:	4293      	cmp	r3, r2
 800c14a:	d100      	bne.n	800c14e <memset+0xa>
 800c14c:	4770      	bx	lr
 800c14e:	f803 1b01 	strb.w	r1, [r3], #1
 800c152:	e7f9      	b.n	800c148 <memset+0x4>

0800c154 <_init>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr

0800c160 <_fini>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr
