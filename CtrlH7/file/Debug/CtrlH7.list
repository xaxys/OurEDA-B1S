
CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be9c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c248  0800c248  0001c248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c250  0800c250  0001c250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800c258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a0c  20000014  0800c26c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004a20  0800c26c  00024a20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000293c0  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004751  00000000  00000000  00049402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0004db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001528  00000000  00000000  0004f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039311  00000000  00000000  00050710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c5df  00000000  00000000  00089a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b800  00000000  00000000  000a6000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00211800  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dd0  00000000  00000000  00211854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c124 	.word	0x0800c124

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800c124 	.word	0x0800c124

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <DownDetectPoint>:
static u8 *GY39SensorIO = 0;
static u8 *WT931SensorIO = 0;

//下传数据读取初始化
void DownDetectPoint(u8 *RXString)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	PDBegin = RXString;
 80005e0:	4a24      	ldr	r2, [pc, #144]	; (8000674 <DownDetectPoint+0x9c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
	PDStraight = (u16*) (RXString + 1);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <DownDetectPoint+0xa0>)
 80005ec:	6013      	str	r3, [r2, #0]
	PDRotate = (u16*) (RXString + 3);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3303      	adds	r3, #3
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <DownDetectPoint+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]
	PDVertical = (u16*) (RXString + 5);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3305      	adds	r3, #5
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <DownDetectPoint+0xa8>)
 80005fc:	6013      	str	r3, [r2, #0]
	PDLight = (u16*) (RXString + 7);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3307      	adds	r3, #7
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <DownDetectPoint+0xac>)
 8000604:	6013      	str	r3, [r2, #0]
	PDTH = (u16*) (RXString + 9);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3309      	adds	r3, #9
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <DownDetectPoint+0xb0>)
 800060c:	6013      	str	r3, [r2, #0]
	PDTransp = (u16*) (RXString + 11);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	330b      	adds	r3, #11
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <DownDetectPoint+0xb4>)
 8000614:	6013      	str	r3, [r2, #0]
	PDArm[0] = (u16*) (RXString + 13);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	330d      	adds	r3, #13
 800061a:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <DownDetectPoint+0xb8>)
 800061c:	6013      	str	r3, [r2, #0]
	PDArm[1] = (u16*) (RXString + 15);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	330f      	adds	r3, #15
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <DownDetectPoint+0xb8>)
 8000624:	6053      	str	r3, [r2, #4]
	PDArm[2] = (u16*) (RXString + 17);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3311      	adds	r3, #17
 800062a:	4a19      	ldr	r2, [pc, #100]	; (8000690 <DownDetectPoint+0xb8>)
 800062c:	6093      	str	r3, [r2, #8]
	PDArm[3] = (u16*) (RXString + 19);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3313      	adds	r3, #19
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <DownDetectPoint+0xb8>)
 8000634:	60d3      	str	r3, [r2, #12]
	PDArm[4] = (u16*) (RXString + 21);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3315      	adds	r3, #21
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <DownDetectPoint+0xb8>)
 800063c:	6113      	str	r3, [r2, #16]
	PDArm[5] = (u16*) (RXString + 23);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3317      	adds	r3, #23
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <DownDetectPoint+0xb8>)
 8000644:	6153      	str	r3, [r2, #20]
	PDRes = (u16*) (RXString + 25);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3319      	adds	r3, #25
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <DownDetectPoint+0xbc>)
 800064c:	6013      	str	r3, [r2, #0]
	PDMode = RXString + 27;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	331b      	adds	r3, #27
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <DownDetectPoint+0xc0>)
 8000654:	6013      	str	r3, [r2, #0]
	PDId = RXString + 28;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	331c      	adds	r3, #28
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <DownDetectPoint+0xc4>)
 800065c:	6013      	str	r3, [r2, #0]
	PDEnd = RXString + 29;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	331d      	adds	r3, #29
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <DownDetectPoint+0xc8>)
 8000664:	6013      	str	r3, [r2, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000030 	.word	0x20000030
 8000678:	20000034 	.word	0x20000034
 800067c:	20000038 	.word	0x20000038
 8000680:	2000003c 	.word	0x2000003c
 8000684:	20000040 	.word	0x20000040
 8000688:	20000044 	.word	0x20000044
 800068c:	20000048 	.word	0x20000048
 8000690:	2000004c 	.word	0x2000004c
 8000694:	20000064 	.word	0x20000064
 8000698:	20000068 	.word	0x20000068
 800069c:	2000006c 	.word	0x2000006c
 80006a0:	20000070 	.word	0x20000070

080006a4 <DownMoveDetect>:

}

//运动模式判断
u8 DownMoveDetect(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
#ifdef CtrlSide
	return *PDMode & 6;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <DownMoveDetect+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f003 0306 	and.w	r3, r3, #6
 80006b2:	b2db      	uxtb	r3, r3
#endif
#ifdef PowerSide
	return *PDMode & 4;
#endif
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000068 	.word	0x20000068

080006c4 <SpecialMovePID>:

}

//特殊运动模式处理
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	80bb      	strh	r3, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	807b      	strh	r3, [r7, #2]
	//累计积分位置
	static float LocSum;
	//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	f040 808e 	bne.w	80007fa <SpecialMovePID+0x136>
	{
		PIDData = 0;
 80006de:	4b98      	ldr	r3, [pc, #608]	; (8000940 <SpecialMovePID+0x27c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	4b94      	ldr	r3, [pc, #592]	; (8000944 <SpecialMovePID+0x280>)
 80006f4:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 80006f8:	4b93      	ldr	r3, [pc, #588]	; (8000948 <SpecialMovePID+0x284>)
 80006fa:	ed93 7a00 	vldr	s14, [r3]
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <SpecialMovePID+0x280>)
 8000700:	edd3 7a00 	vldr	s15, [r3]
 8000704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000708:	4b8f      	ldr	r3, [pc, #572]	; (8000948 <SpecialMovePID+0x284>)
 800070a:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc = (u16) (1500
				+ range(
 800070e:	4b8d      	ldr	r3, [pc, #564]	; (8000944 <SpecialMovePID+0x280>)
 8000710:	edd3 7a00 	vldr	s15, [r3]
 8000714:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800094c <SpecialMovePID+0x288>
 8000718:	ee27 7a87 	vmul.f32	s14, s15, s14
 800071c:	4b8a      	ldr	r3, [pc, #552]	; (8000948 <SpecialMovePID+0x284>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800072a:	4b89      	ldr	r3, [pc, #548]	; (8000950 <SpecialMovePID+0x28c>)
 800072c:	edd3 6a00 	vldr	s13, [r3]
 8000730:	4b84      	ldr	r3, [pc, #528]	; (8000944 <SpecialMovePID+0x280>)
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800073a:	eddf 6a86 	vldr	s13, [pc, #536]	; 8000954 <SpecialMovePID+0x290>
 800073e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074a:	ee17 3a90 	vmov	r3, s15
 800074e:	b21b      	sxth	r3, r3
		PIDLoc = (u16) (1500
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000754:	da4c      	bge.n	80007f0 <SpecialMovePID+0x12c>
				+ range(
 8000756:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <SpecialMovePID+0x280>)
 8000758:	edd3 7a00 	vldr	s15, [r3]
 800075c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800094c <SpecialMovePID+0x288>
 8000760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000764:	4b78      	ldr	r3, [pc, #480]	; (8000948 <SpecialMovePID+0x284>)
 8000766:	edd3 7a00 	vldr	s15, [r3]
 800076a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800076e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000772:	4b77      	ldr	r3, [pc, #476]	; (8000950 <SpecialMovePID+0x28c>)
 8000774:	edd3 6a00 	vldr	s13, [r3]
 8000778:	4b72      	ldr	r3, [pc, #456]	; (8000944 <SpecialMovePID+0x280>)
 800077a:	edd3 7a00 	vldr	s15, [r3]
 800077e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000782:	eddf 6a74 	vldr	s13, [pc, #464]	; 8000954 <SpecialMovePID+0x290>
 8000786:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000792:	ee17 3a90 	vmov	r3, s15
 8000796:	b21b      	sxth	r3, r3
 8000798:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800079c:	dd25      	ble.n	80007ea <SpecialMovePID+0x126>
 800079e:	4b69      	ldr	r3, [pc, #420]	; (8000944 <SpecialMovePID+0x280>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800094c <SpecialMovePID+0x288>
 80007a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ac:	4b66      	ldr	r3, [pc, #408]	; (8000948 <SpecialMovePID+0x284>)
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007ba:	4b65      	ldr	r3, [pc, #404]	; (8000950 <SpecialMovePID+0x28c>)
 80007bc:	edd3 6a00 	vldr	s13, [r3]
 80007c0:	4b60      	ldr	r3, [pc, #384]	; (8000944 <SpecialMovePID+0x280>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007ca:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000954 <SpecialMovePID+0x290>
 80007ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007da:	ee17 3a90 	vmov	r3, s15
 80007de:	b21b      	sxth	r3, r3
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	e004      	b.n	80007f4 <SpecialMovePID+0x130>
 80007ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ee:	e001      	b.n	80007f4 <SpecialMovePID+0x130>
		PIDLoc = (u16) (1500
 80007f0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007f4:	81bb      	strh	r3, [r7, #12]
						(int16_t ) (PID_D_Kp * Ek + (PID_D_Ki * LocSum)
								+ PID_D_Kd * (Ek1 - Ek)), -1000, 1000));
		return PIDLoc;
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	e09b      	b.n	8000932 <SpecialMovePID+0x26e>
	}
	else if (ModeType == 2)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	f040 8088 	bne.w	8000912 <SpecialMovePID+0x24e>
	{
		PIDData = 0;
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <SpecialMovePID+0x27c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000808:	88ba      	ldrh	r2, [r7, #4]
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	ee07 3a90 	vmov	s15, r3
 8000812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <SpecialMovePID+0x280>)
 8000818:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 800081c:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <SpecialMovePID+0x284>)
 800081e:	ed93 7a00 	vldr	s14, [r3]
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <SpecialMovePID+0x280>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <SpecialMovePID+0x284>)
 800082e:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc = (u16) (1500
				+ range(
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <SpecialMovePID+0x280>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000958 <SpecialMovePID+0x294>
 800083c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <SpecialMovePID+0x284>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <SpecialMovePID+0x28c>)
 800084c:	edd3 6a00 	vldr	s13, [r3]
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <SpecialMovePID+0x280>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800085a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800095c <SpecialMovePID+0x298>
 800085e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800086a:	ee17 3a90 	vmov	r3, s15
 800086e:	b21b      	sxth	r3, r3
		PIDLoc = (u16) (1500
 8000870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000874:	da48      	bge.n	8000908 <SpecialMovePID+0x244>
				+ range(
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <SpecialMovePID+0x280>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000958 <SpecialMovePID+0x294>
 8000880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000884:	4b30      	ldr	r3, [pc, #192]	; (8000948 <SpecialMovePID+0x284>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <SpecialMovePID+0x28c>)
 8000890:	edd3 6a00 	vldr	s13, [r3]
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <SpecialMovePID+0x280>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800089e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800095c <SpecialMovePID+0x298>
 80008a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	ee17 3a90 	vmov	r3, s15
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80008b8:	dd23      	ble.n	8000902 <SpecialMovePID+0x23e>
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SpecialMovePID+0x280>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000958 <SpecialMovePID+0x294>
 80008c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SpecialMovePID+0x284>)
 80008ca:	edd3 7a00 	vldr	s15, [r3]
 80008ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <SpecialMovePID+0x28c>)
 80008d4:	edd3 6a00 	vldr	s13, [r3]
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <SpecialMovePID+0x280>)
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008e2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800095c <SpecialMovePID+0x298>
 80008e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f2:	ee17 3a90 	vmov	r3, s15
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80008fe:	b29b      	uxth	r3, r3
 8000900:	e004      	b.n	800090c <SpecialMovePID+0x248>
 8000902:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000906:	e001      	b.n	800090c <SpecialMovePID+0x248>
		PIDLoc = (u16) (1500
 8000908:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800090c:	81fb      	strh	r3, [r7, #14]
						(int16_t ) (PID_O_Kp * Ek + (PID_O_Ki * LocSum)
								+ PID_O_Kd * (Ek1 - Ek)), -1000, 1000));
		return PIDLoc;
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	e00f      	b.n	8000932 <SpecialMovePID+0x26e>
	}
	else
	{
		if (!PIDData)
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <SpecialMovePID+0x27c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <SpecialMovePID+0x26c>
		{
			PIDData = 1;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <SpecialMovePID+0x27c>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <SpecialMovePID+0x280>)
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <SpecialMovePID+0x284>)
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000930:	2300      	movs	r3, #0
	}

}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000d4 	.word	0x200000d4
 8000944:	200000d8 	.word	0x200000d8
 8000948:	200000dc 	.word	0x200000dc
 800094c:	43480000 	.word	0x43480000
 8000950:	200000e0 	.word	0x200000e0
 8000954:	43960000 	.word	0x43960000
 8000958:	42c80000 	.word	0x42c80000
 800095c:	43160000 	.word	0x43160000

08000960 <SendBackPoint>:

//回传指针初始化
void SendBackPoint(u8 *TXString, u8 *DeepSIO, u8 *WT931SIO, u8 *GY39SIO)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	DeepSensorIO = DeepSIO;
 800096e:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <SendBackPoint+0xf4>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	6013      	str	r3, [r2, #0]
	WT931SensorIO = WT931SIO;
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <SendBackPoint+0xf8>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
	GY39SensorIO = GY39SIO;
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <SendBackPoint+0xfc>)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	6013      	str	r3, [r2, #0]
	TXString[0] = 0x25;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2225      	movs	r2, #37	; 0x25
 8000984:	701a      	strb	r2, [r3, #0]
	TXString[39] = 0xFF;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3327      	adds	r3, #39	; 0x27
 800098a:	22ff      	movs	r2, #255	; 0xff
 800098c:	701a      	strb	r2, [r3, #0]
	TXString[40] = 0xFF;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3328      	adds	r3, #40	; 0x28
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	701a      	strb	r2, [r3, #0]
	PUString = TXString;
 8000996:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <SendBackPoint+0x100>)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6013      	str	r3, [r2, #0]
	PUCabin = TXString + 1;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <SendBackPoint+0x104>)
 80009a2:	6013      	str	r3, [r2, #0]
	PUTemp = (u16*) (TXString + 2);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3302      	adds	r3, #2
 80009a8:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <SendBackPoint+0x108>)
 80009aa:	6013      	str	r3, [r2, #0]
	PUBaro[0] = (u16*) (TXString + 4);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3304      	adds	r3, #4
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <SendBackPoint+0x10c>)
 80009b2:	6013      	str	r3, [r2, #0]
	PUBaro[1] = (u16*) (TXString + 6);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3306      	adds	r3, #6
 80009b8:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <SendBackPoint+0x10c>)
 80009ba:	6053      	str	r3, [r2, #4]
	PUHum = (u16*) (TXString + 8);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3308      	adds	r3, #8
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <SendBackPoint+0x110>)
 80009c2:	6013      	str	r3, [r2, #0]
	PUAcc[0] = (u16*) (TXString + 10);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	330a      	adds	r3, #10
 80009c8:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <SendBackPoint+0x114>)
 80009ca:	6013      	str	r3, [r2, #0]
	PUAcc[1] = (u16*) (TXString + 12);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	330c      	adds	r3, #12
 80009d0:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <SendBackPoint+0x114>)
 80009d2:	6053      	str	r3, [r2, #4]
	PUAcc[2] = (u16*) (TXString + 14);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	330e      	adds	r3, #14
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <SendBackPoint+0x114>)
 80009da:	6093      	str	r3, [r2, #8]
	PURot[0] = (u16*) (TXString + 16);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3310      	adds	r3, #16
 80009e0:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <SendBackPoint+0x118>)
 80009e2:	6013      	str	r3, [r2, #0]
	PURot[1] = (u16*) (TXString + 18);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3312      	adds	r3, #18
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <SendBackPoint+0x118>)
 80009ea:	6053      	str	r3, [r2, #4]
	PURot[2] = (u16*) (TXString + 20);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3314      	adds	r3, #20
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SendBackPoint+0x118>)
 80009f2:	6093      	str	r3, [r2, #8]
	PUEul[0] = (u16*) (TXString + 22);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3316      	adds	r3, #22
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <SendBackPoint+0x11c>)
 80009fa:	6013      	str	r3, [r2, #0]
	PUEul[1] = (u16*) (TXString + 24);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3318      	adds	r3, #24
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <SendBackPoint+0x11c>)
 8000a02:	6053      	str	r3, [r2, #4]
	PUEul[2] = (u16*) (TXString + 26);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	331a      	adds	r3, #26
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <SendBackPoint+0x11c>)
 8000a0a:	6093      	str	r3, [r2, #8]
	PUMag[0] = (u16*) (TXString + 28);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	331c      	adds	r3, #28
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SendBackPoint+0x120>)
 8000a12:	6013      	str	r3, [r2, #0]
	PUMag[1] = (u16*) (TXString + 30);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	331e      	adds	r3, #30
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <SendBackPoint+0x120>)
 8000a1a:	6053      	str	r3, [r2, #4]
	PUMag[2] = (u16*) (TXString + 32);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3320      	adds	r3, #32
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <SendBackPoint+0x120>)
 8000a22:	6093      	str	r3, [r2, #8]
	PUWaterT = (u16*) (TXString + 34);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3322      	adds	r3, #34	; 0x22
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <SendBackPoint+0x124>)
 8000a2a:	6013      	str	r3, [r2, #0]
	PUWaterD = (u16*) (TXString + 36);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3324      	adds	r3, #36	; 0x24
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <SendBackPoint+0x128>)
 8000a32:	6013      	str	r3, [r2, #0]
	PUId = TXString + 38;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3326      	adds	r3, #38	; 0x26
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <SendBackPoint+0x12c>)
 8000a3a:	6013      	str	r3, [r2, #0]
	*PUId = XorCaculate(TXString, 38);
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <SendBackPoint+0x12c>)
 8000a3e:	681c      	ldr	r4, [r3, #0]
 8000a40:	2126      	movs	r1, #38	; 0x26
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f8f8 	bl	8000c38 <XorCaculate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	7023      	strb	r3, [r4, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	200000d0 	.word	0x200000d0
 8000a5c:	200000cc 	.word	0x200000cc
 8000a60:	20000074 	.word	0x20000074
 8000a64:	20000078 	.word	0x20000078
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000080 	.word	0x20000080
 8000a70:	20000088 	.word	0x20000088
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	20000098 	.word	0x20000098
 8000a7c:	200000a4 	.word	0x200000a4
 8000a80:	200000b0 	.word	0x200000b0
 8000a84:	200000bc 	.word	0x200000bc
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	200000c4 	.word	0x200000c4

08000a90 <SendBack>:

//上传数据处理
void SendBack(u8 WaterDetect, u16 TempNum, u16 BaroNum[2], u16 HumNum,
		u16 AccNum[3], u16 RotNum[3], u16 EulNum[3], u16 MagNum[3],
		u16 WaterTNum, u16 WaterDNum)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	81bb      	strh	r3, [r7, #12]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]
	*PUCabin = CabinNum;
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <SendBack+0x11c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	if (WaterDetect)
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <SendBack+0x34>
	{
		*PUCabin += WaterNum;
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <SendBack+0x11c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <SendBack+0x11c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3202      	adds	r2, #2
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	701a      	strb	r2, [r3, #0]
	}
	if (!(*GY39SensorIO))
 8000ac4:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <SendBack+0x120>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d111      	bne.n	8000af2 <SendBack+0x62>
	{
		*PUTemp = TempNum;
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <SendBack+0x124>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	89ba      	ldrh	r2, [r7, #12]
 8000ad4:	801a      	strh	r2, [r3, #0]
		*PUBaro[0] = BaroNum[0];
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <SendBack+0x128>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	801a      	strh	r2, [r3, #0]
		*PUBaro[1] = BaroNum[1];
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <SendBack+0x128>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	8852      	ldrh	r2, [r2, #2]
 8000ae8:	801a      	strh	r2, [r3, #0]
		*PUHum = HumNum;
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <SendBack+0x12c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	801a      	strh	r2, [r3, #0]
	}
	if (!(*WT931SensorIO))
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <SendBack+0x130>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d13b      	bne.n	8000b74 <SendBack+0xe4>
	{
		*PUAcc[0] = AccNum[0];
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <SendBack+0x134>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	8812      	ldrh	r2, [r2, #0]
 8000b04:	801a      	strh	r2, [r3, #0]
		*PUAcc[1] = AccNum[1];
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <SendBack+0x134>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	8852      	ldrh	r2, [r2, #2]
 8000b0e:	801a      	strh	r2, [r3, #0]
		*PUAcc[2] = AccNum[2];
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <SendBack+0x134>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	6a3a      	ldr	r2, [r7, #32]
 8000b16:	8892      	ldrh	r2, [r2, #4]
 8000b18:	801a      	strh	r2, [r3, #0]
		*PURot[0] = RotNum[0];
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <SendBack+0x138>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b20:	8812      	ldrh	r2, [r2, #0]
 8000b22:	801a      	strh	r2, [r3, #0]
		*PURot[1] = RotNum[1];
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <SendBack+0x138>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2a:	8852      	ldrh	r2, [r2, #2]
 8000b2c:	801a      	strh	r2, [r3, #0]
		*PURot[2] = RotNum[2];
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SendBack+0x138>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b34:	8892      	ldrh	r2, [r2, #4]
 8000b36:	801a      	strh	r2, [r3, #0]
		*PUEul[0] = EulNum[0];
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SendBack+0x13c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3e:	8812      	ldrh	r2, [r2, #0]
 8000b40:	801a      	strh	r2, [r3, #0]
		*PUEul[1] = EulNum[1];
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <SendBack+0x13c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b48:	8852      	ldrh	r2, [r2, #2]
 8000b4a:	801a      	strh	r2, [r3, #0]
		*PUEul[2] = EulNum[2];
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <SendBack+0x13c>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b52:	8892      	ldrh	r2, [r2, #4]
 8000b54:	801a      	strh	r2, [r3, #0]
		*PUMag[0] = MagNum[0];
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <SendBack+0x140>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	801a      	strh	r2, [r3, #0]
		*PUMag[1] = MagNum[1];
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <SendBack+0x140>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b66:	8852      	ldrh	r2, [r2, #2]
 8000b68:	801a      	strh	r2, [r3, #0]
		*PUMag[2] = MagNum[2];
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <SendBack+0x140>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b70:	8892      	ldrh	r2, [r2, #4]
 8000b72:	801a      	strh	r2, [r3, #0]
	}
#ifdef CtrlSide
	if (!(*DeepSensorIO))
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <SendBack+0x144>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d107      	bne.n	8000b8e <SendBack+0xfe>
	{
		*PUWaterT = WaterTNum;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <SendBack+0x148>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b84:	801a      	strh	r2, [r3, #0]
		*PUWaterD = WaterDNum;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <SendBack+0x14c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b8c:	801a      	strh	r2, [r3, #0]

#ifdef PowerSide
	*PUWaterT = NULL;
	*PUWaterD = NULL;
#endif
	*PUId = XorCaculate(PUString, 38);
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <SendBack+0x150>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <SendBack+0x154>)
 8000b94:	6814      	ldr	r4, [r2, #0]
 8000b96:	2126      	movs	r1, #38	; 0x26
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f84d 	bl	8000c38 <XorCaculate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	200000cc 	.word	0x200000cc
 8000bb4:	2000007c 	.word	0x2000007c
 8000bb8:	20000080 	.word	0x20000080
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	200000d0 	.word	0x200000d0
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	200000b0 	.word	0x200000b0
 8000bd4:	200000c8 	.word	0x200000c8
 8000bd8:	200000bc 	.word	0x200000bc
 8000bdc:	200000c0 	.word	0x200000c0
 8000be0:	20000074 	.word	0x20000074
 8000be4:	200000c4 	.word	0x200000c4

08000be8 <IdTest>:

//异或运算位检查，其中Format上传格式为1下传格式为0，正确为1错误为0
u8 IdTest(u8 *String, u8 Format)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
#ifdef DataIdentify
	if (Format)
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00d      	beq.n	8000c16 <IdTest+0x2e>
	{
		if (*(String + 38) == XorCaculate(String, 38))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3326      	adds	r3, #38	; 0x26
 8000bfe:	781c      	ldrb	r4, [r3, #0]
 8000c00:	2126      	movs	r1, #38	; 0x26
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f818 	bl	8000c38 <XorCaculate>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d101      	bne.n	8000c12 <IdTest+0x2a>
		{
			return 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e00c      	b.n	8000c30 <IdTest+0x48>
		}
	}
	else
	{
		if (*(String + 28) == XorCaculate(String, 28))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	331c      	adds	r3, #28
 8000c1a:	781c      	ldrb	r4, [r3, #0]
 8000c1c:	211c      	movs	r1, #28
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f80a 	bl	8000c38 <XorCaculate>
 8000c24:	4603      	mov	r3, r0
 8000c26:	429c      	cmp	r4, r3
 8000c28:	d101      	bne.n	8000c2e <IdTest+0x46>
		{
			return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000c2e:	2300      	movs	r3, #0
		}
	}
#endif
	return 1;
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <XorCaculate>:

//异或运算位计算
u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	u8 CacResult = CacString[0];
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73bb      	strb	r3, [r7, #14]
 8000c4e:	e009      	b.n	8000c64 <XorCaculate+0x2c>
	{
		CacResult ^= CacString[i];
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4053      	eors	r3, r2
 8000c5c:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73bb      	strb	r3, [r7, #14]
 8000c64:	7bba      	ldrb	r2, [r7, #14]
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d3f1      	bcc.n	8000c50 <XorCaculate+0x18>
	}
	return CacResult;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <DeepPoint>:
const u8 TSendStr[3] =
{ 0xA5, 0x52, 0xF7 };

//水深数据指针定向
void DeepPoint(u8 *SerialData)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]

}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DeepTake>:
//
//}

//水深数据输出
void DeepTake(u16 *DepthNum, u16 *WaterTempertureNum)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]

}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <WT931Point>:

//WT931数据指针定向
void WT931Point(u8 *SerialData)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	PAccPos[0] = (u16*) (SerialData + 2);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <WT931Point+0x94>)
 8000cb2:	6013      	str	r3, [r2, #0]
	PAccPos[1] = (u16*) (SerialData + 4);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <WT931Point+0x94>)
 8000cba:	6053      	str	r3, [r2, #4]
	PAccPos[2] = (u16*) (SerialData + 6);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3306      	adds	r3, #6
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <WT931Point+0x94>)
 8000cc2:	6093      	str	r3, [r2, #8]
	PInsTemPos[0] = (u16*) (SerialData + 8);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <WT931Point+0x98>)
 8000cca:	6013      	str	r3, [r2, #0]
	PRotPos[0] = (u16*) (SerialData + 13);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	330d      	adds	r3, #13
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <WT931Point+0x9c>)
 8000cd2:	6013      	str	r3, [r2, #0]
	PRotPos[1] = (u16*) (SerialData + 15);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	330f      	adds	r3, #15
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <WT931Point+0x9c>)
 8000cda:	6053      	str	r3, [r2, #4]
	PRotPos[2] = (u16*) (SerialData + 17);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3311      	adds	r3, #17
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <WT931Point+0x9c>)
 8000ce2:	6093      	str	r3, [r2, #8]
	PInsTemPos[1] = (u16*) (SerialData + 19);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3313      	adds	r3, #19
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <WT931Point+0x98>)
 8000cea:	6053      	str	r3, [r2, #4]
	PEulPos[0] = (u16*) (SerialData + 24);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3318      	adds	r3, #24
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <WT931Point+0xa0>)
 8000cf2:	6013      	str	r3, [r2, #0]
	PEulPos[1] = (u16*) (SerialData + 26);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	331a      	adds	r3, #26
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <WT931Point+0xa0>)
 8000cfa:	6053      	str	r3, [r2, #4]
	PEulPos[2] = (u16*) (SerialData + 28);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	331c      	adds	r3, #28
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <WT931Point+0xa0>)
 8000d02:	6093      	str	r3, [r2, #8]
	PInsTemPos[2] = (u16*) (SerialData + 30);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	331e      	adds	r3, #30
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <WT931Point+0x98>)
 8000d0a:	6093      	str	r3, [r2, #8]
	PMagPos[0] = (u16*) (SerialData + 35);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3323      	adds	r3, #35	; 0x23
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <WT931Point+0xa4>)
 8000d12:	6013      	str	r3, [r2, #0]
	PMagPos[1] = (u16*) (SerialData + 37);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3325      	adds	r3, #37	; 0x25
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <WT931Point+0xa4>)
 8000d1a:	6053      	str	r3, [r2, #4]
	PMagPos[2] = (u16*) (SerialData + 39);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3327      	adds	r3, #39	; 0x27
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <WT931Point+0xa4>)
 8000d22:	6093      	str	r3, [r2, #8]
	PInsTemPos[2] = (u16*) (SerialData + 41);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3329      	adds	r3, #41	; 0x29
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <WT931Point+0x98>)
 8000d2a:	6093      	str	r3, [r2, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	200000e4 	.word	0x200000e4
 8000d3c:	20000114 	.word	0x20000114
 8000d40:	200000f0 	.word	0x200000f0
 8000d44:	200000fc 	.word	0x200000fc
 8000d48:	20000108 	.word	0x20000108

08000d4c <WT931Take>:

//WT931数据输出
void WT931Take(u16 *AccelerationNum, u16 *RotSpeedNum, u16 *EulerAngleNum,
		u16 *MagnetismNum)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]

	AccelerationNum[0] = *PAccPos[0];
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <WT931Take+0xa4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	801a      	strh	r2, [r3, #0]
	AccelerationNum[1] = *PAccPos[1];
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <WT931Take+0xa4>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	8812      	ldrh	r2, [r2, #0]
 8000d6e:	801a      	strh	r2, [r3, #0]
	AccelerationNum[2] = *PAccPos[2];
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <WT931Take+0xa4>)
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3304      	adds	r3, #4
 8000d78:	8812      	ldrh	r2, [r2, #0]
 8000d7a:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[0] = *PRotPos[0];
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <WT931Take+0xa8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	881a      	ldrh	r2, [r3, #0]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[1] = *PRotPos[1];
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WT931Take+0xa8>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	8812      	ldrh	r2, [r2, #0]
 8000d90:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[2] = *PRotPos[2];
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WT931Take+0xa8>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	8812      	ldrh	r2, [r2, #0]
 8000d9c:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[0] = *PEulPos[0];
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <WT931Take+0xac>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	881a      	ldrh	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[1] = *PEulPos[1];
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <WT931Take+0xac>)
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3302      	adds	r3, #2
 8000db0:	8812      	ldrh	r2, [r2, #0]
 8000db2:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[2] = *PEulPos[2];
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <WT931Take+0xac>)
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	801a      	strh	r2, [r3, #0]
	MagnetismNum[0] = *PMagPos[0];
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <WT931Take+0xb0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	801a      	strh	r2, [r3, #0]
	MagnetismNum[1] = *PMagPos[1];
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <WT931Take+0xb0>)
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	801a      	strh	r2, [r3, #0]
	MagnetismNum[2] = *PMagPos[2];
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <WT931Take+0xb0>)
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	8812      	ldrh	r2, [r2, #0]
 8000de0:	801a      	strh	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	200000e4 	.word	0x200000e4
 8000df4:	200000f0 	.word	0x200000f0
 8000df8:	200000fc 	.word	0x200000fc
 8000dfc:	20000108 	.word	0x20000108

08000e00 <GY39InitStr>:

//读取GY39初始化指令
void GY39InitStr(u8 TXCache[3])
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	TXCache[0] = TInitStr[0];
 8000e08:	22a5      	movs	r2, #165	; 0xa5
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	701a      	strb	r2, [r3, #0]
	TXCache[1] = TInitStr[1];
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3301      	adds	r3, #1
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	701a      	strb	r2, [r3, #0]
	TXCache[2] = TInitStr[2];
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	2225      	movs	r2, #37	; 0x25
 8000e1c:	701a      	strb	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <GY39Point>:
//	TXCache[2]=TSendStr[2];
//}

//GY39数据指针定向
void GY39Point(u8 *SerialData)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	TTemPos = (u16*) (SerialData + 2);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3302      	adds	r3, #2
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <GY39Point+0x34>)
 8000e3a:	6013      	str	r3, [r2, #0]
	TBaroPos[0] = (u16*) (SerialData + 4);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3304      	adds	r3, #4
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <GY39Point+0x38>)
 8000e42:	6013      	str	r3, [r2, #0]
	TBaroPos[1] = (u16*) (SerialData + 6);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3306      	adds	r3, #6
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <GY39Point+0x38>)
 8000e4a:	6053      	str	r3, [r2, #4]
	THumPos = (u16*) (SerialData + 8);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <GY39Point+0x3c>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000124 	.word	0x20000124
 8000e64:	20000128 	.word	0x20000128
 8000e68:	20000130 	.word	0x20000130

08000e6c <GY39Take>:

//GY39数据输出
void GY39Take(u16 *TemNum, u16 BaroNum[2], u16 *HumNum)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	*TemNum = *TTemPos;
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <GY39Take+0x44>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	801a      	strh	r2, [r3, #0]
	BaroNum[0] = *TBaroPos[0];
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <GY39Take+0x48>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	881a      	ldrh	r2, [r3, #0]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	801a      	strh	r2, [r3, #0]
	BaroNum[1] = *TBaroPos[1];
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <GY39Take+0x48>)
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3302      	adds	r3, #2
 8000e94:	8812      	ldrh	r2, [r2, #0]
 8000e96:	801a      	strh	r2, [r3, #0]
	*HumNum = *THumPos;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <GY39Take+0x4c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	801a      	strh	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000124 	.word	0x20000124
 8000eb4:	20000128 	.word	0x20000128
 8000eb8:	20000130 	.word	0x20000130

08000ebc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x30>)
 8000ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000134 	.word	0x20000134
 8000eec:	20000188 	.word	0x20000188

08000ef0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b0a6      	sub	sp, #152	; 0x98
 8000ef4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ef6:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <main+0x1d0>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d11b      	bne.n	8000f3a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f02:	f3bf 8f4f 	dsb	sy
}
 8000f06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f08:	f3bf 8f6f 	isb	sy
}
 8000f0c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <main+0x1d0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f16:	f3bf 8f4f 	dsb	sy
}
 8000f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1c:	f3bf 8f6f 	isb	sy
}
 8000f20:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f22:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <main+0x1d0>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	4a66      	ldr	r2, [pc, #408]	; (80010c0 <main+0x1d0>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2e:	f3bf 8f4f 	dsb	sy
}
 8000f32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f34:	f3bf 8f6f 	isb	sy
}
 8000f38:	e000      	b.n	8000f3c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f3a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f3c:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <main+0x1d0>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d143      	bne.n	8000fd0 <main+0xe0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f48:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <main+0x1d0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f50:	f3bf 8f4f 	dsb	sy
}
 8000f54:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f56:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <main+0x1d0>)
 8000f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f64:	0b5b      	lsrs	r3, r3, #13
 8000f66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f80:	015a      	lsls	r2, r3, #5
 8000f82:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f86:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f88:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f8c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f8e:	494c      	ldr	r1, [pc, #304]	; (80010c0 <main+0x1d0>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1eb      	bne.n	8000f7c <main+0x8c>
    } while(sets-- != 0U);
 8000fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fa8:	1e5a      	subs	r2, r3, #1
 8000faa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1dd      	bne.n	8000f6e <main+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb2:	f3bf 8f4f 	dsb	sy
}
 8000fb6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <main+0x1d0>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <main+0x1d0>)
 8000fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc4:	f3bf 8f4f 	dsb	sy
}
 8000fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fca:	f3bf 8f6f 	isb	sy
}
 8000fce:	e000      	b.n	8000fd2 <main+0xe2>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000fd0:	bf00      	nop
	SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd2:	f001 feb9 	bl	8002d48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd6:	f000 f889 	bl	80010ec <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000fda:	f000 f90d 	bl	80011f8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fde:	f000 fb41 	bl	8001664 <MX_GPIO_Init>
	MX_DMA_Init();
 8000fe2:	f000 facf 	bl	8001584 <MX_DMA_Init>
	MX_IWDG1_Init();
 8000fe6:	f000 f933 	bl	8001250 <MX_IWDG1_Init>
	MX_UART4_Init();
 8000fea:	f000 f94f 	bl	800128c <MX_UART4_Init>
	MX_UART8_Init();
 8000fee:	f000 f999 	bl	8001324 <MX_UART8_Init>
	MX_USART1_UART_Init();
 8000ff2:	f000 f9e3 	bl	80013bc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000ff6:	f000 fa2d 	bl	8001454 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000ffa:	f000 fa77 	bl	80014ec <MX_USART3_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of UpTask */
	osThreadDef(UpTask, UpTaskF, osPriorityNormal, 0, 128);
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <main+0x1d4>)
 8001000:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001004:	461d      	mov	r5, r3
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800100e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UpTaskHandle = osThreadCreate(osThread(UpTask), NULL);
 8001012:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f009 fd06 	bl	800aa2a <osThreadCreate>
 800101e:	4603      	mov	r3, r0
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <main+0x1d8>)
 8001022:	6013      	str	r3, [r2, #0]

	/* definition and creation of DownTask */
	osThreadDef(DownTask, DownTaskF, osPriorityNormal, 0, 128);
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <main+0x1dc>)
 8001026:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800102a:	461d      	mov	r5, r3
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	DownTaskHandle = osThreadCreate(osThread(DownTask), NULL);
 8001038:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f009 fcf3 	bl	800aa2a <osThreadCreate>
 8001044:	4603      	mov	r3, r0
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <main+0x1e0>)
 8001048:	6013      	str	r3, [r2, #0]

	/* definition and creation of InitialTask */
	osThreadDef(InitialTask, InitialTaskF, osPriorityRealtime, 0, 128);
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <main+0x1e4>)
 800104c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001050:	461d      	mov	r5, r3
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	InitialTaskHandle = osThreadCreate(osThread(InitialTask), NULL);
 800105e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f009 fce0 	bl	800aa2a <osThreadCreate>
 800106a:	4603      	mov	r3, r0
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <main+0x1e8>)
 800106e:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <main+0x1ec>)
 8001072:	f107 041c 	add.w	r4, r7, #28
 8001076:	461d      	mov	r5, r3
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f009 fccd 	bl	800aa2a <osThreadCreate>
 8001090:	4603      	mov	r3, r0
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <main+0x1f0>)
 8001094:	6013      	str	r3, [r2, #0]

	/* definition and creation of EmptyTask */
	osThreadDef(EmptyTask, EmptyTaskF, osPriorityIdle, 0, 128);
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <main+0x1f4>)
 8001098:	463c      	mov	r4, r7
 800109a:	461d      	mov	r5, r3
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	EmptyTaskHandle = osThreadCreate(osThread(EmptyTask), NULL);
 80010a8:	463b      	mov	r3, r7
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 fcbc 	bl	800aa2a <osThreadCreate>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <main+0x1f8>)
 80010b6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80010b8:	f009 fcb0 	bl	800aa1c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x1cc>
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	0800c174 	.word	0x0800c174
 80010c8:	200046f4 	.word	0x200046f4
 80010cc:	0800c190 	.word	0x0800c190
 80010d0:	20004924 	.word	0x20004924
 80010d4:	0800c1ac 	.word	0x0800c1ac
 80010d8:	20004928 	.word	0x20004928
 80010dc:	0800c1c8 	.word	0x0800c1c8
 80010e0:	2000411c 	.word	0x2000411c
 80010e4:	0800c1e4 	.word	0x0800c1e4
 80010e8:	2000437c 	.word	0x2000437c

080010ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09c      	sub	sp, #112	; 0x70
 80010f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	224c      	movs	r2, #76	; 0x4c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00b f80a 	bl	800c114 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2220      	movs	r2, #32
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f00b f804 	bl	800c114 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800110c:	2002      	movs	r0, #2
 800110e:	f004 ffe9 	bl	80060e4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <SystemClock_Config+0x100>)
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	4a34      	ldr	r2, [pc, #208]	; (80011ec <SystemClock_Config+0x100>)
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <SystemClock_Config+0x100>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <SystemClock_Config+0x104>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <SystemClock_Config+0x104>)
 8001132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <SystemClock_Config+0x104>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001144:	bf00      	nop
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <SystemClock_Config+0x104>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800114e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001152:	d1f8      	bne.n	8001146 <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemClock_Config+0x108>)
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f023 0303 	bic.w	r3, r3, #3
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <SystemClock_Config+0x108>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001164:	2309      	movs	r3, #9
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800116e:	2301      	movs	r3, #1
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	2302      	movs	r3, #2
 8001178:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 800117a:	2305      	movs	r3, #5
 800117c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8001186:	2306      	movs	r3, #6
 8001188:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800118e:	2308      	movs	r3, #8
 8001190:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001192:	2300      	movs	r3, #0
 8001194:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 ffda 	bl	8006158 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80011aa:	f000 fd9f 	bl	8001cec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011ae:	233f      	movs	r3, #63	; 0x3f
 80011b0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2303      	movs	r3, #3
 80011b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011ba:	2308      	movs	r3, #8
 80011bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011be:	2340      	movs	r3, #64	; 0x40
 80011c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011cc:	2340      	movs	r3, #64	; 0x40
 80011ce:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2102      	movs	r1, #2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fbcf 	bl	8006978 <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80011e0:	f000 fd84 	bl	8001cec <Error_Handler>
	}
}
 80011e4:	bf00      	nop
 80011e6:	3770      	adds	r7, #112	; 0x70
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58000400 	.word	0x58000400
 80011f0:	58024800 	.word	0x58024800
 80011f4:	58024400 	.word	0x58024400

080011f8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0b0      	sub	sp, #192	; 0xc0
 80011fc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	22bc      	movs	r2, #188	; 0xbc
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f00a ff85 	bl	800c114 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8
 800120a:	2303      	movs	r3, #3
 800120c:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 800120e:	2319      	movs	r3, #25
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001222:	2300      	movs	r3, #0
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001226:	2300      	movs	r3, #0
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 800122e:	2302      	movs	r3, #2
 8001230:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001232:	2310      	movs	r3, #16
 8001234:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f005 ff6b 	bl	8007114 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001244:	f000 fd52 	bl	8001cec <Error_Handler>
	}
}
 8001248:	bf00      	nop
 800124a:	37c0      	adds	r7, #192	; 0xc0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_IWDG1_Init+0x34>)
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <MX_IWDG1_Init+0x38>)
 8001258:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_IWDG1_Init+0x34>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 2047;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_IWDG1_Init+0x34>)
 8001262:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001266:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 2047;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_IWDG1_Init+0x34>)
 800126a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800126e:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_IWDG1_Init+0x34>)
 8001272:	f004 fed8 	bl	8006026 <HAL_IWDG_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 800127c:	f000 fd36 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20004210 	.word	0x20004210
 8001288:	58004800 	.word	0x58004800

0800128c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_UART4_Init+0x90>)
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <MX_UART4_Init+0x94>)
 8001294:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_UART4_Init+0x90>)
 8001298:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800129c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_UART4_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_UART4_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_UART4_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_UART4_Init+0x90>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_UART4_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_UART4_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_UART4_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_UART4_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_UART4_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_UART4_Init+0x90>)
 80012d6:	f007 fd51 	bl	8008d7c <HAL_UART_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 80012e0:	f000 fd04 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80012e4:	2100      	movs	r1, #0
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_UART4_Init+0x90>)
 80012e8:	f009 fab6 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80012f2:	f000 fcfb 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <MX_UART4_Init+0x90>)
 80012fa:	f009 faeb 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001304:	f000 fcf2 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_UART4_Init+0x90>)
 800130a:	f009 fa6c 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8001314:	f000 fcea 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200047e4 	.word	0x200047e4
 8001320:	40004c00 	.word	0x40004c00

08001324 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_UART8_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_UART8_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_UART8_Init+0x90>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_UART8_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_UART8_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_UART8_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_UART8_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_UART8_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_UART8_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_UART8_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_UART8_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_UART8_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_UART8_Init+0x90>)
 800136e:	f007 fd05 	bl	8008d7c <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8001378:	f000 fcb8 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_UART8_Init+0x90>)
 8001380:	f009 fa6a 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800138a:	f000 fcaf 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_UART8_Init+0x90>)
 8001392:	f009 fa9f 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800139c:	f000 fca6 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_UART8_Init+0x90>)
 80013a2:	f009 fa20 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 80013ac:	f000 fc9e 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20004718 	.word	0x20004718
 80013b8:	40007c00 	.word	0x40007c00

080013bc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <MX_USART1_UART_Init+0x94>)
 80013c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80013cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USART1_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_USART1_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <MX_USART1_UART_Init+0x90>)
 8001406:	f007 fcb9 	bl	8008d7c <HAL_UART_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001410:	f000 fc6c 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001414:	2100      	movs	r1, #0
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_USART1_UART_Init+0x90>)
 8001418:	f009 fa1e 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001422:	f000 fc63 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001426:	2100      	movs	r1, #0
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <MX_USART1_UART_Init+0x90>)
 800142a:	f009 fa53 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001434:	f000 fc5a 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_USART1_UART_Init+0x90>)
 800143a:	f009 f9d4 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001444:	f000 fc52 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20004560 	.word	0x20004560
 8001450:	40011000 	.word	0x40011000

08001454 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <MX_USART2_UART_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 800149e:	f007 fc6d 	bl	8008d7c <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80014a8:	f000 fc20 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 80014b0:	f009 f9d2 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80014ba:	f000 fc17 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 80014c2:	f009 fa07 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80014cc:	f000 fc0e 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_USART2_UART_Init+0x90>)
 80014d2:	f009 f988 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80014dc:	f000 fc06 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20004874 	.word	0x20004874
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_USART3_UART_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_USART3_UART_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_USART3_UART_Init+0x90>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_USART3_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_USART3_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001536:	f007 fc21 	bl	8008d7c <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001540:	f000 fbd4 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001548:	f009 f986 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001552:	f000 fbcb 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_USART3_UART_Init+0x90>)
 800155a:	f009 f9bb 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001564:	f000 fbc2 	bl	8001cec <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_USART3_UART_Init+0x90>)
 800156a:	f009 f93c 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001574:	f000 fbba 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200042dc 	.word	0x200042dc
 8001580:	40004800 	.word	0x40004800

08001584 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800158a:	4b35      	ldr	r3, [pc, #212]	; (8001660 <MX_DMA_Init+0xdc>)
 800158c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001590:	4a33      	ldr	r2, [pc, #204]	; (8001660 <MX_DMA_Init+0xdc>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <MX_DMA_Init+0xdc>)
 800159c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <MX_DMA_Init+0xdc>)
 80015aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015ae:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <MX_DMA_Init+0xdc>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <MX_DMA_Init+0xdc>)
 80015ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2105      	movs	r1, #5
 80015ca:	200b      	movs	r0, #11
 80015cc:	f001 fcdc 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015d0:	200b      	movs	r0, #11
 80015d2:	f001 fcf3 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2105      	movs	r1, #5
 80015da:	200c      	movs	r0, #12
 80015dc:	f001 fcd4 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015e0:	200c      	movs	r0, #12
 80015e2:	f001 fceb 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2105      	movs	r1, #5
 80015ea:	200d      	movs	r0, #13
 80015ec:	f001 fccc 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015f0:	200d      	movs	r0, #13
 80015f2:	f001 fce3 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2105      	movs	r1, #5
 80015fa:	200e      	movs	r0, #14
 80015fc:	f001 fcc4 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001600:	200e      	movs	r0, #14
 8001602:	f001 fcdb 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	200f      	movs	r0, #15
 800160c:	f001 fcbc 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001610:	200f      	movs	r0, #15
 8001612:	f001 fcd3 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2105      	movs	r1, #5
 800161a:	2010      	movs	r0, #16
 800161c:	f001 fcb4 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001620:	2010      	movs	r0, #16
 8001622:	f001 fccb 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2105      	movs	r1, #5
 800162a:	2011      	movs	r0, #17
 800162c:	f001 fcac 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001630:	2011      	movs	r0, #17
 8001632:	f001 fcc3 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2105      	movs	r1, #5
 800163a:	202f      	movs	r0, #47	; 0x2f
 800163c:	f001 fca4 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001640:	202f      	movs	r0, #47	; 0x2f
 8001642:	f001 fcbb 	bl	8002fbc <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	2038      	movs	r0, #56	; 0x38
 800164c:	f001 fc9c 	bl	8002f88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001650:	2038      	movs	r0, #56	; 0x38
 8001652:	f001 fcb3 	bl	8002fbc <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	58024400 	.word	0x58024400

08001664 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_GPIO_Init+0xf4>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a35      	ldr	r2, [pc, #212]	; (8001758 <MX_GPIO_Init+0xf4>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <MX_GPIO_Init+0xf4>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_GPIO_Init+0xf4>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	4a26      	ldr	r2, [pc, #152]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_GPIO_Init+0xf4>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_GPIO_Init+0xf4>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2110      	movs	r1, #16
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <MX_GPIO_Init+0xf8>)
 8001716:	f004 fc6d 	bl	8005ff4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800171a:	2310      	movs	r3, #16
 800171c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <MX_GPIO_Init+0xf8>)
 8001732:	f004 fa97 	bl	8005c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_GPIO_Init+0xf8>)
 800174a:	f004 fa8b 	bl	8005c64 <HAL_GPIO_Init>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	58024400 	.word	0x58024400
 800175c:	58021000 	.word	0x58021000

08001760 <UpTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_UpTaskF */
void UpTaskF(void const *argument)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af06      	add	r7, sp, #24
 8001766:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		while (!UpSideFinish)
 8001768:	e002      	b.n	8001770 <UpTaskF+0x10>
		{
			osDelay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f009 f9a9 	bl	800aac2 <osDelay>
		while (!UpSideFinish)
 8001770:	4b45      	ldr	r3, [pc, #276]	; (8001888 <UpTaskF+0x128>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f8      	beq.n	800176a <UpTaskF+0xa>
		}
		UpSideFinish = 0;
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <UpTaskF+0x128>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		if (IdTest(UART1RXCache, 0))
 800177e:	2100      	movs	r1, #0
 8001780:	4842      	ldr	r0, [pc, #264]	; (800188c <UpTaskF+0x12c>)
 8001782:	f7ff fa31 	bl	8000be8 <IdTest>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01d      	beq.n	80017c8 <UpTaskF+0x68>
		{
			while (UpIO)
 800178c:	e002      	b.n	8001794 <UpTaskF+0x34>
			{
				osDelay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f009 f997 	bl	800aac2 <osDelay>
			while (UpIO)
 8001794:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <UpTaskF+0x130>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f7      	bne.n	800178e <UpTaskF+0x2e>
			}
			UpIO = 1;
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <UpTaskF+0x130>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART1RXLen; ++i)
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e008      	b.n	80017bc <UpTaskF+0x5c>
			{
				UpCache[i] = UART1RXCache[i];
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	4937      	ldr	r1, [pc, #220]	; (800188c <UpTaskF+0x12c>)
 80017b0:	5c89      	ldrb	r1, [r1, r2]
 80017b2:	4a38      	ldr	r2, [pc, #224]	; (8001894 <UpTaskF+0x134>)
 80017b4:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART1RXLen; ++i)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b1d      	cmp	r3, #29
 80017c0:	d9f3      	bls.n	80017aa <UpTaskF+0x4a>
			}
			UpIO = 0;
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <UpTaskF+0x130>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <UpTaskF+0x138>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <UpTaskF+0x138>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0210 	orr.w	r2, r2, #16
 80017d6:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, UART1RXCache, UART1RXLen);
 80017d8:	221e      	movs	r2, #30
 80017da:	492c      	ldr	r1, [pc, #176]	; (800188c <UpTaskF+0x12c>)
 80017dc:	482e      	ldr	r0, [pc, #184]	; (8001898 <UpTaskF+0x138>)
 80017de:	f007 fb9d 	bl	8008f1c <HAL_UART_Receive_DMA>
		DownEn = 1;
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <UpTaskF+0x13c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
		if (SensorCabin)
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <UpTaskF+0x140>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d023      	beq.n	8001838 <UpTaskF+0xd8>
		{
			while (DownIO)
 80017f0:	e002      	b.n	80017f8 <UpTaskF+0x98>
			{
				osDelay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f009 f965 	bl	800aac2 <osDelay>
			while (DownIO)
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <UpTaskF+0x144>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f7      	bne.n	80017f2 <UpTaskF+0x92>
			}
			DownIO = 1;
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <UpTaskF+0x144>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART1TXLen; ++i)
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]
 800180c:	e008      	b.n	8001820 <UpTaskF+0xc0>
			{
				UART1TXCache_P[i] = DownCache[i];
 800180e:	7bba      	ldrb	r2, [r7, #14]
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	4925      	ldr	r1, [pc, #148]	; (80018a8 <UpTaskF+0x148>)
 8001814:	5c89      	ldrb	r1, [r1, r2]
 8001816:	4a25      	ldr	r2, [pc, #148]	; (80018ac <UpTaskF+0x14c>)
 8001818:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART1TXLen; ++i)
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	3301      	adds	r3, #1
 800181e:	73bb      	strb	r3, [r7, #14]
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	2b28      	cmp	r3, #40	; 0x28
 8001824:	d9f3      	bls.n	800180e <UpTaskF+0xae>
			}
			DownIO = 0;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <UpTaskF+0x144>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart1, UART1TXCache_P, UART1TXLen);
 800182c:	2229      	movs	r2, #41	; 0x29
 800182e:	491f      	ldr	r1, [pc, #124]	; (80018ac <UpTaskF+0x14c>)
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <UpTaskF+0x138>)
 8001832:	f007 faf3 	bl	8008e1c <HAL_UART_Transmit_DMA>
 8001836:	e01c      	b.n	8001872 <UpTaskF+0x112>
		}
		else
		{
			SendBack(WaterDetect, TemCache, BaroCache, HumCache,
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <UpTaskF+0x150>)
 800183a:	7818      	ldrb	r0, [r3, #0]
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <UpTaskF+0x154>)
 800183e:	8819      	ldrh	r1, [r3, #0]
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <UpTaskF+0x158>)
 8001842:	881c      	ldrh	r4, [r3, #0]
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <UpTaskF+0x15c>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <UpTaskF+0x160>)
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	9205      	str	r2, [sp, #20]
 800184e:	9304      	str	r3, [sp, #16]
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <UpTaskF+0x164>)
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <UpTaskF+0x168>)
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <UpTaskF+0x16c>)
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <UpTaskF+0x170>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	4623      	mov	r3, r4
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <UpTaskF+0x174>)
 8001864:	f7ff f914 	bl	8000a90 <SendBack>
					AccelerationCache, RotSpeedCache, EulerAngleCache,
					MagnetisCache, WaterTempertureCache, DepthCache);
			HAL_UART_Transmit_DMA(&huart1, UART1TXCache_C, UART1TXLen);
 8001868:	2229      	movs	r2, #41	; 0x29
 800186a:	491b      	ldr	r1, [pc, #108]	; (80018d8 <UpTaskF+0x178>)
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <UpTaskF+0x138>)
 800186e:	f007 fad5 	bl	8008e1c <HAL_UART_Transmit_DMA>
		}
		SensorCabin = ~SensorCabin;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <UpTaskF+0x140>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	43db      	mvns	r3, r3
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <UpTaskF+0x140>)
 800187c:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <UpTaskF+0x17c>)
 8001880:	f004 fc20 	bl	80060c4 <HAL_IWDG_Refresh>
		while (!UpSideFinish)
 8001884:	e774      	b.n	8001770 <UpTaskF+0x10>
 8001886:	bf00      	nop
 8001888:	20000389 	.word	0x20000389
 800188c:	200046f8 	.word	0x200046f8
 8001890:	20000391 	.word	0x20000391
 8001894:	200046a8 	.word	0x200046a8
 8001898:	20004560 	.word	0x20004560
 800189c:	20000392 	.word	0x20000392
 80018a0:	20000388 	.word	0x20000388
 80018a4:	20000393 	.word	0x20000393
 80018a8:	20004238 	.word	0x20004238
 80018ac:	2000492c 	.word	0x2000492c
 80018b0:	20000394 	.word	0x20000394
 80018b4:	200003b6 	.word	0x200003b6
 80018b8:	200003bc 	.word	0x200003bc
 80018bc:	200003c0 	.word	0x200003c0
 80018c0:	200003be 	.word	0x200003be
 80018c4:	200003b0 	.word	0x200003b0
 80018c8:	200003a8 	.word	0x200003a8
 80018cc:	200003a0 	.word	0x200003a0
 80018d0:	20000398 	.word	0x20000398
 80018d4:	200003b8 	.word	0x200003b8
 80018d8:	200046c8 	.word	0x200046c8
 80018dc:	20004210 	.word	0x20004210

080018e0 <DownTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DownTaskF */
void DownTaskF(void const *argument)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DownTaskF */
	while (!DownEn)
 80018e8:	e002      	b.n	80018f0 <DownTaskF+0x10>
	{
		osDelay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f009 f8e9 	bl	800aac2 <osDelay>
	while (!DownEn)
 80018f0:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <DownTaskF+0x14c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f8      	beq.n	80018ea <DownTaskF+0xa>
	}
	/* Infinite loop */
	for (;;)
	{
		if (DownMoveDetect() == 2)
 80018f8:	f7fe fed4 	bl	80006a4 <DownMoveDetect>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d113      	bne.n	800192a <DownTaskF+0x4a>
		{
			if (DIPFlag == 0)
 8001902:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <DownTaskF+0x150>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <DownTaskF+0x38>
			{
				DIPFlag = 1;
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <DownTaskF+0x150>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
				DIPStartNum = EulerAngleCache[2];
 8001910:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <DownTaskF+0x154>)
 8001912:	889a      	ldrh	r2, [r3, #4]
 8001914:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <DownTaskF+0x158>)
 8001916:	801a      	strh	r2, [r3, #0]
			}
			SpecialMovePID(2, DIPStartNum, EulerAngleCache[2]);
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <DownTaskF+0x158>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	4a45      	ldr	r2, [pc, #276]	; (8001a34 <DownTaskF+0x154>)
 800191e:	8892      	ldrh	r2, [r2, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	2002      	movs	r0, #2
 8001924:	f7fe fece 	bl	80006c4 <SpecialMovePID>
 8001928:	e01f      	b.n	800196a <DownTaskF+0x8a>
		}
		else if (DownMoveDetect() == 4)
 800192a:	f7fe febb 	bl	80006a4 <DownMoveDetect>
 800192e:	4603      	mov	r3, r0
 8001930:	2b04      	cmp	r3, #4
 8001932:	d113      	bne.n	800195c <DownTaskF+0x7c>
		{
			if (DIPFlag == 0)
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <DownTaskF+0x150>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <DownTaskF+0x6a>
			{
				DIPFlag = 1;
 800193c:	4b3c      	ldr	r3, [pc, #240]	; (8001a30 <DownTaskF+0x150>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
				DIPStartNum = DepthCache;
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <DownTaskF+0x15c>)
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <DownTaskF+0x158>)
 8001948:	801a      	strh	r2, [r3, #0]
			}
			SpecialMovePID(4, DIPStartNum, DepthCache);
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <DownTaskF+0x158>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <DownTaskF+0x15c>)
 8001950:	8812      	ldrh	r2, [r2, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	2004      	movs	r0, #4
 8001956:	f7fe feb5 	bl	80006c4 <SpecialMovePID>
 800195a:	e006      	b.n	800196a <DownTaskF+0x8a>
		}
		else
		{
			DIPFlag = 0;
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <DownTaskF+0x150>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
		}
		while (UpIO)
 8001962:	e002      	b.n	800196a <DownTaskF+0x8a>
		{
			osDelay(1);
 8001964:	2001      	movs	r0, #1
 8001966:	f009 f8ac 	bl	800aac2 <osDelay>
		while (UpIO)
 800196a:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <DownTaskF+0x160>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f7      	bne.n	8001964 <DownTaskF+0x84>
		}
		UpIO = 1;
 8001974:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <DownTaskF+0x160>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
		for (u8 i = 0; i < UART8TXLen; ++i)
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e008      	b.n	8001992 <DownTaskF+0xb2>
		{
			UART8TXCache[i] = UpCache[i];
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	492f      	ldr	r1, [pc, #188]	; (8001a44 <DownTaskF+0x164>)
 8001986:	5c89      	ldrb	r1, [r1, r2]
 8001988:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <DownTaskF+0x168>)
 800198a:	54d1      	strb	r1, [r2, r3]
		for (u8 i = 0; i < UART8TXLen; ++i)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3301      	adds	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b1d      	cmp	r3, #29
 8001996:	d9f3      	bls.n	8001980 <DownTaskF+0xa0>
		}
		UpIO = 0;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <DownTaskF+0x160>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart8, UART8TXCache, UART8TXLen);
 800199e:	221e      	movs	r2, #30
 80019a0:	4929      	ldr	r1, [pc, #164]	; (8001a48 <DownTaskF+0x168>)
 80019a2:	482a      	ldr	r0, [pc, #168]	; (8001a4c <DownTaskF+0x16c>)
 80019a4:	f007 fa3a 	bl	8008e1c <HAL_UART_Transmit_DMA>
		while (!DownSideFinish)
 80019a8:	e002      	b.n	80019b0 <DownTaskF+0xd0>
		{
			osDelay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f009 f889 	bl	800aac2 <osDelay>
		while (!DownSideFinish)
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <DownTaskF+0x170>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f8      	beq.n	80019aa <DownTaskF+0xca>
		}
		DownSideFinish = 0;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <DownTaskF+0x170>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
		if (IdTest(UART8RXCache, 1))
 80019be:	2101      	movs	r1, #1
 80019c0:	4824      	ldr	r0, [pc, #144]	; (8001a54 <DownTaskF+0x174>)
 80019c2:	f7ff f911 	bl	8000be8 <IdTest>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01d      	beq.n	8001a08 <DownTaskF+0x128>
		{
			while (DownIO)
 80019cc:	e002      	b.n	80019d4 <DownTaskF+0xf4>
			{
				osDelay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f009 f877 	bl	800aac2 <osDelay>
			while (DownIO)
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <DownTaskF+0x178>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f7      	bne.n	80019ce <DownTaskF+0xee>
			}
			DownIO = 1;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <DownTaskF+0x178>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART8RXLen; ++i)
 80019e4:	2300      	movs	r3, #0
 80019e6:	73bb      	strb	r3, [r7, #14]
 80019e8:	e008      	b.n	80019fc <DownTaskF+0x11c>
			{
				DownCache[i] = UART8RXCache[i];
 80019ea:	7bba      	ldrb	r2, [r7, #14]
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	4919      	ldr	r1, [pc, #100]	; (8001a54 <DownTaskF+0x174>)
 80019f0:	5c89      	ldrb	r1, [r1, r2]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <DownTaskF+0x17c>)
 80019f4:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART8RXLen; ++i)
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73bb      	strb	r3, [r7, #14]
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	2b28      	cmp	r3, #40	; 0x28
 8001a00:	d9f3      	bls.n	80019ea <DownTaskF+0x10a>
			}
			DownIO = 0;
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <DownTaskF+0x178>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_ENABLE_IT(&huart8, UART_IT_IDLE);
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <DownTaskF+0x16c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <DownTaskF+0x16c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0210 	orr.w	r2, r2, #16
 8001a16:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart8, UART8RXCache, UART8RXLen);
 8001a18:	2229      	movs	r2, #41	; 0x29
 8001a1a:	490e      	ldr	r1, [pc, #56]	; (8001a54 <DownTaskF+0x174>)
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <DownTaskF+0x16c>)
 8001a1e:	f007 fa7d 	bl	8008f1c <HAL_UART_Receive_DMA>
		HAL_IWDG_Refresh(&hiwdg1);
 8001a22:	480f      	ldr	r0, [pc, #60]	; (8001a60 <DownTaskF+0x180>)
 8001a24:	f004 fb4e 	bl	80060c4 <HAL_IWDG_Refresh>
		if (DownMoveDetect() == 2)
 8001a28:	e766      	b.n	80018f8 <DownTaskF+0x18>
 8001a2a:	bf00      	nop
 8001a2c:	20000392 	.word	0x20000392
 8001a30:	200003c3 	.word	0x200003c3
 8001a34:	200003a8 	.word	0x200003a8
 8001a38:	200003c4 	.word	0x200003c4
 8001a3c:	200003be 	.word	0x200003be
 8001a40:	20000391 	.word	0x20000391
 8001a44:	200046a8 	.word	0x200046a8
 8001a48:	20004904 	.word	0x20004904
 8001a4c:	20004718 	.word	0x20004718
 8001a50:	2000038a 	.word	0x2000038a
 8001a54:	2000467c 	.word	0x2000467c
 8001a58:	20000393 	.word	0x20000393
 8001a5c:	20004238 	.word	0x20004238
 8001a60:	20004210 	.word	0x20004210

08001a64 <InitialTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_InitialTaskF */
void InitialTaskF(void const *argument)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN InitialTaskF */
	vTaskSuspend(SensorTaskHandle);
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <InitialTaskF+0x78>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f009 fab5 	bl	800afe0 <vTaskSuspend>
	vTaskSuspend(UpTaskHandle);
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <InitialTaskF+0x7c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f009 fab0 	bl	800afe0 <vTaskSuspend>
	vTaskSuspend(DownTaskHandle);
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <InitialTaskF+0x80>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f009 faab 	bl	800afe0 <vTaskSuspend>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <InitialTaskF+0x84>)
 8001a90:	f004 fab0 	bl	8005ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2110      	movs	r1, #16
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <InitialTaskF+0x84>)
 8001a9a:	f004 faab 	bl	8005ff4 <HAL_GPIO_WritePin>
	SendBackPoint(UART1TXCache_C, &DeepIO, &WT931IO, &GY39IO);
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <InitialTaskF+0x88>)
 8001aa0:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <InitialTaskF+0x8c>)
 8001aa2:	4914      	ldr	r1, [pc, #80]	; (8001af4 <InitialTaskF+0x90>)
 8001aa4:	4814      	ldr	r0, [pc, #80]	; (8001af8 <InitialTaskF+0x94>)
 8001aa6:	f7fe ff5b 	bl	8000960 <SendBackPoint>
	DownDetectPoint(UpCache);
 8001aaa:	4814      	ldr	r0, [pc, #80]	; (8001afc <InitialTaskF+0x98>)
 8001aac:	f7fe fd94 	bl	80005d8 <DownDetectPoint>
	vTaskResume(UpTaskHandle);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <InitialTaskF+0x7c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f009 fb57 	bl	800b168 <vTaskResume>
	vTaskResume(SensorTaskHandle);
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <InitialTaskF+0x78>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f009 fb52 	bl	800b168 <vTaskResume>
	HAL_IWDG_Refresh(&hiwdg1);
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <InitialTaskF+0x9c>)
 8001ac6:	f004 fafd 	bl	80060c4 <HAL_IWDG_Refresh>
	vTaskSuspend(InitialTaskHandle);
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <InitialTaskF+0xa0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f009 fa86 	bl	800afe0 <vTaskSuspend>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f008 fff4 	bl	800aac2 <osDelay>
 8001ada:	e7fb      	b.n	8001ad4 <InitialTaskF+0x70>
 8001adc:	2000411c 	.word	0x2000411c
 8001ae0:	200046f4 	.word	0x200046f4
 8001ae4:	20004924 	.word	0x20004924
 8001ae8:	58021000 	.word	0x58021000
 8001aec:	2000038f 	.word	0x2000038f
 8001af0:	20000390 	.word	0x20000390
 8001af4:	2000038e 	.word	0x2000038e
 8001af8:	200046c8 	.word	0x200046c8
 8001afc:	200046a8 	.word	0x200046a8
 8001b00:	20004210 	.word	0x20004210
 8001b04:	20004928 	.word	0x20004928

08001b08 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN SensorTaskF */
	WT931Point(UART8RXCache);
 8001b10:	484c      	ldr	r0, [pc, #304]	; (8001c44 <SensorTaskF+0x13c>)
 8001b12:	f7ff f8c7 	bl	8000ca4 <WT931Point>
	GY39InitStr(UART2TXCache);
 8001b16:	484c      	ldr	r0, [pc, #304]	; (8001c48 <SensorTaskF+0x140>)
 8001b18:	f7ff f972 	bl	8000e00 <GY39InitStr>
	HAL_UART_Transmit_DMA(&huart2, UART2TXCache, UART2TXLen);
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	494a      	ldr	r1, [pc, #296]	; (8001c48 <SensorTaskF+0x140>)
 8001b20:	484a      	ldr	r0, [pc, #296]	; (8001c4c <SensorTaskF+0x144>)
 8001b22:	f007 f97b 	bl	8008e1c <HAL_UART_Transmit_DMA>
	GY39Point(UART3RXCache);
 8001b26:	484a      	ldr	r0, [pc, #296]	; (8001c50 <SensorTaskF+0x148>)
 8001b28:	f7ff f980 	bl	8000e2c <GY39Point>
	DeepPoint(UART4TXCache);
 8001b2c:	4849      	ldr	r0, [pc, #292]	; (8001c54 <SensorTaskF+0x14c>)
 8001b2e:	f7ff f8a4 	bl	8000c7a <DeepPoint>
	/* Infinite loop */
	for (;;)
	{
		WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8001b32:	2140      	movs	r1, #64	; 0x40
 8001b34:	4848      	ldr	r0, [pc, #288]	; (8001c58 <SensorTaskF+0x150>)
 8001b36:	f004 fa45 	bl	8005fc4 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <SensorTaskF+0x154>)
 8001b40:	701a      	strb	r2, [r3, #0]
		if (WT931Finish)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <SensorTaskF+0x158>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d028      	beq.n	8001b9c <SensorTaskF+0x94>
		{
			while (WT931IO)
 8001b4a:	e002      	b.n	8001b52 <SensorTaskF+0x4a>
			{
				osDelay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 ffb8 	bl	800aac2 <osDelay>
			while (WT931IO)
 8001b52:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <SensorTaskF+0x15c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f7      	bne.n	8001b4c <SensorTaskF+0x44>
			}
			WT931IO = 1;
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <SensorTaskF+0x15c>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
			if (WT931Len == 44)
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <SensorTaskF+0x160>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b2c      	cmp	r3, #44	; 0x2c
 8001b68:	d105      	bne.n	8001b76 <SensorTaskF+0x6e>
			{
				WT931Take(AccelerationCache, RotSpeedCache, EulerAngleCache,
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <SensorTaskF+0x164>)
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <SensorTaskF+0x168>)
 8001b6e:	4941      	ldr	r1, [pc, #260]	; (8001c74 <SensorTaskF+0x16c>)
 8001b70:	4841      	ldr	r0, [pc, #260]	; (8001c78 <SensorTaskF+0x170>)
 8001b72:	f7ff f8eb 	bl	8000d4c <WT931Take>
						MagnetisCache);
			}
			WT931Finish = 0;
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <SensorTaskF+0x158>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, UART3RXCache, UART3RXLen);
 8001b7c:	223c      	movs	r2, #60	; 0x3c
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <SensorTaskF+0x148>)
 8001b80:	483e      	ldr	r0, [pc, #248]	; (8001c7c <SensorTaskF+0x174>)
 8001b82:	f007 f9cb 	bl	8008f1c <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <SensorTaskF+0x174>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <SensorTaskF+0x174>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0210 	orr.w	r2, r2, #16
 8001b94:	601a      	str	r2, [r3, #0]
			WT931IO = 0;
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <SensorTaskF+0x15c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]

		}
		if (GY39Finish)
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <SensorTaskF+0x178>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d023      	beq.n	8001bec <SensorTaskF+0xe4>
		{
			while (GY39IO)
 8001ba4:	e002      	b.n	8001bac <SensorTaskF+0xa4>
			{
				osDelay(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f008 ff8b 	bl	800aac2 <osDelay>
			while (GY39IO)
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <SensorTaskF+0x17c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f7      	bne.n	8001ba6 <SensorTaskF+0x9e>
			}
			GY39IO = 1;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <SensorTaskF+0x17c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
			GY39Take(&TemCache, BaroCache, &HumCache);
 8001bbc:	4a32      	ldr	r2, [pc, #200]	; (8001c88 <SensorTaskF+0x180>)
 8001bbe:	4933      	ldr	r1, [pc, #204]	; (8001c8c <SensorTaskF+0x184>)
 8001bc0:	4833      	ldr	r0, [pc, #204]	; (8001c90 <SensorTaskF+0x188>)
 8001bc2:	f7ff f953 	bl	8000e6c <GY39Take>
			GY39Finish = 0;
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <SensorTaskF+0x178>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, UART2RXCache, UART2RXLen);
 8001bcc:	220f      	movs	r2, #15
 8001bce:	4931      	ldr	r1, [pc, #196]	; (8001c94 <SensorTaskF+0x18c>)
 8001bd0:	481e      	ldr	r0, [pc, #120]	; (8001c4c <SensorTaskF+0x144>)
 8001bd2:	f007 f9a3 	bl	8008f1c <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <SensorTaskF+0x144>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <SensorTaskF+0x144>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0210 	orr.w	r2, r2, #16
 8001be4:	601a      	str	r2, [r3, #0]
			GY39IO = 0;
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <SensorTaskF+0x17c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]

		}
		if (DeepFinish)
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <SensorTaskF+0x190>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d022      	beq.n	8001c3a <SensorTaskF+0x132>
		{
			while (DeepIO)
 8001bf4:	e002      	b.n	8001bfc <SensorTaskF+0xf4>
			{
				osDelay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f008 ff63 	bl	800aac2 <osDelay>
			while (DeepIO)
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <SensorTaskF+0x194>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f7      	bne.n	8001bf6 <SensorTaskF+0xee>
			}
			DeepIO = 1;
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <SensorTaskF+0x194>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			DeepTake(&DepthCache, &WaterTempertureCache);
 8001c0c:	4924      	ldr	r1, [pc, #144]	; (8001ca0 <SensorTaskF+0x198>)
 8001c0e:	4825      	ldr	r0, [pc, #148]	; (8001ca4 <SensorTaskF+0x19c>)
 8001c10:	f7ff f83d 	bl	8000c8e <DeepTake>
			DeepFinish = 0;
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <SensorTaskF+0x190>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, UART4RXCache, UART4RXLen);
 8001c1a:	2214      	movs	r2, #20
 8001c1c:	4922      	ldr	r1, [pc, #136]	; (8001ca8 <SensorTaskF+0x1a0>)
 8001c1e:	4823      	ldr	r0, [pc, #140]	; (8001cac <SensorTaskF+0x1a4>)
 8001c20:	f007 f97c 	bl	8008f1c <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <SensorTaskF+0x1a4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <SensorTaskF+0x1a4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0210 	orr.w	r2, r2, #16
 8001c32:	601a      	str	r2, [r3, #0]
			DeepIO = 0;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <SensorTaskF+0x194>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]

		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001c3a:	481d      	ldr	r0, [pc, #116]	; (8001cb0 <SensorTaskF+0x1a8>)
 8001c3c:	f004 fa42 	bl	80060c4 <HAL_IWDG_Refresh>
		WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8001c40:	e777      	b.n	8001b32 <SensorTaskF+0x2a>
 8001c42:	bf00      	nop
 8001c44:	2000467c 	.word	0x2000467c
 8001c48:	20004234 	.word	0x20004234
 8001c4c:	20004874 	.word	0x20004874
 8001c50:	200047a8 	.word	0x200047a8
 8001c54:	200045f0 	.word	0x200045f0
 8001c58:	58021000 	.word	0x58021000
 8001c5c:	20000394 	.word	0x20000394
 8001c60:	2000038d 	.word	0x2000038d
 8001c64:	20000390 	.word	0x20000390
 8001c68:	200003c2 	.word	0x200003c2
 8001c6c:	200003b0 	.word	0x200003b0
 8001c70:	200003a8 	.word	0x200003a8
 8001c74:	200003a0 	.word	0x200003a0
 8001c78:	20000398 	.word	0x20000398
 8001c7c:	200042dc 	.word	0x200042dc
 8001c80:	2000038c 	.word	0x2000038c
 8001c84:	2000038f 	.word	0x2000038f
 8001c88:	200003bc 	.word	0x200003bc
 8001c8c:	200003b8 	.word	0x200003b8
 8001c90:	200003b6 	.word	0x200003b6
 8001c94:	2000436c 	.word	0x2000436c
 8001c98:	2000038b 	.word	0x2000038b
 8001c9c:	2000038e 	.word	0x2000038e
 8001ca0:	200003c0 	.word	0x200003c0
 8001ca4:	200003be 	.word	0x200003be
 8001ca8:	20004220 	.word	0x20004220
 8001cac:	200047e4 	.word	0x200047e4
 8001cb0:	20004210 	.word	0x20004210

08001cb4 <EmptyTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EmptyTaskF */
void EmptyTaskF(void const *argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EmptyTaskF */
	/* Infinite loop */
	for (;;)
	{
		HAL_IWDG_Refresh(&hiwdg1);
 8001cbc:	4801      	ldr	r0, [pc, #4]	; (8001cc4 <EmptyTaskF+0x10>)
 8001cbe:	f004 fa01 	bl	80060c4 <HAL_IWDG_Refresh>
 8001cc2:	e7fb      	b.n	8001cbc <EmptyTaskF+0x8>
 8001cc4:	20004210 	.word	0x20004210

08001cc8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001cda:	f001 f871 	bl	8002dc0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40001000 	.word	0x40001000

08001cec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_MspInit+0x38>)
 8001d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_MspInit+0x38>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_MspInit+0x38>)
 8001d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f06f 0001 	mvn.w	r0, #1
 8001d24:	f001 f930 	bl	8002f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	58024400 	.word	0x58024400

08001d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b092      	sub	sp, #72	; 0x48
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a95      	ldr	r2, [pc, #596]	; (8001fa8 <HAL_UART_MspInit+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	f040 8091 	bne.w	8001e7a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d58:	4b94      	ldr	r3, [pc, #592]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d5e:	4a93      	ldr	r2, [pc, #588]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b8d      	ldr	r3, [pc, #564]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a8b      	ldr	r2, [pc, #556]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d94:	2303      	movs	r3, #3
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001da4:	2308      	movs	r3, #8
 8001da6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dac:	4619      	mov	r1, r3
 8001dae:	4880      	ldr	r0, [pc, #512]	; (8001fb0 <HAL_UART_MspInit+0x27c>)
 8001db0:	f003 ff58 	bl	8005c64 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream4;
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001db6:	4a80      	ldr	r2, [pc, #512]	; (8001fb8 <HAL_UART_MspInit+0x284>)
 8001db8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001dba:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001dbc:	223f      	movs	r2, #63	; 0x3f
 8001dbe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd4:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dda:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001de0:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dec:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001df2:	4870      	ldr	r0, [pc, #448]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001df4:	f001 f8f0 	bl	8002fd8 <HAL_DMA_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001dfe:	f7ff ff75 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001e06:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_UART_MspInit+0x280>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream5;
 8001e0e:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e10:	4a6b      	ldr	r2, [pc, #428]	; (8001fc0 <HAL_UART_MspInit+0x28c>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e16:	2240      	movs	r2, #64	; 0x40
 8001e18:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1a:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	4b61      	ldr	r3, [pc, #388]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001e3a:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001e4c:	485b      	ldr	r0, [pc, #364]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e4e:	f001 f8c3 	bl	8002fd8 <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001e58:	f7ff ff48 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e60:	679a      	str	r2, [r3, #120]	; 0x78
 8001e62:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_UART_MspInit+0x288>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2105      	movs	r1, #5
 8001e6c:	2034      	movs	r0, #52	; 0x34
 8001e6e:	f001 f88b 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e72:	2034      	movs	r0, #52	; 0x34
 8001e74:	f001 f8a2 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e78:	e263      	b.n	8002342 <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==UART8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a51      	ldr	r2, [pc, #324]	; (8001fc4 <HAL_UART_MspInit+0x290>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f040 80ab 	bne.w	8001fdc <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e96:	4b45      	ldr	r3, [pc, #276]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_UART_MspInit+0x278>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eda:	4619      	mov	r1, r3
 8001edc:	483a      	ldr	r0, [pc, #232]	; (8001fc8 <HAL_UART_MspInit+0x294>)
 8001ede:	f003 fec1 	bl	8005c64 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001ee4:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <HAL_UART_MspInit+0x29c>)
 8001ee6:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001eea:	2251      	movs	r2, #81	; 0x51
 8001eec:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef4:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f00:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001f20:	482a      	ldr	r0, [pc, #168]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f22:	f001 f859 	bl	8002fd8 <HAL_DMA_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001f2c:	f7ff fede 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f34:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_UART_MspInit+0x298>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream7;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f3e:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <HAL_UART_MspInit+0x2a4>)
 8001f40:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f44:	2252      	movs	r2, #82	; 0x52
 8001f46:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001f7a:	4816      	ldr	r0, [pc, #88]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f7c:	f001 f82c 	bl	8002fd8 <HAL_DMA_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0x256>
      Error_Handler();
 8001f86:	f7ff feb1 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f8e:	679a      	str	r2, [r3, #120]	; 0x78
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_UART_MspInit+0x2a0>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	2053      	movs	r0, #83	; 0x53
 8001f9c:	f000 fff4 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001fa0:	2053      	movs	r0, #83	; 0x53
 8001fa2:	f001 f80b 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8001fa6:	e1cc      	b.n	8002342 <HAL_UART_MspInit+0x60e>
 8001fa8:	40004c00 	.word	0x40004c00
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	58020000 	.word	0x58020000
 8001fb4:	20004120 	.word	0x20004120
 8001fb8:	40020070 	.word	0x40020070
 8001fbc:	20004958 	.word	0x20004958
 8001fc0:	40020088 	.word	0x40020088
 8001fc4:	40007c00 	.word	0x40007c00
 8001fc8:	58021000 	.word	0x58021000
 8001fcc:	200044e8 	.word	0x200044e8
 8001fd0:	400200a0 	.word	0x400200a0
 8001fd4:	20004604 	.word	0x20004604
 8001fd8:	400200b8 	.word	0x400200b8
  else if(huart->Instance==USART1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a96      	ldr	r2, [pc, #600]	; (800223c <HAL_UART_MspInit+0x508>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	f040 8092 	bne.w	800210c <HAL_UART_MspInit+0x3d8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe8:	4b95      	ldr	r3, [pc, #596]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8001fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fee:	4a94      	ldr	r2, [pc, #592]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8001ff0:	f043 0310 	orr.w	r3, r3, #16
 8001ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ff8:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8001ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200c:	4a8c      	ldr	r2, [pc, #560]	; (8002240 <HAL_UART_MspInit+0x50c>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002016:	4b8a      	ldr	r3, [pc, #552]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002024:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002036:	2304      	movs	r3, #4
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800203e:	4619      	mov	r1, r3
 8002040:	4880      	ldr	r0, [pc, #512]	; (8002244 <HAL_UART_MspInit+0x510>)
 8002042:	f003 fe0f 	bl	8005c64 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002046:	4b80      	ldr	r3, [pc, #512]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002048:	4a80      	ldr	r2, [pc, #512]	; (800224c <HAL_UART_MspInit+0x518>)
 800204a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800204c:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_UART_MspInit+0x514>)
 800204e:	2229      	movs	r2, #41	; 0x29
 8002050:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002052:	4b7d      	ldr	r3, [pc, #500]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002058:	4b7b      	ldr	r3, [pc, #492]	; (8002248 <HAL_UART_MspInit+0x514>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800205e:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002064:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002066:	4b78      	ldr	r3, [pc, #480]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206c:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_UART_MspInit+0x514>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002072:	4b75      	ldr	r3, [pc, #468]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002078:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_UART_MspInit+0x514>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207e:	4b72      	ldr	r3, [pc, #456]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002084:	4870      	ldr	r0, [pc, #448]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002086:	f000 ffa7 	bl	8002fd8 <HAL_DMA_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_MspInit+0x360>
      Error_Handler();
 8002090:	f7ff fe2c 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a6c      	ldr	r2, [pc, #432]	; (8002248 <HAL_UART_MspInit+0x514>)
 8002098:	67da      	str	r2, [r3, #124]	; 0x7c
 800209a:	4a6b      	ldr	r2, [pc, #428]	; (8002248 <HAL_UART_MspInit+0x514>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80020a0:	4b6b      	ldr	r3, [pc, #428]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020a2:	4a6c      	ldr	r2, [pc, #432]	; (8002254 <HAL_UART_MspInit+0x520>)
 80020a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020a8:	222a      	movs	r2, #42	; 0x2a
 80020aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020b8:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c0:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c6:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d2:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d8:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020de:	485c      	ldr	r0, [pc, #368]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020e0:	f000 ff7a 	bl	8002fd8 <HAL_DMA_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80020ea:	f7ff fdff 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a57      	ldr	r2, [pc, #348]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020f2:	679a      	str	r2, [r3, #120]	; 0x78
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_UART_MspInit+0x51c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2105      	movs	r1, #5
 80020fe:	2025      	movs	r0, #37	; 0x25
 8002100:	f000 ff42 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002104:	2025      	movs	r0, #37	; 0x25
 8002106:	f000 ff59 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 800210a:	e11a      	b.n	8002342 <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a51      	ldr	r2, [pc, #324]	; (8002258 <HAL_UART_MspInit+0x524>)
 8002112:	4293      	cmp	r3, r2
 8002114:	f040 80ac 	bne.w	8002270 <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002118:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_UART_MspInit+0x50c>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002128:	4b45      	ldr	r3, [pc, #276]	; (8002240 <HAL_UART_MspInit+0x50c>)
 800212a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	4a40      	ldr	r2, [pc, #256]	; (8002240 <HAL_UART_MspInit+0x50c>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_UART_MspInit+0x50c>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002154:	230c      	movs	r3, #12
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002164:	2307      	movs	r3, #7
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800216c:	4619      	mov	r1, r3
 800216e:	483b      	ldr	r0, [pc, #236]	; (800225c <HAL_UART_MspInit+0x528>)
 8002170:	f003 fd78 	bl	8005c64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_UART_MspInit+0x52c>)
 8002176:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <HAL_UART_MspInit+0x530>)
 8002178:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_UART_MspInit+0x52c>)
 800217c:	222b      	movs	r2, #43	; 0x2b
 800217e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002180:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_UART_MspInit+0x52c>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_UART_MspInit+0x52c>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218c:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_UART_MspInit+0x52c>)
 800218e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002192:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_UART_MspInit+0x52c>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_UART_MspInit+0x52c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_UART_MspInit+0x52c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_UART_MspInit+0x52c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_UART_MspInit+0x52c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021b2:	482b      	ldr	r0, [pc, #172]	; (8002260 <HAL_UART_MspInit+0x52c>)
 80021b4:	f000 ff10 	bl	8002fd8 <HAL_DMA_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_UART_MspInit+0x48e>
      Error_Handler();
 80021be:	f7ff fd95 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_UART_MspInit+0x52c>)
 80021c6:	67da      	str	r2, [r3, #124]	; 0x7c
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <HAL_UART_MspInit+0x52c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream0;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <HAL_UART_MspInit+0x538>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021d6:	222c      	movs	r2, #44	; 0x2c
 80021d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_UART_MspInit+0x534>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_UART_MspInit+0x534>)
 8002202:	2200      	movs	r2, #0
 8002204:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_UART_MspInit+0x534>)
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800220c:	4816      	ldr	r0, [pc, #88]	; (8002268 <HAL_UART_MspInit+0x534>)
 800220e:	f000 fee3 	bl	8002fd8 <HAL_DMA_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_MspInit+0x4e8>
      Error_Handler();
 8002218:	f7ff fd68 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_UART_MspInit+0x534>)
 8002220:	679a      	str	r2, [r3, #120]	; 0x78
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_UART_MspInit+0x534>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2105      	movs	r1, #5
 800222c:	2026      	movs	r0, #38	; 0x26
 800222e:	f000 feab 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002232:	2026      	movs	r0, #38	; 0x26
 8002234:	f000 fec2 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8002238:	e083      	b.n	8002342 <HAL_UART_MspInit+0x60e>
 800223a:	bf00      	nop
 800223c:	40011000 	.word	0x40011000
 8002240:	58024400 	.word	0x58024400
 8002244:	58020400 	.word	0x58020400
 8002248:	200043f8 	.word	0x200043f8
 800224c:	40020010 	.word	0x40020010
 8002250:	20004380 	.word	0x20004380
 8002254:	40020028 	.word	0x40020028
 8002258:	40004400 	.word	0x40004400
 800225c:	58020000 	.word	0x58020000
 8002260:	20004198 	.word	0x20004198
 8002264:	40020040 	.word	0x40020040
 8002268:	20004470 	.word	0x20004470
 800226c:	40020410 	.word	0x40020410
  else if(huart->Instance==USART3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a35      	ldr	r2, [pc, #212]	; (800234c <HAL_UART_MspInit+0x618>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d163      	bne.n	8002342 <HAL_UART_MspInit+0x60e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_UART_MspInit+0x61c>)
 800227c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002280:	4a33      	ldr	r2, [pc, #204]	; (8002350 <HAL_UART_MspInit+0x61c>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002286:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_UART_MspInit+0x61c>)
 800228c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_UART_MspInit+0x61c>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_UART_MspInit+0x61c>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_UART_MspInit+0x61c>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c8:	2307      	movs	r3, #7
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022d0:	4619      	mov	r1, r3
 80022d2:	4820      	ldr	r0, [pc, #128]	; (8002354 <HAL_UART_MspInit+0x620>)
 80022d4:	f003 fcc6 	bl	8005c64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_UART_MspInit+0x624>)
 80022da:	4a20      	ldr	r2, [pc, #128]	; (800235c <HAL_UART_MspInit+0x628>)
 80022dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_UART_MspInit+0x624>)
 80022e0:	222d      	movs	r2, #45	; 0x2d
 80022e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_MspInit+0x624>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x624>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_UART_MspInit+0x624>)
 80022f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_UART_MspInit+0x624>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_UART_MspInit+0x624>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x624>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_UART_MspInit+0x624>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x624>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <HAL_UART_MspInit+0x624>)
 8002318:	f000 fe5e 	bl	8002fd8 <HAL_DMA_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 8002322:	f7ff fce3 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_UART_MspInit+0x624>)
 800232a:	67da      	str	r2, [r3, #124]	; 0x7c
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_UART_MspInit+0x624>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2105      	movs	r1, #5
 8002336:	2027      	movs	r0, #39	; 0x27
 8002338:	f000 fe26 	bl	8002f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800233c:	2027      	movs	r0, #39	; 0x27
 800233e:	f000 fe3d 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3748      	adds	r7, #72	; 0x48
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40004800 	.word	0x40004800
 8002350:	58024400 	.word	0x58024400
 8002354:	58020400 	.word	0x58020400
 8002358:	20004264 	.word	0x20004264
 800235c:	40020058 	.word	0x40020058

08002360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b090      	sub	sp, #64	; 0x40
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d827      	bhi.n	80023be <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800236e:	2200      	movs	r2, #0
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	2036      	movs	r0, #54	; 0x36
 8002374:	f000 fe08 	bl	8002f88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002378:	2036      	movs	r0, #54	; 0x36
 800237a:	f000 fe1f 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800237e:	4a29      	ldr	r2, [pc, #164]	; (8002424 <HAL_InitTick+0xc4>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_InitTick+0xc8>)
 8002386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800238a:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_InitTick+0xc8>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_InitTick+0xc8>)
 8002396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023a2:	f107 0210 	add.w	r2, r7, #16
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 fe6f 	bl	8007090 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_InitTick+0x6a>
 80023bc:	e001      	b.n	80023c2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e02b      	b.n	800241a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023c2:	f004 fe39 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 80023c6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023c8:	e004      	b.n	80023d4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023ca:	f004 fe35 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 80023ce:	4603      	mov	r3, r0
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <HAL_InitTick+0xcc>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	3b01      	subs	r3, #1
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_InitTick+0xd0>)
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_InitTick+0xd4>)
 80023e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_InitTick+0xd0>)
 80023ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023f0:	4a0f      	ldr	r2, [pc, #60]	; (8002430 <HAL_InitTick+0xd0>)
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_InitTick+0xd0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_InitTick+0xd0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002402:	480b      	ldr	r0, [pc, #44]	; (8002430 <HAL_InitTick+0xd0>)
 8002404:	f006 f9e8 	bl	80087d8 <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800240e:	4808      	ldr	r0, [pc, #32]	; (8002430 <HAL_InitTick+0xd0>)
 8002410:	f006 fa44 	bl	800889c <HAL_TIM_Base_Start_IT>
 8002414:	4603      	mov	r3, r0
 8002416:	e000      	b.n	800241a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	3740      	adds	r7, #64	; 0x40
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008
 8002428:	58024400 	.word	0x58024400
 800242c:	431bde83 	.word	0x431bde83
 8002430:	200049d0 	.word	0x200049d0
 8002434:	40001000 	.word	0x40001000

08002438 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Stream0_IRQHandler+0x10>)
 800246a:	f002 f8dd 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200043f8 	.word	0x200043f8

08002478 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA1_Stream1_IRQHandler+0x10>)
 800247e:	f002 f8d3 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20004380 	.word	0x20004380

0800248c <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Stream2_IRQHandler+0x10>)
 8002492:	f002 f8c9 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20004198 	.word	0x20004198

080024a0 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA1_Stream3_IRQHandler+0x10>)
 80024a6:	f002 f8bf 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20004264 	.word	0x20004264

080024b4 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <DMA1_Stream4_IRQHandler+0x10>)
 80024ba:	f002 f8b5 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20004120 	.word	0x20004120

080024c8 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Stream5_IRQHandler+0x10>)
 80024ce:	f002 f8ab 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20004958 	.word	0x20004958

080024dc <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA1_Stream6_IRQHandler+0x10>)
 80024e2:	f002 f8a1 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200044e8 	.word	0x200044e8

080024f0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <USART1_IRQHandler+0x108>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b10      	cmp	r3, #16
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d068      	beq.n	80025e8 <USART1_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <USART1_IRQHandler+0x108>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2210      	movs	r2, #16
 800251c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 800251e:	4836      	ldr	r0, [pc, #216]	; (80025f8 <USART1_IRQHandler+0x108>)
 8002520:	f006 fd42 	bl	8008fa8 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a35      	ldr	r2, [pc, #212]	; (8002600 <USART1_IRQHandler+0x110>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04a      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <USART1_IRQHandler+0x114>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d045      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <USART1_IRQHandler+0x10c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a32      	ldr	r2, [pc, #200]	; (8002608 <USART1_IRQHandler+0x118>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d040      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002542:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a31      	ldr	r2, [pc, #196]	; (800260c <USART1_IRQHandler+0x11c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d03b      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <USART1_IRQHandler+0x10c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2f      	ldr	r2, [pc, #188]	; (8002610 <USART1_IRQHandler+0x120>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d036      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <USART1_IRQHandler+0x124>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d031      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <USART1_IRQHandler+0x128>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <USART1_IRQHandler+0x10c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2b      	ldr	r2, [pc, #172]	; (800261c <USART1_IRQHandler+0x12c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d027      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a29      	ldr	r2, [pc, #164]	; (8002620 <USART1_IRQHandler+0x130>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d022      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a28      	ldr	r2, [pc, #160]	; (8002624 <USART1_IRQHandler+0x134>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d01d      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <USART1_IRQHandler+0x10c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <USART1_IRQHandler+0x138>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d018      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <USART1_IRQHandler+0x10c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <USART1_IRQHandler+0x13c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <USART1_IRQHandler+0x10c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <USART1_IRQHandler+0x140>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <USART1_IRQHandler+0x10c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <USART1_IRQHandler+0x144>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <USART1_IRQHandler+0x10c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <USART1_IRQHandler+0x148>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <USART1_IRQHandler+0xd4>
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <USART1_IRQHandler+0x10c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <USART1_IRQHandler+0x14c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d103      	bne.n	80025cc <USART1_IRQHandler+0xdc>
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <USART1_IRQHandler+0x10c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	e002      	b.n	80025d2 <USART1_IRQHandler+0xe2>
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <USART1_IRQHandler+0x10c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <USART1_IRQHandler+0x108>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <USART1_IRQHandler+0x108>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0210 	bic.w	r2, r2, #16
 80025e0:	601a      	str	r2, [r3, #0]
		UpSideFinish = 1;
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <USART1_IRQHandler+0x150>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80025e8:	4803      	ldr	r0, [pc, #12]	; (80025f8 <USART1_IRQHandler+0x108>)
 80025ea:	f006 fd4d 	bl	8009088 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20004560 	.word	0x20004560
 80025fc:	200043f8 	.word	0x200043f8
 8002600:	40020010 	.word	0x40020010
 8002604:	40020028 	.word	0x40020028
 8002608:	40020040 	.word	0x40020040
 800260c:	40020058 	.word	0x40020058
 8002610:	40020070 	.word	0x40020070
 8002614:	40020088 	.word	0x40020088
 8002618:	400200a0 	.word	0x400200a0
 800261c:	400200b8 	.word	0x400200b8
 8002620:	40020410 	.word	0x40020410
 8002624:	40020428 	.word	0x40020428
 8002628:	40020440 	.word	0x40020440
 800262c:	40020458 	.word	0x40020458
 8002630:	40020470 	.word	0x40020470
 8002634:	40020488 	.word	0x40020488
 8002638:	400204a0 	.word	0x400204a0
 800263c:	400204b8 	.word	0x400204b8
 8002640:	20000389 	.word	0x20000389

08002644 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <USART2_IRQHandler+0x108>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d068      	beq.n	800273c <USART2_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <USART2_IRQHandler+0x108>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2210      	movs	r2, #16
 8002670:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8002672:	4836      	ldr	r0, [pc, #216]	; (800274c <USART2_IRQHandler+0x108>)
 8002674:	f006 fc98 	bl	8008fa8 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002678:	4b35      	ldr	r3, [pc, #212]	; (8002750 <USART2_IRQHandler+0x10c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a35      	ldr	r2, [pc, #212]	; (8002754 <USART2_IRQHandler+0x110>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04a      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 8002682:	4b33      	ldr	r3, [pc, #204]	; (8002750 <USART2_IRQHandler+0x10c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a34      	ldr	r2, [pc, #208]	; (8002758 <USART2_IRQHandler+0x114>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d045      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <USART2_IRQHandler+0x10c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a32      	ldr	r2, [pc, #200]	; (800275c <USART2_IRQHandler+0x118>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d040      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <USART2_IRQHandler+0x10c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a31      	ldr	r2, [pc, #196]	; (8002760 <USART2_IRQHandler+0x11c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d03b      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <USART2_IRQHandler+0x120>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d036      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <USART2_IRQHandler+0x124>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d031      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2c      	ldr	r2, [pc, #176]	; (800276c <USART2_IRQHandler+0x128>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02c      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <USART2_IRQHandler+0x12c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d027      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a29      	ldr	r2, [pc, #164]	; (8002774 <USART2_IRQHandler+0x130>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d022      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a28      	ldr	r2, [pc, #160]	; (8002778 <USART2_IRQHandler+0x134>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d01d      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <USART2_IRQHandler+0x138>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d018      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a25      	ldr	r2, [pc, #148]	; (8002780 <USART2_IRQHandler+0x13c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a23      	ldr	r2, [pc, #140]	; (8002784 <USART2_IRQHandler+0x140>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00e      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <USART2_IRQHandler+0x10c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a22      	ldr	r2, [pc, #136]	; (8002788 <USART2_IRQHandler+0x144>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <USART2_IRQHandler+0x10c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <USART2_IRQHandler+0x148>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <USART2_IRQHandler+0xd4>
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <USART2_IRQHandler+0x10c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <USART2_IRQHandler+0x14c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <USART2_IRQHandler+0xdc>
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <USART2_IRQHandler+0x10c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	e002      	b.n	8002726 <USART2_IRQHandler+0xe2>
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <USART2_IRQHandler+0x10c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <USART2_IRQHandler+0x108>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <USART2_IRQHandler+0x108>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0210 	bic.w	r2, r2, #16
 8002734:	601a      	str	r2, [r3, #0]
		GY39Finish = 1;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <USART2_IRQHandler+0x150>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 800273c:	4803      	ldr	r0, [pc, #12]	; (800274c <USART2_IRQHandler+0x108>)
 800273e:	f006 fca3 	bl	8009088 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20004874 	.word	0x20004874
 8002750:	20004198 	.word	0x20004198
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
 8002794:	2000038c 	.word	0x2000038c

08002798 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <USART3_IRQHandler+0x110>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d06c      	beq.n	8002898 <USART3_IRQHandler+0x100>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80027be:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <USART3_IRQHandler+0x110>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2210      	movs	r2, #16
 80027c4:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 80027c6:	4838      	ldr	r0, [pc, #224]	; (80028a8 <USART3_IRQHandler+0x110>)
 80027c8:	f006 fbee 	bl	8008fa8 <HAL_UART_DMAStop>
		WT931Len = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80027cc:	4b37      	ldr	r3, [pc, #220]	; (80028ac <USART3_IRQHandler+0x114>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <USART3_IRQHandler+0x118>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <USART3_IRQHandler+0xd4>
 80027d6:	4b35      	ldr	r3, [pc, #212]	; (80028ac <USART3_IRQHandler+0x114>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a36      	ldr	r2, [pc, #216]	; (80028b4 <USART3_IRQHandler+0x11c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <USART3_IRQHandler+0xd4>
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <USART3_IRQHandler+0x114>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <USART3_IRQHandler+0x120>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <USART3_IRQHandler+0xd4>
 80027ea:	4b30      	ldr	r3, [pc, #192]	; (80028ac <USART3_IRQHandler+0x114>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <USART3_IRQHandler+0x124>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <USART3_IRQHandler+0xd4>
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <USART3_IRQHandler+0x114>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	; (80028c0 <USART3_IRQHandler+0x128>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <USART3_IRQHandler+0xd4>
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <USART3_IRQHandler+0x114>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <USART3_IRQHandler+0x12c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002808:	4b28      	ldr	r3, [pc, #160]	; (80028ac <USART3_IRQHandler+0x114>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <USART3_IRQHandler+0x130>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <USART3_IRQHandler+0x114>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2d      	ldr	r2, [pc, #180]	; (80028cc <USART3_IRQHandler+0x134>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <USART3_IRQHandler+0xd4>
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <USART3_IRQHandler+0x114>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <USART3_IRQHandler+0x138>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002826:	4b21      	ldr	r3, [pc, #132]	; (80028ac <USART3_IRQHandler+0x114>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <USART3_IRQHandler+0x13c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <USART3_IRQHandler+0x114>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <USART3_IRQHandler+0x140>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <USART3_IRQHandler+0xd4>
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <USART3_IRQHandler+0x114>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a27      	ldr	r2, [pc, #156]	; (80028dc <USART3_IRQHandler+0x144>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <USART3_IRQHandler+0x114>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <USART3_IRQHandler+0x148>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <USART3_IRQHandler+0xd4>
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <USART3_IRQHandler+0x114>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <USART3_IRQHandler+0x14c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <USART3_IRQHandler+0x114>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <USART3_IRQHandler+0x150>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <USART3_IRQHandler+0xd4>
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <USART3_IRQHandler+0x114>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	; (80028ec <USART3_IRQHandler+0x154>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d104      	bne.n	8002876 <USART3_IRQHandler+0xde>
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <USART3_IRQHandler+0x114>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e003      	b.n	800287e <USART3_IRQHandler+0xe6>
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <USART3_IRQHandler+0x114>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <USART3_IRQHandler+0x158>)
 8002880:	7013      	strb	r3, [r2, #0]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <USART3_IRQHandler+0x110>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <USART3_IRQHandler+0x110>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0210 	bic.w	r2, r2, #16
 8002890:	601a      	str	r2, [r3, #0]
		WT931Finish = 1;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <USART3_IRQHandler+0x15c>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <USART3_IRQHandler+0x110>)
 800289a:	f006 fbf5 	bl	8009088 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200042dc 	.word	0x200042dc
 80028ac:	20004264 	.word	0x20004264
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8
 80028f0:	200003c2 	.word	0x200003c2
 80028f4:	2000038d 	.word	0x2000038d

080028f8 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA1_Stream7_IRQHandler+0x10>)
 80028fe:	f001 fe93 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20004604 	.word	0x20004604

0800290c <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <UART4_IRQHandler+0x108>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b10      	cmp	r3, #16
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d068      	beq.n	8002a04 <UART4_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <UART4_IRQHandler+0x108>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2210      	movs	r2, #16
 8002938:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 800293a:	4836      	ldr	r0, [pc, #216]	; (8002a14 <UART4_IRQHandler+0x108>)
 800293c:	f006 fb34 	bl	8008fa8 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8002940:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <UART4_IRQHandler+0x10c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <UART4_IRQHandler+0x110>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04a      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <UART4_IRQHandler+0x10c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <UART4_IRQHandler+0x114>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d045      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <UART4_IRQHandler+0x10c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a32      	ldr	r2, [pc, #200]	; (8002a24 <UART4_IRQHandler+0x118>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d040      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 800295e:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <UART4_IRQHandler+0x10c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a31      	ldr	r2, [pc, #196]	; (8002a28 <UART4_IRQHandler+0x11c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03b      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <UART4_IRQHandler+0x10c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <UART4_IRQHandler+0x120>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d036      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <UART4_IRQHandler+0x10c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <UART4_IRQHandler+0x124>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d031      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <UART4_IRQHandler+0x10c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <UART4_IRQHandler+0x128>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02c      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <UART4_IRQHandler+0x10c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <UART4_IRQHandler+0x12c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d027      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <UART4_IRQHandler+0x10c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <UART4_IRQHandler+0x130>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <UART4_IRQHandler+0x10c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <UART4_IRQHandler+0x134>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01d      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a26      	ldr	r2, [pc, #152]	; (8002a44 <UART4_IRQHandler+0x138>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <UART4_IRQHandler+0x13c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <UART4_IRQHandler+0x140>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <UART4_IRQHandler+0x144>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <UART4_IRQHandler+0x148>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <UART4_IRQHandler+0xd4>
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <UART4_IRQHandler+0x14c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <UART4_IRQHandler+0xdc>
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	e002      	b.n	80029ee <UART4_IRQHandler+0xe2>
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <UART4_IRQHandler+0x10c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <UART4_IRQHandler+0x108>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <UART4_IRQHandler+0x108>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0210 	bic.w	r2, r2, #16
 80029fc:	601a      	str	r2, [r3, #0]
		DeepFinish = 1;
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <UART4_IRQHandler+0x150>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8002a04:	4803      	ldr	r0, [pc, #12]	; (8002a14 <UART4_IRQHandler+0x108>)
 8002a06:	f006 fb3f 	bl	8009088 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200047e4 	.word	0x200047e4
 8002a18:	20004120 	.word	0x20004120
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
 8002a5c:	2000038b 	.word	0x2000038b

08002a60 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <TIM6_DAC_IRQHandler+0x10>)
 8002a66:	f005 ff89 	bl	800897c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200049d0 	.word	0x200049d0

08002a74 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <DMA2_Stream0_IRQHandler+0x10>)
 8002a7a:	f001 fdd5 	bl	8004628 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20004470 	.word	0x20004470

08002a88 <UART8_IRQHandler>:

/**
 * @brief This function handles UART8 global interrupt.
 */
void UART8_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 8002a92:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <UART8_IRQHandler+0x108>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d068      	beq.n	8002b80 <UART8_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <UART8_IRQHandler+0x108>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8002ab6:	4836      	ldr	r0, [pc, #216]	; (8002b90 <UART8_IRQHandler+0x108>)
 8002ab8:	f006 fa76 	bl	8008fa8 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <UART8_IRQHandler+0x110>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d04a      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <UART8_IRQHandler+0x114>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d045      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <UART8_IRQHandler+0x118>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d040      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <UART8_IRQHandler+0x11c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d03b      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <UART8_IRQHandler+0x120>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d036      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <UART8_IRQHandler+0x124>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d031      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <UART8_IRQHandler+0x128>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02c      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <UART8_IRQHandler+0x12c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d027      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <UART8_IRQHandler+0x130>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b16:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <UART8_IRQHandler+0x134>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d01d      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <UART8_IRQHandler+0x138>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d018      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <UART8_IRQHandler+0x13c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <UART8_IRQHandler+0x140>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <UART8_IRQHandler+0x144>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d009      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <UART8_IRQHandler+0x148>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <UART8_IRQHandler+0xd4>
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <UART8_IRQHandler+0x14c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d103      	bne.n	8002b64 <UART8_IRQHandler+0xdc>
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	e002      	b.n	8002b6a <UART8_IRQHandler+0xe2>
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <UART8_IRQHandler+0x10c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <UART8_IRQHandler+0x108>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <UART8_IRQHandler+0x108>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0210 	bic.w	r2, r2, #16
 8002b78:	601a      	str	r2, [r3, #0]
		DownSideFinish = 1;
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <UART8_IRQHandler+0x150>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END UART8_IRQn 0 */
	HAL_UART_IRQHandler(&huart8);
 8002b80:	4803      	ldr	r0, [pc, #12]	; (8002b90 <UART8_IRQHandler+0x108>)
 8002b82:	f006 fa81 	bl	8009088 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART8_IRQn 1 */

	/* USER CODE END UART8_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20004718 	.word	0x20004718
 8002b94:	200044e8 	.word	0x200044e8
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	2000038a 	.word	0x2000038a

08002bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002be0:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <SystemInit+0xec>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	4a38      	ldr	r2, [pc, #224]	; (8002cc8 <SystemInit+0xec>)
 8002be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <SystemInit+0xf0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d807      	bhi.n	8002c0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <SystemInit+0xf0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 030f 	bic.w	r3, r3, #15
 8002c04:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <SystemInit+0xf0>)
 8002c06:	f043 0307 	orr.w	r3, r3, #7
 8002c0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <SystemInit+0xf4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <SystemInit+0xf4>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <SystemInit+0xf4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <SystemInit+0xf4>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	492b      	ldr	r1, [pc, #172]	; (8002cd0 <SystemInit+0xf4>)
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <SystemInit+0xf8>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <SystemInit+0xf0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <SystemInit+0xf0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 030f 	bic.w	r3, r3, #15
 8002c3e:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <SystemInit+0xf0>)
 8002c40:	f043 0307 	orr.w	r3, r3, #7
 8002c44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <SystemInit+0xf4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <SystemInit+0xf4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <SystemInit+0xf4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <SystemInit+0xf4>)
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <SystemInit+0xfc>)
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <SystemInit+0xf4>)
 8002c60:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <SystemInit+0x100>)
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <SystemInit+0xf4>)
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <SystemInit+0x104>)
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <SystemInit+0xf4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <SystemInit+0xf4>)
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <SystemInit+0x104>)
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <SystemInit+0xf4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <SystemInit+0xf4>)
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <SystemInit+0x104>)
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <SystemInit+0xf4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <SystemInit+0xf4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <SystemInit+0xf4>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <SystemInit+0xf4>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <SystemInit+0x108>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <SystemInit+0x10c>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca6:	d202      	bcs.n	8002cae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <SystemInit+0x110>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <SystemInit+0x114>)
 8002cb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SystemInit+0xec>)
 8002cb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cbc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00
 8002ccc:	52002000 	.word	0x52002000
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cd8:	02020200 	.word	0x02020200
 8002cdc:	01ff0000 	.word	0x01ff0000
 8002ce0:	01010280 	.word	0x01010280
 8002ce4:	5c001000 	.word	0x5c001000
 8002ce8:	ffff0000 	.word	0xffff0000
 8002cec:	51008108 	.word	0x51008108
 8002cf0:	52004000 	.word	0x52004000

08002cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cf8:	f7ff ff70 	bl	8002bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cfc:	480c      	ldr	r0, [pc, #48]	; (8002d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cfe:	490d      	ldr	r1, [pc, #52]	; (8002d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d14:	4c0a      	ldr	r4, [pc, #40]	; (8002d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d22:	f009 f9d3 	bl	800c0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d26:	f7fe f8e3 	bl	8000ef0 <main>
  bx  lr
 8002d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002d38:	0800c258 	.word	0x0800c258
  ldr r2, =_sbss
 8002d3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002d40:	20004a20 	.word	0x20004a20

08002d44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC3_IRQHandler>
	...

08002d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4e:	2003      	movs	r0, #3
 8002d50:	f000 f90f 	bl	8002f72 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d54:	f003 ffc6 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_Init+0x68>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	4913      	ldr	r1, [pc, #76]	; (8002db4 <HAL_Init+0x6c>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d72:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_Init+0x68>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_Init+0x6c>)
 8002d7c:	5cd3      	ldrb	r3, [r2, r3]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_Init+0x70>)
 8002d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d8c:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_Init+0x74>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7ff fae4 	bl	8002360 <HAL_InitTick>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e002      	b.n	8002da8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002da2:	f7fe ffa9 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	58024400 	.word	0x58024400
 8002db4:	0800c208 	.word	0x0800c208
 8002db8:	20000004 	.word	0x20000004
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_IncTick+0x20>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x24>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_IncTick+0x24>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	2000000c 	.word	0x2000000c
 8002de4:	20004a1c 	.word	0x20004a1c

08002de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return uwTick;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_GetTick+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20004a1c 	.word	0x20004a1c

08002e00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_GetREVID+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0c1b      	lsrs	r3, r3, #16
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	5c001000 	.word	0x5c001000

08002e18 <__NVIC_SetPriorityGrouping>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <__NVIC_SetPriorityGrouping+0x40>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e46:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <__NVIC_SetPriorityGrouping+0x40>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	05fa0000 	.word	0x05fa0000

08002e60 <__NVIC_GetPriorityGrouping>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <__NVIC_EnableIRQ+0x38>)
 8002e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff4c 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f96:	f7ff ff63 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002f9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6978      	ldr	r0, [r7, #20]
 8002fa2:	f7ff ffb3 	bl	8002f0c <NVIC_EncodePriority>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff82 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff56 	bl	8002e7c <__NVIC_EnableIRQ>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ff02 	bl	8002de8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e316      	b.n	800361e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a66      	ldr	r2, [pc, #408]	; (8003190 <HAL_DMA_Init+0x1b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d04a      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_DMA_Init+0x1bc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d045      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a63      	ldr	r2, [pc, #396]	; (8003198 <HAL_DMA_Init+0x1c0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d040      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a62      	ldr	r2, [pc, #392]	; (800319c <HAL_DMA_Init+0x1c4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03b      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a60      	ldr	r2, [pc, #384]	; (80031a0 <HAL_DMA_Init+0x1c8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d036      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5f      	ldr	r2, [pc, #380]	; (80031a4 <HAL_DMA_Init+0x1cc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d031      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <HAL_DMA_Init+0x1d0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02c      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5c      	ldr	r2, [pc, #368]	; (80031ac <HAL_DMA_Init+0x1d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d027      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <HAL_DMA_Init+0x1d8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d022      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a59      	ldr	r2, [pc, #356]	; (80031b4 <HAL_DMA_Init+0x1dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d01d      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_DMA_Init+0x1e0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_DMA_Init+0x1e4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a54      	ldr	r2, [pc, #336]	; (80031c0 <HAL_DMA_Init+0x1e8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a53      	ldr	r2, [pc, #332]	; (80031c4 <HAL_DMA_Init+0x1ec>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a51      	ldr	r2, [pc, #324]	; (80031c8 <HAL_DMA_Init+0x1f0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_DMA_Init+0xb8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_DMA_Init+0x1f4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_DMA_Init+0xbc>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_DMA_Init+0xbe>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 813b 	beq.w	8003312 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a37      	ldr	r2, [pc, #220]	; (8003190 <HAL_DMA_Init+0x1b8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d04a      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a36      	ldr	r2, [pc, #216]	; (8003194 <HAL_DMA_Init+0x1bc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d045      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a34      	ldr	r2, [pc, #208]	; (8003198 <HAL_DMA_Init+0x1c0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d040      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a33      	ldr	r2, [pc, #204]	; (800319c <HAL_DMA_Init+0x1c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d03b      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <HAL_DMA_Init+0x1c8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d036      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a30      	ldr	r2, [pc, #192]	; (80031a4 <HAL_DMA_Init+0x1cc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d031      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <HAL_DMA_Init+0x1d0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02c      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_DMA_Init+0x1d4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d027      	beq.n	800314c <HAL_DMA_Init+0x174>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <HAL_DMA_Init+0x1d8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d022      	beq.n	800314c <HAL_DMA_Init+0x174>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <HAL_DMA_Init+0x1dc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d01d      	beq.n	800314c <HAL_DMA_Init+0x174>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <HAL_DMA_Init+0x1e0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d018      	beq.n	800314c <HAL_DMA_Init+0x174>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_DMA_Init+0x1e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <HAL_DMA_Init+0x174>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_DMA_Init+0x1e8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_DMA_Init+0x174>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_DMA_Init+0x1ec>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_DMA_Init+0x174>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <HAL_DMA_Init+0x1f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_DMA_Init+0x174>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a21      	ldr	r2, [pc, #132]	; (80031cc <HAL_DMA_Init+0x1f4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d108      	bne.n	800315e <HAL_DMA_Init+0x186>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e007      	b.n	800316e <HAL_DMA_Init+0x196>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800316e:	e02f      	b.n	80031d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003170:	f7ff fe3a 	bl	8002de8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b05      	cmp	r3, #5
 800317c:	d928      	bls.n	80031d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2203      	movs	r2, #3
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e246      	b.n	800361e <HAL_DMA_Init+0x646>
 8003190:	40020010 	.word	0x40020010
 8003194:	40020028 	.word	0x40020028
 8003198:	40020040 	.word	0x40020040
 800319c:	40020058 	.word	0x40020058
 80031a0:	40020070 	.word	0x40020070
 80031a4:	40020088 	.word	0x40020088
 80031a8:	400200a0 	.word	0x400200a0
 80031ac:	400200b8 	.word	0x400200b8
 80031b0:	40020410 	.word	0x40020410
 80031b4:	40020428 	.word	0x40020428
 80031b8:	40020440 	.word	0x40020440
 80031bc:	40020458 	.word	0x40020458
 80031c0:	40020470 	.word	0x40020470
 80031c4:	40020488 	.word	0x40020488
 80031c8:	400204a0 	.word	0x400204a0
 80031cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1c8      	bne.n	8003170 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4b83      	ldr	r3, [pc, #524]	; (80033f8 <HAL_DMA_Init+0x420>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4313      	orrs	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003234:	4b71      	ldr	r3, [pc, #452]	; (80033fc <HAL_DMA_Init+0x424>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b71      	ldr	r3, [pc, #452]	; (8003400 <HAL_DMA_Init+0x428>)
 800323a:	4013      	ands	r3, r2
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d328      	bcc.n	8003294 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b28      	cmp	r3, #40	; 0x28
 8003248:	d903      	bls.n	8003252 <HAL_DMA_Init+0x27a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b2e      	cmp	r3, #46	; 0x2e
 8003250:	d917      	bls.n	8003282 <HAL_DMA_Init+0x2aa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b3e      	cmp	r3, #62	; 0x3e
 8003258:	d903      	bls.n	8003262 <HAL_DMA_Init+0x28a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b42      	cmp	r3, #66	; 0x42
 8003260:	d90f      	bls.n	8003282 <HAL_DMA_Init+0x2aa>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b46      	cmp	r3, #70	; 0x46
 8003268:	d903      	bls.n	8003272 <HAL_DMA_Init+0x29a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b48      	cmp	r3, #72	; 0x48
 8003270:	d907      	bls.n	8003282 <HAL_DMA_Init+0x2aa>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b4e      	cmp	r3, #78	; 0x4e
 8003278:	d905      	bls.n	8003286 <HAL_DMA_Init+0x2ae>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b52      	cmp	r3, #82	; 0x52
 8003280:	d801      	bhi.n	8003286 <HAL_DMA_Init+0x2ae>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_DMA_Init+0x2b0>
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0307 	bic.w	r3, r3, #7
 80032aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d117      	bne.n	80032ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f002 fb3d 	bl	8005950 <DMA_CheckFifoParam>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2240      	movs	r2, #64	; 0x40
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e197      	b.n	800361e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f002 fa78 	bl	80057ec <DMA_CalcBaseAndBitshift>
 80032fc:	4603      	mov	r3, r0
 80032fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	223f      	movs	r2, #63	; 0x3f
 800330a:	409a      	lsls	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e0cd      	b.n	80034ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3b      	ldr	r2, [pc, #236]	; (8003404 <HAL_DMA_Init+0x42c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d022      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a39      	ldr	r2, [pc, #228]	; (8003408 <HAL_DMA_Init+0x430>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01d      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a38      	ldr	r2, [pc, #224]	; (800340c <HAL_DMA_Init+0x434>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d018      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a36      	ldr	r2, [pc, #216]	; (8003410 <HAL_DMA_Init+0x438>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a35      	ldr	r2, [pc, #212]	; (8003414 <HAL_DMA_Init+0x43c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a33      	ldr	r2, [pc, #204]	; (8003418 <HAL_DMA_Init+0x440>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a32      	ldr	r2, [pc, #200]	; (800341c <HAL_DMA_Init+0x444>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_DMA_Init+0x38a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	; (8003420 <HAL_DMA_Init+0x448>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_DMA_Init+0x38e>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_DMA_Init+0x390>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8097 	beq.w	800349c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <HAL_DMA_Init+0x42c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d021      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_DMA_Init+0x430>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01c      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_DMA_Init+0x434>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d017      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_DMA_Init+0x438>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d012      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_DMA_Init+0x43c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00d      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_DMA_Init+0x440>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d008      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_DMA_Init+0x444>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <HAL_DMA_Init+0x3e4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_DMA_Init+0x448>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_DMA_Init+0x44c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d020      	beq.n	8003428 <HAL_DMA_Init+0x450>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d102      	bne.n	80033f4 <HAL_DMA_Init+0x41c>
 80033ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033f2:	e01a      	b.n	800342a <HAL_DMA_Init+0x452>
 80033f4:	2300      	movs	r3, #0
 80033f6:	e018      	b.n	800342a <HAL_DMA_Init+0x452>
 80033f8:	fe10803f 	.word	0xfe10803f
 80033fc:	5c001000 	.word	0x5c001000
 8003400:	ffff0000 	.word	0xffff0000
 8003404:	58025408 	.word	0x58025408
 8003408:	5802541c 	.word	0x5802541c
 800340c:	58025430 	.word	0x58025430
 8003410:	58025444 	.word	0x58025444
 8003414:	58025458 	.word	0x58025458
 8003418:	5802546c 	.word	0x5802546c
 800341c:	58025480 	.word	0x58025480
 8003420:	58025494 	.word	0x58025494
 8003424:	fffe000f 	.word	0xfffe000f
 8003428:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68d2      	ldr	r2, [r2, #12]
 800342e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003458:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <HAL_DMA_Init+0x650>)
 8003470:	4413      	add	r3, r2
 8003472:	4a6e      	ldr	r2, [pc, #440]	; (800362c <HAL_DMA_Init+0x654>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	009a      	lsls	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f002 f9b3 	bl	80057ec <DMA_CalcBaseAndBitshift>
 8003486:	4603      	mov	r3, r0
 8003488:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e008      	b.n	80034ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0b7      	b.n	800361e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5f      	ldr	r2, [pc, #380]	; (8003630 <HAL_DMA_Init+0x658>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d072      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5d      	ldr	r2, [pc, #372]	; (8003634 <HAL_DMA_Init+0x65c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d06d      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_DMA_Init+0x660>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d068      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5a      	ldr	r2, [pc, #360]	; (800363c <HAL_DMA_Init+0x664>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d063      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a59      	ldr	r2, [pc, #356]	; (8003640 <HAL_DMA_Init+0x668>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d05e      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a57      	ldr	r2, [pc, #348]	; (8003644 <HAL_DMA_Init+0x66c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d059      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_DMA_Init+0x670>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d054      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a54      	ldr	r2, [pc, #336]	; (800364c <HAL_DMA_Init+0x674>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d04f      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a53      	ldr	r2, [pc, #332]	; (8003650 <HAL_DMA_Init+0x678>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d04a      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_DMA_Init+0x67c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d045      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_DMA_Init+0x680>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d040      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4e      	ldr	r2, [pc, #312]	; (800365c <HAL_DMA_Init+0x684>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d03b      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4d      	ldr	r2, [pc, #308]	; (8003660 <HAL_DMA_Init+0x688>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d036      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <HAL_DMA_Init+0x68c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d031      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_DMA_Init+0x690>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02c      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a48      	ldr	r2, [pc, #288]	; (800366c <HAL_DMA_Init+0x694>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d027      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a47      	ldr	r2, [pc, #284]	; (8003670 <HAL_DMA_Init+0x698>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d022      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a45      	ldr	r2, [pc, #276]	; (8003674 <HAL_DMA_Init+0x69c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01d      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a44      	ldr	r2, [pc, #272]	; (8003678 <HAL_DMA_Init+0x6a0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d018      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a42      	ldr	r2, [pc, #264]	; (800367c <HAL_DMA_Init+0x6a4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a41      	ldr	r2, [pc, #260]	; (8003680 <HAL_DMA_Init+0x6a8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <HAL_DMA_Init+0x6ac>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3e      	ldr	r2, [pc, #248]	; (8003688 <HAL_DMA_Init+0x6b0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_DMA_Init+0x5c6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3c      	ldr	r2, [pc, #240]	; (800368c <HAL_DMA_Init+0x6b4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_DMA_Init+0x5ca>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_DMA_Init+0x5cc>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d032      	beq.n	800360e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f002 fa4d 	bl	8005a48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d102      	bne.n	80035bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_DMA_Init+0x624>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d80c      	bhi.n	80035fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f002 faca 	bl	8005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	e008      	b.n	800360e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	a7fdabf8 	.word	0xa7fdabf8
 800362c:	cccccccd 	.word	0xcccccccd
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
 8003670:	58025408 	.word	0x58025408
 8003674:	5802541c 	.word	0x5802541c
 8003678:	58025430 	.word	0x58025430
 800367c:	58025444 	.word	0x58025444
 8003680:	58025458 	.word	0x58025458
 8003684:	5802546c 	.word	0x5802546c
 8003688:	58025480 	.word	0x58025480
 800368c:	58025494 	.word	0x58025494

08003690 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e226      	b.n	8003afa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_DMA_Start_IT+0x2a>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e21f      	b.n	8003afa <HAL_DMA_Start_IT+0x46a>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	f040 820a 	bne.w	8003ae4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a68      	ldr	r2, [pc, #416]	; (8003884 <HAL_DMA_Start_IT+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a66      	ldr	r2, [pc, #408]	; (8003888 <HAL_DMA_Start_IT+0x1f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_DMA_Start_IT+0x1fc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a63      	ldr	r2, [pc, #396]	; (8003890 <HAL_DMA_Start_IT+0x200>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a62      	ldr	r2, [pc, #392]	; (8003894 <HAL_DMA_Start_IT+0x204>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_DMA_Start_IT+0x208>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5f      	ldr	r2, [pc, #380]	; (800389c <HAL_DMA_Start_IT+0x20c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_DMA_Start_IT+0x210>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_DMA_Start_IT+0x214>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5a      	ldr	r2, [pc, #360]	; (80038a8 <HAL_DMA_Start_IT+0x218>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a59      	ldr	r2, [pc, #356]	; (80038ac <HAL_DMA_Start_IT+0x21c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_DMA_Start_IT+0x220>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a56      	ldr	r2, [pc, #344]	; (80038b4 <HAL_DMA_Start_IT+0x224>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_DMA_Start_IT+0x228>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a53      	ldr	r2, [pc, #332]	; (80038bc <HAL_DMA_Start_IT+0x22c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_Start_IT+0xee>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_DMA_Start_IT+0x230>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d108      	bne.n	8003790 <HAL_DMA_Start_IT+0x100>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e007      	b.n	80037a0 <HAL_DMA_Start_IT+0x110>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f001 fe74 	bl	8005494 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_DMA_Start_IT+0x1f4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a33      	ldr	r2, [pc, #204]	; (8003888 <HAL_DMA_Start_IT+0x1f8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_DMA_Start_IT+0x1fc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_DMA_Start_IT+0x200>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <HAL_DMA_Start_IT+0x204>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <HAL_DMA_Start_IT+0x208>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	; (800389c <HAL_DMA_Start_IT+0x20c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2a      	ldr	r2, [pc, #168]	; (80038a0 <HAL_DMA_Start_IT+0x210>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <HAL_DMA_Start_IT+0x214>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <HAL_DMA_Start_IT+0x218>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a25      	ldr	r2, [pc, #148]	; (80038ac <HAL_DMA_Start_IT+0x21c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <HAL_DMA_Start_IT+0x220>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <HAL_DMA_Start_IT+0x224>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <HAL_DMA_Start_IT+0x228>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <HAL_DMA_Start_IT+0x22c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Start_IT+0x1bc>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_DMA_Start_IT+0x230>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Start_IT+0x1c0>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_DMA_Start_IT+0x1c2>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d036      	beq.n	80038c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 021e 	bic.w	r2, r3, #30
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0216 	orr.w	r2, r2, #22
 8003868:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03e      	beq.n	80038f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0208 	orr.w	r2, r2, #8
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e035      	b.n	80038f0 <HAL_DMA_Start_IT+0x260>
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 020e 	bic.w	r2, r3, #14
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 020a 	orr.w	r2, r2, #10
 80038d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0204 	orr.w	r2, r2, #4
 80038ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a83      	ldr	r2, [pc, #524]	; (8003b04 <HAL_DMA_Start_IT+0x474>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d072      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a82      	ldr	r2, [pc, #520]	; (8003b08 <HAL_DMA_Start_IT+0x478>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d06d      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a80      	ldr	r2, [pc, #512]	; (8003b0c <HAL_DMA_Start_IT+0x47c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d068      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7f      	ldr	r2, [pc, #508]	; (8003b10 <HAL_DMA_Start_IT+0x480>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d063      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a7d      	ldr	r2, [pc, #500]	; (8003b14 <HAL_DMA_Start_IT+0x484>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d05e      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a7c      	ldr	r2, [pc, #496]	; (8003b18 <HAL_DMA_Start_IT+0x488>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d059      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a7a      	ldr	r2, [pc, #488]	; (8003b1c <HAL_DMA_Start_IT+0x48c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d054      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a79      	ldr	r2, [pc, #484]	; (8003b20 <HAL_DMA_Start_IT+0x490>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d04f      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a77      	ldr	r2, [pc, #476]	; (8003b24 <HAL_DMA_Start_IT+0x494>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04a      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a76      	ldr	r2, [pc, #472]	; (8003b28 <HAL_DMA_Start_IT+0x498>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d045      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a74      	ldr	r2, [pc, #464]	; (8003b2c <HAL_DMA_Start_IT+0x49c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a73      	ldr	r2, [pc, #460]	; (8003b30 <HAL_DMA_Start_IT+0x4a0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d03b      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a71      	ldr	r2, [pc, #452]	; (8003b34 <HAL_DMA_Start_IT+0x4a4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d036      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a70      	ldr	r2, [pc, #448]	; (8003b38 <HAL_DMA_Start_IT+0x4a8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d031      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_DMA_Start_IT+0x4ac>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02c      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6d      	ldr	r2, [pc, #436]	; (8003b40 <HAL_DMA_Start_IT+0x4b0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d027      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6b      	ldr	r2, [pc, #428]	; (8003b44 <HAL_DMA_Start_IT+0x4b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6a      	ldr	r2, [pc, #424]	; (8003b48 <HAL_DMA_Start_IT+0x4b8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a68      	ldr	r2, [pc, #416]	; (8003b4c <HAL_DMA_Start_IT+0x4bc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <HAL_DMA_Start_IT+0x4c0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_DMA_Start_IT+0x4c4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a64      	ldr	r2, [pc, #400]	; (8003b58 <HAL_DMA_Start_IT+0x4c8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a62      	ldr	r2, [pc, #392]	; (8003b5c <HAL_DMA_Start_IT+0x4cc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_DMA_Start_IT+0x350>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a61      	ldr	r2, [pc, #388]	; (8003b60 <HAL_DMA_Start_IT+0x4d0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Start_IT+0x354>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_DMA_Start_IT+0x356>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01a      	beq.n	8003a20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a37      	ldr	r2, [pc, #220]	; (8003b04 <HAL_DMA_Start_IT+0x474>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d04a      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a36      	ldr	r2, [pc, #216]	; (8003b08 <HAL_DMA_Start_IT+0x478>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d045      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a34      	ldr	r2, [pc, #208]	; (8003b0c <HAL_DMA_Start_IT+0x47c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d040      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a33      	ldr	r2, [pc, #204]	; (8003b10 <HAL_DMA_Start_IT+0x480>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d03b      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <HAL_DMA_Start_IT+0x484>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d036      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <HAL_DMA_Start_IT+0x488>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d031      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <HAL_DMA_Start_IT+0x48c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02c      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <HAL_DMA_Start_IT+0x490>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d027      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_DMA_Start_IT+0x494>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <HAL_DMA_Start_IT+0x498>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d01d      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_DMA_Start_IT+0x49c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <HAL_DMA_Start_IT+0x4a0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_DMA_Start_IT+0x4a4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_DMA_Start_IT+0x4a8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_DMA_Start_IT+0x4ac>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x430>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a21      	ldr	r2, [pc, #132]	; (8003b40 <HAL_DMA_Start_IT+0x4b0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <HAL_DMA_Start_IT+0x442>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e012      	b.n	8003af8 <HAL_DMA_Start_IT+0x468>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e009      	b.n	8003af8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40020010 	.word	0x40020010
 8003b08:	40020028 	.word	0x40020028
 8003b0c:	40020040 	.word	0x40020040
 8003b10:	40020058 	.word	0x40020058
 8003b14:	40020070 	.word	0x40020070
 8003b18:	40020088 	.word	0x40020088
 8003b1c:	400200a0 	.word	0x400200a0
 8003b20:	400200b8 	.word	0x400200b8
 8003b24:	40020410 	.word	0x40020410
 8003b28:	40020428 	.word	0x40020428
 8003b2c:	40020440 	.word	0x40020440
 8003b30:	40020458 	.word	0x40020458
 8003b34:	40020470 	.word	0x40020470
 8003b38:	40020488 	.word	0x40020488
 8003b3c:	400204a0 	.word	0x400204a0
 8003b40:	400204b8 	.word	0x400204b8
 8003b44:	58025408 	.word	0x58025408
 8003b48:	5802541c 	.word	0x5802541c
 8003b4c:	58025430 	.word	0x58025430
 8003b50:	58025444 	.word	0x58025444
 8003b54:	58025458 	.word	0x58025458
 8003b58:	5802546c 	.word	0x5802546c
 8003b5c:	58025480 	.word	0x58025480
 8003b60:	58025494 	.word	0x58025494

08003b64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b6c:	f7ff f93c 	bl	8002de8 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e2dc      	b.n	8004136 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d008      	beq.n	8003b9a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e2cd      	b.n	8004136 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a76      	ldr	r2, [pc, #472]	; (8003d78 <HAL_DMA_Abort+0x214>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a74      	ldr	r2, [pc, #464]	; (8003d7c <HAL_DMA_Abort+0x218>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	; (8003d80 <HAL_DMA_Abort+0x21c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a71      	ldr	r2, [pc, #452]	; (8003d84 <HAL_DMA_Abort+0x220>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a70      	ldr	r2, [pc, #448]	; (8003d88 <HAL_DMA_Abort+0x224>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6e      	ldr	r2, [pc, #440]	; (8003d8c <HAL_DMA_Abort+0x228>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6d      	ldr	r2, [pc, #436]	; (8003d90 <HAL_DMA_Abort+0x22c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6b      	ldr	r2, [pc, #428]	; (8003d94 <HAL_DMA_Abort+0x230>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6a      	ldr	r2, [pc, #424]	; (8003d98 <HAL_DMA_Abort+0x234>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a68      	ldr	r2, [pc, #416]	; (8003d9c <HAL_DMA_Abort+0x238>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a67      	ldr	r2, [pc, #412]	; (8003da0 <HAL_DMA_Abort+0x23c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a65      	ldr	r2, [pc, #404]	; (8003da4 <HAL_DMA_Abort+0x240>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a64      	ldr	r2, [pc, #400]	; (8003da8 <HAL_DMA_Abort+0x244>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a62      	ldr	r2, [pc, #392]	; (8003dac <HAL_DMA_Abort+0x248>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a61      	ldr	r2, [pc, #388]	; (8003db0 <HAL_DMA_Abort+0x24c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_Abort+0xd6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5f      	ldr	r2, [pc, #380]	; (8003db4 <HAL_DMA_Abort+0x250>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Abort+0xda>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_Abort+0xdc>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 021e 	bic.w	r2, r2, #30
 8003c52:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c62:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e00a      	b.n	8003c82 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 020e 	bic.w	r2, r2, #14
 8003c7a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3c      	ldr	r2, [pc, #240]	; (8003d78 <HAL_DMA_Abort+0x214>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d072      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <HAL_DMA_Abort+0x218>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d06d      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a39      	ldr	r2, [pc, #228]	; (8003d80 <HAL_DMA_Abort+0x21c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d068      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a37      	ldr	r2, [pc, #220]	; (8003d84 <HAL_DMA_Abort+0x220>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d063      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a36      	ldr	r2, [pc, #216]	; (8003d88 <HAL_DMA_Abort+0x224>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d05e      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a34      	ldr	r2, [pc, #208]	; (8003d8c <HAL_DMA_Abort+0x228>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d059      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <HAL_DMA_Abort+0x22c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d054      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a31      	ldr	r2, [pc, #196]	; (8003d94 <HAL_DMA_Abort+0x230>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04f      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <HAL_DMA_Abort+0x234>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <HAL_DMA_Abort+0x238>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <HAL_DMA_Abort+0x23c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <HAL_DMA_Abort+0x240>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <HAL_DMA_Abort+0x244>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a28      	ldr	r2, [pc, #160]	; (8003dac <HAL_DMA_Abort+0x248>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a27      	ldr	r2, [pc, #156]	; (8003db0 <HAL_DMA_Abort+0x24c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <HAL_DMA_Abort+0x250>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <HAL_DMA_Abort+0x254>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_DMA_Abort+0x258>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <HAL_DMA_Abort+0x25c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMA_Abort+0x260>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_DMA_Abort+0x264>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_DMA_Abort+0x268>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_DMA_Abort+0x26c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_Abort+0x20e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_DMA_Abort+0x270>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d132      	bne.n	8003dd8 <HAL_DMA_Abort+0x274>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e031      	b.n	8003dda <HAL_DMA_Abort+0x276>
 8003d76:	bf00      	nop
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6d      	ldr	r2, [pc, #436]	; (8003fa8 <HAL_DMA_Abort+0x444>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04a      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6b      	ldr	r2, [pc, #428]	; (8003fac <HAL_DMA_Abort+0x448>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d045      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6a      	ldr	r2, [pc, #424]	; (8003fb0 <HAL_DMA_Abort+0x44c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d040      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a68      	ldr	r2, [pc, #416]	; (8003fb4 <HAL_DMA_Abort+0x450>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03b      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a67      	ldr	r2, [pc, #412]	; (8003fb8 <HAL_DMA_Abort+0x454>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d036      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_DMA_Abort+0x458>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d031      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a64      	ldr	r2, [pc, #400]	; (8003fc0 <HAL_DMA_Abort+0x45c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d02c      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a62      	ldr	r2, [pc, #392]	; (8003fc4 <HAL_DMA_Abort+0x460>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a61      	ldr	r2, [pc, #388]	; (8003fc8 <HAL_DMA_Abort+0x464>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d022      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5f      	ldr	r2, [pc, #380]	; (8003fcc <HAL_DMA_Abort+0x468>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5e      	ldr	r2, [pc, #376]	; (8003fd0 <HAL_DMA_Abort+0x46c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5c      	ldr	r2, [pc, #368]	; (8003fd4 <HAL_DMA_Abort+0x470>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a5b      	ldr	r2, [pc, #364]	; (8003fd8 <HAL_DMA_Abort+0x474>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a59      	ldr	r2, [pc, #356]	; (8003fdc <HAL_DMA_Abort+0x478>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a58      	ldr	r2, [pc, #352]	; (8003fe0 <HAL_DMA_Abort+0x47c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_Abort+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_DMA_Abort+0x480>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d108      	bne.n	8003ea0 <HAL_DMA_Abort+0x33c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e007      	b.n	8003eb0 <HAL_DMA_Abort+0x34c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003eb0:	e013      	b.n	8003eda <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eb2:	f7fe ff99 	bl	8002de8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d90c      	bls.n	8003eda <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e12d      	b.n	8004136 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <HAL_DMA_Abort+0x444>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d04a      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <HAL_DMA_Abort+0x448>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d045      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <HAL_DMA_Abort+0x44c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d040      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_DMA_Abort+0x450>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d03b      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_DMA_Abort+0x454>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d036      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_DMA_Abort+0x458>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <HAL_DMA_Abort+0x45c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d02c      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_DMA_Abort+0x460>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d027      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_DMA_Abort+0x464>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_DMA_Abort+0x468>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_DMA_Abort+0x46c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_DMA_Abort+0x470>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_DMA_Abort+0x474>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_DMA_Abort+0x478>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_DMA_Abort+0x47c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_DMA_Abort+0x422>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_DMA_Abort+0x480>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_DMA_Abort+0x426>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_DMA_Abort+0x428>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02b      	beq.n	8003fe8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	223f      	movs	r2, #63	; 0x3f
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	e02a      	b.n	8003ffe <HAL_DMA_Abort+0x49a>
 8003fa8:	40020010 	.word	0x40020010
 8003fac:	40020028 	.word	0x40020028
 8003fb0:	40020040 	.word	0x40020040
 8003fb4:	40020058 	.word	0x40020058
 8003fb8:	40020070 	.word	0x40020070
 8003fbc:	40020088 	.word	0x40020088
 8003fc0:	400200a0 	.word	0x400200a0
 8003fc4:	400200b8 	.word	0x400200b8
 8003fc8:	40020410 	.word	0x40020410
 8003fcc:	40020428 	.word	0x40020428
 8003fd0:	40020440 	.word	0x40020440
 8003fd4:	40020458 	.word	0x40020458
 8003fd8:	40020470 	.word	0x40020470
 8003fdc:	40020488 	.word	0x40020488
 8003fe0:	400204a0 	.word	0x400204a0
 8003fe4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_DMA_Abort+0x5dc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d072      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4d      	ldr	r2, [pc, #308]	; (8004144 <HAL_DMA_Abort+0x5e0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d06d      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a4c      	ldr	r2, [pc, #304]	; (8004148 <HAL_DMA_Abort+0x5e4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d068      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4a      	ldr	r2, [pc, #296]	; (800414c <HAL_DMA_Abort+0x5e8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d063      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a49      	ldr	r2, [pc, #292]	; (8004150 <HAL_DMA_Abort+0x5ec>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d05e      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_DMA_Abort+0x5f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d059      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a46      	ldr	r2, [pc, #280]	; (8004158 <HAL_DMA_Abort+0x5f4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d054      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a44      	ldr	r2, [pc, #272]	; (800415c <HAL_DMA_Abort+0x5f8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d04f      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a43      	ldr	r2, [pc, #268]	; (8004160 <HAL_DMA_Abort+0x5fc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04a      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a41      	ldr	r2, [pc, #260]	; (8004164 <HAL_DMA_Abort+0x600>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d045      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a40      	ldr	r2, [pc, #256]	; (8004168 <HAL_DMA_Abort+0x604>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d040      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3e      	ldr	r2, [pc, #248]	; (800416c <HAL_DMA_Abort+0x608>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03b      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3d      	ldr	r2, [pc, #244]	; (8004170 <HAL_DMA_Abort+0x60c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d036      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a3b      	ldr	r2, [pc, #236]	; (8004174 <HAL_DMA_Abort+0x610>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <HAL_DMA_Abort+0x614>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d02c      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a38      	ldr	r2, [pc, #224]	; (800417c <HAL_DMA_Abort+0x618>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d027      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a37      	ldr	r2, [pc, #220]	; (8004180 <HAL_DMA_Abort+0x61c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a35      	ldr	r2, [pc, #212]	; (8004184 <HAL_DMA_Abort+0x620>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a34      	ldr	r2, [pc, #208]	; (8004188 <HAL_DMA_Abort+0x624>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a32      	ldr	r2, [pc, #200]	; (800418c <HAL_DMA_Abort+0x628>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a31      	ldr	r2, [pc, #196]	; (8004190 <HAL_DMA_Abort+0x62c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2f      	ldr	r2, [pc, #188]	; (8004194 <HAL_DMA_Abort+0x630>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2e      	ldr	r2, [pc, #184]	; (8004198 <HAL_DMA_Abort+0x634>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_DMA_Abort+0x58a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2c      	ldr	r2, [pc, #176]	; (800419c <HAL_DMA_Abort+0x638>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_DMA_Abort+0x58e>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_DMA_Abort+0x590>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004100:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004118:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004122:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40020010 	.word	0x40020010
 8004144:	40020028 	.word	0x40020028
 8004148:	40020040 	.word	0x40020040
 800414c:	40020058 	.word	0x40020058
 8004150:	40020070 	.word	0x40020070
 8004154:	40020088 	.word	0x40020088
 8004158:	400200a0 	.word	0x400200a0
 800415c:	400200b8 	.word	0x400200b8
 8004160:	40020410 	.word	0x40020410
 8004164:	40020428 	.word	0x40020428
 8004168:	40020440 	.word	0x40020440
 800416c:	40020458 	.word	0x40020458
 8004170:	40020470 	.word	0x40020470
 8004174:	40020488 	.word	0x40020488
 8004178:	400204a0 	.word	0x400204a0
 800417c:	400204b8 	.word	0x400204b8
 8004180:	58025408 	.word	0x58025408
 8004184:	5802541c 	.word	0x5802541c
 8004188:	58025430 	.word	0x58025430
 800418c:	58025444 	.word	0x58025444
 8004190:	58025458 	.word	0x58025458
 8004194:	5802546c 	.word	0x5802546c
 8004198:	58025480 	.word	0x58025480
 800419c:	58025494 	.word	0x58025494

080041a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e205      	b.n	80045be <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d004      	beq.n	80041c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2280      	movs	r2, #128	; 0x80
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e1fa      	b.n	80045be <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8c      	ldr	r2, [pc, #560]	; (8004400 <HAL_DMA_Abort_IT+0x260>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d04a      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a8b      	ldr	r2, [pc, #556]	; (8004404 <HAL_DMA_Abort_IT+0x264>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d045      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a89      	ldr	r2, [pc, #548]	; (8004408 <HAL_DMA_Abort_IT+0x268>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d040      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a88      	ldr	r2, [pc, #544]	; (800440c <HAL_DMA_Abort_IT+0x26c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d03b      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a86      	ldr	r2, [pc, #536]	; (8004410 <HAL_DMA_Abort_IT+0x270>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d036      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a85      	ldr	r2, [pc, #532]	; (8004414 <HAL_DMA_Abort_IT+0x274>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d031      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a83      	ldr	r2, [pc, #524]	; (8004418 <HAL_DMA_Abort_IT+0x278>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02c      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a82      	ldr	r2, [pc, #520]	; (800441c <HAL_DMA_Abort_IT+0x27c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d027      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a80      	ldr	r2, [pc, #512]	; (8004420 <HAL_DMA_Abort_IT+0x280>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7f      	ldr	r2, [pc, #508]	; (8004424 <HAL_DMA_Abort_IT+0x284>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d01d      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7d      	ldr	r2, [pc, #500]	; (8004428 <HAL_DMA_Abort_IT+0x288>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7c      	ldr	r2, [pc, #496]	; (800442c <HAL_DMA_Abort_IT+0x28c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7a      	ldr	r2, [pc, #488]	; (8004430 <HAL_DMA_Abort_IT+0x290>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a79      	ldr	r2, [pc, #484]	; (8004434 <HAL_DMA_Abort_IT+0x294>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a77      	ldr	r2, [pc, #476]	; (8004438 <HAL_DMA_Abort_IT+0x298>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_DMA_Abort_IT+0xc8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a76      	ldr	r2, [pc, #472]	; (800443c <HAL_DMA_Abort_IT+0x29c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_DMA_Abort_IT+0xcc>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_DMA_Abort_IT+0xce>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d065      	beq.n	800433e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2204      	movs	r2, #4
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a60      	ldr	r2, [pc, #384]	; (8004400 <HAL_DMA_Abort_IT+0x260>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d04a      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a5e      	ldr	r2, [pc, #376]	; (8004404 <HAL_DMA_Abort_IT+0x264>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d045      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a5d      	ldr	r2, [pc, #372]	; (8004408 <HAL_DMA_Abort_IT+0x268>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d040      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5b      	ldr	r2, [pc, #364]	; (800440c <HAL_DMA_Abort_IT+0x26c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d03b      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5a      	ldr	r2, [pc, #360]	; (8004410 <HAL_DMA_Abort_IT+0x270>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d036      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_DMA_Abort_IT+0x274>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d031      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <HAL_DMA_Abort_IT+0x278>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d02c      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a55      	ldr	r2, [pc, #340]	; (800441c <HAL_DMA_Abort_IT+0x27c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d027      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a54      	ldr	r2, [pc, #336]	; (8004420 <HAL_DMA_Abort_IT+0x280>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d022      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a52      	ldr	r2, [pc, #328]	; (8004424 <HAL_DMA_Abort_IT+0x284>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01d      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a51      	ldr	r2, [pc, #324]	; (8004428 <HAL_DMA_Abort_IT+0x288>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4f      	ldr	r2, [pc, #316]	; (800442c <HAL_DMA_Abort_IT+0x28c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4e      	ldr	r2, [pc, #312]	; (8004430 <HAL_DMA_Abort_IT+0x290>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a4c      	ldr	r2, [pc, #304]	; (8004434 <HAL_DMA_Abort_IT+0x294>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4b      	ldr	r2, [pc, #300]	; (8004438 <HAL_DMA_Abort_IT+0x298>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_DMA_Abort_IT+0x17a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a49      	ldr	r2, [pc, #292]	; (800443c <HAL_DMA_Abort_IT+0x29c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <HAL_DMA_Abort_IT+0x18c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e147      	b.n	80045bc <HAL_DMA_Abort_IT+0x41c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e13e      	b.n	80045bc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 020e 	bic.w	r2, r2, #14
 800434c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_DMA_Abort_IT+0x260>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d04a      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_DMA_Abort_IT+0x264>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d045      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_DMA_Abort_IT+0x268>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d040      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <HAL_DMA_Abort_IT+0x26c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d03b      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <HAL_DMA_Abort_IT+0x270>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d036      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_DMA_Abort_IT+0x274>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d031      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_DMA_Abort_IT+0x278>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d02c      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_DMA_Abort_IT+0x27c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d027      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_DMA_Abort_IT+0x280>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_DMA_Abort_IT+0x284>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01d      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_DMA_Abort_IT+0x288>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_DMA_Abort_IT+0x28c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_DMA_Abort_IT+0x290>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_DMA_Abort_IT+0x294>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_DMA_Abort_IT+0x298>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_Abort_IT+0x24e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <HAL_DMA_Abort_IT+0x29c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d128      	bne.n	8004440 <HAL_DMA_Abort_IT+0x2a0>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e027      	b.n	8004450 <HAL_DMA_Abort_IT+0x2b0>
 8004400:	40020010 	.word	0x40020010
 8004404:	40020028 	.word	0x40020028
 8004408:	40020040 	.word	0x40020040
 800440c:	40020058 	.word	0x40020058
 8004410:	40020070 	.word	0x40020070
 8004414:	40020088 	.word	0x40020088
 8004418:	400200a0 	.word	0x400200a0
 800441c:	400200b8 	.word	0x400200b8
 8004420:	40020410 	.word	0x40020410
 8004424:	40020428 	.word	0x40020428
 8004428:	40020440 	.word	0x40020440
 800442c:	40020458 	.word	0x40020458
 8004430:	40020470 	.word	0x40020470
 8004434:	40020488 	.word	0x40020488
 8004438:	400204a0 	.word	0x400204a0
 800443c:	400204b8 	.word	0x400204b8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5c      	ldr	r2, [pc, #368]	; (80045c8 <HAL_DMA_Abort_IT+0x428>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d072      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_DMA_Abort_IT+0x42c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d06d      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a59      	ldr	r2, [pc, #356]	; (80045d0 <HAL_DMA_Abort_IT+0x430>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d068      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a58      	ldr	r2, [pc, #352]	; (80045d4 <HAL_DMA_Abort_IT+0x434>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d063      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a56      	ldr	r2, [pc, #344]	; (80045d8 <HAL_DMA_Abort_IT+0x438>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d05e      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a55      	ldr	r2, [pc, #340]	; (80045dc <HAL_DMA_Abort_IT+0x43c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d059      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a53      	ldr	r2, [pc, #332]	; (80045e0 <HAL_DMA_Abort_IT+0x440>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d054      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_DMA_Abort_IT+0x444>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04f      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a50      	ldr	r2, [pc, #320]	; (80045e8 <HAL_DMA_Abort_IT+0x448>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d04a      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4f      	ldr	r2, [pc, #316]	; (80045ec <HAL_DMA_Abort_IT+0x44c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d045      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a4d      	ldr	r2, [pc, #308]	; (80045f0 <HAL_DMA_Abort_IT+0x450>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d040      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4c      	ldr	r2, [pc, #304]	; (80045f4 <HAL_DMA_Abort_IT+0x454>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d03b      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4a      	ldr	r2, [pc, #296]	; (80045f8 <HAL_DMA_Abort_IT+0x458>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d036      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a49      	ldr	r2, [pc, #292]	; (80045fc <HAL_DMA_Abort_IT+0x45c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d031      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a47      	ldr	r2, [pc, #284]	; (8004600 <HAL_DMA_Abort_IT+0x460>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02c      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a46      	ldr	r2, [pc, #280]	; (8004604 <HAL_DMA_Abort_IT+0x464>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d027      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a44      	ldr	r2, [pc, #272]	; (8004608 <HAL_DMA_Abort_IT+0x468>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a43      	ldr	r2, [pc, #268]	; (800460c <HAL_DMA_Abort_IT+0x46c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01d      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a41      	ldr	r2, [pc, #260]	; (8004610 <HAL_DMA_Abort_IT+0x470>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a40      	ldr	r2, [pc, #256]	; (8004614 <HAL_DMA_Abort_IT+0x474>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3e      	ldr	r2, [pc, #248]	; (8004618 <HAL_DMA_Abort_IT+0x478>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3d      	ldr	r2, [pc, #244]	; (800461c <HAL_DMA_Abort_IT+0x47c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <HAL_DMA_Abort_IT+0x480>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_DMA_Abort_IT+0x3a0>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3a      	ldr	r2, [pc, #232]	; (8004624 <HAL_DMA_Abort_IT+0x484>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <HAL_DMA_Abort_IT+0x3a4>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <HAL_DMA_Abort_IT+0x3a6>
 8004544:	2300      	movs	r3, #0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d028      	beq.n	800459c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2201      	movs	r2, #1
 800456a:	409a      	lsls	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004578:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800459a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40020010 	.word	0x40020010
 80045cc:	40020028 	.word	0x40020028
 80045d0:	40020040 	.word	0x40020040
 80045d4:	40020058 	.word	0x40020058
 80045d8:	40020070 	.word	0x40020070
 80045dc:	40020088 	.word	0x40020088
 80045e0:	400200a0 	.word	0x400200a0
 80045e4:	400200b8 	.word	0x400200b8
 80045e8:	40020410 	.word	0x40020410
 80045ec:	40020428 	.word	0x40020428
 80045f0:	40020440 	.word	0x40020440
 80045f4:	40020458 	.word	0x40020458
 80045f8:	40020470 	.word	0x40020470
 80045fc:	40020488 	.word	0x40020488
 8004600:	400204a0 	.word	0x400204a0
 8004604:	400204b8 	.word	0x400204b8
 8004608:	58025408 	.word	0x58025408
 800460c:	5802541c 	.word	0x5802541c
 8004610:	58025430 	.word	0x58025430
 8004614:	58025444 	.word	0x58025444
 8004618:	58025458 	.word	0x58025458
 800461c:	5802546c 	.word	0x5802546c
 8004620:	58025480 	.word	0x58025480
 8004624:	58025494 	.word	0x58025494

08004628 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004634:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <HAL_DMA_IRQHandler+0x1ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a67      	ldr	r2, [pc, #412]	; (80047d8 <HAL_DMA_IRQHandler+0x1b0>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <HAL_DMA_IRQHandler+0x1b4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d04a      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5d      	ldr	r2, [pc, #372]	; (80047e0 <HAL_DMA_IRQHandler+0x1b8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d045      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <HAL_DMA_IRQHandler+0x1bc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d040      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5a      	ldr	r2, [pc, #360]	; (80047e8 <HAL_DMA_IRQHandler+0x1c0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d03b      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a59      	ldr	r2, [pc, #356]	; (80047ec <HAL_DMA_IRQHandler+0x1c4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d036      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <HAL_DMA_IRQHandler+0x1c8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d031      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a56      	ldr	r2, [pc, #344]	; (80047f4 <HAL_DMA_IRQHandler+0x1cc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d02c      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a54      	ldr	r2, [pc, #336]	; (80047f8 <HAL_DMA_IRQHandler+0x1d0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d027      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a53      	ldr	r2, [pc, #332]	; (80047fc <HAL_DMA_IRQHandler+0x1d4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d022      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a51      	ldr	r2, [pc, #324]	; (8004800 <HAL_DMA_IRQHandler+0x1d8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a50      	ldr	r2, [pc, #320]	; (8004804 <HAL_DMA_IRQHandler+0x1dc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a4e      	ldr	r2, [pc, #312]	; (8004808 <HAL_DMA_IRQHandler+0x1e0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4d      	ldr	r2, [pc, #308]	; (800480c <HAL_DMA_IRQHandler+0x1e4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a4b      	ldr	r2, [pc, #300]	; (8004810 <HAL_DMA_IRQHandler+0x1e8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <HAL_DMA_IRQHandler+0x1ec>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_DMA_IRQHandler+0xd2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a48      	ldr	r2, [pc, #288]	; (8004818 <HAL_DMA_IRQHandler+0x1f0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_DMA_IRQHandler+0xd6>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_DMA_IRQHandler+0xd8>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 842b 	beq.w	8004f5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2208      	movs	r2, #8
 8004710:	409a      	lsls	r2, r3
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80a2 	beq.w	8004860 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2e      	ldr	r2, [pc, #184]	; (80047dc <HAL_DMA_IRQHandler+0x1b4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d04a      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2d      	ldr	r2, [pc, #180]	; (80047e0 <HAL_DMA_IRQHandler+0x1b8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d045      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <HAL_DMA_IRQHandler+0x1bc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d040      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <HAL_DMA_IRQHandler+0x1c0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d03b      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a28      	ldr	r2, [pc, #160]	; (80047ec <HAL_DMA_IRQHandler+0x1c4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d036      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a27      	ldr	r2, [pc, #156]	; (80047f0 <HAL_DMA_IRQHandler+0x1c8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d031      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <HAL_DMA_IRQHandler+0x1cc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d02c      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a24      	ldr	r2, [pc, #144]	; (80047f8 <HAL_DMA_IRQHandler+0x1d0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d027      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <HAL_DMA_IRQHandler+0x1d4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a21      	ldr	r2, [pc, #132]	; (8004800 <HAL_DMA_IRQHandler+0x1d8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01d      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_DMA_IRQHandler+0x1dc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_DMA_IRQHandler+0x1e0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_DMA_IRQHandler+0x1e4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_DMA_IRQHandler+0x1e8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_DMA_IRQHandler+0x1ec>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_DMA_IRQHandler+0x194>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_DMA_IRQHandler+0x1f0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d12f      	bne.n	800481c <HAL_DMA_IRQHandler+0x1f4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e02e      	b.n	8004830 <HAL_DMA_IRQHandler+0x208>
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000
 80047d8:	1b4e81b5 	.word	0x1b4e81b5
 80047dc:	40020010 	.word	0x40020010
 80047e0:	40020028 	.word	0x40020028
 80047e4:	40020040 	.word	0x40020040
 80047e8:	40020058 	.word	0x40020058
 80047ec:	40020070 	.word	0x40020070
 80047f0:	40020088 	.word	0x40020088
 80047f4:	400200a0 	.word	0x400200a0
 80047f8:	400200b8 	.word	0x400200b8
 80047fc:	40020410 	.word	0x40020410
 8004800:	40020428 	.word	0x40020428
 8004804:	40020440 	.word	0x40020440
 8004808:	40020458 	.word	0x40020458
 800480c:	40020470 	.word	0x40020470
 8004810:	40020488 	.word	0x40020488
 8004814:	400204a0 	.word	0x400204a0
 8004818:	400204b8 	.word	0x400204b8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2208      	movs	r2, #8
 800484e:	409a      	lsls	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	fa22 f303 	lsr.w	r3, r2, r3
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d06e      	beq.n	8004954 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a69      	ldr	r2, [pc, #420]	; (8004a20 <HAL_DMA_IRQHandler+0x3f8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a67      	ldr	r2, [pc, #412]	; (8004a24 <HAL_DMA_IRQHandler+0x3fc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a66      	ldr	r2, [pc, #408]	; (8004a28 <HAL_DMA_IRQHandler+0x400>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a64      	ldr	r2, [pc, #400]	; (8004a2c <HAL_DMA_IRQHandler+0x404>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a63      	ldr	r2, [pc, #396]	; (8004a30 <HAL_DMA_IRQHandler+0x408>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a61      	ldr	r2, [pc, #388]	; (8004a34 <HAL_DMA_IRQHandler+0x40c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a60      	ldr	r2, [pc, #384]	; (8004a38 <HAL_DMA_IRQHandler+0x410>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a5e      	ldr	r2, [pc, #376]	; (8004a3c <HAL_DMA_IRQHandler+0x414>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a5d      	ldr	r2, [pc, #372]	; (8004a40 <HAL_DMA_IRQHandler+0x418>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a5b      	ldr	r2, [pc, #364]	; (8004a44 <HAL_DMA_IRQHandler+0x41c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a5a      	ldr	r2, [pc, #360]	; (8004a48 <HAL_DMA_IRQHandler+0x420>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a58      	ldr	r2, [pc, #352]	; (8004a4c <HAL_DMA_IRQHandler+0x424>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a57      	ldr	r2, [pc, #348]	; (8004a50 <HAL_DMA_IRQHandler+0x428>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a55      	ldr	r2, [pc, #340]	; (8004a54 <HAL_DMA_IRQHandler+0x42c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a54      	ldr	r2, [pc, #336]	; (8004a58 <HAL_DMA_IRQHandler+0x430>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2ee>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_DMA_IRQHandler+0x434>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10a      	bne.n	800492c <HAL_DMA_IRQHandler+0x304>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e003      	b.n	8004934 <HAL_DMA_IRQHandler+0x30c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2201      	movs	r2, #1
 8004942:	409a      	lsls	r2, r3
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f043 0202 	orr.w	r2, r3, #2
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2204      	movs	r2, #4
 800495e:	409a      	lsls	r2, r3
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 808f 	beq.w	8004a88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_DMA_IRQHandler+0x3f8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <HAL_DMA_IRQHandler+0x3fc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d045      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <HAL_DMA_IRQHandler+0x400>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d040      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a27      	ldr	r2, [pc, #156]	; (8004a2c <HAL_DMA_IRQHandler+0x404>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <HAL_DMA_IRQHandler+0x408>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d036      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <HAL_DMA_IRQHandler+0x40c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d031      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <HAL_DMA_IRQHandler+0x410>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d02c      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <HAL_DMA_IRQHandler+0x414>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a20      	ldr	r2, [pc, #128]	; (8004a40 <HAL_DMA_IRQHandler+0x418>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d022      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_DMA_IRQHandler+0x41c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_DMA_IRQHandler+0x420>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d018      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_DMA_IRQHandler+0x424>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <HAL_DMA_IRQHandler+0x428>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_DMA_IRQHandler+0x42c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <HAL_DMA_IRQHandler+0x430>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x3e2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <HAL_DMA_IRQHandler+0x434>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d12a      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x438>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e023      	b.n	8004a68 <HAL_DMA_IRQHandler+0x440>
 8004a20:	40020010 	.word	0x40020010
 8004a24:	40020028 	.word	0x40020028
 8004a28:	40020040 	.word	0x40020040
 8004a2c:	40020058 	.word	0x40020058
 8004a30:	40020070 	.word	0x40020070
 8004a34:	40020088 	.word	0x40020088
 8004a38:	400200a0 	.word	0x400200a0
 8004a3c:	400200b8 	.word	0x400200b8
 8004a40:	40020410 	.word	0x40020410
 8004a44:	40020428 	.word	0x40020428
 8004a48:	40020440 	.word	0x40020440
 8004a4c:	40020458 	.word	0x40020458
 8004a50:	40020470 	.word	0x40020470
 8004a54:	40020488 	.word	0x40020488
 8004a58:	400204a0 	.word	0x400204a0
 8004a5c:	400204b8 	.word	0x400204b8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2204      	movs	r2, #4
 8004a76:	409a      	lsls	r2, r3
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f043 0204 	orr.w	r2, r3, #4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2210      	movs	r2, #16
 8004a92:	409a      	lsls	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80a6 	beq.w	8004bea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a85      	ldr	r2, [pc, #532]	; (8004cb8 <HAL_DMA_IRQHandler+0x690>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a83      	ldr	r2, [pc, #524]	; (8004cbc <HAL_DMA_IRQHandler+0x694>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a82      	ldr	r2, [pc, #520]	; (8004cc0 <HAL_DMA_IRQHandler+0x698>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a80      	ldr	r2, [pc, #512]	; (8004cc4 <HAL_DMA_IRQHandler+0x69c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a7f      	ldr	r2, [pc, #508]	; (8004cc8 <HAL_DMA_IRQHandler+0x6a0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a7d      	ldr	r2, [pc, #500]	; (8004ccc <HAL_DMA_IRQHandler+0x6a4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7c      	ldr	r2, [pc, #496]	; (8004cd0 <HAL_DMA_IRQHandler+0x6a8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a7a      	ldr	r2, [pc, #488]	; (8004cd4 <HAL_DMA_IRQHandler+0x6ac>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a79      	ldr	r2, [pc, #484]	; (8004cd8 <HAL_DMA_IRQHandler+0x6b0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a77      	ldr	r2, [pc, #476]	; (8004cdc <HAL_DMA_IRQHandler+0x6b4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a76      	ldr	r2, [pc, #472]	; (8004ce0 <HAL_DMA_IRQHandler+0x6b8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a74      	ldr	r2, [pc, #464]	; (8004ce4 <HAL_DMA_IRQHandler+0x6bc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a73      	ldr	r2, [pc, #460]	; (8004ce8 <HAL_DMA_IRQHandler+0x6c0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a71      	ldr	r2, [pc, #452]	; (8004cec <HAL_DMA_IRQHandler+0x6c4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a70      	ldr	r2, [pc, #448]	; (8004cf0 <HAL_DMA_IRQHandler+0x6c8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x516>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <HAL_DMA_IRQHandler+0x6cc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10a      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x52c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e009      	b.n	8004b68 <HAL_DMA_IRQHandler+0x540>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d03e      	beq.n	8004bea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2210      	movs	r2, #16
 8004b76:	409a      	lsls	r2, r3
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d018      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d024      	beq.n	8004bea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
 8004ba8:	e01f      	b.n	8004bea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01b      	beq.n	8004bea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	4798      	blx	r3
 8004bba:	e016      	b.n	8004bea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0208 	bic.w	r2, r2, #8
 8004bd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8110 	beq.w	8004e20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2c      	ldr	r2, [pc, #176]	; (8004cb8 <HAL_DMA_IRQHandler+0x690>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d04a      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <HAL_DMA_IRQHandler+0x694>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d045      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <HAL_DMA_IRQHandler+0x698>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d040      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <HAL_DMA_IRQHandler+0x69c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d03b      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a26      	ldr	r2, [pc, #152]	; (8004cc8 <HAL_DMA_IRQHandler+0x6a0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d036      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <HAL_DMA_IRQHandler+0x6a4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d031      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <HAL_DMA_IRQHandler+0x6a8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02c      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_DMA_IRQHandler+0x6ac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d027      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <HAL_DMA_IRQHandler+0x6b0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d022      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_DMA_IRQHandler+0x6b4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d01d      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <HAL_DMA_IRQHandler+0x6b8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d018      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_DMA_IRQHandler+0x6bc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_DMA_IRQHandler+0x6c0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_DMA_IRQHandler+0x6c4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_DMA_IRQHandler+0x6c8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x678>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <HAL_DMA_IRQHandler+0x6cc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d12b      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x6d0>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e02a      	b.n	8004d0c <HAL_DMA_IRQHandler+0x6e4>
 8004cb6:	bf00      	nop
 8004cb8:	40020010 	.word	0x40020010
 8004cbc:	40020028 	.word	0x40020028
 8004cc0:	40020040 	.word	0x40020040
 8004cc4:	40020058 	.word	0x40020058
 8004cc8:	40020070 	.word	0x40020070
 8004ccc:	40020088 	.word	0x40020088
 8004cd0:	400200a0 	.word	0x400200a0
 8004cd4:	400200b8 	.word	0x400200b8
 8004cd8:	40020410 	.word	0x40020410
 8004cdc:	40020428 	.word	0x40020428
 8004ce0:	40020440 	.word	0x40020440
 8004ce4:	40020458 	.word	0x40020458
 8004ce8:	40020470 	.word	0x40020470
 8004cec:	40020488 	.word	0x40020488
 8004cf0:	400204a0 	.word	0x400204a0
 8004cf4:	400204b8 	.word	0x400204b8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8087 	beq.w	8004e20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d139      	bne.n	8004da2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0216 	bic.w	r2, r2, #22
 8004d3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_DMA_IRQHandler+0x736>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0208 	bic.w	r2, r2, #8
 8004d6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	223f      	movs	r2, #63	; 0x3f
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 834a 	beq.w	800542c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
          }
          return;
 8004da0:	e344      	b.n	800542c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d018      	beq.n	8004de2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d108      	bne.n	8004dd0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02c      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
 8004dce:	e027      	b.n	8004e20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d023      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	e01e      	b.n	8004e20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0210 	bic.w	r2, r2, #16
 8004dfe:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8306 	beq.w	8005436 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8088 	beq.w	8004f48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7a      	ldr	r2, [pc, #488]	; (8005030 <HAL_DMA_IRQHandler+0xa08>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d04a      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a79      	ldr	r2, [pc, #484]	; (8005034 <HAL_DMA_IRQHandler+0xa0c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d045      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a77      	ldr	r2, [pc, #476]	; (8005038 <HAL_DMA_IRQHandler+0xa10>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a76      	ldr	r2, [pc, #472]	; (800503c <HAL_DMA_IRQHandler+0xa14>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d03b      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a74      	ldr	r2, [pc, #464]	; (8005040 <HAL_DMA_IRQHandler+0xa18>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d036      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a73      	ldr	r2, [pc, #460]	; (8005044 <HAL_DMA_IRQHandler+0xa1c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d031      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a71      	ldr	r2, [pc, #452]	; (8005048 <HAL_DMA_IRQHandler+0xa20>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02c      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a70      	ldr	r2, [pc, #448]	; (800504c <HAL_DMA_IRQHandler+0xa24>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d027      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a6e      	ldr	r2, [pc, #440]	; (8005050 <HAL_DMA_IRQHandler+0xa28>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d022      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6d      	ldr	r2, [pc, #436]	; (8005054 <HAL_DMA_IRQHandler+0xa2c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6b      	ldr	r2, [pc, #428]	; (8005058 <HAL_DMA_IRQHandler+0xa30>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6a      	ldr	r2, [pc, #424]	; (800505c <HAL_DMA_IRQHandler+0xa34>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a68      	ldr	r2, [pc, #416]	; (8005060 <HAL_DMA_IRQHandler+0xa38>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a67      	ldr	r2, [pc, #412]	; (8005064 <HAL_DMA_IRQHandler+0xa3c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a65      	ldr	r2, [pc, #404]	; (8005068 <HAL_DMA_IRQHandler+0xa40>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x8b8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a64      	ldr	r2, [pc, #400]	; (800506c <HAL_DMA_IRQHandler+0xa44>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <HAL_DMA_IRQHandler+0x8ca>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e007      	b.n	8004f02 <HAL_DMA_IRQHandler+0x8da>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3301      	adds	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d307      	bcc.n	8004f1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f2      	bne.n	8004f02 <HAL_DMA_IRQHandler+0x8da>
 8004f1c:	e000      	b.n	8004f20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f1e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f3e:	e003      	b.n	8004f48 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8272 	beq.w	8005436 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
 8004f5a:	e26c      	b.n	8005436 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_DMA_IRQHandler+0xa48>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a42      	ldr	r2, [pc, #264]	; (8005074 <HAL_DMA_IRQHandler+0xa4c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01d      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a40      	ldr	r2, [pc, #256]	; (8005078 <HAL_DMA_IRQHandler+0xa50>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3f      	ldr	r2, [pc, #252]	; (800507c <HAL_DMA_IRQHandler+0xa54>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <HAL_DMA_IRQHandler+0xa58>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <HAL_DMA_IRQHandler+0xa5c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3a      	ldr	r2, [pc, #232]	; (8005088 <HAL_DMA_IRQHandler+0xa60>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_DMA_IRQHandler+0x984>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a39      	ldr	r2, [pc, #228]	; (800508c <HAL_DMA_IRQHandler+0xa64>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x988>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_DMA_IRQHandler+0x98a>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 823f 	beq.w	8005436 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2204      	movs	r2, #4
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80cd 	beq.w	8005170 <HAL_DMA_IRQHandler+0xb48>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80c7 	beq.w	8005170 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2204      	movs	r2, #4
 8004fec:	409a      	lsls	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d049      	beq.n	8005090 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8210 	beq.w	8005430 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005018:	e20a      	b.n	8005430 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8206 	beq.w	8005430 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502c:	e200      	b.n	8005430 <HAL_DMA_IRQHandler+0xe08>
 800502e:	bf00      	nop
 8005030:	40020010 	.word	0x40020010
 8005034:	40020028 	.word	0x40020028
 8005038:	40020040 	.word	0x40020040
 800503c:	40020058 	.word	0x40020058
 8005040:	40020070 	.word	0x40020070
 8005044:	40020088 	.word	0x40020088
 8005048:	400200a0 	.word	0x400200a0
 800504c:	400200b8 	.word	0x400200b8
 8005050:	40020410 	.word	0x40020410
 8005054:	40020428 	.word	0x40020428
 8005058:	40020440 	.word	0x40020440
 800505c:	40020458 	.word	0x40020458
 8005060:	40020470 	.word	0x40020470
 8005064:	40020488 	.word	0x40020488
 8005068:	400204a0 	.word	0x400204a0
 800506c:	400204b8 	.word	0x400204b8
 8005070:	58025408 	.word	0x58025408
 8005074:	5802541c 	.word	0x5802541c
 8005078:	58025430 	.word	0x58025430
 800507c:	58025444 	.word	0x58025444
 8005080:	58025458 	.word	0x58025458
 8005084:	5802546c 	.word	0x5802546c
 8005088:	58025480 	.word	0x58025480
 800508c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d160      	bne.n	800515c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a8c      	ldr	r2, [pc, #560]	; (80052d0 <HAL_DMA_IRQHandler+0xca8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d04a      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a8a      	ldr	r2, [pc, #552]	; (80052d4 <HAL_DMA_IRQHandler+0xcac>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d045      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a89      	ldr	r2, [pc, #548]	; (80052d8 <HAL_DMA_IRQHandler+0xcb0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d040      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a87      	ldr	r2, [pc, #540]	; (80052dc <HAL_DMA_IRQHandler+0xcb4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d03b      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a86      	ldr	r2, [pc, #536]	; (80052e0 <HAL_DMA_IRQHandler+0xcb8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d036      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a84      	ldr	r2, [pc, #528]	; (80052e4 <HAL_DMA_IRQHandler+0xcbc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d031      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a83      	ldr	r2, [pc, #524]	; (80052e8 <HAL_DMA_IRQHandler+0xcc0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d02c      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a81      	ldr	r2, [pc, #516]	; (80052ec <HAL_DMA_IRQHandler+0xcc4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d027      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a80      	ldr	r2, [pc, #512]	; (80052f0 <HAL_DMA_IRQHandler+0xcc8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d022      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7e      	ldr	r2, [pc, #504]	; (80052f4 <HAL_DMA_IRQHandler+0xccc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01d      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a7d      	ldr	r2, [pc, #500]	; (80052f8 <HAL_DMA_IRQHandler+0xcd0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d018      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a7b      	ldr	r2, [pc, #492]	; (80052fc <HAL_DMA_IRQHandler+0xcd4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7a      	ldr	r2, [pc, #488]	; (8005300 <HAL_DMA_IRQHandler+0xcd8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00e      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a78      	ldr	r2, [pc, #480]	; (8005304 <HAL_DMA_IRQHandler+0xcdc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a77      	ldr	r2, [pc, #476]	; (8005308 <HAL_DMA_IRQHandler+0xce0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_DMA_IRQHandler+0xb12>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a75      	ldr	r2, [pc, #468]	; (800530c <HAL_DMA_IRQHandler+0xce4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <HAL_DMA_IRQHandler+0xb24>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0208 	bic.w	r2, r2, #8
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e007      	b.n	800515c <HAL_DMA_IRQHandler+0xb34>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0204 	bic.w	r2, r2, #4
 800515a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8165 	beq.w	8005430 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800516e:	e15f      	b.n	8005430 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	2202      	movs	r2, #2
 800517a:	409a      	lsls	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80c5 	beq.w	8005310 <HAL_DMA_IRQHandler+0xce8>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80bf 	beq.w	8005310 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	2202      	movs	r2, #2
 800519c:	409a      	lsls	r2, r3
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d018      	beq.n	80051de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 813a 	beq.w	8005434 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c8:	e134      	b.n	8005434 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8130 	beq.w	8005434 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051dc:	e12a      	b.n	8005434 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d168      	bne.n	80052ba <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <HAL_DMA_IRQHandler+0xca8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d04a      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <HAL_DMA_IRQHandler+0xcac>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d045      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a35      	ldr	r2, [pc, #212]	; (80052d8 <HAL_DMA_IRQHandler+0xcb0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d040      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a34      	ldr	r2, [pc, #208]	; (80052dc <HAL_DMA_IRQHandler+0xcb4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d03b      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a32      	ldr	r2, [pc, #200]	; (80052e0 <HAL_DMA_IRQHandler+0xcb8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d036      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a31      	ldr	r2, [pc, #196]	; (80052e4 <HAL_DMA_IRQHandler+0xcbc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d031      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <HAL_DMA_IRQHandler+0xcc0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d02c      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2e      	ldr	r2, [pc, #184]	; (80052ec <HAL_DMA_IRQHandler+0xcc4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d027      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <HAL_DMA_IRQHandler+0xcc8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d022      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <HAL_DMA_IRQHandler+0xccc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d01d      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a29      	ldr	r2, [pc, #164]	; (80052f8 <HAL_DMA_IRQHandler+0xcd0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d018      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <HAL_DMA_IRQHandler+0xcd4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a26      	ldr	r2, [pc, #152]	; (8005300 <HAL_DMA_IRQHandler+0xcd8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a25      	ldr	r2, [pc, #148]	; (8005304 <HAL_DMA_IRQHandler+0xcdc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_DMA_IRQHandler+0xce0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_DMA_IRQHandler+0xc60>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_DMA_IRQHandler+0xce4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <HAL_DMA_IRQHandler+0xc72>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0214 	bic.w	r2, r2, #20
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e007      	b.n	80052aa <HAL_DMA_IRQHandler+0xc82>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 020a 	bic.w	r2, r2, #10
 80052a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80b8 	beq.w	8005434 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052cc:	e0b2      	b.n	8005434 <HAL_DMA_IRQHandler+0xe0c>
 80052ce:	bf00      	nop
 80052d0:	40020010 	.word	0x40020010
 80052d4:	40020028 	.word	0x40020028
 80052d8:	40020040 	.word	0x40020040
 80052dc:	40020058 	.word	0x40020058
 80052e0:	40020070 	.word	0x40020070
 80052e4:	40020088 	.word	0x40020088
 80052e8:	400200a0 	.word	0x400200a0
 80052ec:	400200b8 	.word	0x400200b8
 80052f0:	40020410 	.word	0x40020410
 80052f4:	40020428 	.word	0x40020428
 80052f8:	40020440 	.word	0x40020440
 80052fc:	40020458 	.word	0x40020458
 8005300:	40020470 	.word	0x40020470
 8005304:	40020488 	.word	0x40020488
 8005308:	400204a0 	.word	0x400204a0
 800530c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2208      	movs	r2, #8
 800531a:	409a      	lsls	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8088 	beq.w	8005436 <HAL_DMA_IRQHandler+0xe0e>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8082 	beq.w	8005436 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a41      	ldr	r2, [pc, #260]	; (800543c <HAL_DMA_IRQHandler+0xe14>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d04a      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3f      	ldr	r2, [pc, #252]	; (8005440 <HAL_DMA_IRQHandler+0xe18>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d045      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3e      	ldr	r2, [pc, #248]	; (8005444 <HAL_DMA_IRQHandler+0xe1c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d040      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3c      	ldr	r2, [pc, #240]	; (8005448 <HAL_DMA_IRQHandler+0xe20>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d03b      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3b      	ldr	r2, [pc, #236]	; (800544c <HAL_DMA_IRQHandler+0xe24>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d036      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a39      	ldr	r2, [pc, #228]	; (8005450 <HAL_DMA_IRQHandler+0xe28>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d031      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a38      	ldr	r2, [pc, #224]	; (8005454 <HAL_DMA_IRQHandler+0xe2c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d02c      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a36      	ldr	r2, [pc, #216]	; (8005458 <HAL_DMA_IRQHandler+0xe30>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d027      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a35      	ldr	r2, [pc, #212]	; (800545c <HAL_DMA_IRQHandler+0xe34>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a33      	ldr	r2, [pc, #204]	; (8005460 <HAL_DMA_IRQHandler+0xe38>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a32      	ldr	r2, [pc, #200]	; (8005464 <HAL_DMA_IRQHandler+0xe3c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a30      	ldr	r2, [pc, #192]	; (8005468 <HAL_DMA_IRQHandler+0xe40>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2f      	ldr	r2, [pc, #188]	; (800546c <HAL_DMA_IRQHandler+0xe44>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <HAL_DMA_IRQHandler+0xe48>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <HAL_DMA_IRQHandler+0xe4c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xdaa>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <HAL_DMA_IRQHandler+0xe50>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <HAL_DMA_IRQHandler+0xdbc>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 021c 	bic.w	r2, r2, #28
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e007      	b.n	80053f4 <HAL_DMA_IRQHandler+0xdcc>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 020e 	bic.w	r2, r2, #14
 80053f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2201      	movs	r2, #1
 80053fe:	409a      	lsls	r2, r3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
 800542a:	e004      	b.n	8005436 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800542c:	bf00      	nop
 800542e:	e002      	b.n	8005436 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005434:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005436:	3728      	adds	r7, #40	; 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40020010 	.word	0x40020010
 8005440:	40020028 	.word	0x40020028
 8005444:	40020040 	.word	0x40020040
 8005448:	40020058 	.word	0x40020058
 800544c:	40020070 	.word	0x40020070
 8005450:	40020088 	.word	0x40020088
 8005454:	400200a0 	.word	0x400200a0
 8005458:	400200b8 	.word	0x400200b8
 800545c:	40020410 	.word	0x40020410
 8005460:	40020428 	.word	0x40020428
 8005464:	40020440 	.word	0x40020440
 8005468:	40020458 	.word	0x40020458
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204a0 	.word	0x400204a0
 8005478:	400204b8 	.word	0x400204b8

0800547c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a84      	ldr	r2, [pc, #528]	; (80056c4 <DMA_SetConfig+0x230>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d072      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a82      	ldr	r2, [pc, #520]	; (80056c8 <DMA_SetConfig+0x234>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d06d      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a81      	ldr	r2, [pc, #516]	; (80056cc <DMA_SetConfig+0x238>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d068      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a7f      	ldr	r2, [pc, #508]	; (80056d0 <DMA_SetConfig+0x23c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d063      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a7e      	ldr	r2, [pc, #504]	; (80056d4 <DMA_SetConfig+0x240>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d05e      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <DMA_SetConfig+0x244>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d059      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a7b      	ldr	r2, [pc, #492]	; (80056dc <DMA_SetConfig+0x248>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d054      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a79      	ldr	r2, [pc, #484]	; (80056e0 <DMA_SetConfig+0x24c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04f      	beq.n	800559e <DMA_SetConfig+0x10a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a78      	ldr	r2, [pc, #480]	; (80056e4 <DMA_SetConfig+0x250>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04a      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a76      	ldr	r2, [pc, #472]	; (80056e8 <DMA_SetConfig+0x254>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d045      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a75      	ldr	r2, [pc, #468]	; (80056ec <DMA_SetConfig+0x258>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d040      	beq.n	800559e <DMA_SetConfig+0x10a>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a73      	ldr	r2, [pc, #460]	; (80056f0 <DMA_SetConfig+0x25c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d03b      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a72      	ldr	r2, [pc, #456]	; (80056f4 <DMA_SetConfig+0x260>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d036      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a70      	ldr	r2, [pc, #448]	; (80056f8 <DMA_SetConfig+0x264>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d031      	beq.n	800559e <DMA_SetConfig+0x10a>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6f      	ldr	r2, [pc, #444]	; (80056fc <DMA_SetConfig+0x268>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02c      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6d      	ldr	r2, [pc, #436]	; (8005700 <DMA_SetConfig+0x26c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d027      	beq.n	800559e <DMA_SetConfig+0x10a>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6c      	ldr	r2, [pc, #432]	; (8005704 <DMA_SetConfig+0x270>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a6a      	ldr	r2, [pc, #424]	; (8005708 <DMA_SetConfig+0x274>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01d      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a69      	ldr	r2, [pc, #420]	; (800570c <DMA_SetConfig+0x278>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <DMA_SetConfig+0x10a>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a67      	ldr	r2, [pc, #412]	; (8005710 <DMA_SetConfig+0x27c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a66      	ldr	r2, [pc, #408]	; (8005714 <DMA_SetConfig+0x280>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a64      	ldr	r2, [pc, #400]	; (8005718 <DMA_SetConfig+0x284>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <DMA_SetConfig+0x10a>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a63      	ldr	r2, [pc, #396]	; (800571c <DMA_SetConfig+0x288>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <DMA_SetConfig+0x10a>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a61      	ldr	r2, [pc, #388]	; (8005720 <DMA_SetConfig+0x28c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <DMA_SetConfig+0x10e>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <DMA_SetConfig+0x110>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00d      	beq.n	80055c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a3e      	ldr	r2, [pc, #248]	; (80056c4 <DMA_SetConfig+0x230>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d04a      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a3d      	ldr	r2, [pc, #244]	; (80056c8 <DMA_SetConfig+0x234>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d045      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <DMA_SetConfig+0x238>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d040      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	; (80056d0 <DMA_SetConfig+0x23c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d03b      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <DMA_SetConfig+0x240>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d036      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a37      	ldr	r2, [pc, #220]	; (80056d8 <DMA_SetConfig+0x244>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d031      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a35      	ldr	r2, [pc, #212]	; (80056dc <DMA_SetConfig+0x248>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d02c      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <DMA_SetConfig+0x24c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d027      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a32      	ldr	r2, [pc, #200]	; (80056e4 <DMA_SetConfig+0x250>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a31      	ldr	r2, [pc, #196]	; (80056e8 <DMA_SetConfig+0x254>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d01d      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2f      	ldr	r2, [pc, #188]	; (80056ec <DMA_SetConfig+0x258>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d018      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2e      	ldr	r2, [pc, #184]	; (80056f0 <DMA_SetConfig+0x25c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <DMA_SetConfig+0x260>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <DMA_SetConfig+0x264>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a29      	ldr	r2, [pc, #164]	; (80056fc <DMA_SetConfig+0x268>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <DMA_SetConfig+0x1d0>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a28      	ldr	r2, [pc, #160]	; (8005700 <DMA_SetConfig+0x26c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <DMA_SetConfig+0x1d4>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <DMA_SetConfig+0x1d6>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d05a      	beq.n	8005724 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	223f      	movs	r2, #63	; 0x3f
 8005678:	409a      	lsls	r2, r3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800568c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d108      	bne.n	80056b0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056ae:	e087      	b.n	80057c0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	60da      	str	r2, [r3, #12]
}
 80056c0:	e07e      	b.n	80057c0 <DMA_SetConfig+0x32c>
 80056c2:	bf00      	nop
 80056c4:	40020010 	.word	0x40020010
 80056c8:	40020028 	.word	0x40020028
 80056cc:	40020040 	.word	0x40020040
 80056d0:	40020058 	.word	0x40020058
 80056d4:	40020070 	.word	0x40020070
 80056d8:	40020088 	.word	0x40020088
 80056dc:	400200a0 	.word	0x400200a0
 80056e0:	400200b8 	.word	0x400200b8
 80056e4:	40020410 	.word	0x40020410
 80056e8:	40020428 	.word	0x40020428
 80056ec:	40020440 	.word	0x40020440
 80056f0:	40020458 	.word	0x40020458
 80056f4:	40020470 	.word	0x40020470
 80056f8:	40020488 	.word	0x40020488
 80056fc:	400204a0 	.word	0x400204a0
 8005700:	400204b8 	.word	0x400204b8
 8005704:	58025408 	.word	0x58025408
 8005708:	5802541c 	.word	0x5802541c
 800570c:	58025430 	.word	0x58025430
 8005710:	58025444 	.word	0x58025444
 8005714:	58025458 	.word	0x58025458
 8005718:	5802546c 	.word	0x5802546c
 800571c:	58025480 	.word	0x58025480
 8005720:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a28      	ldr	r2, [pc, #160]	; (80057cc <DMA_SetConfig+0x338>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d022      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a27      	ldr	r2, [pc, #156]	; (80057d0 <DMA_SetConfig+0x33c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01d      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a25      	ldr	r2, [pc, #148]	; (80057d4 <DMA_SetConfig+0x340>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <DMA_SetConfig+0x344>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <DMA_SetConfig+0x348>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <DMA_SetConfig+0x34c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <DMA_SetConfig+0x350>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <DMA_SetConfig+0x2e0>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <DMA_SetConfig+0x354>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <DMA_SetConfig+0x2e4>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <DMA_SetConfig+0x2e6>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d020      	beq.n	80057c0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	2201      	movs	r2, #1
 8005788:	409a      	lsls	r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d108      	bne.n	80057b0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	60da      	str	r2, [r3, #12]
}
 80057ae:	e007      	b.n	80057c0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	58025408 	.word	0x58025408
 80057d0:	5802541c 	.word	0x5802541c
 80057d4:	58025430 	.word	0x58025430
 80057d8:	58025444 	.word	0x58025444
 80057dc:	58025458 	.word	0x58025458
 80057e0:	5802546c 	.word	0x5802546c
 80057e4:	58025480 	.word	0x58025480
 80057e8:	58025494 	.word	0x58025494

080057ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a42      	ldr	r2, [pc, #264]	; (8005904 <DMA_CalcBaseAndBitshift+0x118>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d04a      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a41      	ldr	r2, [pc, #260]	; (8005908 <DMA_CalcBaseAndBitshift+0x11c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d045      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a3f      	ldr	r2, [pc, #252]	; (800590c <DMA_CalcBaseAndBitshift+0x120>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d040      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <DMA_CalcBaseAndBitshift+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d03b      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <DMA_CalcBaseAndBitshift+0x128>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d036      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a3b      	ldr	r2, [pc, #236]	; (8005918 <DMA_CalcBaseAndBitshift+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d031      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a39      	ldr	r2, [pc, #228]	; (800591c <DMA_CalcBaseAndBitshift+0x130>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02c      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a38      	ldr	r2, [pc, #224]	; (8005920 <DMA_CalcBaseAndBitshift+0x134>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a36      	ldr	r2, [pc, #216]	; (8005924 <DMA_CalcBaseAndBitshift+0x138>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a35      	ldr	r2, [pc, #212]	; (8005928 <DMA_CalcBaseAndBitshift+0x13c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01d      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a33      	ldr	r2, [pc, #204]	; (800592c <DMA_CalcBaseAndBitshift+0x140>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a32      	ldr	r2, [pc, #200]	; (8005930 <DMA_CalcBaseAndBitshift+0x144>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a30      	ldr	r2, [pc, #192]	; (8005934 <DMA_CalcBaseAndBitshift+0x148>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2f      	ldr	r2, [pc, #188]	; (8005938 <DMA_CalcBaseAndBitshift+0x14c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2d      	ldr	r2, [pc, #180]	; (800593c <DMA_CalcBaseAndBitshift+0x150>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <DMA_CalcBaseAndBitshift+0xa8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <DMA_CalcBaseAndBitshift+0x154>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <DMA_CalcBaseAndBitshift+0xac>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <DMA_CalcBaseAndBitshift+0xae>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d024      	beq.n	80058e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	3b10      	subs	r3, #16
 80058a6:	4a27      	ldr	r2, [pc, #156]	; (8005944 <DMA_CalcBaseAndBitshift+0x158>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	4a24      	ldr	r2, [pc, #144]	; (8005948 <DMA_CalcBaseAndBitshift+0x15c>)
 80058b8:	5cd3      	ldrb	r3, [r2, r3]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d908      	bls.n	80058d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b1f      	ldr	r3, [pc, #124]	; (800594c <DMA_CalcBaseAndBitshift+0x160>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	1d1a      	adds	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	659a      	str	r2, [r3, #88]	; 0x58
 80058d6:	e00d      	b.n	80058f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	4b1b      	ldr	r3, [pc, #108]	; (800594c <DMA_CalcBaseAndBitshift+0x160>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6593      	str	r3, [r2, #88]	; 0x58
 80058e6:	e005      	b.n	80058f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40020010 	.word	0x40020010
 8005908:	40020028 	.word	0x40020028
 800590c:	40020040 	.word	0x40020040
 8005910:	40020058 	.word	0x40020058
 8005914:	40020070 	.word	0x40020070
 8005918:	40020088 	.word	0x40020088
 800591c:	400200a0 	.word	0x400200a0
 8005920:	400200b8 	.word	0x400200b8
 8005924:	40020410 	.word	0x40020410
 8005928:	40020428 	.word	0x40020428
 800592c:	40020440 	.word	0x40020440
 8005930:	40020458 	.word	0x40020458
 8005934:	40020470 	.word	0x40020470
 8005938:	40020488 	.word	0x40020488
 800593c:	400204a0 	.word	0x400204a0
 8005940:	400204b8 	.word	0x400204b8
 8005944:	aaaaaaab 	.word	0xaaaaaaab
 8005948:	0800c218 	.word	0x0800c218
 800594c:	fffffc00 	.word	0xfffffc00

08005950 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d120      	bne.n	80059a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	2b03      	cmp	r3, #3
 800596a:	d858      	bhi.n	8005a1e <DMA_CheckFifoParam+0xce>
 800596c:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <DMA_CheckFifoParam+0x24>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005985 	.word	0x08005985
 8005978:	08005997 	.word	0x08005997
 800597c:	08005985 	.word	0x08005985
 8005980:	08005a1f 	.word	0x08005a1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d048      	beq.n	8005a22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005994:	e045      	b.n	8005a22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800599e:	d142      	bne.n	8005a26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059a4:	e03f      	b.n	8005a26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	d123      	bne.n	80059f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d838      	bhi.n	8005a2a <DMA_CheckFifoParam+0xda>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <DMA_CheckFifoParam+0x70>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059d7 	.word	0x080059d7
 80059c8:	080059d1 	.word	0x080059d1
 80059cc:	080059e9 	.word	0x080059e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
        break;
 80059d4:	e030      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d025      	beq.n	8005a2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059e6:	e022      	b.n	8005a2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059f0:	d11f      	bne.n	8005a32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059f6:	e01c      	b.n	8005a32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d902      	bls.n	8005a06 <DMA_CheckFifoParam+0xb6>
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d003      	beq.n	8005a0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005a04:	e018      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0a:	e015      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00e      	beq.n	8005a36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8005a1c:	e00b      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
        break;
 8005a1e:	bf00      	nop
 8005a20:	e00a      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        break;
 8005a22:	bf00      	nop
 8005a24:	e008      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        break;
 8005a26:	bf00      	nop
 8005a28:	e006      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        break;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
        break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <DMA_CheckFifoParam+0xe8>
    break;
 8005a36:	bf00      	nop
    }
  }

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop

08005a48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a36      	ldr	r2, [pc, #216]	; (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a35      	ldr	r2, [pc, #212]	; (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a33      	ldr	r2, [pc, #204]	; (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a32      	ldr	r2, [pc, #200]	; (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a30      	ldr	r2, [pc, #192]	; (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2f      	ldr	r2, [pc, #188]	; (8005b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01a      	beq.n	8005ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	3b08      	subs	r3, #8
 8005ab8:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4b26      	ldr	r3, [pc, #152]	; (8005b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ad4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2201      	movs	r2, #1
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ae4:	e024      	b.n	8005b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3b10      	subs	r3, #16
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005af0:	fba2 2303 	umull	r2, r3, r2, r3
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d806      	bhi.n	8005b0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d902      	bls.n	8005b0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005b20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	58025408 	.word	0x58025408
 8005b40:	5802541c 	.word	0x5802541c
 8005b44:	58025430 	.word	0x58025430
 8005b48:	58025444 	.word	0x58025444
 8005b4c:	58025458 	.word	0x58025458
 8005b50:	5802546c 	.word	0x5802546c
 8005b54:	58025480 	.word	0x58025480
 8005b58:	58025494 	.word	0x58025494
 8005b5c:	cccccccd 	.word	0xcccccccd
 8005b60:	16009600 	.word	0x16009600
 8005b64:	58025880 	.word	0x58025880
 8005b68:	aaaaaaab 	.word	0xaaaaaaab
 8005b6c:	400204b8 	.word	0x400204b8
 8005b70:	4002040f 	.word	0x4002040f
 8005b74:	10008200 	.word	0x10008200
 8005b78:	40020880 	.word	0x40020880

08005b7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04a      	beq.n	8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d847      	bhi.n	8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d022      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d01d      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a22      	ldr	r2, [pc, #136]	; (8005c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005c04:	671a      	str	r2, [r3, #112]	; 0x70
 8005c06:	e009      	b.n	8005c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	461a      	mov	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a11      	ldr	r2, [pc, #68]	; (8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005c1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	58025408 	.word	0x58025408
 8005c38:	5802541c 	.word	0x5802541c
 8005c3c:	58025430 	.word	0x58025430
 8005c40:	58025444 	.word	0x58025444
 8005c44:	58025458 	.word	0x58025458
 8005c48:	5802546c 	.word	0x5802546c
 8005c4c:	58025480 	.word	0x58025480
 8005c50:	58025494 	.word	0x58025494
 8005c54:	1600963f 	.word	0x1600963f
 8005c58:	58025940 	.word	0x58025940
 8005c5c:	1000823f 	.word	0x1000823f
 8005c60:	40020940 	.word	0x40020940

08005c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b089      	sub	sp, #36	; 0x24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c72:	4b89      	ldr	r3, [pc, #548]	; (8005e98 <HAL_GPIO_Init+0x234>)
 8005c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c76:	e194      	b.n	8005fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8186 	beq.w	8005f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d00b      	beq.n	8005cb0 <HAL_GPIO_Init+0x4c>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d007      	beq.n	8005cb0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ca4:	2b11      	cmp	r3, #17
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b12      	cmp	r3, #18
 8005cae:	d130      	bne.n	8005d12 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	2203      	movs	r2, #3
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	f003 0201 	and.w	r2, r3, #1
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4013      	ands	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_Init+0xee>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b12      	cmp	r3, #18
 8005d50:	d123      	bne.n	8005d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	08da      	lsrs	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3208      	adds	r2, #8
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	220f      	movs	r2, #15
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3208      	adds	r2, #8
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0203 	and.w	r2, r3, #3
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80e0 	beq.w	8005f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ddc:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <HAL_GPIO_Init+0x238>)
 8005dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005de2:	4a2e      	ldr	r2, [pc, #184]	; (8005e9c <HAL_GPIO_Init+0x238>)
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dec:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <HAL_GPIO_Init+0x238>)
 8005dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dfa:	4a29      	ldr	r2, [pc, #164]	; (8005ea0 <HAL_GPIO_Init+0x23c>)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	3302      	adds	r3, #2
 8005e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	220f      	movs	r2, #15
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <HAL_GPIO_Init+0x240>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d052      	beq.n	8005ecc <HAL_GPIO_Init+0x268>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <HAL_GPIO_Init+0x244>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d031      	beq.n	8005e92 <HAL_GPIO_Init+0x22e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <HAL_GPIO_Init+0x248>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d02b      	beq.n	8005e8e <HAL_GPIO_Init+0x22a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <HAL_GPIO_Init+0x24c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d025      	beq.n	8005e8a <HAL_GPIO_Init+0x226>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <HAL_GPIO_Init+0x250>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01f      	beq.n	8005e86 <HAL_GPIO_Init+0x222>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <HAL_GPIO_Init+0x254>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d019      	beq.n	8005e82 <HAL_GPIO_Init+0x21e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <HAL_GPIO_Init+0x258>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_GPIO_Init+0x21a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a19      	ldr	r2, [pc, #100]	; (8005ec0 <HAL_GPIO_Init+0x25c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00d      	beq.n	8005e7a <HAL_GPIO_Init+0x216>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <HAL_GPIO_Init+0x260>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <HAL_GPIO_Init+0x212>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <HAL_GPIO_Init+0x264>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d101      	bne.n	8005e72 <HAL_GPIO_Init+0x20e>
 8005e6e:	2309      	movs	r3, #9
 8005e70:	e02d      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e72:	230a      	movs	r3, #10
 8005e74:	e02b      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e76:	2308      	movs	r3, #8
 8005e78:	e029      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e7a:	2307      	movs	r3, #7
 8005e7c:	e027      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e7e:	2306      	movs	r3, #6
 8005e80:	e025      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e82:	2305      	movs	r3, #5
 8005e84:	e023      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e86:	2304      	movs	r3, #4
 8005e88:	e021      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e01f      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e01d      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e01b      	b.n	8005ece <HAL_GPIO_Init+0x26a>
 8005e96:	bf00      	nop
 8005e98:	58000080 	.word	0x58000080
 8005e9c:	58024400 	.word	0x58024400
 8005ea0:	58000400 	.word	0x58000400
 8005ea4:	58020000 	.word	0x58020000
 8005ea8:	58020400 	.word	0x58020400
 8005eac:	58020800 	.word	0x58020800
 8005eb0:	58020c00 	.word	0x58020c00
 8005eb4:	58021000 	.word	0x58021000
 8005eb8:	58021400 	.word	0x58021400
 8005ebc:	58021800 	.word	0x58021800
 8005ec0:	58021c00 	.word	0x58021c00
 8005ec4:	58022000 	.word	0x58022000
 8005ec8:	58022400 	.word	0x58022400
 8005ecc:	2300      	movs	r3, #0
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	f002 0203 	and.w	r2, r2, #3
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	4093      	lsls	r3, r2
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ede:	4938      	ldr	r1, [pc, #224]	; (8005fc0 <HAL_GPIO_Init+0x35c>)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f ae63 	bne.w	8005c78 <HAL_GPIO_Init+0x14>
  }
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	3724      	adds	r7, #36	; 0x24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58000400 	.word	0x58000400

08005fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	e001      	b.n	8005fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
 8006000:	4613      	mov	r3, r2
 8006002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006004:	787b      	ldrb	r3, [r7, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800600a:	887a      	ldrh	r2, [r7, #2]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006010:	e003      	b.n	800601a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006012:	887b      	ldrh	r3, [r7, #2]
 8006014:	041a      	lsls	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	619a      	str	r2, [r3, #24]
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e041      	b.n	80060bc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006040:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f245 5255 	movw	r2, #21845	; 0x5555
 800604a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6892      	ldr	r2, [r2, #8]
 800605e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006060:	f7fc fec2 	bl	8002de8 <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006066:	e00f      	b.n	8006088 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006068:	f7fc febe 	bl	8002de8 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b30      	cmp	r3, #48	; 0x30
 8006074:	d908      	bls.n	8006088 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e019      	b.n	80060bc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e8      	bne.n	8006068 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d005      	beq.n	80060b0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68d2      	ldr	r2, [r2, #12]
 80060ac:	611a      	str	r2, [r3, #16]
 80060ae:	e004      	b.n	80060ba <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80060b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80060d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_PWREx_ConfigSupply+0x70>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d00a      	beq.n	800610e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80060f8:	4b16      	ldr	r3, [pc, #88]	; (8006154 <HAL_PWREx_ConfigSupply+0x70>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d001      	beq.n	800610a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e01f      	b.n	800614a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e01d      	b.n	800614a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <HAL_PWREx_ConfigSupply+0x70>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f023 0207 	bic.w	r2, r3, #7
 8006116:	490f      	ldr	r1, [pc, #60]	; (8006154 <HAL_PWREx_ConfigSupply+0x70>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4313      	orrs	r3, r2
 800611c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800611e:	f7fc fe63 	bl	8002de8 <HAL_GetTick>
 8006122:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006124:	e009      	b.n	800613a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006126:	f7fc fe5f 	bl	8002de8 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006134:	d901      	bls.n	800613a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e007      	b.n	800614a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800613a:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_PWREx_ConfigSupply+0x70>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006146:	d1ee      	bne.n	8006126 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	58024800 	.word	0x58024800

08006158 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08c      	sub	sp, #48	; 0x30
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e3ff      	b.n	800696a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8087 	beq.w	8006286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006178:	4b99      	ldr	r3, [pc, #612]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006182:	4b97      	ldr	r3, [pc, #604]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	2b10      	cmp	r3, #16
 800618c:	d007      	beq.n	800619e <HAL_RCC_OscConfig+0x46>
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b18      	cmp	r3, #24
 8006192:	d110      	bne.n	80061b6 <HAL_RCC_OscConfig+0x5e>
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d10b      	bne.n	80061b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619e:	4b90      	ldr	r3, [pc, #576]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d06c      	beq.n	8006284 <HAL_RCC_OscConfig+0x12c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d168      	bne.n	8006284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e3d9      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061be:	d106      	bne.n	80061ce <HAL_RCC_OscConfig+0x76>
 80061c0:	4b87      	ldr	r3, [pc, #540]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a86      	ldr	r2, [pc, #536]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e02e      	b.n	800622c <HAL_RCC_OscConfig+0xd4>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x98>
 80061d6:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a81      	ldr	r2, [pc, #516]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b7f      	ldr	r3, [pc, #508]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a7e      	ldr	r2, [pc, #504]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e01d      	b.n	800622c <HAL_RCC_OscConfig+0xd4>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0xbc>
 80061fa:	4b79      	ldr	r3, [pc, #484]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a78      	ldr	r2, [pc, #480]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4b76      	ldr	r3, [pc, #472]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a75      	ldr	r2, [pc, #468]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0xd4>
 8006214:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a71      	ldr	r2, [pc, #452]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b6f      	ldr	r3, [pc, #444]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6e      	ldr	r2, [pc, #440]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006234:	f7fc fdd8 	bl	8002de8 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800623c:	f7fc fdd4 	bl	8002de8 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b64      	cmp	r3, #100	; 0x64
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e38d      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800624e:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0xe4>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fc fdc4 	bl	8002de8 <HAL_GetTick>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006264:	f7fc fdc0 	bl	8002de8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b64      	cmp	r3, #100	; 0x64
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e379      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006276:	4b5a      	ldr	r3, [pc, #360]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0x10c>
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80ae 	beq.w	80063f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006294:	4b52      	ldr	r3, [pc, #328]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800629e:	4b50      	ldr	r3, [pc, #320]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_RCC_OscConfig+0x162>
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b18      	cmp	r3, #24
 80062ae:	d13a      	bne.n	8006326 <HAL_RCC_OscConfig+0x1ce>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d135      	bne.n	8006326 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RCC_OscConfig+0x17a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e34b      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d2:	f7fc fd95 	bl	8002e00 <HAL_GetREVID>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80062dc:	4293      	cmp	r3, r2
 80062de:	d817      	bhi.n	8006310 <HAL_RCC_OscConfig+0x1b8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d108      	bne.n	80062fa <HAL_RCC_OscConfig+0x1a2>
 80062e8:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062f0:	4a3b      	ldr	r2, [pc, #236]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80062f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f8:	e07a      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	031b      	lsls	r3, r3, #12
 8006308:	4935      	ldr	r1, [pc, #212]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800630a:	4313      	orrs	r3, r2
 800630c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800630e:	e06f      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b33      	ldr	r3, [pc, #204]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	061b      	lsls	r3, r3, #24
 800631e:	4930      	ldr	r1, [pc, #192]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006320:	4313      	orrs	r3, r2
 8006322:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006324:	e064      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d045      	beq.n	80063ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800632e:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 0219 	bic.w	r2, r3, #25
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	4929      	ldr	r1, [pc, #164]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006340:	f7fc fd52 	bl	8002de8 <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006348:	f7fc fd4e 	bl	8002de8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e307      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800635a:	4b21      	ldr	r3, [pc, #132]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f0      	beq.n	8006348 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006366:	f7fc fd4b 	bl	8002e00 <HAL_GetREVID>
 800636a:	4603      	mov	r3, r0
 800636c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006370:	4293      	cmp	r3, r2
 8006372:	d817      	bhi.n	80063a4 <HAL_RCC_OscConfig+0x24c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d108      	bne.n	800638e <HAL_RCC_OscConfig+0x236>
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800638a:	6053      	str	r3, [r2, #4]
 800638c:	e030      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	031b      	lsls	r3, r3, #12
 800639c:	4910      	ldr	r1, [pc, #64]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	604b      	str	r3, [r1, #4]
 80063a2:	e025      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	061b      	lsls	r3, r3, #24
 80063b2:	490b      	ldr	r1, [pc, #44]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	e01a      	b.n	80063f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <HAL_RCC_OscConfig+0x288>)
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c6:	f7fc fd0f 	bl	8002de8 <HAL_GetTick>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063cc:	e00a      	b.n	80063e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fc fd0b 	bl	8002de8 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d903      	bls.n	80063e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e2c4      	b.n	800696a <HAL_RCC_OscConfig+0x812>
 80063e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063e4:	4ba4      	ldr	r3, [pc, #656]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ee      	bne.n	80063ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a9 	beq.w	8006550 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063fe:	4b9e      	ldr	r3, [pc, #632]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006406:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006408:	4b9b      	ldr	r3, [pc, #620]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d007      	beq.n	8006424 <HAL_RCC_OscConfig+0x2cc>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b18      	cmp	r3, #24
 8006418:	d13a      	bne.n	8006490 <HAL_RCC_OscConfig+0x338>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d135      	bne.n	8006490 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006424:	4b94      	ldr	r3, [pc, #592]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_RCC_OscConfig+0x2e4>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d001      	beq.n	800643c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e296      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800643c:	f7fc fce0 	bl	8002e00 <HAL_GetREVID>
 8006440:	4603      	mov	r3, r0
 8006442:	f241 0203 	movw	r2, #4099	; 0x1003
 8006446:	4293      	cmp	r3, r2
 8006448:	d817      	bhi.n	800647a <HAL_RCC_OscConfig+0x322>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	2b20      	cmp	r3, #32
 8006450:	d108      	bne.n	8006464 <HAL_RCC_OscConfig+0x30c>
 8006452:	4b89      	ldr	r3, [pc, #548]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800645a:	4a87      	ldr	r2, [pc, #540]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800645c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006460:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006462:	e075      	b.n	8006550 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006464:	4b84      	ldr	r3, [pc, #528]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	069b      	lsls	r3, r3, #26
 8006472:	4981      	ldr	r1, [pc, #516]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006474:	4313      	orrs	r3, r2
 8006476:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006478:	e06a      	b.n	8006550 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800647a:	4b7f      	ldr	r3, [pc, #508]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	497b      	ldr	r1, [pc, #492]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800648a:	4313      	orrs	r3, r2
 800648c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800648e:	e05f      	b.n	8006550 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d042      	beq.n	800651e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006498:	4b77      	ldr	r3, [pc, #476]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a76      	ldr	r2, [pc, #472]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a4:	f7fc fca0 	bl	8002de8 <HAL_GetTick>
 80064a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064ac:	f7fc fc9c 	bl	8002de8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e255      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064be:	4b6e      	ldr	r3, [pc, #440]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064ca:	f7fc fc99 	bl	8002e00 <HAL_GetREVID>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d817      	bhi.n	8006508 <HAL_RCC_OscConfig+0x3b0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d108      	bne.n	80064f2 <HAL_RCC_OscConfig+0x39a>
 80064e0:	4b65      	ldr	r3, [pc, #404]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064e8:	4a63      	ldr	r2, [pc, #396]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80064ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ee:	6053      	str	r3, [r2, #4]
 80064f0:	e02e      	b.n	8006550 <HAL_RCC_OscConfig+0x3f8>
 80064f2:	4b61      	ldr	r3, [pc, #388]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	069b      	lsls	r3, r3, #26
 8006500:	495d      	ldr	r1, [pc, #372]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006502:	4313      	orrs	r3, r2
 8006504:	604b      	str	r3, [r1, #4]
 8006506:	e023      	b.n	8006550 <HAL_RCC_OscConfig+0x3f8>
 8006508:	4b5b      	ldr	r3, [pc, #364]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	4958      	ldr	r1, [pc, #352]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006518:	4313      	orrs	r3, r2
 800651a:	60cb      	str	r3, [r1, #12]
 800651c:	e018      	b.n	8006550 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800651e:	4b56      	ldr	r3, [pc, #344]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a55      	ldr	r2, [pc, #340]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc fc5d 	bl	8002de8 <HAL_GetTick>
 800652e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006532:	f7fc fc59 	bl	8002de8 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e212      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006544:	4b4c      	ldr	r3, [pc, #304]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f0      	bne.n	8006532 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d036      	beq.n	80065ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d019      	beq.n	8006598 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006564:	4b44      	ldr	r3, [pc, #272]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006568:	4a43      	ldr	r2, [pc, #268]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fc fc3a 	bl	8002de8 <HAL_GetTick>
 8006574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006578:	f7fc fc36 	bl	8002de8 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e1ef      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800658a:	4b3b      	ldr	r3, [pc, #236]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0x420>
 8006596:	e018      	b.n	80065ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006598:	4b37      	ldr	r3, [pc, #220]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800659a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659c:	4a36      	ldr	r2, [pc, #216]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fc fc20 	bl	8002de8 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ac:	f7fc fc1c 	bl	8002de8 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e1d5      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065be:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d036      	beq.n	8006644 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d019      	beq.n	8006612 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065de:	4b26      	ldr	r3, [pc, #152]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a25      	ldr	r2, [pc, #148]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 80065e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065ea:	f7fc fbfd 	bl	8002de8 <HAL_GetTick>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065f2:	f7fc fbf9 	bl	8002de8 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e1b2      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006604:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x49a>
 8006610:	e018      	b.n	8006644 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006612:	4b19      	ldr	r3, [pc, #100]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a18      	ldr	r2, [pc, #96]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 8006618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800661e:	f7fc fbe3 	bl	8002de8 <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006626:	f7fc fbdf 	bl	8002de8 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e198      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <HAL_RCC_OscConfig+0x520>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8085 	beq.w	800675c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_RCC_OscConfig+0x524>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a09      	ldr	r2, [pc, #36]	; (800667c <HAL_RCC_OscConfig+0x524>)
 8006658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800665e:	f7fc fbc3 	bl	8002de8 <HAL_GetTick>
 8006662:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006664:	e00c      	b.n	8006680 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006666:	f7fc fbbf 	bl	8002de8 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b64      	cmp	r3, #100	; 0x64
 8006672:	d905      	bls.n	8006680 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e178      	b.n	800696a <HAL_RCC_OscConfig+0x812>
 8006678:	58024400 	.word	0x58024400
 800667c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006680:	4b96      	ldr	r3, [pc, #600]	; (80068dc <HAL_RCC_OscConfig+0x784>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ec      	beq.n	8006666 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x54a>
 8006694:	4b92      	ldr	r3, [pc, #584]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	4a91      	ldr	r2, [pc, #580]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6713      	str	r3, [r2, #112]	; 0x70
 80066a0:	e02d      	b.n	80066fe <HAL_RCC_OscConfig+0x5a6>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x56c>
 80066aa:	4b8d      	ldr	r3, [pc, #564]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a8c      	ldr	r2, [pc, #560]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
 80066b6:	4b8a      	ldr	r3, [pc, #552]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	4a89      	ldr	r2, [pc, #548]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066bc:	f023 0304 	bic.w	r3, r3, #4
 80066c0:	6713      	str	r3, [r2, #112]	; 0x70
 80066c2:	e01c      	b.n	80066fe <HAL_RCC_OscConfig+0x5a6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCC_OscConfig+0x58e>
 80066cc:	4b84      	ldr	r3, [pc, #528]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4a83      	ldr	r2, [pc, #524]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
 80066d8:	4b81      	ldr	r3, [pc, #516]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	6713      	str	r3, [r2, #112]	; 0x70
 80066e4:	e00b      	b.n	80066fe <HAL_RCC_OscConfig+0x5a6>
 80066e6:	4b7e      	ldr	r3, [pc, #504]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a7d      	ldr	r2, [pc, #500]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
 80066f2:	4b7b      	ldr	r3, [pc, #492]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	4a7a      	ldr	r2, [pc, #488]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006706:	f7fc fb6f 	bl	8002de8 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800670c:	e00a      	b.n	8006724 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670e:	f7fc fb6b 	bl	8002de8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e122      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006724:	4b6e      	ldr	r3, [pc, #440]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ee      	beq.n	800670e <HAL_RCC_OscConfig+0x5b6>
 8006730:	e014      	b.n	800675c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006732:	f7fc fb59 	bl	8002de8 <HAL_GetTick>
 8006736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fc fb55 	bl	8002de8 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e10c      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006750:	4b63      	ldr	r3, [pc, #396]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ee      	bne.n	800673a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8101 	beq.w	8006968 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006766:	4b5e      	ldr	r3, [pc, #376]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800676e:	2b18      	cmp	r3, #24
 8006770:	f000 80bc 	beq.w	80068ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b02      	cmp	r3, #2
 800677a:	f040 8095 	bne.w	80068a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677e:	4b58      	ldr	r3, [pc, #352]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a57      	ldr	r2, [pc, #348]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fc fb2d 	bl	8002de8 <HAL_GetTick>
 800678e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006792:	f7fc fb29 	bl	8002de8 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e0e2      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a4:	4b4e      	ldr	r3, [pc, #312]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f0      	bne.n	8006792 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067b0:	4b4b      	ldr	r3, [pc, #300]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80067b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067b4:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <HAL_RCC_OscConfig+0x78c>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067c0:	0112      	lsls	r2, r2, #4
 80067c2:	430a      	orrs	r2, r1
 80067c4:	4946      	ldr	r1, [pc, #280]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	628b      	str	r3, [r1, #40]	; 0x28
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	3b01      	subs	r3, #1
 80067d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	3b01      	subs	r3, #1
 80067da:	025b      	lsls	r3, r3, #9
 80067dc:	b29b      	uxth	r3, r3
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	3b01      	subs	r3, #1
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	3b01      	subs	r3, #1
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067fa:	4939      	ldr	r1, [pc, #228]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006800:	4b37      	ldr	r3, [pc, #220]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4a36      	ldr	r2, [pc, #216]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800680c:	4b34      	ldr	r3, [pc, #208]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800680e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006810:	4b35      	ldr	r3, [pc, #212]	; (80068e8 <HAL_RCC_OscConfig+0x790>)
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006818:	00d2      	lsls	r2, r2, #3
 800681a:	4931      	ldr	r1, [pc, #196]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800681c:	4313      	orrs	r3, r2
 800681e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006820:	4b2f      	ldr	r3, [pc, #188]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	f023 020c 	bic.w	r2, r3, #12
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	492c      	ldr	r1, [pc, #176]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800682e:	4313      	orrs	r3, r2
 8006830:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006832:	4b2b      	ldr	r3, [pc, #172]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	f023 0202 	bic.w	r2, r3, #2
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	4928      	ldr	r1, [pc, #160]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006840:	4313      	orrs	r3, r2
 8006842:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006844:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800684a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006850:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800685c:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006868:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006874:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800687a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fc fab2 	bl	8002de8 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006888:	f7fc faae 	bl	8002de8 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e067      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800689a:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x730>
 80068a6:	e05f      	b.n	8006968 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a8:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80068ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b4:	f7fc fa98 	bl	8002de8 <HAL_GetTick>
 80068b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068bc:	f7fc fa94 	bl	8002de8 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e04d      	b.n	800696a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ce:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <HAL_RCC_OscConfig+0x788>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f0      	bne.n	80068bc <HAL_RCC_OscConfig+0x764>
 80068da:	e045      	b.n	8006968 <HAL_RCC_OscConfig+0x810>
 80068dc:	58024800 	.word	0x58024800
 80068e0:	58024400 	.word	0x58024400
 80068e4:	fffffc0c 	.word	0xfffffc0c
 80068e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068ec:	4b21      	ldr	r3, [pc, #132]	; (8006974 <HAL_RCC_OscConfig+0x81c>)
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068f2:	4b20      	ldr	r3, [pc, #128]	; (8006974 <HAL_RCC_OscConfig+0x81c>)
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d031      	beq.n	8006964 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f003 0203 	and.w	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d12a      	bne.n	8006964 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800691a:	429a      	cmp	r2, r3
 800691c:	d122      	bne.n	8006964 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d11a      	bne.n	8006964 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	0a5b      	lsrs	r3, r3, #9
 8006932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800693c:	429a      	cmp	r2, r3
 800693e:	d111      	bne.n	8006964 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800694e:	429a      	cmp	r2, r3
 8006950:	d108      	bne.n	8006964 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	0e1b      	lsrs	r3, r3, #24
 8006956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d001      	beq.n	8006968 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3730      	adds	r7, #48	; 0x30
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	58024400 	.word	0x58024400

08006978 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e19c      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800698c:	4b8a      	ldr	r3, [pc, #552]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d910      	bls.n	80069bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b87      	ldr	r3, [pc, #540]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 020f 	bic.w	r2, r3, #15
 80069a2:	4985      	ldr	r1, [pc, #532]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b83      	ldr	r3, [pc, #524]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e184      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	4b7b      	ldr	r3, [pc, #492]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d908      	bls.n	80069ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069d8:	4b78      	ldr	r3, [pc, #480]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4975      	ldr	r1, [pc, #468]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	4b70      	ldr	r3, [pc, #448]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d908      	bls.n	8006a18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a06:	4b6d      	ldr	r3, [pc, #436]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	496a      	ldr	r1, [pc, #424]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d010      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	4b64      	ldr	r3, [pc, #400]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d908      	bls.n	8006a46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a34:	4b61      	ldr	r3, [pc, #388]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	495e      	ldr	r1, [pc, #376]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69da      	ldr	r2, [r3, #28]
 8006a56:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d908      	bls.n	8006a74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a62:	4b56      	ldr	r3, [pc, #344]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	4953      	ldr	r1, [pc, #332]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	4b4d      	ldr	r3, [pc, #308]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d908      	bls.n	8006aa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a90:	4b4a      	ldr	r3, [pc, #296]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f023 020f 	bic.w	r2, r3, #15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4947      	ldr	r1, [pc, #284]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d055      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aae:	4b43      	ldr	r3, [pc, #268]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	4940      	ldr	r1, [pc, #256]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ac8:	4b3c      	ldr	r3, [pc, #240]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d121      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0f6      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d107      	bne.n	8006af0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ae0:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d115      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0ea      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006af8:	4b30      	ldr	r3, [pc, #192]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0de      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b08:	4b2c      	ldr	r3, [pc, #176]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0d6      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b18:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f023 0207 	bic.w	r2, r3, #7
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4925      	ldr	r1, [pc, #148]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2a:	f7fc f95d 	bl	8002de8 <HAL_GetTick>
 8006b2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b30:	e00a      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b32:	f7fc f959 	bl	8002de8 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e0be      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b48:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d1eb      	bne.n	8006b32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d208      	bcs.n	8006b88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b76:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f023 020f 	bic.w	r2, r3, #15
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	490e      	ldr	r1, [pc, #56]	; (8006bbc <HAL_RCC_ClockConfig+0x244>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d214      	bcs.n	8006bc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 020f 	bic.w	r2, r3, #15
 8006b9e:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <HAL_RCC_ClockConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e086      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x34e>
 8006bb8:	52002000 	.word	0x52002000
 8006bbc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d208      	bcs.n	8006bee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bdc:	4b3c      	ldr	r3, [pc, #240]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	4939      	ldr	r1, [pc, #228]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	4b34      	ldr	r3, [pc, #208]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d208      	bcs.n	8006c1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c0a:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	492e      	ldr	r1, [pc, #184]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d010      	beq.n	8006c4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d208      	bcs.n	8006c4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	4922      	ldr	r1, [pc, #136]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69da      	ldr	r2, [r3, #28]
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d208      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4917      	ldr	r1, [pc, #92]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c78:	f000 f834 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	4912      	ldr	r1, [pc, #72]	; (8006cd4 <HAL_RCC_ClockConfig+0x35c>)
 8006c8a:	5ccb      	ldrb	r3, [r1, r3]
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	fa22 f303 	lsr.w	r3, r2, r3
 8006c94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <HAL_RCC_ClockConfig+0x358>)
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <HAL_RCC_ClockConfig+0x35c>)
 8006ca0:	5cd3      	ldrb	r3, [r2, r3]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cac:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <HAL_RCC_ClockConfig+0x360>)
 8006cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <HAL_RCC_ClockConfig+0x364>)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <HAL_RCC_ClockConfig+0x368>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb fb50 	bl	8002360 <HAL_InitTick>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	0800c208 	.word	0x0800c208
 8006cd8:	20000004 	.word	0x20000004
 8006cdc:	20000000 	.word	0x20000000
 8006ce0:	20000008 	.word	0x20000008

08006ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b089      	sub	sp, #36	; 0x24
 8006ce8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cea:	4bb3      	ldr	r3, [pc, #716]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf2:	2b18      	cmp	r3, #24
 8006cf4:	f200 8155 	bhi.w	8006fa2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d65 	.word	0x08006d65
 8006d04:	08006fa3 	.word	0x08006fa3
 8006d08:	08006fa3 	.word	0x08006fa3
 8006d0c:	08006fa3 	.word	0x08006fa3
 8006d10:	08006fa3 	.word	0x08006fa3
 8006d14:	08006fa3 	.word	0x08006fa3
 8006d18:	08006fa3 	.word	0x08006fa3
 8006d1c:	08006fa3 	.word	0x08006fa3
 8006d20:	08006d8b 	.word	0x08006d8b
 8006d24:	08006fa3 	.word	0x08006fa3
 8006d28:	08006fa3 	.word	0x08006fa3
 8006d2c:	08006fa3 	.word	0x08006fa3
 8006d30:	08006fa3 	.word	0x08006fa3
 8006d34:	08006fa3 	.word	0x08006fa3
 8006d38:	08006fa3 	.word	0x08006fa3
 8006d3c:	08006fa3 	.word	0x08006fa3
 8006d40:	08006d91 	.word	0x08006d91
 8006d44:	08006fa3 	.word	0x08006fa3
 8006d48:	08006fa3 	.word	0x08006fa3
 8006d4c:	08006fa3 	.word	0x08006fa3
 8006d50:	08006fa3 	.word	0x08006fa3
 8006d54:	08006fa3 	.word	0x08006fa3
 8006d58:	08006fa3 	.word	0x08006fa3
 8006d5c:	08006fa3 	.word	0x08006fa3
 8006d60:	08006d97 	.word	0x08006d97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d64:	4b94      	ldr	r3, [pc, #592]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d70:	4b91      	ldr	r3, [pc, #580]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	08db      	lsrs	r3, r3, #3
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	4a90      	ldr	r2, [pc, #576]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d82:	e111      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d84:	4b8d      	ldr	r3, [pc, #564]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d86:	61bb      	str	r3, [r7, #24]
    break;
 8006d88:	e10e      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d8a:	4b8d      	ldr	r3, [pc, #564]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d8c:	61bb      	str	r3, [r7, #24]
    break;
 8006d8e:	e10b      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d90:	4b8c      	ldr	r3, [pc, #560]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d92:	61bb      	str	r3, [r7, #24]
    break;
 8006d94:	e108      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d96:	4b88      	ldr	r3, [pc, #544]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006da0:	4b85      	ldr	r3, [pc, #532]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006daa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006dac:	4b82      	ldr	r3, [pc, #520]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006db6:	4b80      	ldr	r3, [pc, #512]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80e1 	beq.w	8006f9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	f000 8083 	beq.w	8006ee8 <HAL_RCC_GetSysClockFreq+0x204>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	f200 80a1 	bhi.w	8006f2c <HAL_RCC_GetSysClockFreq+0x248>
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCC_GetSysClockFreq+0x114>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d056      	beq.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006df6:	e099      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df8:	4b6f      	ldr	r3, [pc, #444]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d02d      	beq.n	8006e60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e04:	4b6c      	ldr	r3, [pc, #432]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	08db      	lsrs	r3, r3, #3
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	4a6b      	ldr	r2, [pc, #428]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e10:	fa22 f303 	lsr.w	r3, r2, r3
 8006e14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	ee07 3a90 	vmov	s15, r3
 8006e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2e:	4b62      	ldr	r3, [pc, #392]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e5e:	e087      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006fcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e72:	4b51      	ldr	r3, [pc, #324]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea2:	e065      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b40      	ldr	r3, [pc, #256]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee6:	e043      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b2f      	ldr	r3, [pc, #188]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f2a:	e021      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f70:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	0a5b      	lsrs	r3, r3, #9
 8006f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	ee07 3a90 	vmov	s15, r3
 8006f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f94:	ee17 3a90 	vmov	r3, s15
 8006f98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f9a:	e005      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61bb      	str	r3, [r7, #24]
    break;
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006fa2:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fa4:	61bb      	str	r3, [r7, #24]
    break;
 8006fa6:	bf00      	nop
  }

  return sysclockfreq;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3724      	adds	r7, #36	; 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	03d09000 	.word	0x03d09000
 8006fc0:	003d0900 	.word	0x003d0900
 8006fc4:	017d7840 	.word	0x017d7840
 8006fc8:	46000000 	.word	0x46000000
 8006fcc:	4c742400 	.word	0x4c742400
 8006fd0:	4a742400 	.word	0x4a742400
 8006fd4:	4bbebc20 	.word	0x4bbebc20

08006fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fde:	f7ff fe81 	bl	8006ce4 <HAL_RCC_GetSysClockFreq>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b10      	ldr	r3, [pc, #64]	; (8007028 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	490f      	ldr	r1, [pc, #60]	; (800702c <HAL_RCC_GetHCLKFreq+0x54>)
 8006ff0:	5ccb      	ldrb	r3, [r1, r3]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	4a09      	ldr	r2, [pc, #36]	; (800702c <HAL_RCC_GetHCLKFreq+0x54>)
 8007006:	5cd3      	ldrb	r3, [r2, r3]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	fa22 f303 	lsr.w	r3, r2, r3
 8007012:	4a07      	ldr	r2, [pc, #28]	; (8007030 <HAL_RCC_GetHCLKFreq+0x58>)
 8007014:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007016:	4a07      	ldr	r2, [pc, #28]	; (8007034 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <HAL_RCC_GetHCLKFreq+0x58>)
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	58024400 	.word	0x58024400
 800702c:	0800c208 	.word	0x0800c208
 8007030:	20000004 	.word	0x20000004
 8007034:	20000000 	.word	0x20000000

08007038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800703c:	f7ff ffcc 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4904      	ldr	r1, [pc, #16]	; (8007060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd80      	pop	{r7, pc}
 800705c:	58024400 	.word	0x58024400
 8007060:	0800c208 	.word	0x0800c208

08007064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007068:	f7ff ffb6 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4904      	ldr	r1, [pc, #16]	; (800708c <HAL_RCC_GetPCLK2Freq+0x28>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	58024400 	.word	0x58024400
 800708c:	0800c208 	.word	0x0800c208

08007090 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	223f      	movs	r2, #63	; 0x3f
 800709e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070a0:	4b1a      	ldr	r3, [pc, #104]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0207 	and.w	r2, r3, #7
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80070ac:	4b17      	ldr	r3, [pc, #92]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80070b8:	4b14      	ldr	r3, [pc, #80]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f003 020f 	and.w	r2, r3, #15
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_RCC_GetClockConfig+0x7c>)
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <HAL_RCC_GetClockConfig+0x80>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 020f 	and.w	r2, r3, #15
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	601a      	str	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	58024400 	.word	0x58024400
 8007110:	52002000 	.word	0x52002000

08007114 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007120:	2300      	movs	r3, #0
 8007122:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d03f      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007134:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007138:	d02a      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800713a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800713e:	d824      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007144:	d018      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800714a:	d81e      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007154:	d007      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007156:	e018      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007158:	4bab      	ldr	r3, [pc, #684]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4aaa      	ldr	r2, [pc, #680]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007164:	e015      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f9cf 	bl	8008510 <RCCEx_PLL2_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007176:	e00c      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3324      	adds	r3, #36	; 0x24
 800717c:	2102      	movs	r1, #2
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fa78 	bl	8008674 <RCCEx_PLL3_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007188:	e003      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
      break;
 800718e:	e000      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007198:	4b9b      	ldr	r3, [pc, #620]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a4:	4998      	ldr	r1, [pc, #608]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	650b      	str	r3, [r1, #80]	; 0x50
 80071aa:	e001      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d03d      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d826      	bhi.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80071c4:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	080071e1 	.word	0x080071e1
 80071d0:	080071ef 	.word	0x080071ef
 80071d4:	08007201 	.word	0x08007201
 80071d8:	08007219 	.word	0x08007219
 80071dc:	08007219 	.word	0x08007219
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e0:	4b89      	ldr	r3, [pc, #548]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a88      	ldr	r2, [pc, #544]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071ec:	e015      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f98b 	bl	8008510 <RCCEx_PLL2_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071fe:	e00c      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3324      	adds	r3, #36	; 0x24
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fa34 	bl	8008674 <RCCEx_PLL3_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007210:	e003      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
      break;
 8007216:	e000      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007220:	4b79      	ldr	r3, [pc, #484]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	f023 0207 	bic.w	r2, r3, #7
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	4976      	ldr	r1, [pc, #472]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800722e:	4313      	orrs	r3, r2
 8007230:	650b      	str	r3, [r1, #80]	; 0x50
 8007232:	e001      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007240:	2b00      	cmp	r3, #0
 8007242:	d042      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724c:	d02b      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d825      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007254:	2bc0      	cmp	r3, #192	; 0xc0
 8007256:	d028      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007258:	2bc0      	cmp	r3, #192	; 0xc0
 800725a:	d821      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d016      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007260:	2b80      	cmp	r3, #128	; 0x80
 8007262:	d81d      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007268:	2b40      	cmp	r3, #64	; 0x40
 800726a:	d007      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800726c:	e018      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800726e:	4b66      	ldr	r3, [pc, #408]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	4a65      	ldr	r2, [pc, #404]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800727a:	e017      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f001 f944 	bl	8008510 <RCCEx_PLL2_Config>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800728c:	e00e      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3324      	adds	r3, #36	; 0x24
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 f9ed 	bl	8008674 <RCCEx_PLL3_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800729e:	e005      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072b2:	4b55      	ldr	r3, [pc, #340]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	4952      	ldr	r1, [pc, #328]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	650b      	str	r3, [r1, #80]	; 0x50
 80072c4:	e001      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d049      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072e0:	d030      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80072e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072e6:	d82a      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072ec:	d02c      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80072ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072f2:	d824      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072f8:	d018      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80072fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072fe:	d81e      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007308:	d007      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800730a:	e018      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730c:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	4a3d      	ldr	r2, [pc, #244]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007318:	e017      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f8f5 	bl	8008510 <RCCEx_PLL2_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800732a:	e00e      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f001 f99e 	bl	8008674 <RCCEx_PLL3_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800733c:	e005      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	75fb      	strb	r3, [r7, #23]
      break;
 8007342:	e002      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007350:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007354:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800735e:	492a      	ldr	r1, [pc, #168]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007360:	4313      	orrs	r3, r2
 8007362:	658b      	str	r3, [r1, #88]	; 0x58
 8007364:	e001      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007372:	2b00      	cmp	r3, #0
 8007374:	d04c      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800737c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007380:	d030      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007386:	d82a      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007388:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800738c:	d02c      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800738e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007392:	d824      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007398:	d018      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800739a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800739e:	d81e      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80073a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073a8:	d007      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80073aa:	e018      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ac:	4b16      	ldr	r3, [pc, #88]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	4a15      	ldr	r2, [pc, #84]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073b8:	e017      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f8a5 	bl	8008510 <RCCEx_PLL2_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073ca:	e00e      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	2100      	movs	r1, #0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f94e 	bl	8008674 <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073dc:	e005      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
      break;
 80073e2:	e002      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80073e4:	bf00      	nop
 80073e6:	e000      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80073e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10d      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073fe:	4902      	ldr	r1, [pc, #8]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007400:	4313      	orrs	r3, r2
 8007402:	658b      	str	r3, [r1, #88]	; 0x58
 8007404:	e004      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d032      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007420:	2b30      	cmp	r3, #48	; 0x30
 8007422:	d01c      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007424:	2b30      	cmp	r3, #48	; 0x30
 8007426:	d817      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007428:	2b20      	cmp	r3, #32
 800742a:	d00c      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d813      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d016      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007434:	2b10      	cmp	r3, #16
 8007436:	d10f      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007438:	4baf      	ldr	r3, [pc, #700]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4aae      	ldr	r2, [pc, #696]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800743e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007444:	e00e      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3304      	adds	r3, #4
 800744a:	2102      	movs	r1, #2
 800744c:	4618      	mov	r0, r3
 800744e:	f001 f85f 	bl	8008510 <RCCEx_PLL2_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007456:	e005      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
      break;
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800745e:	bf00      	nop
 8007460:	e000      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800746a:	4ba3      	ldr	r3, [pc, #652]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007476:	49a0      	ldr	r1, [pc, #640]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007478:	4313      	orrs	r3, r2
 800747a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800747c:	e001      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d047      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007496:	d030      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800749c:	d82a      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800749e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074a2:	d02c      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80074a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074a8:	d824      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ae:	d018      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80074b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b4:	d81e      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074be:	d007      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80074c0:	e018      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c2:	4b8d      	ldr	r3, [pc, #564]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4a8c      	ldr	r2, [pc, #560]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074ce:	e017      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 f81a 	bl	8008510 <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074e0:	e00e      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3324      	adds	r3, #36	; 0x24
 80074e6:	2100      	movs	r1, #0
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 f8c3 	bl	8008674 <RCCEx_PLL3_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074f2:	e005      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
      break;
 80074f8:	e002      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80074fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007506:	4b7c      	ldr	r3, [pc, #496]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	4979      	ldr	r1, [pc, #484]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007514:	4313      	orrs	r3, r2
 8007516:	650b      	str	r3, [r1, #80]	; 0x50
 8007518:	e001      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d049      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007532:	d02e      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007538:	d828      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800753a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800753e:	d02a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007540:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007544:	d822      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800754a:	d026      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800754c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007550:	d81c      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007556:	d010      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800755c:	d816      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01d      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007566:	d111      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	2101      	movs	r1, #1
 800756e:	4618      	mov	r0, r3
 8007570:	f000 ffce 	bl	8008510 <RCCEx_PLL2_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007578:	e012      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f001 f877 	bl	8008674 <RCCEx_PLL3_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800758a:	e009      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
      break;
 8007590:	e006      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007592:	bf00      	nop
 8007594:	e004      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007596:	bf00      	nop
 8007598:	e002      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800759e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075a6:	4b54      	ldr	r3, [pc, #336]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b2:	4951      	ldr	r1, [pc, #324]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	650b      	str	r3, [r1, #80]	; 0x50
 80075b8:	e001      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d04b      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d4:	d02e      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80075d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075da:	d828      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e0:	d02a      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e6:	d822      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075ec:	d026      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80075ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f2:	d81c      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f8:	d010      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fe:	d816      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01d      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007608:	d111      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3304      	adds	r3, #4
 800760e:	2101      	movs	r1, #1
 8007610:	4618      	mov	r0, r3
 8007612:	f000 ff7d 	bl	8008510 <RCCEx_PLL2_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800761a:	e012      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3324      	adds	r3, #36	; 0x24
 8007620:	2101      	movs	r1, #1
 8007622:	4618      	mov	r0, r3
 8007624:	f001 f826 	bl	8008674 <RCCEx_PLL3_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800762c:	e009      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	75fb      	strb	r3, [r7, #23]
      break;
 8007632:	e006      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007634:	bf00      	nop
 8007636:	e004      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007648:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800764a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007656:	4928      	ldr	r1, [pc, #160]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007658:	4313      	orrs	r3, r2
 800765a:	658b      	str	r3, [r1, #88]	; 0x58
 800765c:	e001      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02f      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007676:	d00e      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767c:	d814      	bhi.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d015      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007686:	d10f      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007688:	4b1b      	ldr	r3, [pc, #108]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800768e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007694:	e00c      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3304      	adds	r3, #4
 800769a:	2101      	movs	r1, #1
 800769c:	4618      	mov	r0, r3
 800769e:	f000 ff37 	bl	8008510 <RCCEx_PLL2_Config>
 80076a2:	4603      	mov	r3, r0
 80076a4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076a6:	e003      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
      break;
 80076ac:	e000      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80076ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c2:	490d      	ldr	r1, [pc, #52]	; (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	650b      	str	r3, [r1, #80]	; 0x50
 80076c8:	e001      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d033      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d81c      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007723 	.word	0x08007723
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	0800770b 	.word	0x0800770b
 80076f4:	08007723 	.word	0x08007723
 80076f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fc:	4bb8      	ldr	r3, [pc, #736]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4ab7      	ldr	r2, [pc, #732]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007708:	e00c      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2102      	movs	r1, #2
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fefd 	bl	8008510 <RCCEx_PLL2_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800771a:	e003      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
      break;
 8007720:	e000      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800772a:	4bad      	ldr	r3, [pc, #692]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	f023 0203 	bic.w	r2, r3, #3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	49aa      	ldr	r1, [pc, #680]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007738:	4313      	orrs	r3, r2
 800773a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800773c:	e001      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8086 	beq.w	800785c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007750:	4ba4      	ldr	r3, [pc, #656]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4aa3      	ldr	r2, [pc, #652]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800775a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800775c:	f7fb fb44 	bl	8002de8 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007762:	e009      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007764:	f7fb fb40 	bl	8002de8 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d902      	bls.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	75fb      	strb	r3, [r7, #23]
        break;
 8007776:	e005      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007778:	4b9a      	ldr	r3, [pc, #616]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0ef      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d166      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800778a:	4b95      	ldr	r3, [pc, #596]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800778c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007794:	4053      	eors	r3, r2
 8007796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779a:	2b00      	cmp	r3, #0
 800779c:	d013      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800779e:	4b90      	ldr	r3, [pc, #576]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077a8:	4b8d      	ldr	r3, [pc, #564]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ac:	4a8c      	ldr	r2, [pc, #560]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077b4:	4b8a      	ldr	r3, [pc, #552]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b8:	4a89      	ldr	r2, [pc, #548]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077c0:	4a87      	ldr	r2, [pc, #540]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d0:	d115      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d2:	f7fb fb09 	bl	8002de8 <HAL_GetTick>
 80077d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d8:	e00b      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077da:	f7fb fb05 	bl	8002de8 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d902      	bls.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	75fb      	strb	r3, [r7, #23]
            break;
 80077f0:	e005      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f2:	4b7b      	ldr	r3, [pc, #492]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0ed      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d126      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800780a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007812:	d10d      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007814:	4b72      	ldr	r3, [pc, #456]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007822:	0919      	lsrs	r1, r3, #4
 8007824:	4b70      	ldr	r3, [pc, #448]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007826:	400b      	ands	r3, r1
 8007828:	496d      	ldr	r1, [pc, #436]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800782a:	4313      	orrs	r3, r2
 800782c:	610b      	str	r3, [r1, #16]
 800782e:	e005      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007830:	4b6b      	ldr	r3, [pc, #428]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	4a6a      	ldr	r2, [pc, #424]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007836:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800783a:	6113      	str	r3, [r2, #16]
 800783c:	4b68      	ldr	r3, [pc, #416]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800783e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800784a:	4965      	ldr	r1, [pc, #404]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800784c:	4313      	orrs	r3, r2
 800784e:	670b      	str	r3, [r1, #112]	; 0x70
 8007850:	e004      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	75bb      	strb	r3, [r7, #22]
 8007856:	e001      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d07e      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800786c:	2b28      	cmp	r3, #40	; 0x28
 800786e:	d867      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007870:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	08007947 	.word	0x08007947
 800787c:	08007941 	.word	0x08007941
 8007880:	08007941 	.word	0x08007941
 8007884:	08007941 	.word	0x08007941
 8007888:	08007941 	.word	0x08007941
 800788c:	08007941 	.word	0x08007941
 8007890:	08007941 	.word	0x08007941
 8007894:	08007941 	.word	0x08007941
 8007898:	0800791d 	.word	0x0800791d
 800789c:	08007941 	.word	0x08007941
 80078a0:	08007941 	.word	0x08007941
 80078a4:	08007941 	.word	0x08007941
 80078a8:	08007941 	.word	0x08007941
 80078ac:	08007941 	.word	0x08007941
 80078b0:	08007941 	.word	0x08007941
 80078b4:	08007941 	.word	0x08007941
 80078b8:	0800792f 	.word	0x0800792f
 80078bc:	08007941 	.word	0x08007941
 80078c0:	08007941 	.word	0x08007941
 80078c4:	08007941 	.word	0x08007941
 80078c8:	08007941 	.word	0x08007941
 80078cc:	08007941 	.word	0x08007941
 80078d0:	08007941 	.word	0x08007941
 80078d4:	08007941 	.word	0x08007941
 80078d8:	08007947 	.word	0x08007947
 80078dc:	08007941 	.word	0x08007941
 80078e0:	08007941 	.word	0x08007941
 80078e4:	08007941 	.word	0x08007941
 80078e8:	08007941 	.word	0x08007941
 80078ec:	08007941 	.word	0x08007941
 80078f0:	08007941 	.word	0x08007941
 80078f4:	08007941 	.word	0x08007941
 80078f8:	08007947 	.word	0x08007947
 80078fc:	08007941 	.word	0x08007941
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
 8007908:	08007941 	.word	0x08007941
 800790c:	08007941 	.word	0x08007941
 8007910:	08007941 	.word	0x08007941
 8007914:	08007941 	.word	0x08007941
 8007918:	08007947 	.word	0x08007947
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	2101      	movs	r1, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fdf4 	bl	8008510 <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800792c:	e00c      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3324      	adds	r3, #36	; 0x24
 8007932:	2101      	movs	r1, #1
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fe9d 	bl	8008674 <RCCEx_PLL3_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800793e:	e003      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800794e:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800795a:	4921      	ldr	r1, [pc, #132]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800795c:	4313      	orrs	r3, r2
 800795e:	654b      	str	r3, [r1, #84]	; 0x54
 8007960:	e001      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d03e      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007976:	2b05      	cmp	r3, #5
 8007978:	d820      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	080079c3 	.word	0x080079c3
 8007984:	08007999 	.word	0x08007999
 8007988:	080079ab 	.word	0x080079ab
 800798c:	080079c3 	.word	0x080079c3
 8007990:	080079c3 	.word	0x080079c3
 8007994:	080079c3 	.word	0x080079c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	2101      	movs	r1, #1
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fdb6 	bl	8008510 <RCCEx_PLL2_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079a8:	e00c      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	2101      	movs	r1, #1
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fe5f 	bl	8008674 <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079ba:	e003      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e000      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80079c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d110      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	f023 0207 	bic.w	r2, r3, #7
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d6:	4902      	ldr	r1, [pc, #8]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	654b      	str	r3, [r1, #84]	; 0x54
 80079dc:	e008      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80079de:	bf00      	nop
 80079e0:	58024400 	.word	0x58024400
 80079e4:	58024800 	.word	0x58024800
 80079e8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d039      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	d820      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a4f 	.word	0x08007a4f
 8007a10:	08007a25 	.word	0x08007a25
 8007a14:	08007a37 	.word	0x08007a37
 8007a18:	08007a4f 	.word	0x08007a4f
 8007a1c:	08007a4f 	.word	0x08007a4f
 8007a20:	08007a4f 	.word	0x08007a4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fd70 	bl	8008510 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a34:	e00c      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fe19 	bl	8008674 <RCCEx_PLL3_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4c:	e000      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a56:	4bb7      	ldr	r3, [pc, #732]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	f023 0207 	bic.w	r2, r3, #7
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a64:	49b3      	ldr	r1, [pc, #716]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	658b      	str	r3, [r1, #88]	; 0x58
 8007a6a:	e001      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d04b      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a86:	d02e      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a8c:	d828      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a92:	d02a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a98:	d822      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a9e:	d026      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007aa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aa4:	d81c      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aaa:	d010      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab0:	d816      	bhi.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01d      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aba:	d111      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fd24 	bl	8008510 <RCCEx_PLL2_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007acc:	e012      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3324      	adds	r3, #36	; 0x24
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fdcd 	bl	8008674 <RCCEx_PLL3_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ade:	e009      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	e006      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e004      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007aea:	bf00      	nop
 8007aec:	e002      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007aee:	bf00      	nop
 8007af0:	e000      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10a      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007afa:	4b8e      	ldr	r3, [pc, #568]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b08:	498a      	ldr	r1, [pc, #552]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	654b      	str	r3, [r1, #84]	; 0x54
 8007b0e:	e001      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d04b      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b2a:	d02e      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007b2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b30:	d828      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b36:	d02a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3c:	d822      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b42:	d026      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b48:	d81c      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b4e:	d010      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b54:	d816      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01d      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5e:	d111      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fcd2 	bl	8008510 <RCCEx_PLL2_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b70:	e012      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3324      	adds	r3, #36	; 0x24
 8007b76:	2102      	movs	r1, #2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fd7b 	bl	8008674 <RCCEx_PLL3_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b82:	e009      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]
      break;
 8007b88:	e006      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b8a:	bf00      	nop
 8007b8c:	e004      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b8e:	bf00      	nop
 8007b90:	e002      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b92:	bf00      	nop
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b9e:	4b65      	ldr	r3, [pc, #404]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bac:	4961      	ldr	r1, [pc, #388]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8007bb2:	e001      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d04b      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bce:	d02e      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007bd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bd4:	d828      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bda:	d02a      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be0:	d822      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007be2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007be6:	d026      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007be8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bec:	d81c      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bf2:	d010      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bf8:	d816      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01d      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c02:	d111      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3304      	adds	r3, #4
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fc80 	bl	8008510 <RCCEx_PLL2_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c14:	e012      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3324      	adds	r3, #36	; 0x24
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fd29 	bl	8008674 <RCCEx_PLL3_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c26:	e009      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2c:	e006      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e004      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c32:	bf00      	nop
 8007c34:	e002      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c42:	4b3c      	ldr	r3, [pc, #240]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c50:	4938      	ldr	r1, [pc, #224]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	658b      	str	r3, [r1, #88]	; 0x58
 8007c56:	e001      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01a      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c72:	d10a      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3324      	adds	r3, #36	; 0x24
 8007c78:	2102      	movs	r1, #2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 fcfa 	bl	8008674 <RCCEx_PLL3_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c8a:	4b2a      	ldr	r3, [pc, #168]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c98:	4926      	ldr	r1, [pc, #152]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01a      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb4:	d10a      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3324      	adds	r3, #36	; 0x24
 8007cba:	2102      	movs	r1, #2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fcd9 	bl	8008674 <RCCEx_PLL3_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ccc:	4b19      	ldr	r3, [pc, #100]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cda:	4916      	ldr	r1, [pc, #88]	; (8007d34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d036      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf6:	d01f      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cfc:	d817      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d06:	d009      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007d08:	e011      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fbfd 	bl	8008510 <RCCEx_PLL2_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d1a:	e00e      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	2102      	movs	r1, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fca6 	bl	8008674 <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d2c:	e005      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
      break;
 8007d32:	e002      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007d34:	58024400 	.word	0x58024400
      break;
 8007d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d40:	4b93      	ldr	r3, [pc, #588]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d4e:	4990      	ldr	r1, [pc, #576]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	658b      	str	r3, [r1, #88]	; 0x58
 8007d54:	e001      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d033      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d70:	d01c      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007d72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d76:	d816      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d7c:	d003      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d82:	d007      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007d84:	e00f      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d86:	4b82      	ldr	r3, [pc, #520]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	4a81      	ldr	r2, [pc, #516]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d92:	e00c      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3324      	adds	r3, #36	; 0x24
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fc6a 	bl	8008674 <RCCEx_PLL3_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007da4:	e003      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	75fb      	strb	r3, [r7, #23]
      break;
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007db4:	4b76      	ldr	r3, [pc, #472]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc2:	4973      	ldr	r1, [pc, #460]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	654b      	str	r3, [r1, #84]	; 0x54
 8007dc8:	e001      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d029      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de6:	d007      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007de8:	e00f      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dea:	4b69      	ldr	r3, [pc, #420]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	4a68      	ldr	r2, [pc, #416]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007df6:	e00b      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fb86 	bl	8008510 <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e08:	e002      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e16:	4b5e      	ldr	r3, [pc, #376]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	495b      	ldr	r1, [pc, #364]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e28:	e001      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3324      	adds	r3, #36	; 0x24
 8007e3e:	2102      	movs	r1, #2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fc17 	bl	8008674 <RCCEx_PLL3_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d030      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e64:	d017      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e6a:	d811      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e70:	d013      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e76:	d80b      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d010      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e80:	d106      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e82:	4b43      	ldr	r3, [pc, #268]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	4a42      	ldr	r2, [pc, #264]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e8e:	e007      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
      break;
 8007e94:	e004      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ea6:	4b3a      	ldr	r3, [pc, #232]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb2:	4937      	ldr	r1, [pc, #220]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	654b      	str	r3, [r1, #84]	; 0x54
 8007eb8:	e001      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007eca:	4b31      	ldr	r3, [pc, #196]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ece:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	492e      	ldr	r1, [pc, #184]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ee8:	4b29      	ldr	r3, [pc, #164]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ef6:	4926      	ldr	r1, [pc, #152]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f08:	4b21      	ldr	r3, [pc, #132]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	491e      	ldr	r1, [pc, #120]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00d      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f26:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f30:	6113      	str	r3, [r2, #16]
 8007f32:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f34:	691a      	ldr	r2, [r3, #16]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f3c:	4914      	ldr	r1, [pc, #80]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da08      	bge.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f4a:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f56:	490e      	ldr	r1, [pc, #56]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f68:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	4906      	ldr	r1, [pc, #24]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007f7c:	7dbb      	ldrb	r3, [r7, #22]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e000      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	58024400 	.word	0x58024400

08007f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f98:	f7ff f81e 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	4904      	ldr	r1, [pc, #16]	; (8007fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007faa:	5ccb      	ldrb	r3, [r1, r3]
 8007fac:	f003 031f 	and.w	r3, r3, #31
 8007fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	0800c208 	.word	0x0800c208

08007fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b089      	sub	sp, #36	; 0x24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fc8:	4ba1      	ldr	r3, [pc, #644]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fd2:	4b9f      	ldr	r3, [pc, #636]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	0b1b      	lsrs	r3, r3, #12
 8007fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fde:	4b9c      	ldr	r3, [pc, #624]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	091b      	lsrs	r3, r3, #4
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007fea:	4b99      	ldr	r3, [pc, #612]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	08db      	lsrs	r3, r3, #3
 8007ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8111 	beq.w	8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b02      	cmp	r3, #2
 8008012:	f000 8083 	beq.w	800811c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b02      	cmp	r3, #2
 800801a:	f200 80a1 	bhi.w	8008160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d056      	beq.n	80080d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800802a:	e099      	b.n	8008160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800802c:	4b88      	ldr	r3, [pc, #544]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d02d      	beq.n	8008094 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008038:	4b85      	ldr	r3, [pc, #532]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	08db      	lsrs	r3, r3, #3
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	4a84      	ldr	r2, [pc, #528]	; (8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
 8008048:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	ee07 3a90 	vmov	s15, r3
 8008050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008062:	4b7b      	ldr	r3, [pc, #492]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008072:	ed97 6a03 	vldr	s12, [r7, #12]
 8008076:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800807a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008092:	e087      	b.n	80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a6:	4b6a      	ldr	r3, [pc, #424]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080d6:	e065      	b.n	80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ea:	4b59      	ldr	r3, [pc, #356]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008116:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811a:	e043      	b.n	80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008126:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800812a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812e:	4b48      	ldr	r3, [pc, #288]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008142:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800815e:	e021      	b.n	80081a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	ee07 3a90 	vmov	s15, r3
 8008166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800816e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008172:	4b37      	ldr	r3, [pc, #220]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008182:	ed97 6a03 	vldr	s12, [r7, #12]
 8008186:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800818a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80081a4:	4b2a      	ldr	r3, [pc, #168]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	0a5b      	lsrs	r3, r3, #9
 80081aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081be:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ca:	ee17 2a90 	vmov	r2, s15
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081d2:	4b1f      	ldr	r3, [pc, #124]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	0c1b      	lsrs	r3, r3, #16
 80081d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f8:	ee17 2a90 	vmov	r2, s15
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008200:	4b13      	ldr	r3, [pc, #76]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	0e1b      	lsrs	r3, r3, #24
 8008206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800821a:	edd7 6a07 	vldr	s13, [r7, #28]
 800821e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008226:	ee17 2a90 	vmov	r2, s15
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800822e:	e008      	b.n	8008242 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	609a      	str	r2, [r3, #8]
}
 8008242:	bf00      	nop
 8008244:	3724      	adds	r7, #36	; 0x24
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	58024400 	.word	0x58024400
 8008254:	03d09000 	.word	0x03d09000
 8008258:	46000000 	.word	0x46000000
 800825c:	4c742400 	.word	0x4c742400
 8008260:	4a742400 	.word	0x4a742400
 8008264:	4bbebc20 	.word	0x4bbebc20

08008268 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008268:	b480      	push	{r7}
 800826a:	b089      	sub	sp, #36	; 0x24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008270:	4ba1      	ldr	r3, [pc, #644]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800827a:	4b9f      	ldr	r3, [pc, #636]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827e:	0d1b      	lsrs	r3, r3, #20
 8008280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008284:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008286:	4b9c      	ldr	r3, [pc, #624]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008292:	4b99      	ldr	r3, [pc, #612]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008296:	08db      	lsrs	r3, r3, #3
 8008298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	fb02 f303 	mul.w	r3, r2, r3
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8111 	beq.w	80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	f000 8083 	beq.w	80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	f200 80a1 	bhi.w	8008408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d056      	beq.n	8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082d2:	e099      	b.n	8008408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d4:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d02d      	beq.n	800833c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082e0:	4b85      	ldr	r3, [pc, #532]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	08db      	lsrs	r3, r3, #3
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	4a84      	ldr	r2, [pc, #528]	; (80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082ec:	fa22 f303 	lsr.w	r3, r2, r3
 80082f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830a:	4b7b      	ldr	r3, [pc, #492]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831a:	ed97 6a03 	vldr	s12, [r7, #12]
 800831e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800833a:	e087      	b.n	800844c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800834a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834e:	4b6a      	ldr	r3, [pc, #424]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008362:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800837e:	e065      	b.n	800844c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800838e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008392:	4b59      	ldr	r3, [pc, #356]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c2:	e043      	b.n	800844c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800850c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d6:	4b48      	ldr	r3, [pc, #288]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008406:	e021      	b.n	800844c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841a:	4b37      	ldr	r3, [pc, #220]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842a:	ed97 6a03 	vldr	s12, [r7, #12]
 800842e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800844a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800844c:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	0a5b      	lsrs	r3, r3, #9
 8008452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008466:	edd7 6a07 	vldr	s13, [r7, #28]
 800846a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800846e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008472:	ee17 2a90 	vmov	r2, s15
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800847a:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008494:	edd7 6a07 	vldr	s13, [r7, #28]
 8008498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a0:	ee17 2a90 	vmov	r2, s15
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80084a8:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	0e1b      	lsrs	r3, r3, #24
 80084ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ce:	ee17 2a90 	vmov	r2, s15
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084d6:	e008      	b.n	80084ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	609a      	str	r2, [r3, #8]
}
 80084ea:	bf00      	nop
 80084ec:	3724      	adds	r7, #36	; 0x24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	58024400 	.word	0x58024400
 80084fc:	03d09000 	.word	0x03d09000
 8008500:	46000000 	.word	0x46000000
 8008504:	4c742400 	.word	0x4c742400
 8008508:	4a742400 	.word	0x4a742400
 800850c:	4bbebc20 	.word	0x4bbebc20

08008510 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800851e:	4b53      	ldr	r3, [pc, #332]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	2b03      	cmp	r3, #3
 8008528:	d101      	bne.n	800852e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e099      	b.n	8008662 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800852e:	4b4f      	ldr	r3, [pc, #316]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a4e      	ldr	r2, [pc, #312]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008534:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800853a:	f7fa fc55 	bl	8002de8 <HAL_GetTick>
 800853e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008540:	e008      	b.n	8008554 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008542:	f7fa fc51 	bl	8002de8 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e086      	b.n	8008662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008554:	4b45      	ldr	r3, [pc, #276]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f0      	bne.n	8008542 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008560:	4b42      	ldr	r3, [pc, #264]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	031b      	lsls	r3, r3, #12
 800856e:	493f      	ldr	r1, [pc, #252]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008570:	4313      	orrs	r3, r2
 8008572:	628b      	str	r3, [r1, #40]	; 0x28
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	3b01      	subs	r3, #1
 800857a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	3b01      	subs	r3, #1
 8008584:	025b      	lsls	r3, r3, #9
 8008586:	b29b      	uxth	r3, r3
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	3b01      	subs	r3, #1
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	3b01      	subs	r3, #1
 800859e:	061b      	lsls	r3, r3, #24
 80085a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085a4:	4931      	ldr	r1, [pc, #196]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80085aa:	4b30      	ldr	r3, [pc, #192]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	492d      	ldr	r1, [pc, #180]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085bc:	4b2b      	ldr	r3, [pc, #172]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	f023 0220 	bic.w	r2, r3, #32
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	4928      	ldr	r1, [pc, #160]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085ce:	4b27      	ldr	r3, [pc, #156]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a26      	ldr	r2, [pc, #152]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085d4:	f023 0310 	bic.w	r3, r3, #16
 80085d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085da:	4b24      	ldr	r3, [pc, #144]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085de:	4b24      	ldr	r3, [pc, #144]	; (8008670 <RCCEx_PLL2_Config+0x160>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	69d2      	ldr	r2, [r2, #28]
 80085e6:	00d2      	lsls	r2, r2, #3
 80085e8:	4920      	ldr	r1, [pc, #128]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085ee:	4b1f      	ldr	r3, [pc, #124]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	4a1e      	ldr	r2, [pc, #120]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 80085f4:	f043 0310 	orr.w	r3, r3, #16
 80085f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d106      	bne.n	800860e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008600:	4b1a      	ldr	r3, [pc, #104]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4a19      	ldr	r2, [pc, #100]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800860a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800860c:	e00f      	b.n	800862e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d106      	bne.n	8008622 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008614:	4b15      	ldr	r3, [pc, #84]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	4a14      	ldr	r2, [pc, #80]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 800861a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800861e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008620:	e005      	b.n	800862e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	4a11      	ldr	r2, [pc, #68]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800862c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800862e:	4b0f      	ldr	r3, [pc, #60]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a0e      	ldr	r2, [pc, #56]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800863a:	f7fa fbd5 	bl	8002de8 <HAL_GetTick>
 800863e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008640:	e008      	b.n	8008654 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008642:	f7fa fbd1 	bl	8002de8 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e006      	b.n	8008662 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <RCCEx_PLL2_Config+0x15c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0f0      	beq.n	8008642 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	58024400 	.word	0x58024400
 8008670:	ffff0007 	.word	0xffff0007

08008674 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008682:	4b53      	ldr	r3, [pc, #332]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	2b03      	cmp	r3, #3
 800868c:	d101      	bne.n	8008692 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e099      	b.n	80087c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008692:	4b4f      	ldr	r3, [pc, #316]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a4e      	ldr	r2, [pc, #312]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800869c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800869e:	f7fa fba3 	bl	8002de8 <HAL_GetTick>
 80086a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086a4:	e008      	b.n	80086b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086a6:	f7fa fb9f 	bl	8002de8 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d901      	bls.n	80086b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e086      	b.n	80087c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086b8:	4b45      	ldr	r3, [pc, #276]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1f0      	bne.n	80086a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086c4:	4b42      	ldr	r3, [pc, #264]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	051b      	lsls	r3, r3, #20
 80086d2:	493f      	ldr	r1, [pc, #252]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	628b      	str	r3, [r1, #40]	; 0x28
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	3b01      	subs	r3, #1
 80086de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	025b      	lsls	r3, r3, #9
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	3b01      	subs	r3, #1
 8008702:	061b      	lsls	r3, r3, #24
 8008704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008708:	4931      	ldr	r1, [pc, #196]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800870e:	4b30      	ldr	r3, [pc, #192]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	492d      	ldr	r1, [pc, #180]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800871c:	4313      	orrs	r3, r2
 800871e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008720:	4b2b      	ldr	r3, [pc, #172]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	4928      	ldr	r1, [pc, #160]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008732:	4b27      	ldr	r3, [pc, #156]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800873c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800873e:	4b24      	ldr	r3, [pc, #144]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008742:	4b24      	ldr	r3, [pc, #144]	; (80087d4 <RCCEx_PLL3_Config+0x160>)
 8008744:	4013      	ands	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	69d2      	ldr	r2, [r2, #28]
 800874a:	00d2      	lsls	r2, r2, #3
 800874c:	4920      	ldr	r1, [pc, #128]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800874e:	4313      	orrs	r3, r2
 8008750:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008752:	4b1f      	ldr	r3, [pc, #124]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800875c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008764:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	4a19      	ldr	r2, [pc, #100]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800876a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800876e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008770:	e00f      	b.n	8008792 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d106      	bne.n	8008786 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	4a14      	ldr	r2, [pc, #80]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800877e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008784:	e005      	b.n	8008792 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008786:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	4a11      	ldr	r2, [pc, #68]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 800878c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008790:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008792:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a0e      	ldr	r2, [pc, #56]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 8008798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800879e:	f7fa fb23 	bl	8002de8 <HAL_GetTick>
 80087a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087a4:	e008      	b.n	80087b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087a6:	f7fa fb1f 	bl	8002de8 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e006      	b.n	80087c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <RCCEx_PLL3_Config+0x15c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f0      	beq.n	80087a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
 80087d4:	ffff0007 	.word	0xffff0007

080087d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e049      	b.n	800887e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f841 	bl	8008886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3304      	adds	r3, #4
 8008814:	4619      	mov	r1, r3
 8008816:	4610      	mov	r0, r2
 8008818:	f000 f9f8 	bl	8008c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d001      	beq.n	80088b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e04f      	b.n	8008954 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a23      	ldr	r2, [pc, #140]	; (8008960 <HAL_TIM_Base_Start_IT+0xc4>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01d      	beq.n	8008912 <HAL_TIM_Base_Start_IT+0x76>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088de:	d018      	beq.n	8008912 <HAL_TIM_Base_Start_IT+0x76>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1f      	ldr	r2, [pc, #124]	; (8008964 <HAL_TIM_Base_Start_IT+0xc8>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_TIM_Base_Start_IT+0x76>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a1e      	ldr	r2, [pc, #120]	; (8008968 <HAL_TIM_Base_Start_IT+0xcc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_TIM_Base_Start_IT+0x76>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1c      	ldr	r2, [pc, #112]	; (800896c <HAL_TIM_Base_Start_IT+0xd0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_TIM_Base_Start_IT+0x76>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <HAL_TIM_Base_Start_IT+0xd4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIM_Base_Start_IT+0x76>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a19      	ldr	r2, [pc, #100]	; (8008974 <HAL_TIM_Base_Start_IT+0xd8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d115      	bne.n	800893e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689a      	ldr	r2, [r3, #8]
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <HAL_TIM_Base_Start_IT+0xdc>)
 800891a:	4013      	ands	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b06      	cmp	r3, #6
 8008922:	d015      	beq.n	8008950 <HAL_TIM_Base_Start_IT+0xb4>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800892a:	d011      	beq.n	8008950 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0201 	orr.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893c:	e008      	b.n	8008950 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 0201 	orr.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e000      	b.n	8008952 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008950:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	40010000 	.word	0x40010000
 8008964:	40000400 	.word	0x40000400
 8008968:	40000800 	.word	0x40000800
 800896c:	40000c00 	.word	0x40000c00
 8008970:	40010400 	.word	0x40010400
 8008974:	40001800 	.word	0x40001800
 8008978:	00010007 	.word	0x00010007

0800897c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b02      	cmp	r3, #2
 8008990:	d122      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b02      	cmp	r3, #2
 800899e:	d11b      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0202 	mvn.w	r2, #2
 80089a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f905 	bl	8008bce <HAL_TIM_IC_CaptureCallback>
 80089c4:	e005      	b.n	80089d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f8f7 	bl	8008bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f908 	bl	8008be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0304 	and.w	r3, r3, #4
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0204 	mvn.w	r2, #4
 80089fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f8db 	bl	8008bce <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8cd 	bl	8008bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f8de 	bl	8008be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b08      	cmp	r3, #8
 8008a38:	d122      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d11b      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0208 	mvn.w	r2, #8
 8008a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2204      	movs	r2, #4
 8008a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8b1 	bl	8008bce <HAL_TIM_IC_CaptureCallback>
 8008a6c:	e005      	b.n	8008a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8a3 	bl	8008bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8b4 	bl	8008be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b10      	cmp	r3, #16
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0210 	mvn.w	r2, #16
 8008aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f887 	bl	8008bce <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f879 	bl	8008bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f88a 	bl	8008be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d10e      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d107      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0201 	mvn.w	r2, #1
 8008af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7f9 f8e4 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0a:	2b80      	cmp	r3, #128	; 0x80
 8008b0c:	d10e      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b18:	2b80      	cmp	r3, #128	; 0x80
 8008b1a:	d107      	bne.n	8008b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f914 	bl	8008d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3a:	d10e      	bne.n	8008b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d107      	bne.n	8008b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f907 	bl	8008d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b64:	2b40      	cmp	r3, #64	; 0x40
 8008b66:	d10e      	bne.n	8008b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	d107      	bne.n	8008b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f838 	bl	8008bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d10e      	bne.n	8008bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d107      	bne.n	8008bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f06f 0220 	mvn.w	r2, #32
 8008baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f8c7 	bl	8008d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
	...

08008c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a40      	ldr	r2, [pc, #256]	; (8008d20 <TIM_Base_SetConfig+0x114>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d013      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2a:	d00f      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a3d      	ldr	r2, [pc, #244]	; (8008d24 <TIM_Base_SetConfig+0x118>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a3c      	ldr	r2, [pc, #240]	; (8008d28 <TIM_Base_SetConfig+0x11c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d007      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a3b      	ldr	r2, [pc, #236]	; (8008d2c <TIM_Base_SetConfig+0x120>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a3a      	ldr	r2, [pc, #232]	; (8008d30 <TIM_Base_SetConfig+0x124>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d108      	bne.n	8008c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a2f      	ldr	r2, [pc, #188]	; (8008d20 <TIM_Base_SetConfig+0x114>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6c:	d01b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a2c      	ldr	r2, [pc, #176]	; (8008d24 <TIM_Base_SetConfig+0x118>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d017      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2b      	ldr	r2, [pc, #172]	; (8008d28 <TIM_Base_SetConfig+0x11c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a2a      	ldr	r2, [pc, #168]	; (8008d2c <TIM_Base_SetConfig+0x120>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a29      	ldr	r2, [pc, #164]	; (8008d30 <TIM_Base_SetConfig+0x124>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a28      	ldr	r2, [pc, #160]	; (8008d34 <TIM_Base_SetConfig+0x128>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a27      	ldr	r2, [pc, #156]	; (8008d38 <TIM_Base_SetConfig+0x12c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a26      	ldr	r2, [pc, #152]	; (8008d3c <TIM_Base_SetConfig+0x130>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d108      	bne.n	8008cb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a10      	ldr	r2, [pc, #64]	; (8008d20 <TIM_Base_SetConfig+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00f      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a12      	ldr	r2, [pc, #72]	; (8008d30 <TIM_Base_SetConfig+0x124>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00b      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <TIM_Base_SetConfig+0x128>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d007      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a10      	ldr	r2, [pc, #64]	; (8008d38 <TIM_Base_SetConfig+0x12c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a0f      	ldr	r2, [pc, #60]	; (8008d3c <TIM_Base_SetConfig+0x130>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d103      	bne.n	8008d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	615a      	str	r2, [r3, #20]
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40000400 	.word	0x40000400
 8008d28:	40000800 	.word	0x40000800
 8008d2c:	40000c00 	.word	0x40000c00
 8008d30:	40010400 	.word	0x40010400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40014400 	.word	0x40014400
 8008d3c:	40014800 	.word	0x40014800

08008d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e042      	b.n	8008e14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7f8 ffc7 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2224      	movs	r2, #36	; 0x24
 8008daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fc5a 	bl	8009678 <UART_SetConfig>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e022      	b.n	8008e14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 f9ae 	bl	800a138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 fa35 	bl	800a27c <UART_CheckIdleState>
 8008e12:	4603      	mov	r3, r0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e30:	2b20      	cmp	r3, #32
 8008e32:	d168      	bne.n	8008f06 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <HAL_UART_Transmit_DMA+0x24>
 8008e3a:	88fb      	ldrh	r3, [r7, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e061      	b.n	8008f08 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <HAL_UART_Transmit_DMA+0x36>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e05a      	b.n	8008f08 <HAL_UART_Transmit_DMA+0xec>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	88fa      	ldrh	r2, [r7, #6]
 8008e64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2221      	movs	r2, #33	; 0x21
 8008e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d02c      	beq.n	8008ee2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8c:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <HAL_UART_Transmit_DMA+0xf4>)
 8008e8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e94:	4a1f      	ldr	r2, [pc, #124]	; (8008f14 <HAL_UART_Transmit_DMA+0xf8>)
 8008e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e9c:	4a1e      	ldr	r2, [pc, #120]	; (8008f18 <HAL_UART_Transmit_DMA+0xfc>)
 8008e9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3328      	adds	r3, #40	; 0x28
 8008eb8:	461a      	mov	r2, r3
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	f7fa fbe8 	bl	8003690 <HAL_DMA_Start_IT>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00d      	beq.n	8008ee2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2210      	movs	r2, #16
 8008eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e012      	b.n	8008f08 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2240      	movs	r2, #64	; 0x40
 8008ee8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f00:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e000      	b.n	8008f08 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008f06:	2302      	movs	r3, #2
  }
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	0800a591 	.word	0x0800a591
 8008f14:	0800a5e1 	.word	0x0800a5e1
 8008f18:	0800a6cb 	.word	0x0800a6cb

08008f1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d131      	bne.n	8008f98 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <HAL_UART_Receive_DMA+0x24>
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e02a      	b.n	8008f9a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <HAL_UART_Receive_DMA+0x36>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e023      	b.n	8008f9a <HAL_UART_Receive_DMA+0x7e>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0f      	ldr	r2, [pc, #60]	; (8008fa4 <HAL_UART_Receive_DMA+0x88>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00e      	beq.n	8008f88 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008f86:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f001 fa40 	bl	800a414 <UART_Start_Receive_DMA>
 8008f94:	4603      	mov	r3, r0
 8008f96:	e000      	b.n	8008f9a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008f98:	2302      	movs	r3, #2
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	58000c00 	.word	0x58000c00

08008fa8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb6:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b80      	cmp	r3, #128	; 0x80
 8008fcc:	d127      	bne.n	800901e <HAL_UART_DMAStop+0x76>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b21      	cmp	r3, #33	; 0x21
 8008fd2:	d124      	bne.n	800901e <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fe2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d015      	beq.n	8009018 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fa fdb7 	bl	8003b64 <HAL_DMA_Abort>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00d      	beq.n	8009018 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009000:	4618      	mov	r0, r3
 8009002:	f7fc fa3b 	bl	800547c <HAL_DMA_GetError>
 8009006:	4603      	mov	r3, r0
 8009008:	2b20      	cmp	r3, #32
 800900a:	d105      	bne.n	8009018 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2210      	movs	r2, #16
 8009010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e032      	b.n	800907e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 fa69 	bl	800a4f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009028:	2b40      	cmp	r3, #64	; 0x40
 800902a:	d127      	bne.n	800907c <HAL_UART_DMAStop+0xd4>
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2b22      	cmp	r3, #34	; 0x22
 8009030:	d124      	bne.n	800907c <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009040:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d015      	beq.n	8009076 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800904e:	4618      	mov	r0, r3
 8009050:	f7fa fd88 	bl	8003b64 <HAL_DMA_Abort>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800905e:	4618      	mov	r0, r3
 8009060:	f7fc fa0c 	bl	800547c <HAL_DMA_GetError>
 8009064:	4603      	mov	r3, r0
 8009066:	2b20      	cmp	r3, #32
 8009068:	d105      	bne.n	8009076 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2210      	movs	r2, #16
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e003      	b.n	800907e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fa58 	bl	800a52c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090a8:	69fa      	ldr	r2, [r7, #28]
 80090aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80090ae:	4013      	ands	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d118      	bne.n	80090ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d009      	beq.n	80090ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 8282 	beq.w	80095e4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
      }
      return;
 80090e8:	e27c      	b.n	80095e4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80ef 	beq.w	80092d0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4b73      	ldr	r3, [pc, #460]	; (80092c4 <HAL_UART_IRQHandler+0x23c>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d105      	bne.n	8009108 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	4b72      	ldr	r3, [pc, #456]	; (80092c8 <HAL_UART_IRQHandler+0x240>)
 8009100:	4013      	ands	r3, r2
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80e4 	beq.w	80092d0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d010      	beq.n	8009134 <HAL_UART_IRQHandler+0xac>
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2201      	movs	r2, #1
 8009122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912a:	f043 0201 	orr.w	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d010      	beq.n	8009160 <HAL_UART_IRQHandler+0xd8>
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2202      	movs	r2, #2
 800914e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009156:	f043 0204 	orr.w	r2, r3, #4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d010      	beq.n	800918c <HAL_UART_IRQHandler+0x104>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2204      	movs	r2, #4
 800917a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009182:	f043 0202 	orr.w	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d015      	beq.n	80091c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4b48      	ldr	r3, [pc, #288]	; (80092c4 <HAL_UART_IRQHandler+0x23c>)
 80091a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00b      	beq.n	80091c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2208      	movs	r2, #8
 80091b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b8:	f043 0208 	orr.w	r2, r3, #8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d011      	beq.n	80091f0 <HAL_UART_IRQHandler+0x168>
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00c      	beq.n	80091f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e6:	f043 0220 	orr.w	r2, r3, #32
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 81f6 	beq.w	80095e8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d011      	beq.n	800922a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d104      	bne.n	800921a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009230:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	d004      	beq.n	800924a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009246:	2b00      	cmp	r3, #0
 8009248:	d031      	beq.n	80092ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 f96e 	bl	800a52c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925a:	2b40      	cmp	r3, #64	; 0x40
 800925c:	d123      	bne.n	80092a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800926c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d013      	beq.n	800929e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927a:	4a14      	ldr	r2, [pc, #80]	; (80092cc <HAL_UART_IRQHandler+0x244>)
 800927c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009282:	4618      	mov	r0, r3
 8009284:	f7fa ff8c 	bl	80041a0 <HAL_DMA_Abort_IT>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d017      	beq.n	80092be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	e00f      	b.n	80092be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9d4 	bl	800964c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a4:	e00b      	b.n	80092be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f9d0 	bl	800964c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ac:	e007      	b.n	80092be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f9cc 	bl	800964c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80092bc:	e194      	b.n	80095e8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092be:	bf00      	nop
    return;
 80092c0:	e192      	b.n	80095e8 <HAL_UART_IRQHandler+0x560>
 80092c2:	bf00      	nop
 80092c4:	10000001 	.word	0x10000001
 80092c8:	04000120 	.word	0x04000120
 80092cc:	0800a74b 	.word	0x0800a74b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	f040 810f 	bne.w	80094f8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8109 	beq.w	80094f8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8103 	beq.w	80094f8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2210      	movs	r2, #16
 80092f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b40      	cmp	r3, #64	; 0x40
 8009306:	f040 80bb 	bne.w	8009480 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a96      	ldr	r2, [pc, #600]	; (800956c <HAL_UART_IRQHandler+0x4e4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d059      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a94      	ldr	r2, [pc, #592]	; (8009570 <HAL_UART_IRQHandler+0x4e8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d053      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a92      	ldr	r2, [pc, #584]	; (8009574 <HAL_UART_IRQHandler+0x4ec>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d04d      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a90      	ldr	r2, [pc, #576]	; (8009578 <HAL_UART_IRQHandler+0x4f0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d047      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a8e      	ldr	r2, [pc, #568]	; (800957c <HAL_UART_IRQHandler+0x4f4>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d041      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a8c      	ldr	r2, [pc, #560]	; (8009580 <HAL_UART_IRQHandler+0x4f8>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d03b      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a8a      	ldr	r2, [pc, #552]	; (8009584 <HAL_UART_IRQHandler+0x4fc>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d035      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a88      	ldr	r2, [pc, #544]	; (8009588 <HAL_UART_IRQHandler+0x500>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d02f      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a86      	ldr	r2, [pc, #536]	; (800958c <HAL_UART_IRQHandler+0x504>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d029      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a84      	ldr	r2, [pc, #528]	; (8009590 <HAL_UART_IRQHandler+0x508>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d023      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a82      	ldr	r2, [pc, #520]	; (8009594 <HAL_UART_IRQHandler+0x50c>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d01d      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a80      	ldr	r2, [pc, #512]	; (8009598 <HAL_UART_IRQHandler+0x510>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d017      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a7e      	ldr	r2, [pc, #504]	; (800959c <HAL_UART_IRQHandler+0x514>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d011      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a7c      	ldr	r2, [pc, #496]	; (80095a0 <HAL_UART_IRQHandler+0x518>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00b      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a7a      	ldr	r2, [pc, #488]	; (80095a4 <HAL_UART_IRQHandler+0x51c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d005      	beq.n	80093ca <HAL_UART_IRQHandler+0x342>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a78      	ldr	r2, [pc, #480]	; (80095a8 <HAL_UART_IRQHandler+0x520>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d105      	bne.n	80093d6 <HAL_UART_IRQHandler+0x34e>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	e004      	b.n	80093e0 <HAL_UART_IRQHandler+0x358>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80093e2:	893b      	ldrh	r3, [r7, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8101 	beq.w	80095ec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093f0:	893a      	ldrh	r2, [r7, #8]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f080 80fa 	bcs.w	80095ec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	893a      	ldrh	r2, [r7, #8]
 80093fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940a:	d02b      	beq.n	8009464 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800941a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800943a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0210 	bic.w	r2, r2, #16
 8009458:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945e:	4618      	mov	r0, r3
 8009460:	f7fa fb80 	bl	8003b64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009470:	b29b      	uxth	r3, r3
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	b29b      	uxth	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8f1 	bl	8009660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800947e:	e0b5      	b.n	80095ec <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800948c:	b29b      	uxth	r3, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 80a8 	beq.w	80095f0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80094a0:	897b      	ldrh	r3, [r7, #10]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 80a4 	beq.w	80095f0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6899      	ldr	r1, [r3, #8]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <HAL_UART_IRQHandler+0x524>)
 80094c4:	400b      	ands	r3, r1
 80094c6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0210 	bic.w	r2, r2, #16
 80094ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094ec:	897b      	ldrh	r3, [r7, #10]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8b5 	bl	8009660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094f6:	e07b      	b.n	80095f0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <HAL_UART_IRQHandler+0x496>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d008      	beq.n	800951e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 f947 	bl	800a7aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800951c:	e06b      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009524:	2b00      	cmp	r3, #0
 8009526:	d012      	beq.n	800954e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952e:	2b00      	cmp	r3, #0
 8009530:	d104      	bne.n	800953c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d008      	beq.n	800954e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009540:	2b00      	cmp	r3, #0
 8009542:	d057      	beq.n	80095f4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
    }
    return;
 800954c:	e052      	b.n	80095f4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02b      	beq.n	80095b0 <HAL_UART_IRQHandler+0x528>
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	d026      	beq.n	80095b0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f907 	bl	800a776 <UART_EndTransmit_IT>
    return;
 8009568:	e045      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
 800956a:	bf00      	nop
 800956c:	40020010 	.word	0x40020010
 8009570:	40020028 	.word	0x40020028
 8009574:	40020040 	.word	0x40020040
 8009578:	40020058 	.word	0x40020058
 800957c:	40020070 	.word	0x40020070
 8009580:	40020088 	.word	0x40020088
 8009584:	400200a0 	.word	0x400200a0
 8009588:	400200b8 	.word	0x400200b8
 800958c:	40020410 	.word	0x40020410
 8009590:	40020428 	.word	0x40020428
 8009594:	40020440 	.word	0x40020440
 8009598:	40020458 	.word	0x40020458
 800959c:	40020470 	.word	0x40020470
 80095a0:	40020488 	.word	0x40020488
 80095a4:	400204a0 	.word	0x400204a0
 80095a8:	400204b8 	.word	0x400204b8
 80095ac:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d008      	beq.n	80095cc <HAL_UART_IRQHandler+0x544>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f904 	bl	800a7d2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095ca:	e014      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00f      	beq.n	80095f6 <HAL_UART_IRQHandler+0x56e>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0c      	bge.n	80095f6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 f8ee 	bl	800a7be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095e2:	e008      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80095e4:	bf00      	nop
 80095e6:	e006      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80095e8:	bf00      	nop
 80095ea:	e004      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80095ec:	bf00      	nop
 80095ee:	e002      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
      return;
 80095f0:	bf00      	nop
 80095f2:	e000      	b.n	80095f6 <HAL_UART_IRQHandler+0x56e>
    return;
 80095f4:	bf00      	nop
  }
}
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009678:	b5b0      	push	{r4, r5, r7, lr}
 800967a:	b08e      	sub	sp, #56	; 0x38
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	4313      	orrs	r3, r2
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	4bbf      	ldr	r3, [pc, #764]	; (80099a4 <UART_SetConfig+0x32c>)
 80096a6:	4013      	ands	r3, r2
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096ae:	430b      	orrs	r3, r1
 80096b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4ab5      	ldr	r2, [pc, #724]	; (80099a8 <UART_SetConfig+0x330>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d004      	beq.n	80096e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096de:	4313      	orrs	r3, r2
 80096e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	4bb0      	ldr	r3, [pc, #704]	; (80099ac <UART_SetConfig+0x334>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6812      	ldr	r2, [r2, #0]
 80096f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096f2:	430b      	orrs	r3, r1
 80096f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	f023 010f 	bic.w	r1, r3, #15
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4aa7      	ldr	r2, [pc, #668]	; (80099b0 <UART_SetConfig+0x338>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d176      	bne.n	8009804 <UART_SetConfig+0x18c>
 8009716:	4ba7      	ldr	r3, [pc, #668]	; (80099b4 <UART_SetConfig+0x33c>)
 8009718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800971e:	2b28      	cmp	r3, #40	; 0x28
 8009720:	d86c      	bhi.n	80097fc <UART_SetConfig+0x184>
 8009722:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <UART_SetConfig+0xb0>)
 8009724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009728:	080097cd 	.word	0x080097cd
 800972c:	080097fd 	.word	0x080097fd
 8009730:	080097fd 	.word	0x080097fd
 8009734:	080097fd 	.word	0x080097fd
 8009738:	080097fd 	.word	0x080097fd
 800973c:	080097fd 	.word	0x080097fd
 8009740:	080097fd 	.word	0x080097fd
 8009744:	080097fd 	.word	0x080097fd
 8009748:	080097d5 	.word	0x080097d5
 800974c:	080097fd 	.word	0x080097fd
 8009750:	080097fd 	.word	0x080097fd
 8009754:	080097fd 	.word	0x080097fd
 8009758:	080097fd 	.word	0x080097fd
 800975c:	080097fd 	.word	0x080097fd
 8009760:	080097fd 	.word	0x080097fd
 8009764:	080097fd 	.word	0x080097fd
 8009768:	080097dd 	.word	0x080097dd
 800976c:	080097fd 	.word	0x080097fd
 8009770:	080097fd 	.word	0x080097fd
 8009774:	080097fd 	.word	0x080097fd
 8009778:	080097fd 	.word	0x080097fd
 800977c:	080097fd 	.word	0x080097fd
 8009780:	080097fd 	.word	0x080097fd
 8009784:	080097fd 	.word	0x080097fd
 8009788:	080097e5 	.word	0x080097e5
 800978c:	080097fd 	.word	0x080097fd
 8009790:	080097fd 	.word	0x080097fd
 8009794:	080097fd 	.word	0x080097fd
 8009798:	080097fd 	.word	0x080097fd
 800979c:	080097fd 	.word	0x080097fd
 80097a0:	080097fd 	.word	0x080097fd
 80097a4:	080097fd 	.word	0x080097fd
 80097a8:	080097ed 	.word	0x080097ed
 80097ac:	080097fd 	.word	0x080097fd
 80097b0:	080097fd 	.word	0x080097fd
 80097b4:	080097fd 	.word	0x080097fd
 80097b8:	080097fd 	.word	0x080097fd
 80097bc:	080097fd 	.word	0x080097fd
 80097c0:	080097fd 	.word	0x080097fd
 80097c4:	080097fd 	.word	0x080097fd
 80097c8:	080097f5 	.word	0x080097f5
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e222      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e21e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e2:	e21a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	e216      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80097ec:	2320      	movs	r3, #32
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e212      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e20e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80097fc:	2380      	movs	r3, #128	; 0x80
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e20a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a6b      	ldr	r2, [pc, #428]	; (80099b8 <UART_SetConfig+0x340>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d130      	bne.n	8009870 <UART_SetConfig+0x1f8>
 800980e:	4b69      	ldr	r3, [pc, #420]	; (80099b4 <UART_SetConfig+0x33c>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	2b05      	cmp	r3, #5
 8009818:	d826      	bhi.n	8009868 <UART_SetConfig+0x1f0>
 800981a:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0x1a8>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009839 	.word	0x08009839
 8009824:	08009841 	.word	0x08009841
 8009828:	08009849 	.word	0x08009849
 800982c:	08009851 	.word	0x08009851
 8009830:	08009859 	.word	0x08009859
 8009834:	08009861 	.word	0x08009861
 8009838:	2300      	movs	r3, #0
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e1ec      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009846:	e1e8      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984e:	e1e4      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009856:	e1e0      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985e:	e1dc      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009866:	e1d8      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009868:	2380      	movs	r3, #128	; 0x80
 800986a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986e:	e1d4      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a51      	ldr	r2, [pc, #324]	; (80099bc <UART_SetConfig+0x344>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d130      	bne.n	80098dc <UART_SetConfig+0x264>
 800987a:	4b4e      	ldr	r3, [pc, #312]	; (80099b4 <UART_SetConfig+0x33c>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b05      	cmp	r3, #5
 8009884:	d826      	bhi.n	80098d4 <UART_SetConfig+0x25c>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <UART_SetConfig+0x214>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098b5 	.word	0x080098b5
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e1b6      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	e1b2      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ba:	e1ae      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c2:	e1aa      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ca:	e1a6      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098cc:	2340      	movs	r3, #64	; 0x40
 80098ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d2:	e1a2      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098d4:	2380      	movs	r3, #128	; 0x80
 80098d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098da:	e19e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a37      	ldr	r2, [pc, #220]	; (80099c0 <UART_SetConfig+0x348>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d130      	bne.n	8009948 <UART_SetConfig+0x2d0>
 80098e6:	4b33      	ldr	r3, [pc, #204]	; (80099b4 <UART_SetConfig+0x33c>)
 80098e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d826      	bhi.n	8009940 <UART_SetConfig+0x2c8>
 80098f2:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <UART_SetConfig+0x280>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	08009911 	.word	0x08009911
 80098fc:	08009919 	.word	0x08009919
 8009900:	08009921 	.word	0x08009921
 8009904:	08009929 	.word	0x08009929
 8009908:	08009931 	.word	0x08009931
 800990c:	08009939 	.word	0x08009939
 8009910:	2300      	movs	r3, #0
 8009912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009916:	e180      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991e:	e17c      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009926:	e178      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992e:	e174      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009930:	2320      	movs	r3, #32
 8009932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009936:	e170      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009938:	2340      	movs	r3, #64	; 0x40
 800993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993e:	e16c      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009940:	2380      	movs	r3, #128	; 0x80
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e168      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <UART_SetConfig+0x34c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d142      	bne.n	80099d8 <UART_SetConfig+0x360>
 8009952:	4b18      	ldr	r3, [pc, #96]	; (80099b4 <UART_SetConfig+0x33c>)
 8009954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b05      	cmp	r3, #5
 800995c:	d838      	bhi.n	80099d0 <UART_SetConfig+0x358>
 800995e:	a201      	add	r2, pc, #4	; (adr r2, 8009964 <UART_SetConfig+0x2ec>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	0800997d 	.word	0x0800997d
 8009968:	08009985 	.word	0x08009985
 800996c:	0800998d 	.word	0x0800998d
 8009970:	08009995 	.word	0x08009995
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099c9 	.word	0x080099c9
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e14a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e146      	b.n	8009c1a <UART_SetConfig+0x5a2>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009992:	e142      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999a:	e13e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 800999c:	2320      	movs	r3, #32
 800999e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a2:	e13a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80099a4:	cfff69f3 	.word	0xcfff69f3
 80099a8:	58000c00 	.word	0x58000c00
 80099ac:	11fff4ff 	.word	0x11fff4ff
 80099b0:	40011000 	.word	0x40011000
 80099b4:	58024400 	.word	0x58024400
 80099b8:	40004400 	.word	0x40004400
 80099bc:	40004800 	.word	0x40004800
 80099c0:	40004c00 	.word	0x40004c00
 80099c4:	40005000 	.word	0x40005000
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e124      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e120      	b.n	8009c1a <UART_SetConfig+0x5a2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4acc      	ldr	r2, [pc, #816]	; (8009d10 <UART_SetConfig+0x698>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d176      	bne.n	8009ad0 <UART_SetConfig+0x458>
 80099e2:	4bcc      	ldr	r3, [pc, #816]	; (8009d14 <UART_SetConfig+0x69c>)
 80099e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099ea:	2b28      	cmp	r3, #40	; 0x28
 80099ec:	d86c      	bhi.n	8009ac8 <UART_SetConfig+0x450>
 80099ee:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <UART_SetConfig+0x37c>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a99 	.word	0x08009a99
 80099f8:	08009ac9 	.word	0x08009ac9
 80099fc:	08009ac9 	.word	0x08009ac9
 8009a00:	08009ac9 	.word	0x08009ac9
 8009a04:	08009ac9 	.word	0x08009ac9
 8009a08:	08009ac9 	.word	0x08009ac9
 8009a0c:	08009ac9 	.word	0x08009ac9
 8009a10:	08009ac9 	.word	0x08009ac9
 8009a14:	08009aa1 	.word	0x08009aa1
 8009a18:	08009ac9 	.word	0x08009ac9
 8009a1c:	08009ac9 	.word	0x08009ac9
 8009a20:	08009ac9 	.word	0x08009ac9
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009ac9 	.word	0x08009ac9
 8009a2c:	08009ac9 	.word	0x08009ac9
 8009a30:	08009ac9 	.word	0x08009ac9
 8009a34:	08009aa9 	.word	0x08009aa9
 8009a38:	08009ac9 	.word	0x08009ac9
 8009a3c:	08009ac9 	.word	0x08009ac9
 8009a40:	08009ac9 	.word	0x08009ac9
 8009a44:	08009ac9 	.word	0x08009ac9
 8009a48:	08009ac9 	.word	0x08009ac9
 8009a4c:	08009ac9 	.word	0x08009ac9
 8009a50:	08009ac9 	.word	0x08009ac9
 8009a54:	08009ab1 	.word	0x08009ab1
 8009a58:	08009ac9 	.word	0x08009ac9
 8009a5c:	08009ac9 	.word	0x08009ac9
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009ac9 	.word	0x08009ac9
 8009a6c:	08009ac9 	.word	0x08009ac9
 8009a70:	08009ac9 	.word	0x08009ac9
 8009a74:	08009ab9 	.word	0x08009ab9
 8009a78:	08009ac9 	.word	0x08009ac9
 8009a7c:	08009ac9 	.word	0x08009ac9
 8009a80:	08009ac9 	.word	0x08009ac9
 8009a84:	08009ac9 	.word	0x08009ac9
 8009a88:	08009ac9 	.word	0x08009ac9
 8009a8c:	08009ac9 	.word	0x08009ac9
 8009a90:	08009ac9 	.word	0x08009ac9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e0bc      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e0b8      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aae:	e0b4      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e0b0      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e0ac      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e0a8      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e0a4      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a90      	ldr	r2, [pc, #576]	; (8009d18 <UART_SetConfig+0x6a0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d130      	bne.n	8009b3c <UART_SetConfig+0x4c4>
 8009ada:	4b8e      	ldr	r3, [pc, #568]	; (8009d14 <UART_SetConfig+0x69c>)
 8009adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	2b05      	cmp	r3, #5
 8009ae4:	d826      	bhi.n	8009b34 <UART_SetConfig+0x4bc>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <UART_SetConfig+0x474>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b05 	.word	0x08009b05
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b2d 	.word	0x08009b2d
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e086      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e082      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b14:	2308      	movs	r3, #8
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	e07e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	e07a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b24:	2320      	movs	r3, #32
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e076      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b2c:	2340      	movs	r3, #64	; 0x40
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e072      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b34:	2380      	movs	r3, #128	; 0x80
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e06e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a76      	ldr	r2, [pc, #472]	; (8009d1c <UART_SetConfig+0x6a4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d130      	bne.n	8009ba8 <UART_SetConfig+0x530>
 8009b46:	4b73      	ldr	r3, [pc, #460]	; (8009d14 <UART_SetConfig+0x69c>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d826      	bhi.n	8009ba0 <UART_SetConfig+0x528>
 8009b52:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <UART_SetConfig+0x4e0>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	08009b81 	.word	0x08009b81
 8009b64:	08009b89 	.word	0x08009b89
 8009b68:	08009b91 	.word	0x08009b91
 8009b6c:	08009b99 	.word	0x08009b99
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e050      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e04c      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b80:	2308      	movs	r3, #8
 8009b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b86:	e048      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e044      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b90:	2320      	movs	r3, #32
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e040      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009b98:	2340      	movs	r3, #64	; 0x40
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e03c      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ba0:	2380      	movs	r3, #128	; 0x80
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e038      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a5c      	ldr	r2, [pc, #368]	; (8009d20 <UART_SetConfig+0x6a8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d130      	bne.n	8009c14 <UART_SetConfig+0x59c>
 8009bb2:	4b58      	ldr	r3, [pc, #352]	; (8009d14 <UART_SetConfig+0x69c>)
 8009bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d826      	bhi.n	8009c0c <UART_SetConfig+0x594>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x54c>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009be5 	.word	0x08009be5
 8009bcc:	08009bed 	.word	0x08009bed
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009bfd 	.word	0x08009bfd
 8009bd8:	08009c05 	.word	0x08009c05
 8009bdc:	2302      	movs	r3, #2
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e01a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e016      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009bec:	2308      	movs	r3, #8
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e012      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e00e      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e00a      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009c04:	2340      	movs	r3, #64	; 0x40
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e006      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009c0c:	2380      	movs	r3, #128	; 0x80
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e002      	b.n	8009c1a <UART_SetConfig+0x5a2>
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a40      	ldr	r2, [pc, #256]	; (8009d20 <UART_SetConfig+0x6a8>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	f040 80ef 	bne.w	8009e04 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	dc46      	bgt.n	8009cbc <UART_SetConfig+0x644>
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	f2c0 8081 	blt.w	8009d36 <UART_SetConfig+0x6be>
 8009c34:	3b02      	subs	r3, #2
 8009c36:	2b1e      	cmp	r3, #30
 8009c38:	d87d      	bhi.n	8009d36 <UART_SetConfig+0x6be>
 8009c3a:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <UART_SetConfig+0x5c8>)
 8009c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c40:	08009cc3 	.word	0x08009cc3
 8009c44:	08009d37 	.word	0x08009d37
 8009c48:	08009ccb 	.word	0x08009ccb
 8009c4c:	08009d37 	.word	0x08009d37
 8009c50:	08009d37 	.word	0x08009d37
 8009c54:	08009d37 	.word	0x08009d37
 8009c58:	08009cdb 	.word	0x08009cdb
 8009c5c:	08009d37 	.word	0x08009d37
 8009c60:	08009d37 	.word	0x08009d37
 8009c64:	08009d37 	.word	0x08009d37
 8009c68:	08009d37 	.word	0x08009d37
 8009c6c:	08009d37 	.word	0x08009d37
 8009c70:	08009d37 	.word	0x08009d37
 8009c74:	08009d37 	.word	0x08009d37
 8009c78:	08009ceb 	.word	0x08009ceb
 8009c7c:	08009d37 	.word	0x08009d37
 8009c80:	08009d37 	.word	0x08009d37
 8009c84:	08009d37 	.word	0x08009d37
 8009c88:	08009d37 	.word	0x08009d37
 8009c8c:	08009d37 	.word	0x08009d37
 8009c90:	08009d37 	.word	0x08009d37
 8009c94:	08009d37 	.word	0x08009d37
 8009c98:	08009d37 	.word	0x08009d37
 8009c9c:	08009d37 	.word	0x08009d37
 8009ca0:	08009d37 	.word	0x08009d37
 8009ca4:	08009d37 	.word	0x08009d37
 8009ca8:	08009d37 	.word	0x08009d37
 8009cac:	08009d37 	.word	0x08009d37
 8009cb0:	08009d37 	.word	0x08009d37
 8009cb4:	08009d37 	.word	0x08009d37
 8009cb8:	08009d29 	.word	0x08009d29
 8009cbc:	2b40      	cmp	r3, #64	; 0x40
 8009cbe:	d036      	beq.n	8009d2e <UART_SetConfig+0x6b6>
 8009cc0:	e039      	b.n	8009d36 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cc2:	f7fe f967 	bl	8007f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cc8:	e03b      	b.n	8009d42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cca:	f107 0314 	add.w	r3, r7, #20
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe f976 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cd8:	e033      	b.n	8009d42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cda:	f107 0308 	add.w	r3, r7, #8
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fac2 	bl	8008268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ce8:	e02b      	b.n	8009d42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cea:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <UART_SetConfig+0x69c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cf6:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <UART_SetConfig+0x69c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	08db      	lsrs	r3, r3, #3
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	4a08      	ldr	r2, [pc, #32]	; (8009d24 <UART_SetConfig+0x6ac>)
 8009d02:	fa22 f303 	lsr.w	r3, r2, r3
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d08:	e01b      	b.n	8009d42 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009d0a:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <UART_SetConfig+0x6ac>)
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d0e:	e018      	b.n	8009d42 <UART_SetConfig+0x6ca>
 8009d10:	40011400 	.word	0x40011400
 8009d14:	58024400 	.word	0x58024400
 8009d18:	40007800 	.word	0x40007800
 8009d1c:	40007c00 	.word	0x40007c00
 8009d20:	58000c00 	.word	0x58000c00
 8009d24:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d28:	4bc4      	ldr	r3, [pc, #784]	; (800a03c <UART_SetConfig+0x9c4>)
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d2c:	e009      	b.n	8009d42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d34:	e005      	b.n	8009d42 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 81da 	beq.w	800a0fe <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	4abc      	ldr	r2, [pc, #752]	; (800a040 <UART_SetConfig+0x9c8>)
 8009d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d5c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	4413      	add	r3, r2
 8009d68:	6a3a      	ldr	r2, [r7, #32]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d305      	bcc.n	8009d7a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d74:	6a3a      	ldr	r2, [r7, #32]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d903      	bls.n	8009d82 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d80:	e1bd      	b.n	800a0fe <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d84:	4618      	mov	r0, r3
 8009d86:	f04f 0100 	mov.w	r1, #0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8e:	4aac      	ldr	r2, [pc, #688]	; (800a040 <UART_SetConfig+0x9c8>)
 8009d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	f04f 0300 	mov.w	r3, #0
 8009d9a:	f7f6 faa1 	bl	80002e0 <__aeabi_uldivmod>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4610      	mov	r0, r2
 8009da4:	4619      	mov	r1, r3
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	f04f 0300 	mov.w	r3, #0
 8009dae:	020b      	lsls	r3, r1, #8
 8009db0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009db4:	0202      	lsls	r2, r0, #8
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	6849      	ldr	r1, [r1, #4]
 8009dba:	0849      	lsrs	r1, r1, #1
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	f04f 0100 	mov.w	r1, #0
 8009dc2:	1814      	adds	r4, r2, r0
 8009dc4:	eb43 0501 	adc.w	r5, r3, r1
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fa83 	bl	80002e0 <__aeabi_uldivmod>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4613      	mov	r3, r2
 8009de0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009de8:	d308      	bcc.n	8009dfc <UART_SetConfig+0x784>
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df0:	d204      	bcs.n	8009dfc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df8:	60da      	str	r2, [r3, #12]
 8009dfa:	e180      	b.n	800a0fe <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e02:	e17c      	b.n	800a0fe <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e0c:	f040 80bf 	bne.w	8009f8e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	dc49      	bgt.n	8009eac <UART_SetConfig+0x834>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	db7c      	blt.n	8009f16 <UART_SetConfig+0x89e>
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d87a      	bhi.n	8009f16 <UART_SetConfig+0x89e>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x7b0>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009eb3 	.word	0x08009eb3
 8009e2c:	08009ebb 	.word	0x08009ebb
 8009e30:	08009f17 	.word	0x08009f17
 8009e34:	08009f17 	.word	0x08009f17
 8009e38:	08009ec3 	.word	0x08009ec3
 8009e3c:	08009f17 	.word	0x08009f17
 8009e40:	08009f17 	.word	0x08009f17
 8009e44:	08009f17 	.word	0x08009f17
 8009e48:	08009ed3 	.word	0x08009ed3
 8009e4c:	08009f17 	.word	0x08009f17
 8009e50:	08009f17 	.word	0x08009f17
 8009e54:	08009f17 	.word	0x08009f17
 8009e58:	08009f17 	.word	0x08009f17
 8009e5c:	08009f17 	.word	0x08009f17
 8009e60:	08009f17 	.word	0x08009f17
 8009e64:	08009f17 	.word	0x08009f17
 8009e68:	08009ee3 	.word	0x08009ee3
 8009e6c:	08009f17 	.word	0x08009f17
 8009e70:	08009f17 	.word	0x08009f17
 8009e74:	08009f17 	.word	0x08009f17
 8009e78:	08009f17 	.word	0x08009f17
 8009e7c:	08009f17 	.word	0x08009f17
 8009e80:	08009f17 	.word	0x08009f17
 8009e84:	08009f17 	.word	0x08009f17
 8009e88:	08009f17 	.word	0x08009f17
 8009e8c:	08009f17 	.word	0x08009f17
 8009e90:	08009f17 	.word	0x08009f17
 8009e94:	08009f17 	.word	0x08009f17
 8009e98:	08009f17 	.word	0x08009f17
 8009e9c:	08009f17 	.word	0x08009f17
 8009ea0:	08009f17 	.word	0x08009f17
 8009ea4:	08009f17 	.word	0x08009f17
 8009ea8:	08009f09 	.word	0x08009f09
 8009eac:	2b40      	cmp	r3, #64	; 0x40
 8009eae:	d02e      	beq.n	8009f0e <UART_SetConfig+0x896>
 8009eb0:	e031      	b.n	8009f16 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb2:	f7fd f8c1 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 8009eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009eb8:	e033      	b.n	8009f22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eba:	f7fd f8d3 	bl	8007064 <HAL_RCC_GetPCLK2Freq>
 8009ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ec0:	e02f      	b.n	8009f22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe f87a 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ed0:	e027      	b.n	8009f22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe f9c6 	bl	8008268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ee0:	e01f      	b.n	8009f22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ee2:	4b58      	ldr	r3, [pc, #352]	; (800a044 <UART_SetConfig+0x9cc>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009eee:	4b55      	ldr	r3, [pc, #340]	; (800a044 <UART_SetConfig+0x9cc>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	4a53      	ldr	r2, [pc, #332]	; (800a048 <UART_SetConfig+0x9d0>)
 8009efa:	fa22 f303 	lsr.w	r3, r2, r3
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f00:	e00f      	b.n	8009f22 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009f02:	4b51      	ldr	r3, [pc, #324]	; (800a048 <UART_SetConfig+0x9d0>)
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f06:	e00c      	b.n	8009f22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f08:	4b4c      	ldr	r3, [pc, #304]	; (800a03c <UART_SetConfig+0x9c4>)
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f0c:	e009      	b.n	8009f22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f14:	e005      	b.n	8009f22 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 80ea 	beq.w	800a0fe <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	4a44      	ldr	r2, [pc, #272]	; (800a040 <UART_SetConfig+0x9c8>)
 8009f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f34:	461a      	mov	r2, r3
 8009f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3c:	005a      	lsls	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	085b      	lsrs	r3, r3, #1
 8009f44:	441a      	add	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	2b0f      	cmp	r3, #15
 8009f56:	d916      	bls.n	8009f86 <UART_SetConfig+0x90e>
 8009f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5e:	d212      	bcs.n	8009f86 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	f023 030f 	bic.w	r3, r3, #15
 8009f68:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f82:	60da      	str	r2, [r3, #12]
 8009f84:	e0bb      	b.n	800a0fe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f8c:	e0b7      	b.n	800a0fe <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	dc4a      	bgt.n	800a02c <UART_SetConfig+0x9b4>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f2c0 8086 	blt.w	800a0a8 <UART_SetConfig+0xa30>
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	f200 8083 	bhi.w	800a0a8 <UART_SetConfig+0xa30>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <UART_SetConfig+0x930>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	0800a033 	.word	0x0800a033
 8009fac:	0800a04d 	.word	0x0800a04d
 8009fb0:	0800a0a9 	.word	0x0800a0a9
 8009fb4:	0800a0a9 	.word	0x0800a0a9
 8009fb8:	0800a055 	.word	0x0800a055
 8009fbc:	0800a0a9 	.word	0x0800a0a9
 8009fc0:	0800a0a9 	.word	0x0800a0a9
 8009fc4:	0800a0a9 	.word	0x0800a0a9
 8009fc8:	0800a065 	.word	0x0800a065
 8009fcc:	0800a0a9 	.word	0x0800a0a9
 8009fd0:	0800a0a9 	.word	0x0800a0a9
 8009fd4:	0800a0a9 	.word	0x0800a0a9
 8009fd8:	0800a0a9 	.word	0x0800a0a9
 8009fdc:	0800a0a9 	.word	0x0800a0a9
 8009fe0:	0800a0a9 	.word	0x0800a0a9
 8009fe4:	0800a0a9 	.word	0x0800a0a9
 8009fe8:	0800a075 	.word	0x0800a075
 8009fec:	0800a0a9 	.word	0x0800a0a9
 8009ff0:	0800a0a9 	.word	0x0800a0a9
 8009ff4:	0800a0a9 	.word	0x0800a0a9
 8009ff8:	0800a0a9 	.word	0x0800a0a9
 8009ffc:	0800a0a9 	.word	0x0800a0a9
 800a000:	0800a0a9 	.word	0x0800a0a9
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0a9 	.word	0x0800a0a9
 800a00c:	0800a0a9 	.word	0x0800a0a9
 800a010:	0800a0a9 	.word	0x0800a0a9
 800a014:	0800a0a9 	.word	0x0800a0a9
 800a018:	0800a0a9 	.word	0x0800a0a9
 800a01c:	0800a0a9 	.word	0x0800a0a9
 800a020:	0800a0a9 	.word	0x0800a0a9
 800a024:	0800a0a9 	.word	0x0800a0a9
 800a028:	0800a09b 	.word	0x0800a09b
 800a02c:	2b40      	cmp	r3, #64	; 0x40
 800a02e:	d037      	beq.n	800a0a0 <UART_SetConfig+0xa28>
 800a030:	e03a      	b.n	800a0a8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a032:	f7fd f801 	bl	8007038 <HAL_RCC_GetPCLK1Freq>
 800a036:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a038:	e03c      	b.n	800a0b4 <UART_SetConfig+0xa3c>
 800a03a:	bf00      	nop
 800a03c:	003d0900 	.word	0x003d0900
 800a040:	0800c220 	.word	0x0800c220
 800a044:	58024400 	.word	0x58024400
 800a048:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a04c:	f7fd f80a 	bl	8007064 <HAL_RCC_GetPCLK2Freq>
 800a050:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a052:	e02f      	b.n	800a0b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fd ffb1 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a062:	e027      	b.n	800a0b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a064:	f107 0308 	add.w	r3, r7, #8
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe f8fd 	bl	8008268 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a072:	e01f      	b.n	800a0b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a074:	4b2c      	ldr	r3, [pc, #176]	; (800a128 <UART_SetConfig+0xab0>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d009      	beq.n	800a094 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a080:	4b29      	ldr	r3, [pc, #164]	; (800a128 <UART_SetConfig+0xab0>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	08db      	lsrs	r3, r3, #3
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	4a28      	ldr	r2, [pc, #160]	; (800a12c <UART_SetConfig+0xab4>)
 800a08c:	fa22 f303 	lsr.w	r3, r2, r3
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a092:	e00f      	b.n	800a0b4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a094:	4b25      	ldr	r3, [pc, #148]	; (800a12c <UART_SetConfig+0xab4>)
 800a096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a098:	e00c      	b.n	800a0b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a09a:	4b25      	ldr	r3, [pc, #148]	; (800a130 <UART_SetConfig+0xab8>)
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09e:	e009      	b.n	800a0b4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a6:	e005      	b.n	800a0b4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0b2:	bf00      	nop
    }

    if (pclk != 0U)
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d021      	beq.n	800a0fe <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <UART_SetConfig+0xabc>)
 800a0c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	085b      	lsrs	r3, r3, #1
 800a0d2:	441a      	add	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d908      	bls.n	800a0f8 <UART_SetConfig+0xa80>
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ec:	d204      	bcs.n	800a0f8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f4:	60da      	str	r2, [r3, #12]
 800a0f6:	e002      	b.n	800a0fe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a11a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3738      	adds	r7, #56	; 0x38
 800a122:	46bd      	mov	sp, r7
 800a124:	bdb0      	pop	{r4, r5, r7, pc}
 800a126:	bf00      	nop
 800a128:	58024400 	.word	0x58024400
 800a12c:	03d09000 	.word	0x03d09000
 800a130:	003d0900 	.word	0x003d0900
 800a134:	0800c220 	.word	0x0800c220

0800a138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00a      	beq.n	800a162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1aa:	f003 0308 	and.w	r3, r3, #8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	f003 0310 	and.w	r3, r3, #16
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	430a      	orrs	r2, r1
 800a20a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01a      	beq.n	800a24e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a236:	d10a      	bne.n	800a24e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	605a      	str	r2, [r3, #4]
  }
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af02      	add	r7, sp, #8
 800a282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a28c:	f7f8 fdac 	bl	8002de8 <HAL_GetTick>
 800a290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0308 	and.w	r3, r3, #8
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d10e      	bne.n	800a2be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f82f 	bl	800a312 <UART_WaitOnFlagUntilTimeout>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e025      	b.n	800a30a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d10e      	bne.n	800a2ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f819 	bl	800a312 <UART_WaitOnFlagUntilTimeout>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e00f      	b.n	800a30a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	603b      	str	r3, [r7, #0]
 800a31e:	4613      	mov	r3, r2
 800a320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a322:	e062      	b.n	800a3ea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d05e      	beq.n	800a3ea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a32c:	f7f8 fd5c 	bl	8002de8 <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d302      	bcc.n	800a342 <UART_WaitOnFlagUntilTimeout+0x30>
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d11d      	bne.n	800a37e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a350:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689a      	ldr	r2, [r3, #8]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0201 	bic.w	r2, r2, #1
 800a360:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2220      	movs	r2, #32
 800a366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e045      	b.n	800a40a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d02e      	beq.n	800a3ea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39a:	d126      	bne.n	800a3ea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0201 	bic.w	r2, r2, #1
 800a3c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e00f      	b.n	800a40a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2301      	moveq	r3, #1
 800a3fc:	2300      	movne	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	429a      	cmp	r2, r3
 800a406:	d08d      	beq.n	800a324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	88fa      	ldrh	r2, [r7, #6]
 800a42c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2222      	movs	r2, #34	; 0x22
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d02c      	beq.n	800a4a2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a44c:	4a25      	ldr	r2, [pc, #148]	; (800a4e4 <UART_Start_Receive_DMA+0xd0>)
 800a44e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a454:	4a24      	ldr	r2, [pc, #144]	; (800a4e8 <UART_Start_Receive_DMA+0xd4>)
 800a456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a45c:	4a23      	ldr	r2, [pc, #140]	; (800a4ec <UART_Start_Receive_DMA+0xd8>)
 800a45e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a464:	2200      	movs	r2, #0
 800a466:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3324      	adds	r3, #36	; 0x24
 800a472:	4619      	mov	r1, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a478:	461a      	mov	r2, r3
 800a47a:	88fb      	ldrh	r3, [r7, #6]
 800a47c:	f7f9 f908 	bl	8003690 <HAL_DMA_Start_IT>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00d      	beq.n	800a4a2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2210      	movs	r2, #16
 800a48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2220      	movs	r2, #32
 800a49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e01c      	b.n	800a4dc <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4b8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f042 0201 	orr.w	r2, r2, #1
 800a4c8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4d8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	0800a5fd 	.word	0x0800a5fd
 800a4e8:	0800a693 	.word	0x0800a693
 800a4ec:	0800a6cb 	.word	0x0800a6cb

0800a4f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a506:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689a      	ldr	r2, [r3, #8]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a516:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2220      	movs	r2, #32
 800a51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a542:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6899      	ldr	r1, [r3, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <UART_EndRxTransfer+0x60>)
 800a550:	400b      	ands	r3, r1
 800a552:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d107      	bne.n	800a56c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0210 	bic.w	r2, r2, #16
 800a56a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	effffffe 	.word	0xeffffffe

0800a590 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a6:	d014      	beq.n	800a5d2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5be:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5ce:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5d0:	e002      	b.n	800a5d8 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff f812 	bl	80095fc <HAL_UART_TxCpltCallback>
}
 800a5d8:	bf00      	nop
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff f80e 	bl	8009610 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a608:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d02b      	beq.n	800a66c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a62a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0201 	bic.w	r2, r2, #1
 800a63a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a64a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d107      	bne.n	800a66c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0210 	bic.w	r2, r2, #16
 800a66a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d107      	bne.n	800a684 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a67a:	4619      	mov	r1, r3
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7fe ffef 	bl	8009660 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a682:	e002      	b.n	800a68a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7fe ffcd 	bl	8009624 <HAL_UART_RxCpltCallback>
}
 800a68a:	bf00      	nop
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d109      	bne.n	800a6bc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f7fe ffd3 	bl	8009660 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6ba:	e002      	b.n	800a6c2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7fe ffbb 	bl	8009638 <HAL_UART_RxHalfCpltCallback>
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b086      	sub	sp, #24
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f2:	2b80      	cmp	r3, #128	; 0x80
 800a6f4:	d109      	bne.n	800a70a <UART_DMAError+0x40>
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2b21      	cmp	r3, #33	; 0x21
 800a6fa:	d106      	bne.n	800a70a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a704:	6978      	ldr	r0, [r7, #20]
 800a706:	f7ff fef3 	bl	800a4f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a714:	2b40      	cmp	r3, #64	; 0x40
 800a716:	d109      	bne.n	800a72c <UART_DMAError+0x62>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b22      	cmp	r3, #34	; 0x22
 800a71c:	d106      	bne.n	800a72c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2200      	movs	r2, #0
 800a722:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7ff ff00 	bl	800a52c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a732:	f043 0210 	orr.w	r2, r3, #16
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a73c:	6978      	ldr	r0, [r7, #20]
 800a73e:	f7fe ff85 	bl	800964c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a742:	bf00      	nop
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a756:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7fe ff6f 	bl	800964c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a78c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2220      	movs	r2, #32
 800a792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7fe ff2d 	bl	80095fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a2:	bf00      	nop
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e027      	b.n	800a84c <HAL_UARTEx_DisableFifoMode+0x66>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2224      	movs	r2, #36	; 0x24
 800a808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0201 	bic.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a82a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e02d      	b.n	800a8cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2224      	movs	r2, #36	; 0x24
 800a87c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0201 	bic.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f84f 	bl	800a950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e02d      	b.n	800a948 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	; 0x24
 800a8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f811 	bl	800a950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d108      	bne.n	800a972 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a970:	e031      	b.n	800a9d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a972:	2310      	movs	r3, #16
 800a974:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a976:	2310      	movs	r3, #16
 800a978:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	0e5b      	lsrs	r3, r3, #25
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	0f5b      	lsrs	r3, r3, #29
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	7b3a      	ldrb	r2, [r7, #12]
 800a99e:	4911      	ldr	r1, [pc, #68]	; (800a9e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9a0:	5c8a      	ldrb	r2, [r1, r2]
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9a6:	7b3a      	ldrb	r2, [r7, #12]
 800a9a8:	490f      	ldr	r1, [pc, #60]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	7b7a      	ldrb	r2, [r7, #13]
 800a9bc:	4909      	ldr	r1, [pc, #36]	; (800a9e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9be:	5c8a      	ldrb	r2, [r1, r2]
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9c4:	7b7a      	ldrb	r2, [r7, #13]
 800a9c6:	4908      	ldr	r1, [pc, #32]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	0800c238 	.word	0x0800c238
 800a9e8:	0800c240 	.word	0x0800c240

0800a9ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a9fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9fe:	2b84      	cmp	r3, #132	; 0x84
 800aa00:	d005      	beq.n	800aa0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	3303      	adds	r3, #3
 800aa0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aa20:	f000 fc00 	bl	800b224 <vTaskStartScheduler>
  
  return osOK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2c:	b089      	sub	sp, #36	; 0x24
 800aa2e:	af04      	add	r7, sp, #16
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d020      	beq.n	800aa7e <osThreadCreate+0x54>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01c      	beq.n	800aa7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685c      	ldr	r4, [r3, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681d      	ldr	r5, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691e      	ldr	r6, [r3, #16]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff ffc8 	bl	800a9ec <makeFreeRtosPriority>
 800aa5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa66:	9202      	str	r2, [sp, #8]
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	9100      	str	r1, [sp, #0]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	4632      	mov	r2, r6
 800aa70:	4629      	mov	r1, r5
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 f8ed 	bl	800ac52 <xTaskCreateStatic>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e01c      	b.n	800aab8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685c      	ldr	r4, [r3, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa8a:	b29e      	uxth	r6, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff ffaa 	bl	800a9ec <makeFreeRtosPriority>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	f107 030c 	add.w	r3, r7, #12
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	9200      	str	r2, [sp, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 f92f 	bl	800ad0c <xTaskCreate>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d001      	beq.n	800aab8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aab4:	2300      	movs	r3, #0
 800aab6:	e000      	b.n	800aaba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aab8:	68fb      	ldr	r3, [r7, #12]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aac2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <osDelay+0x16>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	e000      	b.n	800aada <osDelay+0x18>
 800aad8:	2301      	movs	r3, #1
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fa4c 	bl	800af78 <vTaskDelay>
  
  return osOK;
 800aae0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f103 0208 	add.w	r2, r3, #8
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f04f 32ff 	mov.w	r2, #4294967295
 800ab02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f103 0208 	add.w	r2, r3, #8
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f103 0208 	add.w	r2, r3, #8
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689a      	ldr	r2, [r3, #8]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	601a      	str	r2, [r3, #0]
}
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba2:	d103      	bne.n	800abac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e00c      	b.n	800abc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3308      	adds	r3, #8
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	e002      	b.n	800abba <vListInsert+0x2e>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d2f6      	bcs.n	800abb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	601a      	str	r2, [r3, #0]
}
 800abf2:	bf00      	nop
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abfe:	b480      	push	{r7}
 800ac00:	b085      	sub	sp, #20
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	6892      	ldr	r2, [r2, #8]
 800ac14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6852      	ldr	r2, [r2, #4]
 800ac1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d103      	bne.n	800ac32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689a      	ldr	r2, [r3, #8]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b08e      	sub	sp, #56	; 0x38
 800ac56:	af04      	add	r7, sp, #16
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10a      	bne.n	800ac7c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <xTaskCreateStatic+0x46>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	61fb      	str	r3, [r7, #28]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac98:	2354      	movs	r3, #84	; 0x54
 800ac9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	2b54      	cmp	r3, #84	; 0x54
 800aca0:	d00a      	beq.n	800acb8 <xTaskCreateStatic+0x66>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	61bb      	str	r3, [r7, #24]
}
 800acb4:	bf00      	nop
 800acb6:	e7fe      	b.n	800acb6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d01e      	beq.n	800acfe <xTaskCreateStatic+0xac>
 800acc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d01b      	beq.n	800acfe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acd8:	2300      	movs	r3, #0
 800acda:	9303      	str	r3, [sp, #12]
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	9302      	str	r3, [sp, #8]
 800ace0:	f107 0314 	add.w	r3, r7, #20
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 f850 	bl	800ad96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf8:	f000 f8d4 	bl	800aea4 <prvAddNewTaskToReadyList>
 800acfc:	e001      	b.n	800ad02 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad02:	697b      	ldr	r3, [r7, #20]
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3728      	adds	r7, #40	; 0x28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08c      	sub	sp, #48	; 0x30
 800ad10:	af04      	add	r7, sp, #16
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	603b      	str	r3, [r7, #0]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad1c:	88fb      	ldrh	r3, [r7, #6]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 ffe9 	bl	800bcf8 <pvPortMalloc>
 800ad26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00e      	beq.n	800ad4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad2e:	2054      	movs	r0, #84	; 0x54
 800ad30:	f000 ffe2 	bl	800bcf8 <pvPortMalloc>
 800ad34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	631a      	str	r2, [r3, #48]	; 0x30
 800ad42:	e005      	b.n	800ad50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad44:	6978      	ldr	r0, [r7, #20]
 800ad46:	f001 f8a3 	bl	800be90 <vPortFree>
 800ad4a:	e001      	b.n	800ad50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d017      	beq.n	800ad86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad5e:	88fa      	ldrh	r2, [r7, #6]
 800ad60:	2300      	movs	r3, #0
 800ad62:	9303      	str	r3, [sp, #12]
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	9302      	str	r3, [sp, #8]
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 f80e 	bl	800ad96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad7a:	69f8      	ldr	r0, [r7, #28]
 800ad7c:	f000 f892 	bl	800aea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad80:	2301      	movs	r3, #1
 800ad82:	61bb      	str	r3, [r7, #24]
 800ad84:	e002      	b.n	800ad8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad86:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b088      	sub	sp, #32
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
 800ada2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800adae:	440b      	add	r3, r1
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	f023 0307 	bic.w	r3, r3, #7
 800adbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	f003 0307 	and.w	r3, r3, #7
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <prvInitialiseNewTask+0x48>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	617b      	str	r3, [r7, #20]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d01f      	beq.n	800ae24 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ade4:	2300      	movs	r3, #0
 800ade6:	61fb      	str	r3, [r7, #28]
 800ade8:	e012      	b.n	800ae10 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	4413      	add	r3, r2
 800adf0:	7819      	ldrb	r1, [r3, #0]
 800adf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	4413      	add	r3, r2
 800adf8:	3334      	adds	r3, #52	; 0x34
 800adfa:	460a      	mov	r2, r1
 800adfc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d006      	beq.n	800ae18 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	61fb      	str	r3, [r7, #28]
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	2b0f      	cmp	r3, #15
 800ae14:	d9e9      	bls.n	800adea <prvInitialiseNewTask+0x54>
 800ae16:	e000      	b.n	800ae1a <prvInitialiseNewTask+0x84>
			{
				break;
 800ae18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae22:	e003      	b.n	800ae2c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	2b06      	cmp	r3, #6
 800ae30:	d901      	bls.n	800ae36 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae32:	2306      	movs	r3, #6
 800ae34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	2200      	movs	r2, #0
 800ae46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7ff fe6c 	bl	800ab2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	3318      	adds	r3, #24
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff fe67 	bl	800ab2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	f1c3 0207 	rsb	r2, r3, #7
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	2200      	movs	r2, #0
 800ae76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	69b8      	ldr	r0, [r7, #24]
 800ae86:	f000 fd27 	bl	800b8d8 <pxPortInitialiseStack>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae9c:	bf00      	nop
 800ae9e:	3720      	adds	r7, #32
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aeac:	f000 fe42 	bl	800bb34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeb0:	4b2a      	ldr	r3, [pc, #168]	; (800af5c <prvAddNewTaskToReadyList+0xb8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	4a29      	ldr	r2, [pc, #164]	; (800af5c <prvAddNewTaskToReadyList+0xb8>)
 800aeb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aeba:	4b29      	ldr	r3, [pc, #164]	; (800af60 <prvAddNewTaskToReadyList+0xbc>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d109      	bne.n	800aed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aec2:	4a27      	ldr	r2, [pc, #156]	; (800af60 <prvAddNewTaskToReadyList+0xbc>)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aec8:	4b24      	ldr	r3, [pc, #144]	; (800af5c <prvAddNewTaskToReadyList+0xb8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d110      	bne.n	800aef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aed0:	f000 fbde 	bl	800b690 <prvInitialiseTaskLists>
 800aed4:	e00d      	b.n	800aef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aed6:	4b23      	ldr	r3, [pc, #140]	; (800af64 <prvAddNewTaskToReadyList+0xc0>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d109      	bne.n	800aef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aede:	4b20      	ldr	r3, [pc, #128]	; (800af60 <prvAddNewTaskToReadyList+0xbc>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d802      	bhi.n	800aef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aeec:	4a1c      	ldr	r2, [pc, #112]	; (800af60 <prvAddNewTaskToReadyList+0xbc>)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aef2:	4b1d      	ldr	r3, [pc, #116]	; (800af68 <prvAddNewTaskToReadyList+0xc4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3301      	adds	r3, #1
 800aef8:	4a1b      	ldr	r2, [pc, #108]	; (800af68 <prvAddNewTaskToReadyList+0xc4>)
 800aefa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	2201      	movs	r2, #1
 800af02:	409a      	lsls	r2, r3
 800af04:	4b19      	ldr	r3, [pc, #100]	; (800af6c <prvAddNewTaskToReadyList+0xc8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4313      	orrs	r3, r2
 800af0a:	4a18      	ldr	r2, [pc, #96]	; (800af6c <prvAddNewTaskToReadyList+0xc8>)
 800af0c:	6013      	str	r3, [r2, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4a15      	ldr	r2, [pc, #84]	; (800af70 <prvAddNewTaskToReadyList+0xcc>)
 800af1c:	441a      	add	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	3304      	adds	r3, #4
 800af22:	4619      	mov	r1, r3
 800af24:	4610      	mov	r0, r2
 800af26:	f7ff fe0d 	bl	800ab44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af2a:	f000 fe33 	bl	800bb94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <prvAddNewTaskToReadyList+0xc0>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00e      	beq.n	800af54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <prvAddNewTaskToReadyList+0xbc>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	429a      	cmp	r2, r3
 800af42:	d207      	bcs.n	800af54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af44:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <prvAddNewTaskToReadyList+0xd0>)
 800af46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	200004c8 	.word	0x200004c8
 800af60:	200003c8 	.word	0x200003c8
 800af64:	200004d4 	.word	0x200004d4
 800af68:	200004e4 	.word	0x200004e4
 800af6c:	200004d0 	.word	0x200004d0
 800af70:	200003cc 	.word	0x200003cc
 800af74:	e000ed04 	.word	0xe000ed04

0800af78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af80:	2300      	movs	r3, #0
 800af82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d017      	beq.n	800afba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af8a:	4b13      	ldr	r3, [pc, #76]	; (800afd8 <vTaskDelay+0x60>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <vTaskDelay+0x30>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	60bb      	str	r3, [r7, #8]
}
 800afa4:	bf00      	nop
 800afa6:	e7fe      	b.n	800afa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afa8:	f000 f99c 	bl	800b2e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afac:	2100      	movs	r1, #0
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fc2c 	bl	800b80c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afb4:	f000 f9a4 	bl	800b300 <xTaskResumeAll>
 800afb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d107      	bne.n	800afd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800afc0:	4b06      	ldr	r3, [pc, #24]	; (800afdc <vTaskDelay+0x64>)
 800afc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc6:	601a      	str	r2, [r3, #0]
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afd0:	bf00      	nop
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	200004f0 	.word	0x200004f0
 800afdc:	e000ed04 	.word	0xe000ed04

0800afe0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800afe8:	f000 fda4 	bl	800bb34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <vTaskSuspend+0x18>
 800aff2:	4b3c      	ldr	r3, [pc, #240]	; (800b0e4 <vTaskSuspend+0x104>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	e000      	b.n	800affa <vTaskSuspend+0x1a>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3304      	adds	r3, #4
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fdfc 	bl	800abfe <uxListRemove>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d115      	bne.n	800b038 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4935      	ldr	r1, [pc, #212]	; (800b0e8 <vTaskSuspend+0x108>)
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <vTaskSuspend+0x58>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	2201      	movs	r2, #1
 800b028:	fa02 f303 	lsl.w	r3, r2, r3
 800b02c:	43da      	mvns	r2, r3
 800b02e:	4b2f      	ldr	r3, [pc, #188]	; (800b0ec <vTaskSuspend+0x10c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4013      	ands	r3, r2
 800b034:	4a2d      	ldr	r2, [pc, #180]	; (800b0ec <vTaskSuspend+0x10c>)
 800b036:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d004      	beq.n	800b04a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3318      	adds	r3, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fdda 	bl	800abfe <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	4827      	ldr	r0, [pc, #156]	; (800b0f0 <vTaskSuspend+0x110>)
 800b052:	f7ff fd77 	bl	800ab44 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d103      	bne.n	800b06a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b06a:	f000 fd93 	bl	800bb94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b06e:	4b21      	ldr	r3, [pc, #132]	; (800b0f4 <vTaskSuspend+0x114>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d005      	beq.n	800b082 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b076:	f000 fd5d 	bl	800bb34 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b07a:	f000 fba7 	bl	800b7cc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b07e:	f000 fd89 	bl	800bb94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b082:	4b18      	ldr	r3, [pc, #96]	; (800b0e4 <vTaskSuspend+0x104>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d127      	bne.n	800b0dc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b08c:	4b19      	ldr	r3, [pc, #100]	; (800b0f4 <vTaskSuspend+0x114>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d017      	beq.n	800b0c4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b094:	4b18      	ldr	r3, [pc, #96]	; (800b0f8 <vTaskSuspend+0x118>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00a      	beq.n	800b0b2 <vTaskSuspend+0xd2>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	60bb      	str	r3, [r7, #8]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b0b2:	4b12      	ldr	r3, [pc, #72]	; (800b0fc <vTaskSuspend+0x11c>)
 800b0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0c2:	e00b      	b.n	800b0dc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b0c4:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <vTaskSuspend+0x110>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <vTaskSuspend+0x120>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d103      	bne.n	800b0d8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b0d0:	4b04      	ldr	r3, [pc, #16]	; (800b0e4 <vTaskSuspend+0x104>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
	}
 800b0d6:	e001      	b.n	800b0dc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b0d8:	f000 fa66 	bl	800b5a8 <vTaskSwitchContext>
	}
 800b0dc:	bf00      	nop
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	200003c8 	.word	0x200003c8
 800b0e8:	200003cc 	.word	0x200003cc
 800b0ec:	200004d0 	.word	0x200004d0
 800b0f0:	200004b4 	.word	0x200004b4
 800b0f4:	200004d4 	.word	0x200004d4
 800b0f8:	200004f0 	.word	0x200004f0
 800b0fc:	e000ed04 	.word	0xe000ed04
 800b100:	200004c8 	.word	0x200004c8

0800b104 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	60fb      	str	r3, [r7, #12]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	695b      	ldr	r3, [r3, #20]
 800b134:	4a0a      	ldr	r2, [pc, #40]	; (800b160 <prvTaskIsTaskSuspended+0x5c>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d10a      	bne.n	800b150 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13e:	4a09      	ldr	r2, [pc, #36]	; (800b164 <prvTaskIsTaskSuspended+0x60>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d005      	beq.n	800b150 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b14c:	2301      	movs	r3, #1
 800b14e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b150:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b152:	4618      	mov	r0, r3
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	200004b4 	.word	0x200004b4
 800b164:	20000488 	.word	0x20000488

0800b168 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <vTaskResume+0x28>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	60bb      	str	r3, [r7, #8]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b190:	4b20      	ldr	r3, [pc, #128]	; (800b214 <vTaskResume+0xac>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	429a      	cmp	r2, r3
 800b198:	d037      	beq.n	800b20a <vTaskResume+0xa2>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d034      	beq.n	800b20a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800b1a0:	f000 fcc8 	bl	800bb34 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff ffad 	bl	800b104 <prvTaskIsTaskSuspended>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d02a      	beq.n	800b206 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fd22 	bl	800abfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	2201      	movs	r2, #1
 800b1c0:	409a      	lsls	r2, r3
 800b1c2:	4b15      	ldr	r3, [pc, #84]	; (800b218 <vTaskResume+0xb0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	4a13      	ldr	r2, [pc, #76]	; (800b218 <vTaskResume+0xb0>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4a10      	ldr	r2, [pc, #64]	; (800b21c <vTaskResume+0xb4>)
 800b1da:	441a      	add	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f7ff fcae 	bl	800ab44 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4b09      	ldr	r3, [pc, #36]	; (800b214 <vTaskResume+0xac>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d307      	bcc.n	800b206 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b1f6:	4b0a      	ldr	r3, [pc, #40]	; (800b220 <vTaskResume+0xb8>)
 800b1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b206:	f000 fcc5 	bl	800bb94 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b20a:	bf00      	nop
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200003c8 	.word	0x200003c8
 800b218:	200004d0 	.word	0x200004d0
 800b21c:	200003cc 	.word	0x200003cc
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b232:	463a      	mov	r2, r7
 800b234:	1d39      	adds	r1, r7, #4
 800b236:	f107 0308 	add.w	r3, r7, #8
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7f5 fe3e 	bl	8000ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	9202      	str	r2, [sp, #8]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	2300      	movs	r3, #0
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	2300      	movs	r3, #0
 800b250:	460a      	mov	r2, r1
 800b252:	491e      	ldr	r1, [pc, #120]	; (800b2cc <vTaskStartScheduler+0xa8>)
 800b254:	481e      	ldr	r0, [pc, #120]	; (800b2d0 <vTaskStartScheduler+0xac>)
 800b256:	f7ff fcfc 	bl	800ac52 <xTaskCreateStatic>
 800b25a:	4603      	mov	r3, r0
 800b25c:	4a1d      	ldr	r2, [pc, #116]	; (800b2d4 <vTaskStartScheduler+0xb0>)
 800b25e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b260:	4b1c      	ldr	r3, [pc, #112]	; (800b2d4 <vTaskStartScheduler+0xb0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b268:	2301      	movs	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	e001      	b.n	800b272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d116      	bne.n	800b2a6 <vTaskStartScheduler+0x82>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	613b      	str	r3, [r7, #16]
}
 800b28a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b28c:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <vTaskStartScheduler+0xb4>)
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295
 800b292:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b294:	4b11      	ldr	r3, [pc, #68]	; (800b2dc <vTaskStartScheduler+0xb8>)
 800b296:	2201      	movs	r2, #1
 800b298:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b29a:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <vTaskStartScheduler+0xbc>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2a0:	f000 fba6 	bl	800b9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2a4:	e00e      	b.n	800b2c4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ac:	d10a      	bne.n	800b2c4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60fb      	str	r3, [r7, #12]
}
 800b2c0:	bf00      	nop
 800b2c2:	e7fe      	b.n	800b2c2 <vTaskStartScheduler+0x9e>
}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	0800c200 	.word	0x0800c200
 800b2d0:	0800b661 	.word	0x0800b661
 800b2d4:	200004ec 	.word	0x200004ec
 800b2d8:	200004e8 	.word	0x200004e8
 800b2dc:	200004d4 	.word	0x200004d4
 800b2e0:	200004cc 	.word	0x200004cc

0800b2e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <vTaskSuspendAll+0x18>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	4a03      	ldr	r2, [pc, #12]	; (800b2fc <vTaskSuspendAll+0x18>)
 800b2f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2f2:	bf00      	nop
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	200004f0 	.word	0x200004f0

0800b300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b30e:	4b41      	ldr	r3, [pc, #260]	; (800b414 <xTaskResumeAll+0x114>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10a      	bne.n	800b32c <xTaskResumeAll+0x2c>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	603b      	str	r3, [r7, #0]
}
 800b328:	bf00      	nop
 800b32a:	e7fe      	b.n	800b32a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b32c:	f000 fc02 	bl	800bb34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b330:	4b38      	ldr	r3, [pc, #224]	; (800b414 <xTaskResumeAll+0x114>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3b01      	subs	r3, #1
 800b336:	4a37      	ldr	r2, [pc, #220]	; (800b414 <xTaskResumeAll+0x114>)
 800b338:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b33a:	4b36      	ldr	r3, [pc, #216]	; (800b414 <xTaskResumeAll+0x114>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d161      	bne.n	800b406 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b342:	4b35      	ldr	r3, [pc, #212]	; (800b418 <xTaskResumeAll+0x118>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d05d      	beq.n	800b406 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b34a:	e02e      	b.n	800b3aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34c:	4b33      	ldr	r3, [pc, #204]	; (800b41c <xTaskResumeAll+0x11c>)
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3318      	adds	r3, #24
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff fc50 	bl	800abfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3304      	adds	r3, #4
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff fc4b 	bl	800abfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	2201      	movs	r2, #1
 800b36e:	409a      	lsls	r2, r3
 800b370:	4b2b      	ldr	r3, [pc, #172]	; (800b420 <xTaskResumeAll+0x120>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4313      	orrs	r3, r2
 800b376:	4a2a      	ldr	r2, [pc, #168]	; (800b420 <xTaskResumeAll+0x120>)
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a27      	ldr	r2, [pc, #156]	; (800b424 <xTaskResumeAll+0x124>)
 800b388:	441a      	add	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3304      	adds	r3, #4
 800b38e:	4619      	mov	r1, r3
 800b390:	4610      	mov	r0, r2
 800b392:	f7ff fbd7 	bl	800ab44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39a:	4b23      	ldr	r3, [pc, #140]	; (800b428 <xTaskResumeAll+0x128>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d302      	bcc.n	800b3aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b3a4:	4b21      	ldr	r3, [pc, #132]	; (800b42c <xTaskResumeAll+0x12c>)
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3aa:	4b1c      	ldr	r3, [pc, #112]	; (800b41c <xTaskResumeAll+0x11c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1cc      	bne.n	800b34c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3b8:	f000 fa08 	bl	800b7cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3bc:	4b1c      	ldr	r3, [pc, #112]	; (800b430 <xTaskResumeAll+0x130>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d010      	beq.n	800b3ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3c8:	f000 f836 	bl	800b438 <xTaskIncrementTick>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b3d2:	4b16      	ldr	r3, [pc, #88]	; (800b42c <xTaskResumeAll+0x12c>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1f1      	bne.n	800b3c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b3e4:	4b12      	ldr	r3, [pc, #72]	; (800b430 <xTaskResumeAll+0x130>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3ea:	4b10      	ldr	r3, [pc, #64]	; (800b42c <xTaskResumeAll+0x12c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d009      	beq.n	800b406 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <xTaskResumeAll+0x134>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b406:	f000 fbc5 	bl	800bb94 <vPortExitCritical>

	return xAlreadyYielded;
 800b40a:	68bb      	ldr	r3, [r7, #8]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	200004f0 	.word	0x200004f0
 800b418:	200004c8 	.word	0x200004c8
 800b41c:	20000488 	.word	0x20000488
 800b420:	200004d0 	.word	0x200004d0
 800b424:	200003cc 	.word	0x200003cc
 800b428:	200003c8 	.word	0x200003c8
 800b42c:	200004dc 	.word	0x200004dc
 800b430:	200004d8 	.word	0x200004d8
 800b434:	e000ed04 	.word	0xe000ed04

0800b438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b43e:	2300      	movs	r3, #0
 800b440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b442:	4b4e      	ldr	r3, [pc, #312]	; (800b57c <xTaskIncrementTick+0x144>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	f040 808e 	bne.w	800b568 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b44c:	4b4c      	ldr	r3, [pc, #304]	; (800b580 <xTaskIncrementTick+0x148>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3301      	adds	r3, #1
 800b452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b454:	4a4a      	ldr	r2, [pc, #296]	; (800b580 <xTaskIncrementTick+0x148>)
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d120      	bne.n	800b4a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b460:	4b48      	ldr	r3, [pc, #288]	; (800b584 <xTaskIncrementTick+0x14c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <xTaskIncrementTick+0x48>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	603b      	str	r3, [r7, #0]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <xTaskIncrementTick+0x46>
 800b480:	4b40      	ldr	r3, [pc, #256]	; (800b584 <xTaskIncrementTick+0x14c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	4b40      	ldr	r3, [pc, #256]	; (800b588 <xTaskIncrementTick+0x150>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a3e      	ldr	r2, [pc, #248]	; (800b584 <xTaskIncrementTick+0x14c>)
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	4a3e      	ldr	r2, [pc, #248]	; (800b588 <xTaskIncrementTick+0x150>)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	4b3d      	ldr	r3, [pc, #244]	; (800b58c <xTaskIncrementTick+0x154>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3301      	adds	r3, #1
 800b49a:	4a3c      	ldr	r2, [pc, #240]	; (800b58c <xTaskIncrementTick+0x154>)
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	f000 f995 	bl	800b7cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4a2:	4b3b      	ldr	r3, [pc, #236]	; (800b590 <xTaskIncrementTick+0x158>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d348      	bcc.n	800b53e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4ac:	4b35      	ldr	r3, [pc, #212]	; (800b584 <xTaskIncrementTick+0x14c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d104      	bne.n	800b4c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b6:	4b36      	ldr	r3, [pc, #216]	; (800b590 <xTaskIncrementTick+0x158>)
 800b4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4bc:	601a      	str	r2, [r3, #0]
					break;
 800b4be:	e03e      	b.n	800b53e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c0:	4b30      	ldr	r3, [pc, #192]	; (800b584 <xTaskIncrementTick+0x14c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d203      	bcs.n	800b4e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4d8:	4a2d      	ldr	r2, [pc, #180]	; (800b590 <xTaskIncrementTick+0x158>)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4de:	e02e      	b.n	800b53e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff fb8a 	bl	800abfe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d004      	beq.n	800b4fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	3318      	adds	r3, #24
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff fb81 	bl	800abfe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b500:	2201      	movs	r2, #1
 800b502:	409a      	lsls	r2, r3
 800b504:	4b23      	ldr	r3, [pc, #140]	; (800b594 <xTaskIncrementTick+0x15c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4313      	orrs	r3, r2
 800b50a:	4a22      	ldr	r2, [pc, #136]	; (800b594 <xTaskIncrementTick+0x15c>)
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b512:	4613      	mov	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4a1f      	ldr	r2, [pc, #124]	; (800b598 <xTaskIncrementTick+0x160>)
 800b51c:	441a      	add	r2, r3
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	3304      	adds	r3, #4
 800b522:	4619      	mov	r1, r3
 800b524:	4610      	mov	r0, r2
 800b526:	f7ff fb0d 	bl	800ab44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <xTaskIncrementTick+0x164>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	429a      	cmp	r2, r3
 800b536:	d3b9      	bcc.n	800b4ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b538:	2301      	movs	r3, #1
 800b53a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b53c:	e7b6      	b.n	800b4ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b53e:	4b17      	ldr	r3, [pc, #92]	; (800b59c <xTaskIncrementTick+0x164>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b544:	4914      	ldr	r1, [pc, #80]	; (800b598 <xTaskIncrementTick+0x160>)
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	440b      	add	r3, r1
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d901      	bls.n	800b55a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b55a:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <xTaskIncrementTick+0x168>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d007      	beq.n	800b572 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b562:	2301      	movs	r3, #1
 800b564:	617b      	str	r3, [r7, #20]
 800b566:	e004      	b.n	800b572 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b568:	4b0e      	ldr	r3, [pc, #56]	; (800b5a4 <xTaskIncrementTick+0x16c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	4a0d      	ldr	r2, [pc, #52]	; (800b5a4 <xTaskIncrementTick+0x16c>)
 800b570:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b572:	697b      	ldr	r3, [r7, #20]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	200004f0 	.word	0x200004f0
 800b580:	200004cc 	.word	0x200004cc
 800b584:	20000480 	.word	0x20000480
 800b588:	20000484 	.word	0x20000484
 800b58c:	200004e0 	.word	0x200004e0
 800b590:	200004e8 	.word	0x200004e8
 800b594:	200004d0 	.word	0x200004d0
 800b598:	200003cc 	.word	0x200003cc
 800b59c:	200003c8 	.word	0x200003c8
 800b5a0:	200004dc 	.word	0x200004dc
 800b5a4:	200004d8 	.word	0x200004d8

0800b5a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5ae:	4b27      	ldr	r3, [pc, #156]	; (800b64c <vTaskSwitchContext+0xa4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5b6:	4b26      	ldr	r3, [pc, #152]	; (800b650 <vTaskSwitchContext+0xa8>)
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5bc:	e03f      	b.n	800b63e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b5be:	4b24      	ldr	r3, [pc, #144]	; (800b650 <vTaskSwitchContext+0xa8>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c4:	4b23      	ldr	r3, [pc, #140]	; (800b654 <vTaskSwitchContext+0xac>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	fab3 f383 	clz	r3, r3
 800b5d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b5d2:	7afb      	ldrb	r3, [r7, #11]
 800b5d4:	f1c3 031f 	rsb	r3, r3, #31
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	491f      	ldr	r1, [pc, #124]	; (800b658 <vTaskSwitchContext+0xb0>)
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	607b      	str	r3, [r7, #4]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <vTaskSwitchContext+0x5a>
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4a12      	ldr	r2, [pc, #72]	; (800b658 <vTaskSwitchContext+0xb0>)
 800b610:	4413      	add	r3, r2
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	605a      	str	r2, [r3, #4]
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	3308      	adds	r3, #8
 800b626:	429a      	cmp	r2, r3
 800b628:	d104      	bne.n	800b634 <vTaskSwitchContext+0x8c>
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	605a      	str	r2, [r3, #4]
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	4a08      	ldr	r2, [pc, #32]	; (800b65c <vTaskSwitchContext+0xb4>)
 800b63c:	6013      	str	r3, [r2, #0]
}
 800b63e:	bf00      	nop
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	200004f0 	.word	0x200004f0
 800b650:	200004dc 	.word	0x200004dc
 800b654:	200004d0 	.word	0x200004d0
 800b658:	200003cc 	.word	0x200003cc
 800b65c:	200003c8 	.word	0x200003c8

0800b660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b668:	f000 f852 	bl	800b710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <prvIdleTask+0x28>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d9f9      	bls.n	800b668 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <prvIdleTask+0x2c>)
 800b676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b684:	e7f0      	b.n	800b668 <prvIdleTask+0x8>
 800b686:	bf00      	nop
 800b688:	200003cc 	.word	0x200003cc
 800b68c:	e000ed04 	.word	0xe000ed04

0800b690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b696:	2300      	movs	r3, #0
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	e00c      	b.n	800b6b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <prvInitialiseTaskLists+0x60>)
 800b6a8:	4413      	add	r3, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fa1d 	bl	800aaea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	607b      	str	r3, [r7, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	d9ef      	bls.n	800b69c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6bc:	480d      	ldr	r0, [pc, #52]	; (800b6f4 <prvInitialiseTaskLists+0x64>)
 800b6be:	f7ff fa14 	bl	800aaea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c2:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x68>)
 800b6c4:	f7ff fa11 	bl	800aaea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6c8:	480c      	ldr	r0, [pc, #48]	; (800b6fc <prvInitialiseTaskLists+0x6c>)
 800b6ca:	f7ff fa0e 	bl	800aaea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6ce:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x70>)
 800b6d0:	f7ff fa0b 	bl	800aaea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d4:	480b      	ldr	r0, [pc, #44]	; (800b704 <prvInitialiseTaskLists+0x74>)
 800b6d6:	f7ff fa08 	bl	800aaea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6da:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x78>)
 800b6dc:	4a05      	ldr	r2, [pc, #20]	; (800b6f4 <prvInitialiseTaskLists+0x64>)
 800b6de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <prvInitialiseTaskLists+0x7c>)
 800b6e2:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x68>)
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	200003cc 	.word	0x200003cc
 800b6f4:	20000458 	.word	0x20000458
 800b6f8:	2000046c 	.word	0x2000046c
 800b6fc:	20000488 	.word	0x20000488
 800b700:	2000049c 	.word	0x2000049c
 800b704:	200004b4 	.word	0x200004b4
 800b708:	20000480 	.word	0x20000480
 800b70c:	20000484 	.word	0x20000484

0800b710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b716:	e019      	b.n	800b74c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b718:	f000 fa0c 	bl	800bb34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71c:	4b10      	ldr	r3, [pc, #64]	; (800b760 <prvCheckTasksWaitingTermination+0x50>)
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff fa68 	bl	800abfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <prvCheckTasksWaitingTermination+0x54>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3b01      	subs	r3, #1
 800b734:	4a0b      	ldr	r2, [pc, #44]	; (800b764 <prvCheckTasksWaitingTermination+0x54>)
 800b736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	4a0a      	ldr	r2, [pc, #40]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b742:	f000 fa27 	bl	800bb94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f810 	bl	800b76c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74c:	4b06      	ldr	r3, [pc, #24]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e1      	bne.n	800b718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	2000049c 	.word	0x2000049c
 800b764:	200004c8 	.word	0x200004c8
 800b768:	200004b0 	.word	0x200004b0

0800b76c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d108      	bne.n	800b790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fb84 	bl	800be90 <vPortFree>
				vPortFree( pxTCB );
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 fb81 	bl	800be90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b78e:	e018      	b.n	800b7c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b796:	2b01      	cmp	r3, #1
 800b798:	d103      	bne.n	800b7a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fb78 	bl	800be90 <vPortFree>
	}
 800b7a0:	e00f      	b.n	800b7c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d00a      	beq.n	800b7c2 <prvDeleteTCB+0x56>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <prvDeleteTCB+0x54>
	}
 800b7c2:	bf00      	nop
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <prvResetNextTaskUnblockTime+0x38>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d104      	bne.n	800b7e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <prvResetNextTaskUnblockTime+0x3c>)
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7e4:	e008      	b.n	800b7f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <prvResetNextTaskUnblockTime+0x38>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	4a04      	ldr	r2, [pc, #16]	; (800b808 <prvResetNextTaskUnblockTime+0x3c>)
 800b7f6:	6013      	str	r3, [r2, #0]
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20000480 	.word	0x20000480
 800b808:	200004e8 	.word	0x200004e8

0800b80c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b816:	4b29      	ldr	r3, [pc, #164]	; (800b8bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b81c:	4b28      	ldr	r3, [pc, #160]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3304      	adds	r3, #4
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff f9eb 	bl	800abfe <uxListRemove>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10b      	bne.n	800b846 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	2201      	movs	r2, #1
 800b836:	fa02 f303 	lsl.w	r3, r2, r3
 800b83a:	43da      	mvns	r2, r3
 800b83c:	4b21      	ldr	r3, [pc, #132]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4013      	ands	r3, r2
 800b842:	4a20      	ldr	r2, [pc, #128]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b844:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84c:	d10a      	bne.n	800b864 <prvAddCurrentTaskToDelayedList+0x58>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d007      	beq.n	800b864 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b854:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	481a      	ldr	r0, [pc, #104]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b85e:	f7ff f971 	bl	800ab44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b862:	e026      	b.n	800b8b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4413      	add	r3, r2
 800b86a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b86c:	4b14      	ldr	r3, [pc, #80]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d209      	bcs.n	800b890 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b87c:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7ff f97f 	bl	800ab8c <vListInsert>
}
 800b88e:	e010      	b.n	800b8b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3304      	adds	r3, #4
 800b89a:	4619      	mov	r1, r3
 800b89c:	4610      	mov	r0, r2
 800b89e:	f7ff f975 	bl	800ab8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8a2:	4b0c      	ldr	r3, [pc, #48]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d202      	bcs.n	800b8b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b8ac:	4a09      	ldr	r2, [pc, #36]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	6013      	str	r3, [r2, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	200004cc 	.word	0x200004cc
 800b8c0:	200003c8 	.word	0x200003c8
 800b8c4:	200004d0 	.word	0x200004d0
 800b8c8:	200004b4 	.word	0x200004b4
 800b8cc:	20000484 	.word	0x20000484
 800b8d0:	20000480 	.word	0x20000480
 800b8d4:	200004e8 	.word	0x200004e8

0800b8d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3b04      	subs	r3, #4
 800b8e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3b04      	subs	r3, #4
 800b8f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f023 0201 	bic.w	r2, r3, #1
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3b04      	subs	r3, #4
 800b906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b908:	4a0c      	ldr	r2, [pc, #48]	; (800b93c <pxPortInitialiseStack+0x64>)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3b14      	subs	r3, #20
 800b912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3b04      	subs	r3, #4
 800b91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f06f 0202 	mvn.w	r2, #2
 800b926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3b20      	subs	r3, #32
 800b92c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b92e:	68fb      	ldr	r3, [r7, #12]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	0800b941 	.word	0x0800b941

0800b940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b94a:	4b12      	ldr	r3, [pc, #72]	; (800b994 <prvTaskExitError+0x54>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b952:	d00a      	beq.n	800b96a <prvTaskExitError+0x2a>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	60fb      	str	r3, [r7, #12]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <prvTaskExitError+0x28>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	60bb      	str	r3, [r7, #8]
}
 800b97c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b97e:	bf00      	nop
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0fc      	beq.n	800b980 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b986:	bf00      	nop
 800b988:	bf00      	nop
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20000010 	.word	0x20000010
	...

0800b9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <pxCurrentTCBConst2>)
 800b9a2:	6819      	ldr	r1, [r3, #0]
 800b9a4:	6808      	ldr	r0, [r1, #0]
 800b9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9aa:	f380 8809 	msr	PSP, r0
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f04f 0000 	mov.w	r0, #0
 800b9b6:	f380 8811 	msr	BASEPRI, r0
 800b9ba:	4770      	bx	lr
 800b9bc:	f3af 8000 	nop.w

0800b9c0 <pxCurrentTCBConst2>:
 800b9c0:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop

0800b9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9c8:	4808      	ldr	r0, [pc, #32]	; (800b9ec <prvPortStartFirstTask+0x24>)
 800b9ca:	6800      	ldr	r0, [r0, #0]
 800b9cc:	6800      	ldr	r0, [r0, #0]
 800b9ce:	f380 8808 	msr	MSP, r0
 800b9d2:	f04f 0000 	mov.w	r0, #0
 800b9d6:	f380 8814 	msr	CONTROL, r0
 800b9da:	b662      	cpsie	i
 800b9dc:	b661      	cpsie	f
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	df00      	svc	0
 800b9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9ea:	bf00      	nop
 800b9ec:	e000ed08 	.word	0xe000ed08

0800b9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9f6:	4b46      	ldr	r3, [pc, #280]	; (800bb10 <xPortStartScheduler+0x120>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a46      	ldr	r2, [pc, #280]	; (800bb14 <xPortStartScheduler+0x124>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d10a      	bne.n	800ba16 <xPortStartScheduler+0x26>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	613b      	str	r3, [r7, #16]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba16:	4b3e      	ldr	r3, [pc, #248]	; (800bb10 <xPortStartScheduler+0x120>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a3f      	ldr	r2, [pc, #252]	; (800bb18 <xPortStartScheduler+0x128>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d10a      	bne.n	800ba36 <xPortStartScheduler+0x46>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60fb      	str	r3, [r7, #12]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba36:	4b39      	ldr	r3, [pc, #228]	; (800bb1c <xPortStartScheduler+0x12c>)
 800ba38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	22ff      	movs	r2, #255	; 0xff
 800ba46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	4b31      	ldr	r3, [pc, #196]	; (800bb20 <xPortStartScheduler+0x130>)
 800ba5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba5e:	4b31      	ldr	r3, [pc, #196]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba60:	2207      	movs	r2, #7
 800ba62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba64:	e009      	b.n	800ba7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba66:	4b2f      	ldr	r3, [pc, #188]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	4a2d      	ldr	r2, [pc, #180]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba82:	2b80      	cmp	r3, #128	; 0x80
 800ba84:	d0ef      	beq.n	800ba66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba86:	4b27      	ldr	r3, [pc, #156]	; (800bb24 <xPortStartScheduler+0x134>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f1c3 0307 	rsb	r3, r3, #7
 800ba8e:	2b04      	cmp	r3, #4
 800ba90:	d00a      	beq.n	800baa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	60bb      	str	r3, [r7, #8]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800baa8:	4b1e      	ldr	r3, [pc, #120]	; (800bb24 <xPortStartScheduler+0x134>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <xPortStartScheduler+0x134>)
 800bab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <xPortStartScheduler+0x134>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baba:	4a1a      	ldr	r2, [pc, #104]	; (800bb24 <xPortStartScheduler+0x134>)
 800babc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bac6:	4b18      	ldr	r3, [pc, #96]	; (800bb28 <xPortStartScheduler+0x138>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a17      	ldr	r2, [pc, #92]	; (800bb28 <xPortStartScheduler+0x138>)
 800bacc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bad2:	4b15      	ldr	r3, [pc, #84]	; (800bb28 <xPortStartScheduler+0x138>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a14      	ldr	r2, [pc, #80]	; (800bb28 <xPortStartScheduler+0x138>)
 800bad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800badc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bade:	f000 f8dd 	bl	800bc9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bae2:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <xPortStartScheduler+0x13c>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bae8:	f000 f8fc 	bl	800bce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800baec:	4b10      	ldr	r3, [pc, #64]	; (800bb30 <xPortStartScheduler+0x140>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a0f      	ldr	r2, [pc, #60]	; (800bb30 <xPortStartScheduler+0x140>)
 800baf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800baf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800baf8:	f7ff ff66 	bl	800b9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bafc:	f7ff fd54 	bl	800b5a8 <vTaskSwitchContext>
	prvTaskExitError();
 800bb00:	f7ff ff1e 	bl	800b940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	e000ed00 	.word	0xe000ed00
 800bb14:	410fc271 	.word	0x410fc271
 800bb18:	410fc270 	.word	0x410fc270
 800bb1c:	e000e400 	.word	0xe000e400
 800bb20:	200004f4 	.word	0x200004f4
 800bb24:	200004f8 	.word	0x200004f8
 800bb28:	e000ed20 	.word	0xe000ed20
 800bb2c:	20000010 	.word	0x20000010
 800bb30:	e000ef34 	.word	0xe000ef34

0800bb34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	607b      	str	r3, [r7, #4]
}
 800bb4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb4e:	4b0f      	ldr	r3, [pc, #60]	; (800bb8c <vPortEnterCritical+0x58>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3301      	adds	r3, #1
 800bb54:	4a0d      	ldr	r2, [pc, #52]	; (800bb8c <vPortEnterCritical+0x58>)
 800bb56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <vPortEnterCritical+0x58>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d10f      	bne.n	800bb80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb60:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <vPortEnterCritical+0x5c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	603b      	str	r3, [r7, #0]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <vPortEnterCritical+0x4a>
	}
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20000010 	.word	0x20000010
 800bb90:	e000ed04 	.word	0xe000ed04

0800bb94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb9a:	4b12      	ldr	r3, [pc, #72]	; (800bbe4 <vPortExitCritical+0x50>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <vPortExitCritical+0x24>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	607b      	str	r3, [r7, #4]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <vPortExitCritical+0x50>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	4a09      	ldr	r2, [pc, #36]	; (800bbe4 <vPortExitCritical+0x50>)
 800bbc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbc2:	4b08      	ldr	r3, [pc, #32]	; (800bbe4 <vPortExitCritical+0x50>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d105      	bne.n	800bbd6 <vPortExitCritical+0x42>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bbd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbd6:	bf00      	nop
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	20000010 	.word	0x20000010
	...

0800bbf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbf0:	f3ef 8009 	mrs	r0, PSP
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <pxCurrentTCBConst>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	f01e 0f10 	tst.w	lr, #16
 800bc00:	bf08      	it	eq
 800bc02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0a:	6010      	str	r0, [r2, #0]
 800bc0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc14:	f380 8811 	msr	BASEPRI, r0
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f7ff fcc2 	bl	800b5a8 <vTaskSwitchContext>
 800bc24:	f04f 0000 	mov.w	r0, #0
 800bc28:	f380 8811 	msr	BASEPRI, r0
 800bc2c:	bc09      	pop	{r0, r3}
 800bc2e:	6819      	ldr	r1, [r3, #0]
 800bc30:	6808      	ldr	r0, [r1, #0]
 800bc32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc36:	f01e 0f10 	tst.w	lr, #16
 800bc3a:	bf08      	it	eq
 800bc3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc40:	f380 8809 	msr	PSP, r0
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	f3af 8000 	nop.w

0800bc50 <pxCurrentTCBConst>:
 800bc50:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	607b      	str	r3, [r7, #4]
}
 800bc70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc72:	f7ff fbe1 	bl	800b438 <xTaskIncrementTick>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc7c:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <SysTick_Handler+0x40>)
 800bc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc82:	601a      	str	r2, [r3, #0]
 800bc84:	2300      	movs	r3, #0
 800bc86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	f383 8811 	msr	BASEPRI, r3
}
 800bc8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	e000ed04 	.word	0xe000ed04

0800bc9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <vPortSetupTimerInterrupt+0x34>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <vPortSetupTimerInterrupt+0x38>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcac:	4b0a      	ldr	r3, [pc, #40]	; (800bcd8 <vPortSetupTimerInterrupt+0x3c>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a0a      	ldr	r2, [pc, #40]	; (800bcdc <vPortSetupTimerInterrupt+0x40>)
 800bcb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb6:	099b      	lsrs	r3, r3, #6
 800bcb8:	4a09      	ldr	r2, [pc, #36]	; (800bce0 <vPortSetupTimerInterrupt+0x44>)
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcbe:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <vPortSetupTimerInterrupt+0x34>)
 800bcc0:	2207      	movs	r2, #7
 800bcc2:	601a      	str	r2, [r3, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	e000e010 	.word	0xe000e010
 800bcd4:	e000e018 	.word	0xe000e018
 800bcd8:	20000000 	.word	0x20000000
 800bcdc:	10624dd3 	.word	0x10624dd3
 800bce0:	e000e014 	.word	0xe000e014

0800bce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bcf4 <vPortEnableVFP+0x10>
 800bce8:	6801      	ldr	r1, [r0, #0]
 800bcea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bcee:	6001      	str	r1, [r0, #0]
 800bcf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bcf2:	bf00      	nop
 800bcf4:	e000ed88 	.word	0xe000ed88

0800bcf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08a      	sub	sp, #40	; 0x28
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd00:	2300      	movs	r3, #0
 800bd02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd04:	f7ff faee 	bl	800b2e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd08:	4b5b      	ldr	r3, [pc, #364]	; (800be78 <pvPortMalloc+0x180>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd10:	f000 f920 	bl	800bf54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd14:	4b59      	ldr	r3, [pc, #356]	; (800be7c <pvPortMalloc+0x184>)
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 8093 	bne.w	800be48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d01d      	beq.n	800bd64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd28:	2208      	movs	r2, #8
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d014      	beq.n	800bd64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f023 0307 	bic.w	r3, r3, #7
 800bd40:	3308      	adds	r3, #8
 800bd42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00a      	beq.n	800bd64 <pvPortMalloc+0x6c>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	617b      	str	r3, [r7, #20]
}
 800bd60:	bf00      	nop
 800bd62:	e7fe      	b.n	800bd62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d06e      	beq.n	800be48 <pvPortMalloc+0x150>
 800bd6a:	4b45      	ldr	r3, [pc, #276]	; (800be80 <pvPortMalloc+0x188>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d869      	bhi.n	800be48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd74:	4b43      	ldr	r3, [pc, #268]	; (800be84 <pvPortMalloc+0x18c>)
 800bd76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd78:	4b42      	ldr	r3, [pc, #264]	; (800be84 <pvPortMalloc+0x18c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd7e:	e004      	b.n	800bd8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d903      	bls.n	800bd9c <pvPortMalloc+0xa4>
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1f1      	bne.n	800bd80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd9c:	4b36      	ldr	r3, [pc, #216]	; (800be78 <pvPortMalloc+0x180>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d050      	beq.n	800be48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2208      	movs	r2, #8
 800bdac:	4413      	add	r3, r2
 800bdae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	1ad2      	subs	r2, r2, r3
 800bdc0:	2308      	movs	r3, #8
 800bdc2:	005b      	lsls	r3, r3, #1
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d91f      	bls.n	800be08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00a      	beq.n	800bdf0 <pvPortMalloc+0xf8>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	613b      	str	r3, [r7, #16]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	1ad2      	subs	r2, r2, r3
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be02:	69b8      	ldr	r0, [r7, #24]
 800be04:	f000 f908 	bl	800c018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be08:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <pvPortMalloc+0x188>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	4a1b      	ldr	r2, [pc, #108]	; (800be80 <pvPortMalloc+0x188>)
 800be14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be16:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <pvPortMalloc+0x188>)
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	4b1b      	ldr	r3, [pc, #108]	; (800be88 <pvPortMalloc+0x190>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d203      	bcs.n	800be2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be22:	4b17      	ldr	r3, [pc, #92]	; (800be80 <pvPortMalloc+0x188>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a18      	ldr	r2, [pc, #96]	; (800be88 <pvPortMalloc+0x190>)
 800be28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <pvPortMalloc+0x184>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	431a      	orrs	r2, r3
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	2200      	movs	r2, #0
 800be3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be3e:	4b13      	ldr	r3, [pc, #76]	; (800be8c <pvPortMalloc+0x194>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	4a11      	ldr	r2, [pc, #68]	; (800be8c <pvPortMalloc+0x194>)
 800be46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be48:	f7ff fa5a 	bl	800b300 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00a      	beq.n	800be6c <pvPortMalloc+0x174>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	60fb      	str	r3, [r7, #12]
}
 800be68:	bf00      	nop
 800be6a:	e7fe      	b.n	800be6a <pvPortMalloc+0x172>
	return pvReturn;
 800be6c:	69fb      	ldr	r3, [r7, #28]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3728      	adds	r7, #40	; 0x28
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20004104 	.word	0x20004104
 800be7c:	20004118 	.word	0x20004118
 800be80:	20004108 	.word	0x20004108
 800be84:	200040fc 	.word	0x200040fc
 800be88:	2000410c 	.word	0x2000410c
 800be8c:	20004110 	.word	0x20004110

0800be90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d04d      	beq.n	800bf3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bea2:	2308      	movs	r3, #8
 800bea4:	425b      	negs	r3, r3
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	4413      	add	r3, r2
 800beaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	4b24      	ldr	r3, [pc, #144]	; (800bf48 <vPortFree+0xb8>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4013      	ands	r3, r2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <vPortFree+0x44>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	60fb      	str	r3, [r7, #12]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00a      	beq.n	800bef2 <vPortFree+0x62>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	60bb      	str	r3, [r7, #8]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	4b14      	ldr	r3, [pc, #80]	; (800bf48 <vPortFree+0xb8>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4013      	ands	r3, r2
 800befc:	2b00      	cmp	r3, #0
 800befe:	d01e      	beq.n	800bf3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11a      	bne.n	800bf3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	4b0e      	ldr	r3, [pc, #56]	; (800bf48 <vPortFree+0xb8>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	43db      	mvns	r3, r3
 800bf12:	401a      	ands	r2, r3
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf18:	f7ff f9e4 	bl	800b2e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <vPortFree+0xbc>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4413      	add	r3, r2
 800bf26:	4a09      	ldr	r2, [pc, #36]	; (800bf4c <vPortFree+0xbc>)
 800bf28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf2a:	6938      	ldr	r0, [r7, #16]
 800bf2c:	f000 f874 	bl	800c018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf30:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <vPortFree+0xc0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3301      	adds	r3, #1
 800bf36:	4a06      	ldr	r2, [pc, #24]	; (800bf50 <vPortFree+0xc0>)
 800bf38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf3a:	f7ff f9e1 	bl	800b300 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf3e:	bf00      	nop
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20004118 	.word	0x20004118
 800bf4c:	20004108 	.word	0x20004108
 800bf50:	20004114 	.word	0x20004114

0800bf54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf60:	4b27      	ldr	r3, [pc, #156]	; (800c000 <prvHeapInit+0xac>)
 800bf62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00c      	beq.n	800bf88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3307      	adds	r3, #7
 800bf72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f023 0307 	bic.w	r3, r3, #7
 800bf7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	4a1f      	ldr	r2, [pc, #124]	; (800c000 <prvHeapInit+0xac>)
 800bf84:	4413      	add	r3, r2
 800bf86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf8c:	4a1d      	ldr	r2, [pc, #116]	; (800c004 <prvHeapInit+0xb0>)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf92:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <prvHeapInit+0xb0>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bfa0:	2208      	movs	r2, #8
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f023 0307 	bic.w	r3, r3, #7
 800bfae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4a15      	ldr	r2, [pc, #84]	; (800c008 <prvHeapInit+0xb4>)
 800bfb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bfb6:	4b14      	ldr	r3, [pc, #80]	; (800c008 <prvHeapInit+0xb4>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfbe:	4b12      	ldr	r3, [pc, #72]	; (800c008 <prvHeapInit+0xb4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	1ad2      	subs	r2, r2, r3
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfd4:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <prvHeapInit+0xb4>)
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	4a0a      	ldr	r2, [pc, #40]	; (800c00c <prvHeapInit+0xb8>)
 800bfe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	4a09      	ldr	r2, [pc, #36]	; (800c010 <prvHeapInit+0xbc>)
 800bfea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfec:	4b09      	ldr	r3, [pc, #36]	; (800c014 <prvHeapInit+0xc0>)
 800bfee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bff2:	601a      	str	r2, [r3, #0]
}
 800bff4:	bf00      	nop
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	200004fc 	.word	0x200004fc
 800c004:	200040fc 	.word	0x200040fc
 800c008:	20004104 	.word	0x20004104
 800c00c:	2000410c 	.word	0x2000410c
 800c010:	20004108 	.word	0x20004108
 800c014:	20004118 	.word	0x20004118

0800c018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c020:	4b28      	ldr	r3, [pc, #160]	; (800c0c4 <prvInsertBlockIntoFreeList+0xac>)
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	e002      	b.n	800c02c <prvInsertBlockIntoFreeList+0x14>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	429a      	cmp	r2, r3
 800c034:	d8f7      	bhi.n	800c026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	4413      	add	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	429a      	cmp	r2, r3
 800c046:	d108      	bne.n	800c05a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	441a      	add	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	441a      	add	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d118      	bne.n	800c0a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	429a      	cmp	r2, r3
 800c078:	d00d      	beq.n	800c096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	441a      	add	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	e008      	b.n	800c0a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c096:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	e003      	b.n	800c0a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d002      	beq.n	800c0b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0b6:	bf00      	nop
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	200040fc 	.word	0x200040fc
 800c0c8:	20004104 	.word	0x20004104

0800c0cc <__libc_init_array>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	4d0d      	ldr	r5, [pc, #52]	; (800c104 <__libc_init_array+0x38>)
 800c0d0:	4c0d      	ldr	r4, [pc, #52]	; (800c108 <__libc_init_array+0x3c>)
 800c0d2:	1b64      	subs	r4, r4, r5
 800c0d4:	10a4      	asrs	r4, r4, #2
 800c0d6:	2600      	movs	r6, #0
 800c0d8:	42a6      	cmp	r6, r4
 800c0da:	d109      	bne.n	800c0f0 <__libc_init_array+0x24>
 800c0dc:	4d0b      	ldr	r5, [pc, #44]	; (800c10c <__libc_init_array+0x40>)
 800c0de:	4c0c      	ldr	r4, [pc, #48]	; (800c110 <__libc_init_array+0x44>)
 800c0e0:	f000 f820 	bl	800c124 <_init>
 800c0e4:	1b64      	subs	r4, r4, r5
 800c0e6:	10a4      	asrs	r4, r4, #2
 800c0e8:	2600      	movs	r6, #0
 800c0ea:	42a6      	cmp	r6, r4
 800c0ec:	d105      	bne.n	800c0fa <__libc_init_array+0x2e>
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0f4:	4798      	blx	r3
 800c0f6:	3601      	adds	r6, #1
 800c0f8:	e7ee      	b.n	800c0d8 <__libc_init_array+0xc>
 800c0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0fe:	4798      	blx	r3
 800c100:	3601      	adds	r6, #1
 800c102:	e7f2      	b.n	800c0ea <__libc_init_array+0x1e>
 800c104:	0800c250 	.word	0x0800c250
 800c108:	0800c250 	.word	0x0800c250
 800c10c:	0800c250 	.word	0x0800c250
 800c110:	0800c254 	.word	0x0800c254

0800c114 <memset>:
 800c114:	4402      	add	r2, r0
 800c116:	4603      	mov	r3, r0
 800c118:	4293      	cmp	r3, r2
 800c11a:	d100      	bne.n	800c11e <memset+0xa>
 800c11c:	4770      	bx	lr
 800c11e:	f803 1b01 	strb.w	r1, [r3], #1
 800c122:	e7f9      	b.n	800c118 <memset+0x4>

0800c124 <_init>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	bf00      	nop
 800c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12a:	bc08      	pop	{r3}
 800c12c:	469e      	mov	lr, r3
 800c12e:	4770      	bx	lr

0800c130 <_fini>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	bf00      	nop
 800c134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c136:	bc08      	pop	{r3}
 800c138:	469e      	mov	lr, r3
 800c13a:	4770      	bx	lr
