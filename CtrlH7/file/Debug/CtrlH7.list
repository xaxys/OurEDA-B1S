
CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000893c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08008c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004868  20000014  08008c70  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000487c  08008c70  0002487c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026886  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000419a  00000000  00000000  000468c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015a8  00000000  00000000  0004aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001460  00000000  00000000  0004c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038bff  00000000  00000000  0004d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a96d  00000000  00000000  0008606f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016afe1  00000000  00000000  000a09dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020b9bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a3c  00000000  00000000  0020ba10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008bc4 	.word	0x08008bc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	08008bc4 	.word	0x08008bc4

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000030 	.word	0x20000030
 8000608:	20000084 	.word	0x20000084

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000612:	4b49      	ldr	r3, [pc, #292]	; (8000738 <main+0x12c>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d11b      	bne.n	8000656 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000624:	f3bf 8f6f 	isb	sy
}
 8000628:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <main+0x12c>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000638:	f3bf 8f6f 	isb	sy
}
 800063c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800063e:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <main+0x12c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a3d      	ldr	r2, [pc, #244]	; (8000738 <main+0x12c>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800064a:	f3bf 8f4f 	dsb	sy
}
 800064e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000650:	f3bf 8f6f 	isb	sy
}
 8000654:	e000      	b.n	8000658 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000656:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000658:	4b37      	ldr	r3, [pc, #220]	; (8000738 <main+0x12c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000660:	2b00      	cmp	r3, #0
 8000662:	d138      	bne.n	80006d6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000664:	4b34      	ldr	r3, [pc, #208]	; (8000738 <main+0x12c>)
 8000666:	2200      	movs	r2, #0
 8000668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000672:	4b31      	ldr	r3, [pc, #196]	; (8000738 <main+0x12c>)
 8000674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000678:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	0b5b      	lsrs	r3, r3, #13
 800067e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000682:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	08db      	lsrs	r3, r3, #3
 8000688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800068c:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800068e:	6a3b      	ldr	r3, [r7, #32]
 8000690:	015a      	lsls	r2, r3, #5
 8000692:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000696:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000698:	69fa      	ldr	r2, [r7, #28]
 800069a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800069c:	4926      	ldr	r1, [pc, #152]	; (8000738 <main+0x12c>)
 800069e:	4313      	orrs	r3, r2
 80006a0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	61fa      	str	r2, [r7, #28]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1ef      	bne.n	800068e <main+0x82>
    } while(sets-- != 0U);
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	623a      	str	r2, [r7, #32]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1e5      	bne.n	8000684 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
}
 80006bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <main+0x12c>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <main+0x12c>)
 80006c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	e000      	b.n	80006d8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 f970 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f832 	bl	8000744 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006e0:	f000 f8b6 	bl	8000850 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 fbb6 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e8:	f000 fb5c 	bl	8000da4 <MX_DMA_Init>
  MX_IWDG1_Init();
 80006ec:	f000 f8dc 	bl	80008a8 <MX_IWDG1_Init>
  MX_UART4_Init();
 80006f0:	f000 f8f8 	bl	80008e4 <MX_UART4_Init>
  MX_UART5_Init();
 80006f4:	f000 f942 	bl	800097c <MX_UART5_Init>
  MX_UART7_Init();
 80006f8:	f000 f98c 	bl	8000a14 <MX_UART7_Init>
  MX_UART8_Init();
 80006fc:	f000 f9d6 	bl	8000aac <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000700:	f000 fa20 	bl	8000b44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000704:	f000 fa6a 	bl	8000bdc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000708:	f000 fab4 	bl	8000c74 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800070c:	f000 fafe 	bl	8000d0c <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <main+0x130>)
 8000712:	463c      	mov	r4, r7
 8000714:	461d      	mov	r5, r3
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000722:	463b      	mov	r3, r7
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f006 fff5 	bl	8007716 <osThreadCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <main+0x134>)
 8000730:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000732:	f006 ffe9 	bl	8007708 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x12a>
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	08008be8 	.word	0x08008be8
 8000740:	20004050 	.word	0x20004050

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	; 0x70
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	224c      	movs	r2, #76	; 0x4c
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f008 fa2e 	bl	8008bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f008 fa28 	bl	8008bb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000764:	2002      	movs	r0, #2
 8000766:	f003 f94b 	bl	8003a00 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <SystemClock_Config+0x100>)
 8000770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000772:	4a34      	ldr	r2, [pc, #208]	; (8000844 <SystemClock_Config+0x100>)
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	62d3      	str	r3, [r2, #44]	; 0x2c
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <SystemClock_Config+0x100>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <SystemClock_Config+0x104>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <SystemClock_Config+0x104>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <SystemClock_Config+0x104>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079c:	bf00      	nop
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <SystemClock_Config+0x104>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007aa:	d1f8      	bne.n	800079e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <SystemClock_Config+0x108>)
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	f023 0303 	bic.w	r3, r3, #3
 80007b4:	4a25      	ldr	r2, [pc, #148]	; (800084c <SystemClock_Config+0x108>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007bc:	2309      	movs	r3, #9
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007d2:	2305      	movs	r3, #5
 80007d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80007d6:	23a0      	movs	r3, #160	; 0xa0
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80007de:	2306      	movs	r3, #6
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007e6:	2308      	movs	r3, #8
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f93c 	bl	8003a74 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000802:	f000 fbbf 	bl	8000f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	233f      	movs	r3, #63	; 0x3f
 8000808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000812:	2308      	movs	r3, #8
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2102      	movs	r1, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fd31 	bl	8004294 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000838:	f000 fba4 	bl	8000f84 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	; 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58000400 	.word	0x58000400
 8000848:	58024800 	.word	0x58024800
 800084c:	58024400 	.word	0x58024400

08000850 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0b0      	sub	sp, #192	; 0xc0
 8000854:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	22bc      	movs	r2, #188	; 0xbc
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f008 f9a9 	bl	8008bb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART8
 8000862:	2303      	movs	r3, #3
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000866:	2319      	movs	r3, #25
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 192;
 800086a:	23c0      	movs	r3, #192	; 0xc0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800087a:	2300      	movs	r3, #0
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800087e:	2300      	movs	r3, #0
 8000880:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000886:	2302      	movs	r3, #2
 8000888:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800088a:	2310      	movs	r3, #16
 800088c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f004 f8cd 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800089c:	f000 fb72 	bl	8000f84 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	37c0      	adds	r7, #192	; 0xc0
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_IWDG1_Init+0x34>)
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <MX_IWDG1_Init+0x38>)
 80008b0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_IWDG1_Init+0x34>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 2047;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_IWDG1_Init+0x34>)
 80008ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008be:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2047;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_IWDG1_Init+0x34>)
 80008c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_IWDG1_Init+0x34>)
 80008ca:	f003 f84a 	bl	8003962 <HAL_IWDG_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80008d4:	f000 fb56 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200040cc 	.word	0x200040cc
 80008e0:	58004800 	.word	0x58004800

080008e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_UART4_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_UART4_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_UART4_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_UART4_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_UART4_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_UART4_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_UART4_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_UART4_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_UART4_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_UART4_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_UART4_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_UART4_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_UART4_Init+0x90>)
 800092e:	f005 feb3 	bl	8006698 <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 fb24 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_UART4_Init+0x90>)
 8000940:	f006 fe00 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 fb1b 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_UART4_Init+0x90>)
 8000952:	f006 fe35 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 fb12 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_UART4_Init+0x90>)
 8000962:	f006 fdb6 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 fb0a 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20004694 	.word	0x20004694
 8000978:	40004c00 	.word	0x40004c00

0800097c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_UART5_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_UART5_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_UART5_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_UART5_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_UART5_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_UART5_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_UART5_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_UART5_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_UART5_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_UART5_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_UART5_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_UART5_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_UART5_Init+0x90>)
 80009c6:	f005 fe67 	bl	8006698 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 fad8 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_UART5_Init+0x90>)
 80009d8:	f006 fdb4 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 facf 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_UART5_Init+0x90>)
 80009ea:	f006 fde9 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 fac6 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_UART5_Init+0x90>)
 80009fa:	f006 fd6a 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 fabe 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200042ec 	.word	0x200042ec
 8000a10:	40005000 	.word	0x40005000

08000a14 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_UART7_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a5e:	f005 fe1b 	bl	8006698 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 fa8c 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a70:	f006 fd68 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 fa83 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a82:	f006 fd9d 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 fa7a 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_UART7_Init+0x90>)
 8000a92:	f006 fd1e 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 fa72 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200040dc 	.word	0x200040dc
 8000aa8:	40007800 	.word	0x40007800

08000aac <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_UART8_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_UART8_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_UART8_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_UART8_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_UART8_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_UART8_Init+0x90>)
 8000af6:	f005 fdcf 	bl	8006698 <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 fa40 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_UART8_Init+0x90>)
 8000b08:	f006 fd1c 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 fa37 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <MX_UART8_Init+0x90>)
 8000b1a:	f006 fd51 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 fa2e 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_UART8_Init+0x90>)
 8000b2a:	f006 fcd2 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 fa26 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20004574 	.word	0x20004574
 8000b40:	40007c00 	.word	0x40007c00

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b8e:	f005 fd83 	bl	8006698 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f9f4 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000ba0:	f006 fcd0 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f9eb 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f006 fd05 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f9e2 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f006 fc86 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f9da 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000446c 	.word	0x2000446c
 8000bd8:	40011000 	.word	0x40011000

08000bdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <MX_USART2_UART_Init+0x94>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c26:	f005 fd37 	bl	8006698 <HAL_UART_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c30:	f000 f9a8 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c38:	f006 fc84 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c42:	f000 f99f 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c4a:	f006 fcb9 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c54:	f000 f996 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_USART2_UART_Init+0x90>)
 8000c5a:	f006 fc3a 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f000 f98e 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20004724 	.word	0x20004724
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <MX_USART3_UART_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbc:	4811      	ldr	r0, [pc, #68]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cbe:	f005 fceb 	bl	8006698 <HAL_UART_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f95c 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f006 fc38 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cda:	f000 f953 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000ce2:	f006 fc6d 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f000 f94a 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f006 fbee 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f942 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200041e4 	.word	0x200041e4
 8000d08:	40004800 	.word	0x40004800

08000d0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <MX_USART6_UART_Init+0x94>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d56:	f005 fc9f 	bl	8006698 <HAL_UART_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000d60:	f000 f910 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d64:	2100      	movs	r1, #0
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d68:	f006 fbec 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f000 f907 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d7a:	f006 fc21 	bl	80075c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 f8fe 	bl	8000f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_USART6_UART_Init+0x90>)
 8000d8a:	f006 fba2 	bl	80074d2 <HAL_UARTEx_DisableFifoMode>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f8f6 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20004604 	.word	0x20004604
 8000da0:	40011400 	.word	0x40011400

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_DMA_Init+0xac>)
 8000dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db0:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <MX_DMA_Init+0xac>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_DMA_Init+0xac>)
 8000dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2105      	movs	r1, #5
 8000dcc:	200b      	movs	r0, #11
 8000dce:	f000 ff15 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f000 ff2c 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2105      	movs	r1, #5
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f000 ff0d 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000de2:	200c      	movs	r0, #12
 8000de4:	f000 ff24 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2105      	movs	r1, #5
 8000dec:	200d      	movs	r0, #13
 8000dee:	f000 ff05 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000df2:	200d      	movs	r0, #13
 8000df4:	f000 ff1c 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	200e      	movs	r0, #14
 8000dfe:	f000 fefd 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e02:	200e      	movs	r0, #14
 8000e04:	f000 ff14 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	200f      	movs	r0, #15
 8000e0e:	f000 fef5 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 ff0c 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	2010      	movs	r0, #16
 8000e1e:	f000 feed 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e22:	2010      	movs	r0, #16
 8000e24:	f000 ff04 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	2011      	movs	r0, #17
 8000e2e:	f000 fee5 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e32:	2011      	movs	r0, #17
 8000e34:	f000 fefc 	bl	8001c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	202f      	movs	r0, #47	; 0x2f
 8000e3e:	f000 fedd 	bl	8001bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e42:	202f      	movs	r0, #47	; 0x2f
 8000e44:	f000 fef4 	bl	8001c30 <HAL_NVIC_EnableIRQ>

}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a26      	ldr	r2, [pc, #152]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_GPIO_Init+0xf4>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2110      	movs	r1, #16
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <MX_GPIO_Init+0xf8>)
 8000f06:	f002 fd13 	bl	8003930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <MX_GPIO_Init+0xf8>)
 8000f22:	f002 fb55 	bl	80035d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_GPIO_Init+0xf8>)
 8000f3a:	f002 fb49 	bl	80035d0 <HAL_GPIO_Init>

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58021000 	.word	0x58021000

08000f50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 fc28 	bl	80077ae <osDelay>
 8000f5e:	e7fb      	b.n	8000f58 <StartDefaultTask+0x8>

08000f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f72:	f000 fd5f 	bl	8001a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40001000 	.word	0x40001000

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x38>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_MspInit+0x38>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_MspInit+0x38>)
 8000fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f06f 0001 	mvn.w	r0, #1
 8000fbc:	f000 fe1e 	bl	8001bfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	58024400 	.word	0x58024400

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b098      	sub	sp, #96	; 0x60
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a7b      	ldr	r2, [pc, #492]	; (80011d8 <HAL_UART_MspInit+0x20c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	f040 8089 	bne.w	8001102 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ff0:	4b7a      	ldr	r3, [pc, #488]	; (80011dc <HAL_UART_MspInit+0x210>)
 8000ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff6:	4a79      	ldr	r2, [pc, #484]	; (80011dc <HAL_UART_MspInit+0x210>)
 8000ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001000:	4b76      	ldr	r3, [pc, #472]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800100a:	64bb      	str	r3, [r7, #72]	; 0x48
 800100c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a71      	ldr	r2, [pc, #452]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
 800102a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800102c:	2303      	movs	r3, #3
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800103c:	2308      	movs	r3, #8
 800103e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001044:	4619      	mov	r1, r3
 8001046:	4866      	ldr	r0, [pc, #408]	; (80011e0 <HAL_UART_MspInit+0x214>)
 8001048:	f002 fac2 	bl	80035d0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream4;
 800104c:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <HAL_UART_MspInit+0x218>)
 800104e:	4a66      	ldr	r2, [pc, #408]	; (80011e8 <HAL_UART_MspInit+0x21c>)
 8001050:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001052:	4b64      	ldr	r3, [pc, #400]	; (80011e4 <HAL_UART_MspInit+0x218>)
 8001054:	223f      	movs	r2, #63	; 0x3f
 8001056:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001058:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <HAL_UART_MspInit+0x218>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <HAL_UART_MspInit+0x218>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b5f      	ldr	r3, [pc, #380]	; (80011e4 <HAL_UART_MspInit+0x218>)
 8001066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106c:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_UART_MspInit+0x218>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001072:	4b5c      	ldr	r3, [pc, #368]	; (80011e4 <HAL_UART_MspInit+0x218>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001078:	4b5a      	ldr	r3, [pc, #360]	; (80011e4 <HAL_UART_MspInit+0x218>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <HAL_UART_MspInit+0x218>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001084:	4b57      	ldr	r3, [pc, #348]	; (80011e4 <HAL_UART_MspInit+0x218>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800108a:	4856      	ldr	r0, [pc, #344]	; (80011e4 <HAL_UART_MspInit+0x218>)
 800108c:	f000 fdde 	bl	8001c4c <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001096:	f7ff ff75 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a51      	ldr	r2, [pc, #324]	; (80011e4 <HAL_UART_MspInit+0x218>)
 800109e:	67da      	str	r2, [r3, #124]	; 0x7c
 80010a0:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <HAL_UART_MspInit+0x218>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream5;
 80010a6:	4b51      	ldr	r3, [pc, #324]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_UART_MspInit+0x224>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010ae:	2240      	movs	r2, #64	; 0x40
 80010b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b2:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010be:	4b4b      	ldr	r3, [pc, #300]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80010e4:	4841      	ldr	r0, [pc, #260]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010e6:	f000 fdb1 	bl	8001c4c <HAL_DMA_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80010f0:	f7ff ff48 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010f8:	679a      	str	r2, [r3, #120]	; 0x78
 80010fa:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <HAL_UART_MspInit+0x220>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001100:	e2b0      	b.n	8001664 <HAL_UART_MspInit+0x698>
  else if(huart->Instance==UART5)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a3b      	ldr	r2, [pc, #236]	; (80011f4 <HAL_UART_MspInit+0x228>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d12f      	bne.n	800116c <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_UART5_CLK_ENABLE();
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_UART_MspInit+0x210>)
 800110e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001112:	4a32      	ldr	r2, [pc, #200]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001118:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_UART_MspInit+0x210>)
 800111e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
 8001128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_UART_MspInit+0x210>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_MspInit+0x210>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001148:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800115a:	230e      	movs	r3, #14
 800115c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001162:	4619      	mov	r1, r3
 8001164:	4824      	ldr	r0, [pc, #144]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 8001166:	f002 fa33 	bl	80035d0 <HAL_GPIO_Init>
}
 800116a:	e27b      	b.n	8001664 <HAL_UART_MspInit+0x698>
  else if(huart->Instance==UART7)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_UART_MspInit+0x230>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d146      	bne.n	8001204 <HAL_UART_MspInit+0x238>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_UART_MspInit+0x210>)
 800117e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800118c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
 8001192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_UART_MspInit+0x210>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <HAL_UART_MspInit+0x210>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_UART_MspInit+0x210>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80011b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80011c4:	2307      	movs	r3, #7
 80011c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <HAL_UART_MspInit+0x234>)
 80011d0:	f002 f9fe 	bl	80035d0 <HAL_GPIO_Init>
}
 80011d4:	e246      	b.n	8001664 <HAL_UART_MspInit+0x698>
 80011d6:	bf00      	nop
 80011d8:	40004c00 	.word	0x40004c00
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58020000 	.word	0x58020000
 80011e4:	20003fd8 	.word	0x20003fd8
 80011e8:	40020070 	.word	0x40020070
 80011ec:	200047b4 	.word	0x200047b4
 80011f0:	40020088 	.word	0x40020088
 80011f4:	40005000 	.word	0x40005000
 80011f8:	58020400 	.word	0x58020400
 80011fc:	40007800 	.word	0x40007800
 8001200:	58021000 	.word	0x58021000
  else if(huart->Instance==UART8)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a8e      	ldr	r2, [pc, #568]	; (8001444 <HAL_UART_MspInit+0x478>)
 800120a:	4293      	cmp	r3, r2
 800120c:	f040 8089 	bne.w	8001322 <HAL_UART_MspInit+0x356>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001210:	4b8d      	ldr	r3, [pc, #564]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001216:	4a8c      	ldr	r2, [pc, #560]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001220:	4b89      	ldr	r3, [pc, #548]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b86      	ldr	r3, [pc, #536]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a84      	ldr	r2, [pc, #528]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800124c:	2303      	movs	r3, #3
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800125c:	2308      	movs	r3, #8
 800125e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001264:	4619      	mov	r1, r3
 8001266:	4879      	ldr	r0, [pc, #484]	; (800144c <HAL_UART_MspInit+0x480>)
 8001268:	f002 f9b2 	bl	80035d0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 800126c:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_UART_MspInit+0x484>)
 800126e:	4a79      	ldr	r2, [pc, #484]	; (8001454 <HAL_UART_MspInit+0x488>)
 8001270:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001272:	4b77      	ldr	r3, [pc, #476]	; (8001450 <HAL_UART_MspInit+0x484>)
 8001274:	2251      	movs	r2, #81	; 0x51
 8001276:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_UART_MspInit+0x484>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800127e:	4b74      	ldr	r3, [pc, #464]	; (8001450 <HAL_UART_MspInit+0x484>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001284:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_UART_MspInit+0x484>)
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800128c:	4b70      	ldr	r3, [pc, #448]	; (8001450 <HAL_UART_MspInit+0x484>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_UART_MspInit+0x484>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <HAL_UART_MspInit+0x484>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_UART_MspInit+0x484>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a4:	4b6a      	ldr	r3, [pc, #424]	; (8001450 <HAL_UART_MspInit+0x484>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80012aa:	4869      	ldr	r0, [pc, #420]	; (8001450 <HAL_UART_MspInit+0x484>)
 80012ac:	f000 fcce 	bl	8001c4c <HAL_DMA_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80012b6:	f7ff fe65 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a64      	ldr	r2, [pc, #400]	; (8001450 <HAL_UART_MspInit+0x484>)
 80012be:	67da      	str	r2, [r3, #124]	; 0x7c
 80012c0:	4a63      	ldr	r2, [pc, #396]	; (8001450 <HAL_UART_MspInit+0x484>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream7;
 80012c6:	4b64      	ldr	r3, [pc, #400]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012c8:	4a64      	ldr	r2, [pc, #400]	; (800145c <HAL_UART_MspInit+0x490>)
 80012ca:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80012cc:	4b62      	ldr	r3, [pc, #392]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012ce:	2252      	movs	r2, #82	; 0x52
 80012d0:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d2:	4b61      	ldr	r3, [pc, #388]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012d4:	2240      	movs	r2, #64	; 0x40
 80012d6:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012de:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e4:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ec:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80012f2:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_UART_MspInit+0x48c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fe:	4b56      	ldr	r3, [pc, #344]	; (8001458 <HAL_UART_MspInit+0x48c>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001304:	4854      	ldr	r0, [pc, #336]	; (8001458 <HAL_UART_MspInit+0x48c>)
 8001306:	f000 fca1 	bl	8001c4c <HAL_DMA_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8001310:	f7ff fe38 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_UART_MspInit+0x48c>)
 8001318:	679a      	str	r2, [r3, #120]	; 0x78
 800131a:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_UART_MspInit+0x48c>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001320:	e1a0      	b.n	8001664 <HAL_UART_MspInit+0x698>
  else if(huart->Instance==USART1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_UART_MspInit+0x494>)
 8001328:	4293      	cmp	r3, r2
 800132a:	f040 80a5 	bne.w	8001478 <HAL_UART_MspInit+0x4ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 800132e:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001334:	4a44      	ldr	r2, [pc, #272]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <HAL_UART_MspInit+0x47c>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	4a3d      	ldr	r2, [pc, #244]	; (8001448 <HAL_UART_MspInit+0x47c>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135c:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <HAL_UART_MspInit+0x47c>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800136a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800137c:	2304      	movs	r3, #4
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001384:	4619      	mov	r1, r3
 8001386:	4837      	ldr	r0, [pc, #220]	; (8001464 <HAL_UART_MspInit+0x498>)
 8001388:	f002 f922 	bl	80035d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_UART_MspInit+0x49c>)
 800138e:	4a37      	ldr	r2, [pc, #220]	; (800146c <HAL_UART_MspInit+0x4a0>)
 8001390:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HAL_UART_MspInit+0x49c>)
 8001394:	2229      	movs	r2, #41	; 0x29
 8001396:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <HAL_UART_MspInit+0x49c>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013cc:	f000 fc3e 	bl	8001c4c <HAL_DMA_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_UART_MspInit+0x40e>
      Error_Handler();
 80013d6:	f7ff fdd5 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013de:	67da      	str	r2, [r3, #124]	; 0x7c
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_UART_MspInit+0x49c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <HAL_UART_MspInit+0x4a8>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 80013ee:	222a      	movs	r2, #42	; 0x2a
 80013f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 80013f4:	2240      	movs	r2, #64	; 0x40
 80013f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 8001400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001404:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 8001426:	f000 fc11 	bl	8001c4c <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x468>
      Error_Handler();
 8001430:	f7ff fda8 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 8001438:	679a      	str	r2, [r3, #120]	; 0x78
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_UART_MspInit+0x4a4>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001440:	e110      	b.n	8001664 <HAL_UART_MspInit+0x698>
 8001442:	bf00      	nop
 8001444:	40007c00 	.word	0x40007c00
 8001448:	58024400 	.word	0x58024400
 800144c:	58021000 	.word	0x58021000
 8001450:	200043f4 	.word	0x200043f4
 8001454:	400200a0 	.word	0x400200a0
 8001458:	200044fc 	.word	0x200044fc
 800145c:	400200b8 	.word	0x400200b8
 8001460:	40011000 	.word	0x40011000
 8001464:	58020400 	.word	0x58020400
 8001468:	2000437c 	.word	0x2000437c
 800146c:	40020010 	.word	0x40020010
 8001470:	20004274 	.word	0x20004274
 8001474:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7b      	ldr	r2, [pc, #492]	; (800166c <HAL_UART_MspInit+0x6a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d15b      	bne.n	800153a <HAL_UART_MspInit+0x56e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	4b7b      	ldr	r3, [pc, #492]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	4a79      	ldr	r2, [pc, #484]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b73      	ldr	r3, [pc, #460]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a72      	ldr	r2, [pc, #456]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b6f      	ldr	r3, [pc, #444]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014be:	230c      	movs	r3, #12
 80014c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ce:	2307      	movs	r3, #7
 80014d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4866      	ldr	r0, [pc, #408]	; (8001674 <HAL_UART_MspInit+0x6a8>)
 80014da:	f002 f879 	bl	80035d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80014de:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 80014e0:	4a66      	ldr	r2, [pc, #408]	; (800167c <HAL_UART_MspInit+0x6b0>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80014e4:	4b64      	ldr	r3, [pc, #400]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 80014e6:	222b      	movs	r2, #43	; 0x2b
 80014e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f0:	4b61      	ldr	r3, [pc, #388]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f6:	4b60      	ldr	r3, [pc, #384]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 80014f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fe:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001504:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001516:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800151c:	4856      	ldr	r0, [pc, #344]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 800151e:	f000 fb95 	bl	8001c4c <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_MspInit+0x560>
      Error_Handler();
 8001528:	f7ff fd2c 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 8001530:	67da      	str	r2, [r3, #124]	; 0x7c
 8001532:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_UART_MspInit+0x6ac>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001538:	e094      	b.n	8001664 <HAL_UART_MspInit+0x698>
  else if(huart->Instance==USART3)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a50      	ldr	r2, [pc, #320]	; (8001680 <HAL_UART_MspInit+0x6b4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d15c      	bne.n	80015fe <HAL_UART_MspInit+0x632>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001554:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800155a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4a41      	ldr	r2, [pc, #260]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001580:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001584:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001592:	2307      	movs	r3, #7
 8001594:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800159a:	4619      	mov	r1, r3
 800159c:	4839      	ldr	r0, [pc, #228]	; (8001684 <HAL_UART_MspInit+0x6b8>)
 800159e:	f002 f817 	bl	80035d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015a4:	4a39      	ldr	r2, [pc, #228]	; (800168c <HAL_UART_MspInit+0x6c0>)
 80015a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015aa:	222d      	movs	r2, #45	; 0x2d
 80015ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ae:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015e0:	4829      	ldr	r0, [pc, #164]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015e2:	f000 fb33 	bl	8001c4c <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x624>
      Error_Handler();
 80015ec:	f7ff fcca 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015f4:	67da      	str	r2, [r3, #124]	; 0x7c
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_UART_MspInit+0x6bc>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015fc:	e032      	b.n	8001664 <HAL_UART_MspInit+0x698>
  else if(huart->Instance==USART6)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_UART_MspInit+0x6c4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d12d      	bne.n	8001664 <HAL_UART_MspInit+0x698>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 800160a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001610:	f043 0320 	orr.w	r3, r3, #32
 8001614:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 800161a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_UART_MspInit+0x6a4>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001644:	23c0      	movs	r3, #192	; 0xc0
 8001646:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001654:	2307      	movs	r3, #7
 8001656:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800165c:	4619      	mov	r1, r3
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <HAL_UART_MspInit+0x6c8>)
 8001660:	f001 ffb6 	bl	80035d0 <HAL_GPIO_Init>
}
 8001664:	bf00      	nop
 8001666:	3760      	adds	r7, #96	; 0x60
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004400 	.word	0x40004400
 8001670:	58024400 	.word	0x58024400
 8001674:	58020000 	.word	0x58020000
 8001678:	20004054 	.word	0x20004054
 800167c:	40020040 	.word	0x40020040
 8001680:	40004800 	.word	0x40004800
 8001684:	58020400 	.word	0x58020400
 8001688:	2000416c 	.word	0x2000416c
 800168c:	40020058 	.word	0x40020058
 8001690:	40011400 	.word	0x40011400
 8001694:	58020800 	.word	0x58020800

08001698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b090      	sub	sp, #64	; 0x40
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	d827      	bhi.n	80016f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80016a6:	2200      	movs	r2, #0
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	2036      	movs	r0, #54	; 0x36
 80016ac:	f000 faa6 	bl	8001bfc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b0:	2036      	movs	r0, #54	; 0x36
 80016b2:	f000 fabd 	bl	8001c30 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_InitTick+0xc4>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_InitTick+0xc8>)
 80016be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c2:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_InitTick+0xc8>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_InitTick+0xc8>)
 80016ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016da:	f107 0210 	add.w	r2, r7, #16
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f961 	bl	80049ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d106      	bne.n	8001702 <HAL_InitTick+0x6a>
 80016f4:	e001      	b.n	80016fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e02b      	b.n	8001752 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fa:	f003 f92b 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 80016fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001700:	e004      	b.n	800170c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001702:	f003 f927 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8001706:	4603      	mov	r3, r0
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800170c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_InitTick+0xcc>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	0c9b      	lsrs	r3, r3, #18
 8001716:	3b01      	subs	r3, #1
 8001718:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_InitTick+0xd0>)
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_InitTick+0xd4>)
 800171e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_InitTick+0xd0>)
 8001722:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001726:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_InitTick+0xd0>)
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_InitTick+0xd0>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_InitTick+0xd0>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <HAL_InitTick+0xd0>)
 800173c:	f004 fcda 	bl	80060f4 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <HAL_InitTick+0xd0>)
 8001748:	f004 fd36 	bl	80061b8 <HAL_TIM_Base_Start_IT>
 800174c:	4603      	mov	r3, r0
 800174e:	e000      	b.n	8001752 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	3740      	adds	r7, #64	; 0x40
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	58024400 	.word	0x58024400
 8001764:	431bde83 	.word	0x431bde83
 8001768:	2000482c 	.word	0x2000482c
 800176c:	40001000 	.word	0x40001000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA1_Stream0_IRQHandler+0x10>)
 80017a2:	f000 fdaf 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000437c 	.word	0x2000437c

080017b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Stream1_IRQHandler+0x10>)
 80017b6:	f000 fda5 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20004274 	.word	0x20004274

080017c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Stream2_IRQHandler+0x10>)
 80017ca:	f000 fd9b 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20004054 	.word	0x20004054

080017d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA1_Stream3_IRQHandler+0x10>)
 80017de:	f000 fd91 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000416c 	.word	0x2000416c

080017ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA1_Stream4_IRQHandler+0x10>)
 80017f2:	f000 fd87 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20003fd8 	.word	0x20003fd8

08001800 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA1_Stream5_IRQHandler+0x10>)
 8001806:	f000 fd7d 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200047b4 	.word	0x200047b4

08001814 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA1_Stream6_IRQHandler+0x10>)
 800181a:	f000 fd73 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200043f4 	.word	0x200043f4

08001828 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Stream7_IRQHandler+0x10>)
 800182e:	f000 fd69 	bl	8002304 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200044fc 	.word	0x200044fc

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f004 fd29 	bl	8006298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000482c 	.word	0x2000482c

08001850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <SystemInit+0xec>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a38      	ldr	r2, [pc, #224]	; (800193c <SystemInit+0xec>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <SystemInit+0xf0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	2b06      	cmp	r3, #6
 800186e:	d807      	bhi.n	8001880 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <SystemInit+0xf0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 030f 	bic.w	r3, r3, #15
 8001878:	4a31      	ldr	r2, [pc, #196]	; (8001940 <SystemInit+0xf0>)
 800187a:	f043 0307 	orr.w	r3, r3, #7
 800187e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <SystemInit+0xf4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <SystemInit+0xf4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <SystemInit+0xf4>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <SystemInit+0xf4>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	492b      	ldr	r1, [pc, #172]	; (8001944 <SystemInit+0xf4>)
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <SystemInit+0xf8>)
 800189a:	4013      	ands	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <SystemInit+0xf0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <SystemInit+0xf0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 030f 	bic.w	r3, r3, #15
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <SystemInit+0xf0>)
 80018b4:	f043 0307 	orr.w	r3, r3, #7
 80018b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <SystemInit+0xf4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <SystemInit+0xf4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <SystemInit+0xf4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <SystemInit+0xf4>)
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <SystemInit+0xfc>)
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <SystemInit+0xf4>)
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <SystemInit+0x100>)
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <SystemInit+0xf4>)
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <SystemInit+0x104>)
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <SystemInit+0xf4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <SystemInit+0xf4>)
 80018e6:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <SystemInit+0x104>)
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <SystemInit+0xf4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <SystemInit+0xf4>)
 80018f2:	4a18      	ldr	r2, [pc, #96]	; (8001954 <SystemInit+0x104>)
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <SystemInit+0xf4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <SystemInit+0xf4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <SystemInit+0xf4>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <SystemInit+0xf4>)
 800190a:	2200      	movs	r2, #0
 800190c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <SystemInit+0x108>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <SystemInit+0x10c>)
 8001914:	4013      	ands	r3, r2
 8001916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800191a:	d202      	bcs.n	8001922 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <SystemInit+0x110>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <SystemInit+0x114>)
 8001924:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001928:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SystemInit+0xec>)
 800192c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001930:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	52002000 	.word	0x52002000
 8001944:	58024400 	.word	0x58024400
 8001948:	eaf6ed7f 	.word	0xeaf6ed7f
 800194c:	02020200 	.word	0x02020200
 8001950:	01ff0000 	.word	0x01ff0000
 8001954:	01010280 	.word	0x01010280
 8001958:	5c001000 	.word	0x5c001000
 800195c:	ffff0000 	.word	0xffff0000
 8001960:	51008108 	.word	0x51008108
 8001964:	52004000 	.word	0x52004000

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800196c:	f7ff ff70 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f007 f8e9 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7fe fe37 	bl	800060c <main>
  bx  lr
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80019ac:	08008c5c 	.word	0x08008c5c
  ldr r2, =_sbss
 80019b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80019b4:	2000487c 	.word	0x2000487c

080019b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC3_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f000 f90f 	bl	8001be6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c8:	f002 fe1a 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_Init+0x68>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	4913      	ldr	r1, [pc, #76]	; (8001a28 <HAL_Init+0x6c>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_Init+0x68>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_Init+0x6c>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_Init+0x70>)
 80019fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_Init+0x74>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fe46 	bl	8001698 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e002      	b.n	8001a1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a16:	f7ff fabb 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58024400 	.word	0x58024400
 8001a28:	08008c0c 	.word	0x08008c0c
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	20000000 	.word	0x20000000

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20004878 	.word	0x20004878

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20004878 	.word	0x20004878

08001a74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetREVID+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0c1b      	lsrs	r3, r3, #16
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	5c001000 	.word	0x5c001000

08001a8c <__NVIC_SetPriorityGrouping>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <__NVIC_SetPriorityGrouping+0x40>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x40>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	05fa0000 	.word	0x05fa0000

08001ad4 <__NVIC_GetPriorityGrouping>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff4c 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0a:	f7ff ff63 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	6978      	ldr	r0, [r7, #20]
 8001c16:	f7ff ffb3 	bl	8001b80 <NVIC_EncodePriority>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff82 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff56 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ff02 	bl	8001a5c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e316      	b.n	8002292 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_DMA_Init+0x1b8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d04a      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_DMA_Init+0x1bc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d045      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a63      	ldr	r2, [pc, #396]	; (8001e0c <HAL_DMA_Init+0x1c0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d040      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a62      	ldr	r2, [pc, #392]	; (8001e10 <HAL_DMA_Init+0x1c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d03b      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <HAL_DMA_Init+0x1c8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d036      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <HAL_DMA_Init+0x1cc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d031      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5d      	ldr	r2, [pc, #372]	; (8001e1c <HAL_DMA_Init+0x1d0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d02c      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a5c      	ldr	r2, [pc, #368]	; (8001e20 <HAL_DMA_Init+0x1d4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d027      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a5a      	ldr	r2, [pc, #360]	; (8001e24 <HAL_DMA_Init+0x1d8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d022      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a59      	ldr	r2, [pc, #356]	; (8001e28 <HAL_DMA_Init+0x1dc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d01d      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_DMA_Init+0x1e0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d018      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_DMA_Init+0x1e4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a54      	ldr	r2, [pc, #336]	; (8001e34 <HAL_DMA_Init+0x1e8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00e      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a53      	ldr	r2, [pc, #332]	; (8001e38 <HAL_DMA_Init+0x1ec>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_DMA_Init+0x1f0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d004      	beq.n	8001d04 <HAL_DMA_Init+0xb8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_DMA_Init+0x1f4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_DMA_Init+0xbc>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_DMA_Init+0xbe>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 813b 	beq.w	8001f86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a37      	ldr	r2, [pc, #220]	; (8001e04 <HAL_DMA_Init+0x1b8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04a      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a36      	ldr	r2, [pc, #216]	; (8001e08 <HAL_DMA_Init+0x1bc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d045      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_DMA_Init+0x1c0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d040      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <HAL_DMA_Init+0x1c4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d03b      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_DMA_Init+0x1c8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d036      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <HAL_DMA_Init+0x1cc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d031      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2e      	ldr	r2, [pc, #184]	; (8001e1c <HAL_DMA_Init+0x1d0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02c      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_DMA_Init+0x1d4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d027      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <HAL_DMA_Init+0x1d8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d022      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_DMA_Init+0x1dc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d01d      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <HAL_DMA_Init+0x1e0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d018      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_DMA_Init+0x1e4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_DMA_Init+0x1e8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00e      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_DMA_Init+0x1ec>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <HAL_DMA_Init+0x1f0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_Init+0x174>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <HAL_DMA_Init+0x1f4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <HAL_DMA_Init+0x186>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e007      	b.n	8001de2 <HAL_DMA_Init+0x196>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001de2:	e02f      	b.n	8001e44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de4:	f7ff fe3a 	bl	8001a5c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d928      	bls.n	8001e44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e246      	b.n	8002292 <HAL_DMA_Init+0x646>
 8001e04:	40020010 	.word	0x40020010
 8001e08:	40020028 	.word	0x40020028
 8001e0c:	40020040 	.word	0x40020040
 8001e10:	40020058 	.word	0x40020058
 8001e14:	40020070 	.word	0x40020070
 8001e18:	40020088 	.word	0x40020088
 8001e1c:	400200a0 	.word	0x400200a0
 8001e20:	400200b8 	.word	0x400200b8
 8001e24:	40020410 	.word	0x40020410
 8001e28:	40020428 	.word	0x40020428
 8001e2c:	40020440 	.word	0x40020440
 8001e30:	40020458 	.word	0x40020458
 8001e34:	40020470 	.word	0x40020470
 8001e38:	40020488 	.word	0x40020488
 8001e3c:	400204a0 	.word	0x400204a0
 8001e40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1c8      	bne.n	8001de4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4b83      	ldr	r3, [pc, #524]	; (800206c <HAL_DMA_Init+0x420>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001ea8:	4b71      	ldr	r3, [pc, #452]	; (8002070 <HAL_DMA_Init+0x424>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_DMA_Init+0x428>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb4:	d328      	bcc.n	8001f08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b28      	cmp	r3, #40	; 0x28
 8001ebc:	d903      	bls.n	8001ec6 <HAL_DMA_Init+0x27a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ec4:	d917      	bls.n	8001ef6 <HAL_DMA_Init+0x2aa>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b3e      	cmp	r3, #62	; 0x3e
 8001ecc:	d903      	bls.n	8001ed6 <HAL_DMA_Init+0x28a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b42      	cmp	r3, #66	; 0x42
 8001ed4:	d90f      	bls.n	8001ef6 <HAL_DMA_Init+0x2aa>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b46      	cmp	r3, #70	; 0x46
 8001edc:	d903      	bls.n	8001ee6 <HAL_DMA_Init+0x29a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b48      	cmp	r3, #72	; 0x48
 8001ee4:	d907      	bls.n	8001ef6 <HAL_DMA_Init+0x2aa>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b4e      	cmp	r3, #78	; 0x4e
 8001eec:	d905      	bls.n	8001efa <HAL_DMA_Init+0x2ae>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b52      	cmp	r3, #82	; 0x52
 8001ef4:	d801      	bhi.n	8001efa <HAL_DMA_Init+0x2ae>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_DMA_Init+0x2b0>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d117      	bne.n	8001f62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00e      	beq.n	8001f62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f001 f9b9 	bl	80032bc <DMA_CheckFifoParam>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e197      	b.n	8002292 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f001 f8f4 	bl	8003158 <DMA_CalcBaseAndBitshift>
 8001f70:	4603      	mov	r3, r0
 8001f72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	223f      	movs	r2, #63	; 0x3f
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e0cd      	b.n	8002122 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_DMA_Init+0x42c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a39      	ldr	r2, [pc, #228]	; (800207c <HAL_DMA_Init+0x430>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a38      	ldr	r2, [pc, #224]	; (8002080 <HAL_DMA_Init+0x434>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a36      	ldr	r2, [pc, #216]	; (8002084 <HAL_DMA_Init+0x438>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a35      	ldr	r2, [pc, #212]	; (8002088 <HAL_DMA_Init+0x43c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a33      	ldr	r2, [pc, #204]	; (800208c <HAL_DMA_Init+0x440>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_DMA_Init+0x444>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Init+0x38a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a30      	ldr	r2, [pc, #192]	; (8002094 <HAL_DMA_Init+0x448>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Init+0x38e>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_DMA_Init+0x390>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8097 	beq.w	8002110 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_DMA_Init+0x42c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d021      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_DMA_Init+0x430>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01c      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_DMA_Init+0x434>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d017      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_DMA_Init+0x438>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d012      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_DMA_Init+0x43c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00d      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_DMA_Init+0x440>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d008      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_DMA_Init+0x444>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d003      	beq.n	8002030 <HAL_DMA_Init+0x3e4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_DMA_Init+0x448>)
 800202e:	4293      	cmp	r3, r2
 8002030:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_DMA_Init+0x44c>)
 800204e:	4013      	ands	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d020      	beq.n	800209c <HAL_DMA_Init+0x450>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d102      	bne.n	8002068 <HAL_DMA_Init+0x41c>
 8002062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002066:	e01a      	b.n	800209e <HAL_DMA_Init+0x452>
 8002068:	2300      	movs	r3, #0
 800206a:	e018      	b.n	800209e <HAL_DMA_Init+0x452>
 800206c:	fe10803f 	.word	0xfe10803f
 8002070:	5c001000 	.word	0x5c001000
 8002074:	ffff0000 	.word	0xffff0000
 8002078:	58025408 	.word	0x58025408
 800207c:	5802541c 	.word	0x5802541c
 8002080:	58025430 	.word	0x58025430
 8002084:	58025444 	.word	0x58025444
 8002088:	58025458 	.word	0x58025458
 800208c:	5802546c 	.word	0x5802546c
 8002090:	58025480 	.word	0x58025480
 8002094:	58025494 	.word	0x58025494
 8002098:	fffe000f 	.word	0xfffe000f
 800209c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68d2      	ldr	r2, [r2, #12]
 80020a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b6e      	ldr	r3, [pc, #440]	; (800229c <HAL_DMA_Init+0x650>)
 80020e4:	4413      	add	r3, r2
 80020e6:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_DMA_Init+0x654>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f001 f82f 	bl	8003158 <DMA_CalcBaseAndBitshift>
 80020fa:	4603      	mov	r3, r0
 80020fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2201      	movs	r2, #1
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e008      	b.n	8002122 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2203      	movs	r2, #3
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0b7      	b.n	8002292 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_DMA_Init+0x658>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d072      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a5d      	ldr	r2, [pc, #372]	; (80022a8 <HAL_DMA_Init+0x65c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d06d      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_DMA_Init+0x660>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d068      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a5a      	ldr	r2, [pc, #360]	; (80022b0 <HAL_DMA_Init+0x664>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d063      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a59      	ldr	r2, [pc, #356]	; (80022b4 <HAL_DMA_Init+0x668>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d05e      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_DMA_Init+0x66c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d059      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_DMA_Init+0x670>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d054      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_DMA_Init+0x674>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d04f      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a53      	ldr	r2, [pc, #332]	; (80022c4 <HAL_DMA_Init+0x678>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d04a      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a51      	ldr	r2, [pc, #324]	; (80022c8 <HAL_DMA_Init+0x67c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d045      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a50      	ldr	r2, [pc, #320]	; (80022cc <HAL_DMA_Init+0x680>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d040      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <HAL_DMA_Init+0x684>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d03b      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_DMA_Init+0x688>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_DMA_Init+0x68c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <HAL_DMA_Init+0x690>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d02c      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a48      	ldr	r2, [pc, #288]	; (80022e0 <HAL_DMA_Init+0x694>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a47      	ldr	r2, [pc, #284]	; (80022e4 <HAL_DMA_Init+0x698>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_DMA_Init+0x69c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01d      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a44      	ldr	r2, [pc, #272]	; (80022ec <HAL_DMA_Init+0x6a0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d018      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_DMA_Init+0x6a4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a41      	ldr	r2, [pc, #260]	; (80022f4 <HAL_DMA_Init+0x6a8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <HAL_DMA_Init+0x6ac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <HAL_DMA_Init+0x6b0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Init+0x5c6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a3c      	ldr	r2, [pc, #240]	; (8002300 <HAL_DMA_Init+0x6b4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Init+0x5ca>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_DMA_Init+0x5cc>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d032      	beq.n	8002282 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f001 f8c9 	bl	80033b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b80      	cmp	r3, #128	; 0x80
 8002228:	d102      	bne.n	8002230 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002244:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_DMA_Init+0x624>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d80c      	bhi.n	8002270 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f001 f946 	bl	80034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e008      	b.n	8002282 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	a7fdabf8 	.word	0xa7fdabf8
 80022a0:	cccccccd 	.word	0xcccccccd
 80022a4:	40020010 	.word	0x40020010
 80022a8:	40020028 	.word	0x40020028
 80022ac:	40020040 	.word	0x40020040
 80022b0:	40020058 	.word	0x40020058
 80022b4:	40020070 	.word	0x40020070
 80022b8:	40020088 	.word	0x40020088
 80022bc:	400200a0 	.word	0x400200a0
 80022c0:	400200b8 	.word	0x400200b8
 80022c4:	40020410 	.word	0x40020410
 80022c8:	40020428 	.word	0x40020428
 80022cc:	40020440 	.word	0x40020440
 80022d0:	40020458 	.word	0x40020458
 80022d4:	40020470 	.word	0x40020470
 80022d8:	40020488 	.word	0x40020488
 80022dc:	400204a0 	.word	0x400204a0
 80022e0:	400204b8 	.word	0x400204b8
 80022e4:	58025408 	.word	0x58025408
 80022e8:	5802541c 	.word	0x5802541c
 80022ec:	58025430 	.word	0x58025430
 80022f0:	58025444 	.word	0x58025444
 80022f4:	58025458 	.word	0x58025458
 80022f8:	5802546c 	.word	0x5802546c
 80022fc:	58025480 	.word	0x58025480
 8002300:	58025494 	.word	0x58025494

08002304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002310:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <HAL_DMA_IRQHandler+0x1ac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <HAL_DMA_IRQHandler+0x1b0>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a9b      	lsrs	r3, r3, #10
 800231c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <HAL_DMA_IRQHandler+0x1b4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d04a      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_DMA_IRQHandler+0x1b8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d045      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5c      	ldr	r2, [pc, #368]	; (80024c0 <HAL_DMA_IRQHandler+0x1bc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d040      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_DMA_IRQHandler+0x1c0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d03b      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <HAL_DMA_IRQHandler+0x1c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d036      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_DMA_IRQHandler+0x1c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d031      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_DMA_IRQHandler+0x1cc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d02c      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_DMA_IRQHandler+0x1d0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d027      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a53      	ldr	r2, [pc, #332]	; (80024d8 <HAL_DMA_IRQHandler+0x1d4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_DMA_IRQHandler+0x1d8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01d      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a50      	ldr	r2, [pc, #320]	; (80024e0 <HAL_DMA_IRQHandler+0x1dc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d018      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_DMA_IRQHandler+0x1e0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_DMA_IRQHandler+0x1e4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00e      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_DMA_IRQHandler+0x1e8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <HAL_DMA_IRQHandler+0x1ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xd2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <HAL_DMA_IRQHandler+0x1f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_DMA_IRQHandler+0xd6>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_DMA_IRQHandler+0xd8>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 842b 	beq.w	8002c38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	2208      	movs	r2, #8
 80023ec:	409a      	lsls	r2, r3
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80a2 	beq.w	800253c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <HAL_DMA_IRQHandler+0x1b4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04a      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <HAL_DMA_IRQHandler+0x1b8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d045      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_DMA_IRQHandler+0x1bc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d040      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_DMA_IRQHandler+0x1c0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d03b      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <HAL_DMA_IRQHandler+0x1c4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d036      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_DMA_IRQHandler+0x1c8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d031      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_DMA_IRQHandler+0x1cc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02c      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_DMA_IRQHandler+0x1d0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d027      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_DMA_IRQHandler+0x1d4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d022      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_DMA_IRQHandler+0x1d8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d01d      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <HAL_DMA_IRQHandler+0x1dc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d018      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_DMA_IRQHandler+0x1e0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_DMA_IRQHandler+0x1e4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00e      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_DMA_IRQHandler+0x1e8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_DMA_IRQHandler+0x1ec>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_DMA_IRQHandler+0x194>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d12f      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x1f4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	e02e      	b.n	800250c <HAL_DMA_IRQHandler+0x208>
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000
 80024b4:	1b4e81b5 	.word	0x1b4e81b5
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d015      	beq.n	800253c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0204 	bic.w	r2, r2, #4
 800251e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2208      	movs	r2, #8
 800252a:	409a      	lsls	r2, r3
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d06e      	beq.n	8002630 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a69      	ldr	r2, [pc, #420]	; (80026fc <HAL_DMA_IRQHandler+0x3f8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d04a      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a67      	ldr	r2, [pc, #412]	; (8002700 <HAL_DMA_IRQHandler+0x3fc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d045      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a66      	ldr	r2, [pc, #408]	; (8002704 <HAL_DMA_IRQHandler+0x400>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d040      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a64      	ldr	r2, [pc, #400]	; (8002708 <HAL_DMA_IRQHandler+0x404>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d03b      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a63      	ldr	r2, [pc, #396]	; (800270c <HAL_DMA_IRQHandler+0x408>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d036      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a61      	ldr	r2, [pc, #388]	; (8002710 <HAL_DMA_IRQHandler+0x40c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a60      	ldr	r2, [pc, #384]	; (8002714 <HAL_DMA_IRQHandler+0x410>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d02c      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5e      	ldr	r2, [pc, #376]	; (8002718 <HAL_DMA_IRQHandler+0x414>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d027      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5d      	ldr	r2, [pc, #372]	; (800271c <HAL_DMA_IRQHandler+0x418>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d022      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_DMA_IRQHandler+0x41c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01d      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5a      	ldr	r2, [pc, #360]	; (8002724 <HAL_DMA_IRQHandler+0x420>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_DMA_IRQHandler+0x424>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_DMA_IRQHandler+0x428>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_DMA_IRQHandler+0x42c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_DMA_IRQHandler+0x430>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x2ee>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_DMA_IRQHandler+0x434>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10a      	bne.n	8002608 <HAL_DMA_IRQHandler+0x304>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e003      	b.n	8002610 <HAL_DMA_IRQHandler+0x30c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f043 0202 	orr.w	r2, r3, #2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2204      	movs	r2, #4
 800263a:	409a      	lsls	r2, r3
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 808f 	beq.w	8002764 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <HAL_DMA_IRQHandler+0x3f8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04a      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <HAL_DMA_IRQHandler+0x3fc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d045      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <HAL_DMA_IRQHandler+0x400>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d040      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_DMA_IRQHandler+0x404>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d03b      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_DMA_IRQHandler+0x408>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d036      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a24      	ldr	r2, [pc, #144]	; (8002710 <HAL_DMA_IRQHandler+0x40c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_DMA_IRQHandler+0x410>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d02c      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_DMA_IRQHandler+0x414>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d027      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_DMA_IRQHandler+0x418>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_DMA_IRQHandler+0x41c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_DMA_IRQHandler+0x420>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_DMA_IRQHandler+0x424>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_DMA_IRQHandler+0x428>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_DMA_IRQHandler+0x42c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_DMA_IRQHandler+0x430>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x3e2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_DMA_IRQHandler+0x434>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d12a      	bne.n	800273c <HAL_DMA_IRQHandler+0x438>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e023      	b.n	8002744 <HAL_DMA_IRQHandler+0x440>
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	40020040 	.word	0x40020040
 8002708:	40020058 	.word	0x40020058
 800270c:	40020070 	.word	0x40020070
 8002710:	40020088 	.word	0x40020088
 8002714:	400200a0 	.word	0x400200a0
 8002718:	400200b8 	.word	0x400200b8
 800271c:	40020410 	.word	0x40020410
 8002720:	40020428 	.word	0x40020428
 8002724:	40020440 	.word	0x40020440
 8002728:	40020458 	.word	0x40020458
 800272c:	40020470 	.word	0x40020470
 8002730:	40020488 	.word	0x40020488
 8002734:	400204a0 	.word	0x400204a0
 8002738:	400204b8 	.word	0x400204b8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2210      	movs	r2, #16
 800276e:	409a      	lsls	r2, r3
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a6 	beq.w	80028c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a85      	ldr	r2, [pc, #532]	; (8002994 <HAL_DMA_IRQHandler+0x690>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a83      	ldr	r2, [pc, #524]	; (8002998 <HAL_DMA_IRQHandler+0x694>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a82      	ldr	r2, [pc, #520]	; (800299c <HAL_DMA_IRQHandler+0x698>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a80      	ldr	r2, [pc, #512]	; (80029a0 <HAL_DMA_IRQHandler+0x69c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7f      	ldr	r2, [pc, #508]	; (80029a4 <HAL_DMA_IRQHandler+0x6a0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a7d      	ldr	r2, [pc, #500]	; (80029a8 <HAL_DMA_IRQHandler+0x6a4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7c      	ldr	r2, [pc, #496]	; (80029ac <HAL_DMA_IRQHandler+0x6a8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a7a      	ldr	r2, [pc, #488]	; (80029b0 <HAL_DMA_IRQHandler+0x6ac>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a79      	ldr	r2, [pc, #484]	; (80029b4 <HAL_DMA_IRQHandler+0x6b0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <HAL_DMA_IRQHandler+0x6b4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a76      	ldr	r2, [pc, #472]	; (80029bc <HAL_DMA_IRQHandler+0x6b8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a74      	ldr	r2, [pc, #464]	; (80029c0 <HAL_DMA_IRQHandler+0x6bc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <HAL_DMA_IRQHandler+0x6c0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a71      	ldr	r2, [pc, #452]	; (80029c8 <HAL_DMA_IRQHandler+0x6c4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a70      	ldr	r2, [pc, #448]	; (80029cc <HAL_DMA_IRQHandler+0x6c8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_IRQHandler+0x516>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_DMA_IRQHandler+0x6cc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10a      	bne.n	8002830 <HAL_DMA_IRQHandler+0x52c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e009      	b.n	8002844 <HAL_DMA_IRQHandler+0x540>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d03e      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2210      	movs	r2, #16
 8002852:	409a      	lsls	r2, r3
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d024      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e01f      	b.n	80028c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01b      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
 8002896:	e016      	b.n	80028c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2220      	movs	r2, #32
 80028d0:	409a      	lsls	r2, r3
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8110 	beq.w	8002afc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <HAL_DMA_IRQHandler+0x690>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04a      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <HAL_DMA_IRQHandler+0x694>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d045      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a29      	ldr	r2, [pc, #164]	; (800299c <HAL_DMA_IRQHandler+0x698>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d040      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <HAL_DMA_IRQHandler+0x69c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03b      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <HAL_DMA_IRQHandler+0x6a0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d036      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_DMA_IRQHandler+0x6a4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d031      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_DMA_IRQHandler+0x6a8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02c      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_DMA_IRQHandler+0x6ac>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d027      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <HAL_DMA_IRQHandler+0x6b0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d022      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1f      	ldr	r2, [pc, #124]	; (80029b8 <HAL_DMA_IRQHandler+0x6b4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d01d      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_DMA_IRQHandler+0x6b8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <HAL_DMA_IRQHandler+0x6bc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_DMA_IRQHandler+0x6c0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_DMA_IRQHandler+0x6c4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_DMA_IRQHandler+0x6c8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_DMA_IRQHandler+0x678>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_DMA_IRQHandler+0x6cc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12b      	bne.n	80029d4 <HAL_DMA_IRQHandler+0x6d0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e02a      	b.n	80029e8 <HAL_DMA_IRQHandler+0x6e4>
 8002992:	bf00      	nop
 8002994:	40020010 	.word	0x40020010
 8002998:	40020028 	.word	0x40020028
 800299c:	40020040 	.word	0x40020040
 80029a0:	40020058 	.word	0x40020058
 80029a4:	40020070 	.word	0x40020070
 80029a8:	40020088 	.word	0x40020088
 80029ac:	400200a0 	.word	0x400200a0
 80029b0:	400200b8 	.word	0x400200b8
 80029b4:	40020410 	.word	0x40020410
 80029b8:	40020428 	.word	0x40020428
 80029bc:	40020440 	.word	0x40020440
 80029c0:	40020458 	.word	0x40020458
 80029c4:	40020470 	.word	0x40020470
 80029c8:	40020488 	.word	0x40020488
 80029cc:	400204a0 	.word	0x400204a0
 80029d0:	400204b8 	.word	0x400204b8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8087 	beq.w	8002afc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2220      	movs	r2, #32
 80029f8:	409a      	lsls	r2, r3
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d139      	bne.n	8002a7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x736>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	223f      	movs	r2, #63	; 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 834a 	beq.w	8003108 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
          }
          return;
 8002a7c:	e344      	b.n	8003108 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d02c      	beq.n	8002afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e027      	b.n	8002afc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e01e      	b.n	8002afc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8306 	beq.w	8003112 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8088 	beq.w	8002c24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2204      	movs	r2, #4
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7a      	ldr	r2, [pc, #488]	; (8002d0c <HAL_DMA_IRQHandler+0xa08>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d04a      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a79      	ldr	r2, [pc, #484]	; (8002d10 <HAL_DMA_IRQHandler+0xa0c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d045      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a77      	ldr	r2, [pc, #476]	; (8002d14 <HAL_DMA_IRQHandler+0xa10>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d040      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a76      	ldr	r2, [pc, #472]	; (8002d18 <HAL_DMA_IRQHandler+0xa14>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d03b      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a74      	ldr	r2, [pc, #464]	; (8002d1c <HAL_DMA_IRQHandler+0xa18>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d036      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a73      	ldr	r2, [pc, #460]	; (8002d20 <HAL_DMA_IRQHandler+0xa1c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d031      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a71      	ldr	r2, [pc, #452]	; (8002d24 <HAL_DMA_IRQHandler+0xa20>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02c      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <HAL_DMA_IRQHandler+0xa24>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d027      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_DMA_IRQHandler+0xa28>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d022      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6d      	ldr	r2, [pc, #436]	; (8002d30 <HAL_DMA_IRQHandler+0xa2c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d01d      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6b      	ldr	r2, [pc, #428]	; (8002d34 <HAL_DMA_IRQHandler+0xa30>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d018      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_DMA_IRQHandler+0xa34>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a68      	ldr	r2, [pc, #416]	; (8002d3c <HAL_DMA_IRQHandler+0xa38>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00e      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_DMA_IRQHandler+0xa3c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <HAL_DMA_IRQHandler+0xa40>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x8b8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a64      	ldr	r2, [pc, #400]	; (8002d48 <HAL_DMA_IRQHandler+0xa44>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d108      	bne.n	8002bce <HAL_DMA_IRQHandler+0x8ca>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e007      	b.n	8002bde <HAL_DMA_IRQHandler+0x8da>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d307      	bcc.n	8002bfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f2      	bne.n	8002bde <HAL_DMA_IRQHandler+0x8da>
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002bfa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002c1a:	e003      	b.n	8002c24 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8272 	beq.w	8003112 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
 8002c36:	e26c      	b.n	8003112 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a43      	ldr	r2, [pc, #268]	; (8002d4c <HAL_DMA_IRQHandler+0xa48>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_DMA_IRQHandler+0xa4c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a40      	ldr	r2, [pc, #256]	; (8002d54 <HAL_DMA_IRQHandler+0xa50>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_DMA_IRQHandler+0xa54>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <HAL_DMA_IRQHandler+0xa58>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <HAL_DMA_IRQHandler+0xa5c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <HAL_DMA_IRQHandler+0xa60>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x984>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_DMA_IRQHandler+0xa64>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x988>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_DMA_IRQHandler+0x98a>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 823f 	beq.w	8003112 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80cd 	beq.w	8002e4c <HAL_DMA_IRQHandler+0xb48>
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80c7 	beq.w	8002e4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d049      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8210 	beq.w	800310c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cf4:	e20a      	b.n	800310c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8206 	beq.w	800310c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d08:	e200      	b.n	800310c <HAL_DMA_IRQHandler+0xe08>
 8002d0a:	bf00      	nop
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8
 8002d4c:	58025408 	.word	0x58025408
 8002d50:	5802541c 	.word	0x5802541c
 8002d54:	58025430 	.word	0x58025430
 8002d58:	58025444 	.word	0x58025444
 8002d5c:	58025458 	.word	0x58025458
 8002d60:	5802546c 	.word	0x5802546c
 8002d64:	58025480 	.word	0x58025480
 8002d68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d160      	bne.n	8002e38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a8c      	ldr	r2, [pc, #560]	; (8002fac <HAL_DMA_IRQHandler+0xca8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d04a      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8a      	ldr	r2, [pc, #552]	; (8002fb0 <HAL_DMA_IRQHandler+0xcac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d045      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a89      	ldr	r2, [pc, #548]	; (8002fb4 <HAL_DMA_IRQHandler+0xcb0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d040      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_DMA_IRQHandler+0xcb4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d03b      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a86      	ldr	r2, [pc, #536]	; (8002fbc <HAL_DMA_IRQHandler+0xcb8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d036      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a84      	ldr	r2, [pc, #528]	; (8002fc0 <HAL_DMA_IRQHandler+0xcbc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d031      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a83      	ldr	r2, [pc, #524]	; (8002fc4 <HAL_DMA_IRQHandler+0xcc0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d02c      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a81      	ldr	r2, [pc, #516]	; (8002fc8 <HAL_DMA_IRQHandler+0xcc4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d027      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <HAL_DMA_IRQHandler+0xcc8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <HAL_DMA_IRQHandler+0xccc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01d      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7d      	ldr	r2, [pc, #500]	; (8002fd4 <HAL_DMA_IRQHandler+0xcd0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7b      	ldr	r2, [pc, #492]	; (8002fd8 <HAL_DMA_IRQHandler+0xcd4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7a      	ldr	r2, [pc, #488]	; (8002fdc <HAL_DMA_IRQHandler+0xcd8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a78      	ldr	r2, [pc, #480]	; (8002fe0 <HAL_DMA_IRQHandler+0xcdc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a77      	ldr	r2, [pc, #476]	; (8002fe4 <HAL_DMA_IRQHandler+0xce0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xb12>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a75      	ldr	r2, [pc, #468]	; (8002fe8 <HAL_DMA_IRQHandler+0xce4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d108      	bne.n	8002e28 <HAL_DMA_IRQHandler+0xb24>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e007      	b.n	8002e38 <HAL_DMA_IRQHandler+0xb34>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0204 	bic.w	r2, r2, #4
 8002e36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8165 	beq.w	800310c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e4a:	e15f      	b.n	800310c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2202      	movs	r2, #2
 8002e56:	409a      	lsls	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80c5 	beq.w	8002fec <HAL_DMA_IRQHandler+0xce8>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80bf 	beq.w	8002fec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2202      	movs	r2, #2
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 813a 	beq.w	8003110 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ea4:	e134      	b.n	8003110 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8130 	beq.w	8003110 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002eb8:	e12a      	b.n	8003110 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d168      	bne.n	8002f96 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a38      	ldr	r2, [pc, #224]	; (8002fac <HAL_DMA_IRQHandler+0xca8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <HAL_DMA_IRQHandler+0xcac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a35      	ldr	r2, [pc, #212]	; (8002fb4 <HAL_DMA_IRQHandler+0xcb0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_DMA_IRQHandler+0xcb4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_DMA_IRQHandler+0xcb8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a31      	ldr	r2, [pc, #196]	; (8002fc0 <HAL_DMA_IRQHandler+0xcbc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <HAL_DMA_IRQHandler+0xcc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <HAL_DMA_IRQHandler+0xcc4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2c      	ldr	r2, [pc, #176]	; (8002fcc <HAL_DMA_IRQHandler+0xcc8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_DMA_IRQHandler+0xccc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <HAL_DMA_IRQHandler+0xcd0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <HAL_DMA_IRQHandler+0xcd4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <HAL_DMA_IRQHandler+0xcd8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_DMA_IRQHandler+0xcdc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <HAL_DMA_IRQHandler+0xce0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_IRQHandler+0xc60>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <HAL_DMA_IRQHandler+0xce4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <HAL_DMA_IRQHandler+0xc72>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0214 	bic.w	r2, r2, #20
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <HAL_DMA_IRQHandler+0xc82>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 020a 	bic.w	r2, r2, #10
 8002f84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80b8 	beq.w	8003110 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa8:	e0b2      	b.n	8003110 <HAL_DMA_IRQHandler+0xe0c>
 8002faa:	bf00      	nop
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8088 	beq.w	8003112 <HAL_DMA_IRQHandler+0xe0e>
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8082 	beq.w	8003112 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a41      	ldr	r2, [pc, #260]	; (8003118 <HAL_DMA_IRQHandler+0xe14>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d04a      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3f      	ldr	r2, [pc, #252]	; (800311c <HAL_DMA_IRQHandler+0xe18>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d045      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3e      	ldr	r2, [pc, #248]	; (8003120 <HAL_DMA_IRQHandler+0xe1c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d040      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <HAL_DMA_IRQHandler+0xe20>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d03b      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <HAL_DMA_IRQHandler+0xe24>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d036      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a39      	ldr	r2, [pc, #228]	; (800312c <HAL_DMA_IRQHandler+0xe28>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d031      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a38      	ldr	r2, [pc, #224]	; (8003130 <HAL_DMA_IRQHandler+0xe2c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d02c      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a36      	ldr	r2, [pc, #216]	; (8003134 <HAL_DMA_IRQHandler+0xe30>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d027      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <HAL_DMA_IRQHandler+0xe34>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d022      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a33      	ldr	r2, [pc, #204]	; (800313c <HAL_DMA_IRQHandler+0xe38>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01d      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a32      	ldr	r2, [pc, #200]	; (8003140 <HAL_DMA_IRQHandler+0xe3c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d018      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_DMA_IRQHandler+0xe40>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_DMA_IRQHandler+0xe44>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_DMA_IRQHandler+0xe48>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d009      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <HAL_DMA_IRQHandler+0xe4c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <HAL_DMA_IRQHandler+0xdaa>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <HAL_DMA_IRQHandler+0xe50>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d108      	bne.n	80030c0 <HAL_DMA_IRQHandler+0xdbc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 021c 	bic.w	r2, r2, #28
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e007      	b.n	80030d0 <HAL_DMA_IRQHandler+0xdcc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 020e 	bic.w	r2, r2, #14
 80030ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2201      	movs	r2, #1
 80030da:	409a      	lsls	r2, r3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e004      	b.n	8003112 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003108:	bf00      	nop
 800310a:	e002      	b.n	8003112 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003110:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003112:	3728      	adds	r7, #40	; 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40020010 	.word	0x40020010
 800311c:	40020028 	.word	0x40020028
 8003120:	40020040 	.word	0x40020040
 8003124:	40020058 	.word	0x40020058
 8003128:	40020070 	.word	0x40020070
 800312c:	40020088 	.word	0x40020088
 8003130:	400200a0 	.word	0x400200a0
 8003134:	400200b8 	.word	0x400200b8
 8003138:	40020410 	.word	0x40020410
 800313c:	40020428 	.word	0x40020428
 8003140:	40020440 	.word	0x40020440
 8003144:	40020458 	.word	0x40020458
 8003148:	40020470 	.word	0x40020470
 800314c:	40020488 	.word	0x40020488
 8003150:	400204a0 	.word	0x400204a0
 8003154:	400204b8 	.word	0x400204b8

08003158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a42      	ldr	r2, [pc, #264]	; (8003270 <DMA_CalcBaseAndBitshift+0x118>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04a      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a41      	ldr	r2, [pc, #260]	; (8003274 <DMA_CalcBaseAndBitshift+0x11c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d045      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3f      	ldr	r2, [pc, #252]	; (8003278 <DMA_CalcBaseAndBitshift+0x120>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d040      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a3e      	ldr	r2, [pc, #248]	; (800327c <DMA_CalcBaseAndBitshift+0x124>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d03b      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <DMA_CalcBaseAndBitshift+0x128>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d036      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3b      	ldr	r2, [pc, #236]	; (8003284 <DMA_CalcBaseAndBitshift+0x12c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d031      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a39      	ldr	r2, [pc, #228]	; (8003288 <DMA_CalcBaseAndBitshift+0x130>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02c      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a38      	ldr	r2, [pc, #224]	; (800328c <DMA_CalcBaseAndBitshift+0x134>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d027      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a36      	ldr	r2, [pc, #216]	; (8003290 <DMA_CalcBaseAndBitshift+0x138>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a35      	ldr	r2, [pc, #212]	; (8003294 <DMA_CalcBaseAndBitshift+0x13c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d01d      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a33      	ldr	r2, [pc, #204]	; (8003298 <DMA_CalcBaseAndBitshift+0x140>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a32      	ldr	r2, [pc, #200]	; (800329c <DMA_CalcBaseAndBitshift+0x144>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <DMA_CalcBaseAndBitshift+0x148>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <DMA_CalcBaseAndBitshift+0x150>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <DMA_CalcBaseAndBitshift+0xa8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <DMA_CalcBaseAndBitshift+0x154>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <DMA_CalcBaseAndBitshift+0xac>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <DMA_CalcBaseAndBitshift+0xae>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d024      	beq.n	8003254 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	3b10      	subs	r3, #16
 8003212:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <DMA_CalcBaseAndBitshift+0x158>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	461a      	mov	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d908      	bls.n	8003244 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <DMA_CalcBaseAndBitshift+0x160>)
 800323a:	4013      	ands	r3, r2
 800323c:	1d1a      	adds	r2, r3, #4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	659a      	str	r2, [r3, #88]	; 0x58
 8003242:	e00d      	b.n	8003260 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <DMA_CalcBaseAndBitshift+0x160>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
 8003252:	e005      	b.n	8003260 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	aaaaaaab 	.word	0xaaaaaaab
 80032b4:	08008c1c 	.word	0x08008c1c
 80032b8:	fffffc00 	.word	0xfffffc00

080032bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d120      	bne.n	8003312 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d858      	bhi.n	800338a <DMA_CheckFifoParam+0xce>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <DMA_CheckFifoParam+0x24>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	08003303 	.word	0x08003303
 80032e8:	080032f1 	.word	0x080032f1
 80032ec:	0800338b 	.word	0x0800338b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d048      	beq.n	800338e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003300:	e045      	b.n	800338e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800330a:	d142      	bne.n	8003392 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003310:	e03f      	b.n	8003392 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	d123      	bne.n	8003364 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	2b03      	cmp	r3, #3
 8003322:	d838      	bhi.n	8003396 <DMA_CheckFifoParam+0xda>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <DMA_CheckFifoParam+0x70>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	0800333d 	.word	0x0800333d
 8003330:	08003343 	.word	0x08003343
 8003334:	0800333d 	.word	0x0800333d
 8003338:	08003355 	.word	0x08003355
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
        break;
 8003340:	e030      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d025      	beq.n	800339a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003352:	e022      	b.n	800339a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800335c:	d11f      	bne.n	800339e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003362:	e01c      	b.n	800339e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	2b02      	cmp	r3, #2
 800336a:	d902      	bls.n	8003372 <DMA_CheckFifoParam+0xb6>
 800336c:	2b03      	cmp	r3, #3
 800336e:	d003      	beq.n	8003378 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003370:	e018      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
        break;
 8003376:	e015      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
    break;
 8003388:	e00b      	b.n	80033a2 <DMA_CheckFifoParam+0xe6>
        break;
 800338a:	bf00      	nop
 800338c:	e00a      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        break;
 800338e:	bf00      	nop
 8003390:	e008      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        break;
 8003392:	bf00      	nop
 8003394:	e006      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        break;
 8003396:	bf00      	nop
 8003398:	e004      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
        break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <DMA_CheckFifoParam+0xe8>
    break;
 80033a2:	bf00      	nop
    }
  }

  return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop

080033b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a38      	ldr	r2, [pc, #224]	; (80034a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a36      	ldr	r2, [pc, #216]	; (80034ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a35      	ldr	r2, [pc, #212]	; (80034b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a30      	ldr	r2, [pc, #192]	; (80034bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01a      	beq.n	8003452 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3b08      	subs	r3, #8
 8003424:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	461a      	mov	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a24      	ldr	r2, [pc, #144]	; (80034d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003440:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003450:	e024      	b.n	800349c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3b10      	subs	r3, #16
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d806      	bhi.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d902      	bls.n	800347a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3308      	adds	r3, #8
 8003478:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800348c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	58025408 	.word	0x58025408
 80034ac:	5802541c 	.word	0x5802541c
 80034b0:	58025430 	.word	0x58025430
 80034b4:	58025444 	.word	0x58025444
 80034b8:	58025458 	.word	0x58025458
 80034bc:	5802546c 	.word	0x5802546c
 80034c0:	58025480 	.word	0x58025480
 80034c4:	58025494 	.word	0x58025494
 80034c8:	cccccccd 	.word	0xcccccccd
 80034cc:	16009600 	.word	0x16009600
 80034d0:	58025880 	.word	0x58025880
 80034d4:	aaaaaaab 	.word	0xaaaaaaab
 80034d8:	400204b8 	.word	0x400204b8
 80034dc:	4002040f 	.word	0x4002040f
 80034e0:	10008200 	.word	0x10008200
 80034e4:	40020880 	.word	0x40020880

080034e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d04a      	beq.n	8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d847      	bhi.n	8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a24      	ldr	r2, [pc, #144]	; (80035a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d01d      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a21      	ldr	r2, [pc, #132]	; (80035ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003570:	671a      	str	r2, [r3, #112]	; 0x70
 8003572:	e009      	b.n	8003588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a11      	ldr	r2, [pc, #68]	; (80035cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003586:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3b01      	subs	r3, #1
 800358c:	2201      	movs	r2, #1
 800358e:	409a      	lsls	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	58025408 	.word	0x58025408
 80035a4:	5802541c 	.word	0x5802541c
 80035a8:	58025430 	.word	0x58025430
 80035ac:	58025444 	.word	0x58025444
 80035b0:	58025458 	.word	0x58025458
 80035b4:	5802546c 	.word	0x5802546c
 80035b8:	58025480 	.word	0x58025480
 80035bc:	58025494 	.word	0x58025494
 80035c0:	1600963f 	.word	0x1600963f
 80035c4:	58025940 	.word	0x58025940
 80035c8:	1000823f 	.word	0x1000823f
 80035cc:	40020940 	.word	0x40020940

080035d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035de:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_GPIO_Init+0x234>)
 80035e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035e2:	e194      	b.n	800390e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8186 	beq.w	8003908 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00b      	beq.n	800361c <HAL_GPIO_Init+0x4c>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d007      	beq.n	800361c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003610:	2b11      	cmp	r3, #17
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b12      	cmp	r3, #18
 800361a:	d130      	bne.n	800367e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003652:	2201      	movs	r2, #1
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0201 	and.w	r2, r3, #1
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0xee>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d123      	bne.n	8003706 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	08da      	lsrs	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3208      	adds	r2, #8
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	2203      	movs	r2, #3
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80e0 	beq.w	8003908 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003748:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_GPIO_Init+0x238>)
 800374a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800374e:	4a2e      	ldr	r2, [pc, #184]	; (8003808 <HAL_GPIO_Init+0x238>)
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <HAL_GPIO_Init+0x238>)
 800375a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_GPIO_Init+0x23c>)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	220f      	movs	r2, #15
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a20      	ldr	r2, [pc, #128]	; (8003810 <HAL_GPIO_Init+0x240>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d052      	beq.n	8003838 <HAL_GPIO_Init+0x268>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <HAL_GPIO_Init+0x244>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d031      	beq.n	80037fe <HAL_GPIO_Init+0x22e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_GPIO_Init+0x248>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02b      	beq.n	80037fa <HAL_GPIO_Init+0x22a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_GPIO_Init+0x24c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d025      	beq.n	80037f6 <HAL_GPIO_Init+0x226>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_GPIO_Init+0x250>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01f      	beq.n	80037f2 <HAL_GPIO_Init+0x222>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_GPIO_Init+0x254>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d019      	beq.n	80037ee <HAL_GPIO_Init+0x21e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_GPIO_Init+0x258>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0x21a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_GPIO_Init+0x25c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00d      	beq.n	80037e6 <HAL_GPIO_Init+0x216>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_GPIO_Init+0x260>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <HAL_GPIO_Init+0x212>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_GPIO_Init+0x264>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_GPIO_Init+0x20e>
 80037da:	2309      	movs	r3, #9
 80037dc:	e02d      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037de:	230a      	movs	r3, #10
 80037e0:	e02b      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037e2:	2308      	movs	r3, #8
 80037e4:	e029      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037e6:	2307      	movs	r3, #7
 80037e8:	e027      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037ea:	2306      	movs	r3, #6
 80037ec:	e025      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037ee:	2305      	movs	r3, #5
 80037f0:	e023      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037f2:	2304      	movs	r3, #4
 80037f4:	e021      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037f6:	2303      	movs	r3, #3
 80037f8:	e01f      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e01d      	b.n	800383a <HAL_GPIO_Init+0x26a>
 80037fe:	2301      	movs	r3, #1
 8003800:	e01b      	b.n	800383a <HAL_GPIO_Init+0x26a>
 8003802:	bf00      	nop
 8003804:	58000080 	.word	0x58000080
 8003808:	58024400 	.word	0x58024400
 800380c:	58000400 	.word	0x58000400
 8003810:	58020000 	.word	0x58020000
 8003814:	58020400 	.word	0x58020400
 8003818:	58020800 	.word	0x58020800
 800381c:	58020c00 	.word	0x58020c00
 8003820:	58021000 	.word	0x58021000
 8003824:	58021400 	.word	0x58021400
 8003828:	58021800 	.word	0x58021800
 800382c:	58021c00 	.word	0x58021c00
 8003830:	58022000 	.word	0x58022000
 8003834:	58022400 	.word	0x58022400
 8003838:	2300      	movs	r3, #0
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	f002 0203 	and.w	r2, r2, #3
 8003840:	0092      	lsls	r2, r2, #2
 8003842:	4093      	lsls	r3, r2
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800384a:	4938      	ldr	r1, [pc, #224]	; (800392c <HAL_GPIO_Init+0x35c>)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	3302      	adds	r3, #2
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	f47f ae63 	bne.w	80035e4 <HAL_GPIO_Init+0x14>
  }
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	3724      	adds	r7, #36	; 0x24
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	58000400 	.word	0x58000400

08003930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	807b      	strh	r3, [r7, #2]
 800393c:	4613      	mov	r3, r2
 800393e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003940:	787b      	ldrb	r3, [r7, #1]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800394c:	e003      	b.n	8003956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	041a      	lsls	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	619a      	str	r2, [r3, #24]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e041      	b.n	80039f8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800397c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f245 5255 	movw	r2, #21845	; 0x5555
 8003986:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6852      	ldr	r2, [r2, #4]
 8003990:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6892      	ldr	r2, [r2, #8]
 800399a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800399c:	f7fe f85e 	bl	8001a5c <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80039a2:	e00f      	b.n	80039c4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80039a4:	f7fe f85a 	bl	8001a5c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b30      	cmp	r3, #48	; 0x30
 80039b0:	d908      	bls.n	80039c4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e019      	b.n	80039f8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e8      	bne.n	80039a4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d005      	beq.n	80039ec <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68d2      	ldr	r2, [r2, #12]
 80039e8:	611a      	str	r2, [r3, #16]
 80039ea:	e004      	b.n	80039f6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80039f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d00a      	beq.n	8003a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d001      	beq.n	8003a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01f      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e01d      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	490f      	ldr	r1, [pc, #60]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a3a:	f7fe f80f 	bl	8001a5c <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a42:	f7fe f80b 	bl	8001a5c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a50:	d901      	bls.n	8003a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_PWREx_ConfigSupply+0x70>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d1ee      	bne.n	8003a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	58024800 	.word	0x58024800

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	; 0x30
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e3ff      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8087 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a94:	4b99      	ldr	r3, [pc, #612]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a9e:	4b97      	ldr	r3, [pc, #604]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d007      	beq.n	8003aba <HAL_RCC_OscConfig+0x46>
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	2b18      	cmp	r3, #24
 8003aae:	d110      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5e>
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aba:	4b90      	ldr	r3, [pc, #576]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d06c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x12c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d168      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e3d9      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x76>
 8003adc:	4b87      	ldr	r3, [pc, #540]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a86      	ldr	r2, [pc, #536]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e02e      	b.n	8003b48 <HAL_RCC_OscConfig+0xd4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x98>
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a81      	ldr	r2, [pc, #516]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7e      	ldr	r2, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xd4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0xbc>
 8003b16:	4b79      	ldr	r3, [pc, #484]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a78      	ldr	r2, [pc, #480]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xd4>
 8003b30:	4b72      	ldr	r3, [pc, #456]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a71      	ldr	r2, [pc, #452]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd ff84 	bl	8001a5c <HAL_GetTick>
 8003b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd ff80 	bl	8001a5c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e38d      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b6a:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe4>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd ff70 	bl	8001a5c <HAL_GetTick>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd ff6c 	bl	8001a5c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e379      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b92:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x10c>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 80ae 	beq.w	8003d0c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bba:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x162>
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	2b18      	cmp	r3, #24
 8003bca:	d13a      	bne.n	8003c42 <HAL_RCC_OscConfig+0x1ce>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d135      	bne.n	8003c42 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd6:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x17a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e34b      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	f7fd ff41 	bl	8001a74 <HAL_GetREVID>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d817      	bhi.n	8003c2c <HAL_RCC_OscConfig+0x1b8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d108      	bne.n	8003c16 <HAL_RCC_OscConfig+0x1a2>
 8003c04:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c0c:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e07a      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	031b      	lsls	r3, r3, #12
 8003c24:	4935      	ldr	r1, [pc, #212]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2a:	e06f      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	4930      	ldr	r1, [pc, #192]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	e064      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d045      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0219 	bic.w	r2, r3, #25
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4929      	ldr	r1, [pc, #164]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fefe 	bl	8001a5c <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fd fefa 	bl	8001a5c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e307      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	f7fd fef7 	bl	8001a74 <HAL_GetREVID>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d817      	bhi.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d108      	bne.n	8003caa <HAL_RCC_OscConfig+0x236>
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca6:	6053      	str	r3, [r2, #4]
 8003ca8:	e030      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	4910      	ldr	r1, [pc, #64]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e025      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	490b      	ldr	r1, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
 8003cd4:	e01a      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <HAL_RCC_OscConfig+0x288>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fd febb 	bl	8001a5c <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fd feb7 	bl	8001a5c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d903      	bls.n	8003d00 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e2c4      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
 8003cfc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d00:	4ba4      	ldr	r3, [pc, #656]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ee      	bne.n	8003cea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a9 	beq.w	8003e6c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1a:	4b9e      	ldr	r3, [pc, #632]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d24:	4b9b      	ldr	r3, [pc, #620]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d007      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2cc>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b18      	cmp	r3, #24
 8003d34:	d13a      	bne.n	8003dac <HAL_RCC_OscConfig+0x338>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d135      	bne.n	8003dac <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d40:	4b94      	ldr	r3, [pc, #592]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2e4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e296      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d58:	f7fd fe8c 	bl	8001a74 <HAL_GetREVID>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d817      	bhi.n	8003d96 <HAL_RCC_OscConfig+0x322>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d108      	bne.n	8003d80 <HAL_RCC_OscConfig+0x30c>
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d76:	4a87      	ldr	r2, [pc, #540]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d7e:	e075      	b.n	8003e6c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d80:	4b84      	ldr	r3, [pc, #528]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	4981      	ldr	r1, [pc, #516]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d94:	e06a      	b.n	8003e6c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d96:	4b7f      	ldr	r3, [pc, #508]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	497b      	ldr	r1, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003daa:	e05f      	b.n	8003e6c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d042      	beq.n	8003e3a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003db4:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fe4c 	bl	8001a5c <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dc8:	f7fd fe48 	bl	8001a5c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e255      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dda:	4b6e      	ldr	r3, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003de6:	f7fd fe45 	bl	8001a74 <HAL_GetREVID>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d817      	bhi.n	8003e24 <HAL_RCC_OscConfig+0x3b0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d108      	bne.n	8003e0e <HAL_RCC_OscConfig+0x39a>
 8003dfc:	4b65      	ldr	r3, [pc, #404]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e04:	4a63      	ldr	r2, [pc, #396]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e0a:	6053      	str	r3, [r2, #4]
 8003e0c:	e02e      	b.n	8003e6c <HAL_RCC_OscConfig+0x3f8>
 8003e0e:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	495d      	ldr	r1, [pc, #372]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
 8003e22:	e023      	b.n	8003e6c <HAL_RCC_OscConfig+0x3f8>
 8003e24:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	4958      	ldr	r1, [pc, #352]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60cb      	str	r3, [r1, #12]
 8003e38:	e018      	b.n	8003e6c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e3a:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a55      	ldr	r2, [pc, #340]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd fe09 	bl	8001a5c <HAL_GetTick>
 8003e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e4e:	f7fd fe05 	bl	8001a5c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e212      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e60:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d036      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e80:	4b44      	ldr	r3, [pc, #272]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	4a43      	ldr	r2, [pc, #268]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fd fde6 	bl	8001a5c <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e94:	f7fd fde2 	bl	8001a5c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e1ef      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x420>
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb4:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb8:	4a36      	ldr	r2, [pc, #216]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fdcc 	bl	8001a5c <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fdc8 	bl	8001a5c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1d5      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eda:	4b2e      	ldr	r3, [pc, #184]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d019      	beq.n	8003f2e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003efa:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f06:	f7fd fda9 	bl	8001a5c <HAL_GetTick>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f0e:	f7fd fda5 	bl	8001a5c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e1b2      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x49a>
 8003f2c:	e018      	b.n	8003f60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f3a:	f7fd fd8f 	bl	8001a5c <HAL_GetTick>
 8003f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f42:	f7fd fd8b 	bl	8001a5c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e198      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_RCC_OscConfig+0x520>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8085 	beq.w	8004078 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <HAL_RCC_OscConfig+0x524>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_OscConfig+0x524>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd fd6f 	bl	8001a5c <HAL_GetTick>
 8003f7e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f80:	e00c      	b.n	8003f9c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fd fd6b 	bl	8001a5c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b64      	cmp	r3, #100	; 0x64
 8003f8e:	d905      	bls.n	8003f9c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e178      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
 8003f94:	58024400 	.word	0x58024400
 8003f98:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9c:	4b96      	ldr	r3, [pc, #600]	; (80041f8 <HAL_RCC_OscConfig+0x784>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ec      	beq.n	8003f82 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x54a>
 8003fb0:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a91      	ldr	r2, [pc, #580]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	e02d      	b.n	800401a <HAL_RCC_OscConfig+0x5a6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x56c>
 8003fc6:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a8c      	ldr	r2, [pc, #560]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	4b8a      	ldr	r3, [pc, #552]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a89      	ldr	r2, [pc, #548]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	e01c      	b.n	800401a <HAL_RCC_OscConfig+0x5a6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d10c      	bne.n	8004002 <HAL_RCC_OscConfig+0x58e>
 8003fe8:	4b84      	ldr	r3, [pc, #528]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a83      	ldr	r2, [pc, #524]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b81      	ldr	r3, [pc, #516]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a80      	ldr	r2, [pc, #512]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	e00b      	b.n	800401a <HAL_RCC_OscConfig+0x5a6>
 8004002:	4b7e      	ldr	r3, [pc, #504]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a7d      	ldr	r2, [pc, #500]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	4b7b      	ldr	r3, [pc, #492]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a7a      	ldr	r2, [pc, #488]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d015      	beq.n	800404e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd fd1b 	bl	8001a5c <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004028:	e00a      	b.n	8004040 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f7fd fd17 	bl	8001a5c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e122      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004040:	4b6e      	ldr	r3, [pc, #440]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ee      	beq.n	800402a <HAL_RCC_OscConfig+0x5b6>
 800404c:	e014      	b.n	8004078 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fd fd05 	bl	8001a5c <HAL_GetTick>
 8004052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fd fd01 	bl	8001a5c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e10c      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800406c:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ee      	bne.n	8004056 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8101 	beq.w	8004284 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004082:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800408a:	2b18      	cmp	r3, #24
 800408c:	f000 80bc 	beq.w	8004208 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2b02      	cmp	r3, #2
 8004096:	f040 8095 	bne.w	80041c4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80040a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fcd9 	bl	8001a5c <HAL_GetTick>
 80040aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd fcd5 	bl	8001a5c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0e2      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c0:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80040ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d0:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <HAL_RCC_OscConfig+0x78c>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	430a      	orrs	r2, r1
 80040e0:	4946      	ldr	r1, [pc, #280]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	628b      	str	r3, [r1, #40]	; 0x28
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	3b01      	subs	r3, #1
 80040ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	3b01      	subs	r3, #1
 80040f6:	025b      	lsls	r3, r3, #9
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	3b01      	subs	r3, #1
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	3b01      	subs	r3, #1
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004116:	4939      	ldr	r1, [pc, #228]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004118:	4313      	orrs	r3, r2
 800411a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800411c:	4b37      	ldr	r3, [pc, #220]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a36      	ldr	r2, [pc, #216]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004128:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800412a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412c:	4b35      	ldr	r3, [pc, #212]	; (8004204 <HAL_RCC_OscConfig+0x790>)
 800412e:	4013      	ands	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004134:	00d2      	lsls	r2, r2, #3
 8004136:	4931      	ldr	r1, [pc, #196]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004138:	4313      	orrs	r3, r2
 800413a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f023 020c 	bic.w	r2, r3, #12
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	492c      	ldr	r1, [pc, #176]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800414a:	4313      	orrs	r3, r2
 800414c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800414e:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f023 0202 	bic.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	4928      	ldr	r1, [pc, #160]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800415c:	4313      	orrs	r3, r2
 800415e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416c:	4b23      	ldr	r3, [pc, #140]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4a22      	ldr	r2, [pc, #136]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800417e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 8004196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fc5e 	bl	8001a5c <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd fc5a 	bl	8001a5c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e067      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x730>
 80041c2:	e05f      	b.n	8004284 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fc44 	bl	8001a5c <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd fc40 	bl	8001a5c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e04d      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <HAL_RCC_OscConfig+0x788>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x764>
 80041f6:	e045      	b.n	8004284 <HAL_RCC_OscConfig+0x810>
 80041f8:	58024800 	.word	0x58024800
 80041fc:	58024400 	.word	0x58024400
 8004200:	fffffc0c 	.word	0xfffffc0c
 8004204:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_RCC_OscConfig+0x81c>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_OscConfig+0x81c>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b01      	cmp	r3, #1
 800421a:	d031      	beq.n	8004280 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d12a      	bne.n	8004280 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d122      	bne.n	8004280 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d11a      	bne.n	8004280 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d111      	bne.n	8004280 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d108      	bne.n	8004280 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0e1b      	lsrs	r3, r3, #24
 8004272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400

08004294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e19c      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a8:	4b8a      	ldr	r3, [pc, #552]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d910      	bls.n	80042d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b87      	ldr	r3, [pc, #540]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	4985      	ldr	r1, [pc, #532]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b83      	ldr	r3, [pc, #524]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e184      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d908      	bls.n	8004306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f4:	4b78      	ldr	r3, [pc, #480]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4975      	ldr	r1, [pc, #468]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004302:	4313      	orrs	r3, r2
 8004304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	4b70      	ldr	r3, [pc, #448]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800431e:	429a      	cmp	r2, r3
 8004320:	d908      	bls.n	8004334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004322:	4b6d      	ldr	r3, [pc, #436]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	496a      	ldr	r1, [pc, #424]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004330:	4313      	orrs	r3, r2
 8004332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	4b64      	ldr	r3, [pc, #400]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800434c:	429a      	cmp	r2, r3
 800434e:	d908      	bls.n	8004362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004350:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	495e      	ldr	r1, [pc, #376]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 800435e:	4313      	orrs	r3, r2
 8004360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437a:	429a      	cmp	r2, r3
 800437c:	d908      	bls.n	8004390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800437e:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4953      	ldr	r1, [pc, #332]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 800438c:	4313      	orrs	r3, r2
 800438e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4b4d      	ldr	r3, [pc, #308]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d908      	bls.n	80043be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ac:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f023 020f 	bic.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4947      	ldr	r1, [pc, #284]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d055      	beq.n	8004476 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4940      	ldr	r1, [pc, #256]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e4:	4b3c      	ldr	r3, [pc, #240]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d121      	bne.n	8004434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0f6      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d107      	bne.n	800440c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043fc:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d115      	bne.n	8004434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0ea      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0de      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004424:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0d6      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004434:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f023 0207 	bic.w	r2, r3, #7
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4925      	ldr	r1, [pc, #148]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004442:	4313      	orrs	r3, r2
 8004444:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd fb09 	bl	8001a5c <HAL_GetTick>
 800444a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444c:	e00a      	b.n	8004464 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fd fb05 	bl	8001a5c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0be      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	429a      	cmp	r2, r3
 8004474:	d1eb      	bne.n	800444e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	429a      	cmp	r2, r3
 8004490:	d208      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f023 020f 	bic.w	r2, r3, #15
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	490e      	ldr	r1, [pc, #56]	; (80044d8 <HAL_RCC_ClockConfig+0x244>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d214      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 020f 	bic.w	r2, r3, #15
 80044ba:	4906      	ldr	r1, [pc, #24]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCC_ClockConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e086      	b.n	80045e2 <HAL_RCC_ClockConfig+0x34e>
 80044d4:	52002000 	.word	0x52002000
 80044d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d208      	bcs.n	800450a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044f8:	4b3c      	ldr	r3, [pc, #240]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	4939      	ldr	r1, [pc, #228]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004506:	4313      	orrs	r3, r2
 8004508:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d010      	beq.n	8004538 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	4b34      	ldr	r3, [pc, #208]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004522:	429a      	cmp	r2, r3
 8004524:	d208      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004526:	4b31      	ldr	r3, [pc, #196]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	492e      	ldr	r1, [pc, #184]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004534:	4313      	orrs	r3, r2
 8004536:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004550:	429a      	cmp	r2, r3
 8004552:	d208      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	4922      	ldr	r1, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004562:	4313      	orrs	r3, r2
 8004564:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800457e:	429a      	cmp	r2, r3
 8004580:	d208      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	4917      	ldr	r1, [pc, #92]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 8004590:	4313      	orrs	r3, r2
 8004592:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004594:	f000 f834 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	4912      	ldr	r1, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <HAL_RCC_ClockConfig+0x358>)
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x360>)
 80045ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x364>)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x368>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd f85e 	bl	8001698 <HAL_InitTick>
 80045dc:	4603      	mov	r3, r0
 80045de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
 80045f0:	08008c0c 	.word	0x08008c0c
 80045f4:	20000004 	.word	0x20000004
 80045f8:	20000000 	.word	0x20000000
 80045fc:	20000008 	.word	0x20000008

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004606:	4bb3      	ldr	r3, [pc, #716]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460e:	2b18      	cmp	r3, #24
 8004610:	f200 8155 	bhi.w	80048be <HAL_RCC_GetSysClockFreq+0x2be>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004681 	.word	0x08004681
 8004620:	080048bf 	.word	0x080048bf
 8004624:	080048bf 	.word	0x080048bf
 8004628:	080048bf 	.word	0x080048bf
 800462c:	080048bf 	.word	0x080048bf
 8004630:	080048bf 	.word	0x080048bf
 8004634:	080048bf 	.word	0x080048bf
 8004638:	080048bf 	.word	0x080048bf
 800463c:	080046a7 	.word	0x080046a7
 8004640:	080048bf 	.word	0x080048bf
 8004644:	080048bf 	.word	0x080048bf
 8004648:	080048bf 	.word	0x080048bf
 800464c:	080048bf 	.word	0x080048bf
 8004650:	080048bf 	.word	0x080048bf
 8004654:	080048bf 	.word	0x080048bf
 8004658:	080048bf 	.word	0x080048bf
 800465c:	080046ad 	.word	0x080046ad
 8004660:	080048bf 	.word	0x080048bf
 8004664:	080048bf 	.word	0x080048bf
 8004668:	080048bf 	.word	0x080048bf
 800466c:	080048bf 	.word	0x080048bf
 8004670:	080048bf 	.word	0x080048bf
 8004674:	080048bf 	.word	0x080048bf
 8004678:	080048bf 	.word	0x080048bf
 800467c:	080046b3 	.word	0x080046b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004680:	4b94      	ldr	r3, [pc, #592]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800468c:	4b91      	ldr	r3, [pc, #580]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	08db      	lsrs	r3, r3, #3
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	4a90      	ldr	r2, [pc, #576]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
 800469c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800469e:	e111      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046a0:	4b8d      	ldr	r3, [pc, #564]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046a2:	61bb      	str	r3, [r7, #24]
    break;
 80046a4:	e10e      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046a6:	4b8d      	ldr	r3, [pc, #564]	; (80048dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046a8:	61bb      	str	r3, [r7, #24]
    break;
 80046aa:	e10b      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046ac:	4b8c      	ldr	r3, [pc, #560]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046ae:	61bb      	str	r3, [r7, #24]
    break;
 80046b0:	e108      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046bc:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046c8:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046d2:	4b80      	ldr	r3, [pc, #512]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80e1 	beq.w	80048b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f000 8083 	beq.w	8004804 <HAL_RCC_GetSysClockFreq+0x204>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b02      	cmp	r3, #2
 8004702:	f200 80a1 	bhi.w	8004848 <HAL_RCC_GetSysClockFreq+0x248>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x114>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d056      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004712:	e099      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004714:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004720:	4b6c      	ldr	r3, [pc, #432]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	4a6b      	ldr	r2, [pc, #428]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
 8004730:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b62      	ldr	r3, [pc, #392]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a02 	vldr	s12, [r7, #8]
 800475e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800477a:	e087      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a02 	vldr	s12, [r7, #8]
 80047a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047be:	e065      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004802:	e043      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a02 	vldr	s12, [r7, #8]
 800482a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004846:	e021      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a02 	vldr	s12, [r7, #8]
 800486e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004896:	3301      	adds	r3, #1
 8004898:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b0:	ee17 3a90 	vmov	r3, s15
 80048b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048b6:	e005      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
    break;
 80048bc:	e002      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048c0:	61bb      	str	r3, [r7, #24]
    break;
 80048c2:	bf00      	nop
  }

  return sysclockfreq;
 80048c4:	69bb      	ldr	r3, [r7, #24]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	03d09000 	.word	0x03d09000
 80048dc:	003d0900 	.word	0x003d0900
 80048e0:	017d7840 	.word	0x017d7840
 80048e4:	46000000 	.word	0x46000000
 80048e8:	4c742400 	.word	0x4c742400
 80048ec:	4a742400 	.word	0x4a742400
 80048f0:	4bbebc20 	.word	0x4bbebc20

080048f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048fa:	f7ff fe81 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b10      	ldr	r3, [pc, #64]	; (8004944 <HAL_RCC_GetHCLKFreq+0x50>)
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490f      	ldr	r1, [pc, #60]	; (8004948 <HAL_RCC_GetHCLKFreq+0x54>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCC_GetHCLKFreq+0x50>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	4a09      	ldr	r2, [pc, #36]	; (8004948 <HAL_RCC_GetHCLKFreq+0x54>)
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a07      	ldr	r2, [pc, #28]	; (800494c <HAL_RCC_GetHCLKFreq+0x58>)
 8004930:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004932:	4a07      	ldr	r2, [pc, #28]	; (8004950 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <HAL_RCC_GetHCLKFreq+0x58>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	58024400 	.word	0x58024400
 8004948:	08008c0c 	.word	0x08008c0c
 800494c:	20000004 	.word	0x20000004
 8004950:	20000000 	.word	0x20000000

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004958:	f7ff ffcc 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4904      	ldr	r1, [pc, #16]	; (800497c <HAL_RCC_GetPCLK1Freq+0x28>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	58024400 	.word	0x58024400
 800497c:	08008c0c 	.word	0x08008c0c

08004980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004984:	f7ff ffb6 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4904      	ldr	r1, [pc, #16]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	58024400 	.word	0x58024400
 80049a8:	08008c0c 	.word	0x08008c0c

080049ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	223f      	movs	r2, #63	; 0x3f
 80049ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0207 	and.w	r2, r3, #7
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80049d4:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_RCC_GetClockConfig+0x7c>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_RCC_GetClockConfig+0x80>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 020f 	and.w	r2, r3, #15
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	52002000 	.word	0x52002000

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d03f      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a54:	d02a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a5a:	d824      	bhi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a60:	d018      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a66:	d81e      	bhi.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a70:	d007      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a72:	e018      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a74:	4bab      	ldr	r3, [pc, #684]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4aaa      	ldr	r2, [pc, #680]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a80:	e015      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 f9cf 	bl	8005e2c <RCCEx_PLL2_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a92:	e00c      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fa78 	bl	8005f90 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ab4:	4b9b      	ldr	r3, [pc, #620]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac0:	4998      	ldr	r1, [pc, #608]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d826      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004afd 	.word	0x08004afd
 8004aec:	08004b0b 	.word	0x08004b0b
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b35 	.word	0x08004b35
 8004af8:	08004b35 	.word	0x08004b35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afc:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a88      	ldr	r2, [pc, #544]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b08:	e015      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f98b 	bl	8005e2c <RCCEx_PLL2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e00c      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3324      	adds	r3, #36	; 0x24
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 fa34 	bl	8005f90 <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
      break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b3c:	4b79      	ldr	r3, [pc, #484]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	f023 0207 	bic.w	r2, r3, #7
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	4976      	ldr	r1, [pc, #472]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b4e:	e001      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d042      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b68:	d02b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6e:	d825      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b70:	2bc0      	cmp	r3, #192	; 0xc0
 8004b72:	d028      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b74:	2bc0      	cmp	r3, #192	; 0xc0
 8004b76:	d821      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d016      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	d81d      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d007      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b88:	e018      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b8a:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b96:	e017      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 f944 	bl	8005e2c <RCCEx_PLL2_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ba8:	e00e      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3324      	adds	r3, #36	; 0x24
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 f9ed 	bl	8005f90 <RCCEx_PLL3_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bce:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	4952      	ldr	r1, [pc, #328]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	650b      	str	r3, [r1, #80]	; 0x50
 8004be0:	e001      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d049      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bfc:	d030      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c02:	d82a      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c08:	d02c      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c0e:	d824      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c14:	d018      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1a:	d81e      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c24:	d007      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c26:	e018      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c28:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c34:	e017      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f8f5 	bl	8005e2c <RCCEx_PLL2_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c46:	e00e      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3324      	adds	r3, #36	; 0x24
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 f99e 	bl	8005f90 <RCCEx_PLL3_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c58:	e005      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5e:	e002      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c7a:	492a      	ldr	r1, [pc, #168]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c80:	e001      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
 8004c84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04c      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c9c:	d030      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca2:	d82a      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ca4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ca8:	d02c      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cae:	d824      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb4:	d018      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cba:	d81e      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d007      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4b16      	ldr	r3, [pc, #88]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e017      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f8a5 	bl	8005e2c <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ce6:	e00e      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f94e 	bl	8005f90 <RCCEx_PLL3_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cf8:	e005      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d1a:	4902      	ldr	r1, [pc, #8]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	658b      	str	r3, [r1, #88]	; 0x58
 8004d20:	e004      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004d22:	bf00      	nop
 8004d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d032      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	2b30      	cmp	r3, #48	; 0x30
 8004d3e:	d01c      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d817      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d00c      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d813      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d10f      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d54:	4baf      	ldr	r3, [pc, #700]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4aae      	ldr	r2, [pc, #696]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d60:	e00e      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	2102      	movs	r1, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 f85f 	bl	8005e2c <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]
      break;
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d86:	4ba3      	ldr	r3, [pc, #652]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	49a0      	ldr	r1, [pc, #640]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d98:	e001      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d047      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db2:	d030      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db8:	d82a      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dbe:	d02c      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004dc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dc4:	d824      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d018      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd0:	d81e      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	d007      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004ddc:	e018      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dde:	4b8d      	ldr	r3, [pc, #564]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4a8c      	ldr	r2, [pc, #560]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dea:	e017      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f81a 	bl	8005e2c <RCCEx_PLL2_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dfc:	e00e      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3324      	adds	r3, #36	; 0x24
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f8c3 	bl	8005f90 <RCCEx_PLL3_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
      break;
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e22:	4b7c      	ldr	r3, [pc, #496]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2e:	4979      	ldr	r1, [pc, #484]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	650b      	str	r3, [r1, #80]	; 0x50
 8004e34:	e001      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d049      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e4e:	d02e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e54:	d828      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e5a:	d02a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004e5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e60:	d822      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e66:	d026      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004e68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e6c:	d81c      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e72:	d010      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e78:	d816      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01d      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d111      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 ffce 	bl	8005e2c <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e94:	e012      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 f877 	bl	8005f90 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ea6:	e009      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004eac:	e006      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e004      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e002      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e000      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ec2:	4b54      	ldr	r3, [pc, #336]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ece:	4951      	ldr	r1, [pc, #324]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8004ed4:	e001      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04b      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ef0:	d02e      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ef6:	d828      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d02a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d822      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f08:	d026      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004f0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f0e:	d81c      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f14:	d010      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1a:	d816      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01d      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f24:	d111      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 ff7d 	bl	8005e2c <RCCEx_PLL2_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f36:	e012      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3324      	adds	r3, #36	; 0x24
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 f826 	bl	8005f90 <RCCEx_PLL3_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f48:	e009      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f4e:	e006      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f50:	bf00      	nop
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f64:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f72:	4928      	ldr	r1, [pc, #160]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	658b      	str	r3, [r1, #88]	; 0x58
 8004f78:	e001      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02f      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f92:	d00e      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f98:	d814      	bhi.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d015      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa2:	d10f      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fb0:	e00c      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 ff37 	bl	8005e2c <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fc2:	e003      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fde:	490d      	ldr	r1, [pc, #52]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	650b      	str	r3, [r1, #80]	; 0x50
 8004fe4:	e001      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d033      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d81c      	bhi.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ffe:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	0800503f 	.word	0x0800503f
 8005008:	08005019 	.word	0x08005019
 800500c:	08005027 	.word	0x08005027
 8005010:	0800503f 	.word	0x0800503f
 8005014:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005018:	4bb8      	ldr	r3, [pc, #736]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4ab7      	ldr	r2, [pc, #732]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800501e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005024:	e00c      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	2102      	movs	r1, #2
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fefd 	bl	8005e2c <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800503e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005046:	4bad      	ldr	r3, [pc, #692]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	49aa      	ldr	r1, [pc, #680]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005058:	e001      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8086 	beq.w	8005178 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800506c:	4ba4      	ldr	r3, [pc, #656]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4aa3      	ldr	r2, [pc, #652]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005078:	f7fc fcf0 	bl	8001a5c <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800507e:	e009      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005080:	f7fc fcec 	bl	8001a5c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d902      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	75fb      	strb	r3, [r7, #23]
        break;
 8005092:	e005      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005094:	4b9a      	ldr	r3, [pc, #616]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ef      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d166      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050a6:	4b95      	ldr	r3, [pc, #596]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050b0:	4053      	eors	r3, r2
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d013      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ba:	4b90      	ldr	r3, [pc, #576]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c4:	4b8d      	ldr	r3, [pc, #564]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a8c      	ldr	r2, [pc, #560]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d0:	4b8a      	ldr	r3, [pc, #552]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	4a89      	ldr	r2, [pc, #548]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050dc:	4a87      	ldr	r2, [pc, #540]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ec:	d115      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7fc fcb5 	bl	8001a5c <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f4:	e00b      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fc fcb1 	bl	8001a5c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	; 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d902      	bls.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	75fb      	strb	r3, [r7, #23]
            break;
 800510c:	e005      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800510e:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0ed      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d126      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800512e:	d10d      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005130:	4b72      	ldr	r3, [pc, #456]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800513e:	0919      	lsrs	r1, r3, #4
 8005140:	4b70      	ldr	r3, [pc, #448]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005142:	400b      	ands	r3, r1
 8005144:	496d      	ldr	r1, [pc, #436]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	610b      	str	r3, [r1, #16]
 800514a:	e005      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800514c:	4b6b      	ldr	r3, [pc, #428]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	4a6a      	ldr	r2, [pc, #424]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005152:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005156:	6113      	str	r3, [r2, #16]
 8005158:	4b68      	ldr	r3, [pc, #416]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800515a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005166:	4965      	ldr	r1, [pc, #404]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	670b      	str	r3, [r1, #112]	; 0x70
 800516c:	e004      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
 8005172:	e001      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d07e      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005188:	2b28      	cmp	r3, #40	; 0x28
 800518a:	d867      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	08005263 	.word	0x08005263
 8005198:	0800525d 	.word	0x0800525d
 800519c:	0800525d 	.word	0x0800525d
 80051a0:	0800525d 	.word	0x0800525d
 80051a4:	0800525d 	.word	0x0800525d
 80051a8:	0800525d 	.word	0x0800525d
 80051ac:	0800525d 	.word	0x0800525d
 80051b0:	0800525d 	.word	0x0800525d
 80051b4:	08005239 	.word	0x08005239
 80051b8:	0800525d 	.word	0x0800525d
 80051bc:	0800525d 	.word	0x0800525d
 80051c0:	0800525d 	.word	0x0800525d
 80051c4:	0800525d 	.word	0x0800525d
 80051c8:	0800525d 	.word	0x0800525d
 80051cc:	0800525d 	.word	0x0800525d
 80051d0:	0800525d 	.word	0x0800525d
 80051d4:	0800524b 	.word	0x0800524b
 80051d8:	0800525d 	.word	0x0800525d
 80051dc:	0800525d 	.word	0x0800525d
 80051e0:	0800525d 	.word	0x0800525d
 80051e4:	0800525d 	.word	0x0800525d
 80051e8:	0800525d 	.word	0x0800525d
 80051ec:	0800525d 	.word	0x0800525d
 80051f0:	0800525d 	.word	0x0800525d
 80051f4:	08005263 	.word	0x08005263
 80051f8:	0800525d 	.word	0x0800525d
 80051fc:	0800525d 	.word	0x0800525d
 8005200:	0800525d 	.word	0x0800525d
 8005204:	0800525d 	.word	0x0800525d
 8005208:	0800525d 	.word	0x0800525d
 800520c:	0800525d 	.word	0x0800525d
 8005210:	0800525d 	.word	0x0800525d
 8005214:	08005263 	.word	0x08005263
 8005218:	0800525d 	.word	0x0800525d
 800521c:	0800525d 	.word	0x0800525d
 8005220:	0800525d 	.word	0x0800525d
 8005224:	0800525d 	.word	0x0800525d
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800525d 	.word	0x0800525d
 8005230:	0800525d 	.word	0x0800525d
 8005234:	08005263 	.word	0x08005263
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fdf4 	bl	8005e2c <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005248:	e00c      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3324      	adds	r3, #36	; 0x24
 800524e:	2101      	movs	r1, #1
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fe9d 	bl	8005f90 <RCCEx_PLL3_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	e000      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	4921      	ldr	r1, [pc, #132]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	654b      	str	r3, [r1, #84]	; 0x54
 800527c:	e001      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d03e      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005292:	2b05      	cmp	r3, #5
 8005294:	d820      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052df 	.word	0x080052df
 80052a0:	080052b5 	.word	0x080052b5
 80052a4:	080052c7 	.word	0x080052c7
 80052a8:	080052df 	.word	0x080052df
 80052ac:	080052df 	.word	0x080052df
 80052b0:	080052df 	.word	0x080052df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	2101      	movs	r1, #1
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fdb6 	bl	8005e2c <RCCEx_PLL2_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052c4:	e00c      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3324      	adds	r3, #36	; 0x24
 80052ca:	2101      	movs	r1, #1
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fe5f 	bl	8005f90 <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052d6:	e003      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	75fb      	strb	r3, [r7, #23]
      break;
 80052dc:	e000      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80052de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d110      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	f023 0207 	bic.w	r2, r3, #7
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f2:	4902      	ldr	r1, [pc, #8]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	654b      	str	r3, [r1, #84]	; 0x54
 80052f8:	e008      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
 8005300:	58024800 	.word	0x58024800
 8005304:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d039      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531e:	2b05      	cmp	r3, #5
 8005320:	d820      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800536b 	.word	0x0800536b
 800532c:	08005341 	.word	0x08005341
 8005330:	08005353 	.word	0x08005353
 8005334:	0800536b 	.word	0x0800536b
 8005338:	0800536b 	.word	0x0800536b
 800533c:	0800536b 	.word	0x0800536b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fd70 	bl	8005e2c <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005350:	e00c      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3324      	adds	r3, #36	; 0x24
 8005356:	2101      	movs	r1, #1
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fe19 	bl	8005f90 <RCCEx_PLL3_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005362:	e003      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
      break;
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800536a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005372:	4bb7      	ldr	r3, [pc, #732]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	f023 0207 	bic.w	r2, r3, #7
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	49b3      	ldr	r1, [pc, #716]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005382:	4313      	orrs	r3, r2
 8005384:	658b      	str	r3, [r1, #88]	; 0x58
 8005386:	e001      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d04b      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a2:	d02e      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80053a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a8:	d828      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d02a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d822      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053ba:	d026      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80053bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c0:	d81c      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c6:	d010      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053cc:	d816      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01d      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80053d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d6:	d111      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	2100      	movs	r1, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fd24 	bl	8005e2c <RCCEx_PLL2_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053e8:	e012      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3324      	adds	r3, #36	; 0x24
 80053ee:	2102      	movs	r1, #2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fdcd 	bl	8005f90 <RCCEx_PLL3_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053fa:	e009      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005400:	e006      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005402:	bf00      	nop
 8005404:	e004      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005406:	bf00      	nop
 8005408:	e002      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800540a:	bf00      	nop
 800540c:	e000      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800540e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005416:	4b8e      	ldr	r3, [pc, #568]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005424:	498a      	ldr	r1, [pc, #552]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005426:	4313      	orrs	r3, r2
 8005428:	654b      	str	r3, [r1, #84]	; 0x54
 800542a:	e001      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d04b      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005446:	d02e      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005448:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800544c:	d828      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	d02a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d822      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800545a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800545e:	d026      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005464:	d81c      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800546a:	d010      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005470:	d816      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01d      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547a:	d111      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fcd2 	bl	8005e2c <RCCEx_PLL2_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800548c:	e012      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3324      	adds	r3, #36	; 0x24
 8005492:	2102      	movs	r1, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fd7b 	bl	8005f90 <RCCEx_PLL3_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800549e:	e009      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
      break;
 80054a4:	e006      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054a6:	bf00      	nop
 80054a8:	e004      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054aa:	bf00      	nop
 80054ac:	e002      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054ae:	bf00      	nop
 80054b0:	e000      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ba:	4b65      	ldr	r3, [pc, #404]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c8:	4961      	ldr	r1, [pc, #388]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	658b      	str	r3, [r1, #88]	; 0x58
 80054ce:	e001      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d04b      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054ea:	d02e      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80054ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054f0:	d828      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f6:	d02a      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fc:	d822      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005502:	d026      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005504:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005508:	d81c      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800550a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800550e:	d010      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005514:	d816      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01d      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551e:	d111      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc80 	bl	8005e2c <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005530:	e012      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3324      	adds	r3, #36	; 0x24
 8005536:	2102      	movs	r1, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fd29 	bl	8005f90 <RCCEx_PLL3_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005542:	e009      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
      break;
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800554a:	bf00      	nop
 800554c:	e004      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800554e:	bf00      	nop
 8005550:	e002      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800555e:	4b3c      	ldr	r3, [pc, #240]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800556c:	4938      	ldr	r1, [pc, #224]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800556e:	4313      	orrs	r3, r2
 8005570:	658b      	str	r3, [r1, #88]	; 0x58
 8005572:	e001      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d10a      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3324      	adds	r3, #36	; 0x24
 8005594:	2102      	movs	r1, #2
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fcfa 	bl	8005f90 <RCCEx_PLL3_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055a6:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b4:	4926      	ldr	r1, [pc, #152]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d0:	d10a      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3324      	adds	r3, #36	; 0x24
 80055d6:	2102      	movs	r1, #2
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fcd9 	bl	8005f90 <RCCEx_PLL3_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f6:	4916      	ldr	r1, [pc, #88]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d036      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800560e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005612:	d01f      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005618:	d817      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005622:	d009      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005624:	e011      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fbfd 	bl	8005e2c <RCCEx_PLL2_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005636:	e00e      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3324      	adds	r3, #36	; 0x24
 800563c:	2102      	movs	r1, #2
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fca6 	bl	8005f90 <RCCEx_PLL3_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005648:	e005      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
      break;
 800564e:	e002      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005650:	58024400 	.word	0x58024400
      break;
 8005654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800565c:	4b93      	ldr	r3, [pc, #588]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800566a:	4990      	ldr	r1, [pc, #576]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	658b      	str	r3, [r1, #88]	; 0x58
 8005670:	e001      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d033      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005688:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800568c:	d01c      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800568e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005692:	d816      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005698:	d003      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800569a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569e:	d007      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80056a0:	e00f      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a2:	4b82      	ldr	r3, [pc, #520]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4a81      	ldr	r2, [pc, #516]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80056ae:	e00c      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	2101      	movs	r1, #1
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fc6a 	bl	8005f90 <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
      break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80056c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d0:	4b76      	ldr	r3, [pc, #472]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056de:	4973      	ldr	r1, [pc, #460]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	654b      	str	r3, [r1, #84]	; 0x54
 80056e4:	e001      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d029      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d007      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005704:	e00f      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005706:	4b69      	ldr	r3, [pc, #420]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	4a68      	ldr	r2, [pc, #416]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800570c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005710:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005712:	e00b      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	2102      	movs	r1, #2
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fb86 	bl	8005e2c <RCCEx_PLL2_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005724:	e002      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	75fb      	strb	r3, [r7, #23]
      break;
 800572a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005732:	4b5e      	ldr	r3, [pc, #376]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	495b      	ldr	r1, [pc, #364]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005744:	e001      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3324      	adds	r3, #36	; 0x24
 800575a:	2102      	movs	r1, #2
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fc17 	bl	8005f90 <RCCEx_PLL3_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d030      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005780:	d017      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005786:	d811      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800578c:	d013      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800578e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005792:	d80b      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579c:	d106      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579e:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a42      	ldr	r2, [pc, #264]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80057aa:	e007      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
      break;
 80057b0:	e004      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c2:	4b3a      	ldr	r3, [pc, #232]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ce:	4937      	ldr	r1, [pc, #220]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	654b      	str	r3, [r1, #84]	; 0x54
 80057d4:	e001      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d008      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057e6:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	492e      	ldr	r1, [pc, #184]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005804:	4b29      	ldr	r3, [pc, #164]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005812:	4926      	ldr	r1, [pc, #152]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005814:	4313      	orrs	r3, r2
 8005816:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005824:	4b21      	ldr	r3, [pc, #132]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005830:	491e      	ldr	r1, [pc, #120]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00d      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005842:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	4a19      	ldr	r2, [pc, #100]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800584c:	6113      	str	r3, [r2, #16]
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005858:	4914      	ldr	r1, [pc, #80]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800585a:	4313      	orrs	r3, r2
 800585c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	da08      	bge.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	490e      	ldr	r1, [pc, #56]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	4906      	ldr	r1, [pc, #24]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005894:	4313      	orrs	r3, r2
 8005896:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005898:	7dbb      	ldrb	r3, [r7, #22]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	58024400 	.word	0x58024400

080058b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058b4:	f7ff f81e 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4904      	ldr	r1, [pc, #16]	; (80058d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	58024400 	.word	0x58024400
 80058d8:	08008c0c 	.word	0x08008c0c

080058dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	; 0x24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058e4:	4ba1      	ldr	r3, [pc, #644]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80058ee:	4b9f      	ldr	r3, [pc, #636]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	0b1b      	lsrs	r3, r3, #12
 80058f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80058fa:	4b9c      	ldr	r3, [pc, #624]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005906:	4b99      	ldr	r3, [pc, #612]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	08db      	lsrs	r3, r3, #3
 800590c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8111 	beq.w	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b02      	cmp	r3, #2
 800592e:	f000 8083 	beq.w	8005a38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b02      	cmp	r3, #2
 8005936:	f200 80a1 	bhi.w	8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d056      	beq.n	80059f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005946:	e099      	b.n	8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005948:	4b88      	ldr	r3, [pc, #544]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d02d      	beq.n	80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005954:	4b85      	ldr	r3, [pc, #532]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	08db      	lsrs	r3, r3, #3
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	4a84      	ldr	r2, [pc, #528]	; (8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597e:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005992:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059ae:	e087      	b.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c2:	4b6a      	ldr	r3, [pc, #424]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059f2:	e065      	b.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a06:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a36:	e043      	b.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4a:	4b48      	ldr	r3, [pc, #288]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7a:	e021      	b.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005abe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ac0:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	0a5b      	lsrs	r3, r3, #9
 8005ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae6:	ee17 2a90 	vmov	r2, s15
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005aee:	4b1f      	ldr	r3, [pc, #124]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	0c1b      	lsrs	r3, r3, #16
 8005af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b14:	ee17 2a90 	vmov	r2, s15
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b1c:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	0e1b      	lsrs	r3, r3, #24
 8005b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b42:	ee17 2a90 	vmov	r2, s15
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b4a:	e008      	b.n	8005b5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	609a      	str	r2, [r3, #8]
}
 8005b5e:	bf00      	nop
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	03d09000 	.word	0x03d09000
 8005b74:	46000000 	.word	0x46000000
 8005b78:	4c742400 	.word	0x4c742400
 8005b7c:	4a742400 	.word	0x4a742400
 8005b80:	4bbebc20 	.word	0x4bbebc20

08005b84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b8c:	4ba1      	ldr	r3, [pc, #644]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005b96:	4b9f      	ldr	r3, [pc, #636]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	0d1b      	lsrs	r3, r3, #20
 8005b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ba2:	4b9c      	ldr	r3, [pc, #624]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005bae:	4b99      	ldr	r3, [pc, #612]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	08db      	lsrs	r3, r3, #3
 8005bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8111 	beq.w	8005df4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	f000 8083 	beq.w	8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	f200 80a1 	bhi.w	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d056      	beq.n	8005c9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005bee:	e099      	b.n	8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf0:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d02d      	beq.n	8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bfc:	4b85      	ldr	r3, [pc, #532]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	4a84      	ldr	r2, [pc, #528]	; (8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c26:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c56:	e087      	b.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6a:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c9a:	e065      	b.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cae:	4b59      	ldr	r3, [pc, #356]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cde:	e043      	b.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf2:	4b48      	ldr	r3, [pc, #288]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d22:	e021      	b.n	8005d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d36:	4b37      	ldr	r3, [pc, #220]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d68:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	0a5b      	lsrs	r3, r3, #9
 8005d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8e:	ee17 2a90 	vmov	r2, s15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005d96:	4b1f      	ldr	r3, [pc, #124]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	0c1b      	lsrs	r3, r3, #16
 8005d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbc:	ee17 2a90 	vmov	r2, s15
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	0e1b      	lsrs	r3, r3, #24
 8005dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dea:	ee17 2a90 	vmov	r2, s15
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005df2:	e008      	b.n	8005e06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
}
 8005e06:	bf00      	nop
 8005e08:	3724      	adds	r7, #36	; 0x24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	58024400 	.word	0x58024400
 8005e18:	03d09000 	.word	0x03d09000
 8005e1c:	46000000 	.word	0x46000000
 8005e20:	4c742400 	.word	0x4c742400
 8005e24:	4a742400 	.word	0x4a742400
 8005e28:	4bbebc20 	.word	0x4bbebc20

08005e2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e3a:	4b53      	ldr	r3, [pc, #332]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d101      	bne.n	8005e4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e099      	b.n	8005f7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e4a:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a4e      	ldr	r2, [pc, #312]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005e50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e56:	f7fb fe01 	bl	8001a5c <HAL_GetTick>
 8005e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e5c:	e008      	b.n	8005e70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e5e:	f7fb fdfd 	bl	8001a5c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e086      	b.n	8005f7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e70:	4b45      	ldr	r3, [pc, #276]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f0      	bne.n	8005e5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e7c:	4b42      	ldr	r3, [pc, #264]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	493f      	ldr	r1, [pc, #252]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	628b      	str	r3, [r1, #40]	; 0x28
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	025b      	lsls	r3, r3, #9
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	061b      	lsls	r3, r3, #24
 8005ebc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ec0:	4931      	ldr	r1, [pc, #196]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ec6:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	492d      	ldr	r1, [pc, #180]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	f023 0220 	bic.w	r2, r3, #32
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	4928      	ldr	r1, [pc, #160]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005eea:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	f023 0310 	bic.w	r3, r3, #16
 8005ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efa:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <RCCEx_PLL2_Config+0x160>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	69d2      	ldr	r2, [r2, #28]
 8005f02:	00d2      	lsls	r2, r2, #3
 8005f04:	4920      	ldr	r1, [pc, #128]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f0a:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f10:	f043 0310 	orr.w	r3, r3, #16
 8005f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f28:	e00f      	b.n	8005f4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f3c:	e005      	b.n	8005f4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a0e      	ldr	r2, [pc, #56]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f56:	f7fb fd81 	bl	8001a5c <HAL_GetTick>
 8005f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f5c:	e008      	b.n	8005f70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f5e:	f7fb fd7d 	bl	8001a5c <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e006      	b.n	8005f7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <RCCEx_PLL2_Config+0x15c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	ffff0007 	.word	0xffff0007

08005f90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f9e:	4b53      	ldr	r3, [pc, #332]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d101      	bne.n	8005fae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e099      	b.n	80060e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005fae:	4b4f      	ldr	r3, [pc, #316]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a4e      	ldr	r2, [pc, #312]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fba:	f7fb fd4f 	bl	8001a5c <HAL_GetTick>
 8005fbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fc0:	e008      	b.n	8005fd4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005fc2:	f7fb fd4b 	bl	8001a5c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e086      	b.n	80060e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fd4:	4b45      	ldr	r3, [pc, #276]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f0      	bne.n	8005fc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005fe0:	4b42      	ldr	r3, [pc, #264]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	051b      	lsls	r3, r3, #20
 8005fee:	493f      	ldr	r1, [pc, #252]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	3b01      	subs	r3, #1
 8006004:	025b      	lsls	r3, r3, #9
 8006006:	b29b      	uxth	r3, r3
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	3b01      	subs	r3, #1
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	3b01      	subs	r3, #1
 800601e:	061b      	lsls	r3, r3, #24
 8006020:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006024:	4931      	ldr	r1, [pc, #196]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006026:	4313      	orrs	r3, r2
 8006028:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800602a:	4b30      	ldr	r3, [pc, #192]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	492d      	ldr	r1, [pc, #180]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006038:	4313      	orrs	r3, r2
 800603a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800603c:	4b2b      	ldr	r3, [pc, #172]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4928      	ldr	r1, [pc, #160]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 800604a:	4313      	orrs	r3, r2
 800604c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800604e:	4b27      	ldr	r3, [pc, #156]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	4a26      	ldr	r2, [pc, #152]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800605a:	4b24      	ldr	r3, [pc, #144]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 800605c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <RCCEx_PLL3_Config+0x160>)
 8006060:	4013      	ands	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	69d2      	ldr	r2, [r2, #28]
 8006066:	00d2      	lsls	r2, r2, #3
 8006068:	4920      	ldr	r1, [pc, #128]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 800606a:	4313      	orrs	r3, r2
 800606c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800606e:	4b1f      	ldr	r3, [pc, #124]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006080:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4a19      	ldr	r2, [pc, #100]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800608c:	e00f      	b.n	80060ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006094:	4b15      	ldr	r3, [pc, #84]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 800609a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800609e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060a0:	e005      	b.n	80060ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	4a11      	ldr	r2, [pc, #68]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 80060a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ba:	f7fb fccf 	bl	8001a5c <HAL_GetTick>
 80060be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060c2:	f7fb fccb 	bl	8001a5c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e006      	b.n	80060e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <RCCEx_PLL3_Config+0x15c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	58024400 	.word	0x58024400
 80060f0:	ffff0007 	.word	0xffff0007

080060f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e049      	b.n	800619a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f841 	bl	80061a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f000 f9f8 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d001      	beq.n	80061d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_TIM_Base_Start_IT+0xc4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01d      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x76>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d018      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x76>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_TIM_Base_Start_IT+0xc8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x76>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIM_Base_Start_IT+0xcc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00e      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x76>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_TIM_Base_Start_IT+0xd0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x76>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_TIM_Base_Start_IT+0xd4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x76>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_TIM_Base_Start_IT+0xd8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d115      	bne.n	800625a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	4b17      	ldr	r3, [pc, #92]	; (8006294 <HAL_TIM_Base_Start_IT+0xdc>)
 8006236:	4013      	ands	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b06      	cmp	r3, #6
 800623e:	d015      	beq.n	800626c <HAL_TIM_Base_Start_IT+0xb4>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006246:	d011      	beq.n	800626c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	e008      	b.n	800626c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0201 	orr.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e000      	b.n	800626e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40010000 	.word	0x40010000
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40010400 	.word	0x40010400
 8006290:	40001800 	.word	0x40001800
 8006294:	00010007 	.word	0x00010007

08006298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d122      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d11b      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0202 	mvn.w	r2, #2
 80062c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f905 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8f7 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f908 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0204 	mvn.w	r2, #4
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8db 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8cd 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8de 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b08      	cmp	r3, #8
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b08      	cmp	r3, #8
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0208 	mvn.w	r2, #8
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2204      	movs	r2, #4
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8b1 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f8a3 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f8b4 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0210 	mvn.w	r2, #16
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2208      	movs	r2, #8
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f887 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f879 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f88a 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10e      	bne.n	800641c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d107      	bne.n	800641c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0201 	mvn.w	r2, #1
 8006414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fa fda2 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d10e      	bne.n	8006448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d107      	bne.n	8006448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f914 	bl	8006670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006456:	d10e      	bne.n	8006476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b80      	cmp	r3, #128	; 0x80
 8006464:	d107      	bne.n	8006476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800646e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f907 	bl	8006684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d10e      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f838 	bl	8006512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d10e      	bne.n	80064ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d107      	bne.n	80064ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0220 	mvn.w	r2, #32
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8c7 	bl	800665c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a40      	ldr	r2, [pc, #256]	; (800663c <TIM_Base_SetConfig+0x114>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d00f      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3d      	ldr	r2, [pc, #244]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2f      	ldr	r2, [pc, #188]	; (800663c <TIM_Base_SetConfig+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01f      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d01b      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d017      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_Base_SetConfig+0x124>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <TIM_Base_SetConfig+0x128>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a27      	ldr	r2, [pc, #156]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a26      	ldr	r2, [pc, #152]	; (8006658 <TIM_Base_SetConfig+0x130>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <TIM_Base_SetConfig+0x114>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00f      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a12      	ldr	r2, [pc, #72]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00b      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a11      	ldr	r2, [pc, #68]	; (8006650 <TIM_Base_SetConfig+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a10      	ldr	r2, [pc, #64]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a0f      	ldr	r2, [pc, #60]	; (8006658 <TIM_Base_SetConfig+0x130>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d103      	bne.n	8006628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800

0800665c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e042      	b.n	8006730 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fa fc85 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2224      	movs	r2, #36	; 0x24
 80066c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f82c 	bl	8006738 <UART_SetConfig>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e022      	b.n	8006730 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fd80 	bl	80071f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fe07 	bl	800733c <UART_CheckIdleState>
 800672e:	4603      	mov	r3, r0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006738:	b5b0      	push	{r4, r5, r7, lr}
 800673a:	b08e      	sub	sp, #56	; 0x38
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	4313      	orrs	r3, r2
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4bbf      	ldr	r3, [pc, #764]	; (8006a64 <UART_SetConfig+0x32c>)
 8006766:	4013      	ands	r3, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800676e:	430b      	orrs	r3, r1
 8006770:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4ab5      	ldr	r2, [pc, #724]	; (8006a68 <UART_SetConfig+0x330>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679e:	4313      	orrs	r3, r2
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	4bb0      	ldr	r3, [pc, #704]	; (8006a6c <UART_SetConfig+0x334>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b2:	430b      	orrs	r3, r1
 80067b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	f023 010f 	bic.w	r1, r3, #15
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4aa7      	ldr	r2, [pc, #668]	; (8006a70 <UART_SetConfig+0x338>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d176      	bne.n	80068c4 <UART_SetConfig+0x18c>
 80067d6:	4ba7      	ldr	r3, [pc, #668]	; (8006a74 <UART_SetConfig+0x33c>)
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067de:	2b28      	cmp	r3, #40	; 0x28
 80067e0:	d86c      	bhi.n	80068bc <UART_SetConfig+0x184>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0xb0>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	0800688d 	.word	0x0800688d
 80067ec:	080068bd 	.word	0x080068bd
 80067f0:	080068bd 	.word	0x080068bd
 80067f4:	080068bd 	.word	0x080068bd
 80067f8:	080068bd 	.word	0x080068bd
 80067fc:	080068bd 	.word	0x080068bd
 8006800:	080068bd 	.word	0x080068bd
 8006804:	080068bd 	.word	0x080068bd
 8006808:	08006895 	.word	0x08006895
 800680c:	080068bd 	.word	0x080068bd
 8006810:	080068bd 	.word	0x080068bd
 8006814:	080068bd 	.word	0x080068bd
 8006818:	080068bd 	.word	0x080068bd
 800681c:	080068bd 	.word	0x080068bd
 8006820:	080068bd 	.word	0x080068bd
 8006824:	080068bd 	.word	0x080068bd
 8006828:	0800689d 	.word	0x0800689d
 800682c:	080068bd 	.word	0x080068bd
 8006830:	080068bd 	.word	0x080068bd
 8006834:	080068bd 	.word	0x080068bd
 8006838:	080068bd 	.word	0x080068bd
 800683c:	080068bd 	.word	0x080068bd
 8006840:	080068bd 	.word	0x080068bd
 8006844:	080068bd 	.word	0x080068bd
 8006848:	080068a5 	.word	0x080068a5
 800684c:	080068bd 	.word	0x080068bd
 8006850:	080068bd 	.word	0x080068bd
 8006854:	080068bd 	.word	0x080068bd
 8006858:	080068bd 	.word	0x080068bd
 800685c:	080068bd 	.word	0x080068bd
 8006860:	080068bd 	.word	0x080068bd
 8006864:	080068bd 	.word	0x080068bd
 8006868:	080068ad 	.word	0x080068ad
 800686c:	080068bd 	.word	0x080068bd
 8006870:	080068bd 	.word	0x080068bd
 8006874:	080068bd 	.word	0x080068bd
 8006878:	080068bd 	.word	0x080068bd
 800687c:	080068bd 	.word	0x080068bd
 8006880:	080068bd 	.word	0x080068bd
 8006884:	080068bd 	.word	0x080068bd
 8006888:	080068b5 	.word	0x080068b5
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006892:	e222      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006894:	2304      	movs	r3, #4
 8006896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800689a:	e21e      	b.n	8006cda <UART_SetConfig+0x5a2>
 800689c:	2308      	movs	r3, #8
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e21a      	b.n	8006cda <UART_SetConfig+0x5a2>
 80068a4:	2310      	movs	r3, #16
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e216      	b.n	8006cda <UART_SetConfig+0x5a2>
 80068ac:	2320      	movs	r3, #32
 80068ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b2:	e212      	b.n	8006cda <UART_SetConfig+0x5a2>
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ba:	e20e      	b.n	8006cda <UART_SetConfig+0x5a2>
 80068bc:	2380      	movs	r3, #128	; 0x80
 80068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c2:	e20a      	b.n	8006cda <UART_SetConfig+0x5a2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a6b      	ldr	r2, [pc, #428]	; (8006a78 <UART_SetConfig+0x340>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d130      	bne.n	8006930 <UART_SetConfig+0x1f8>
 80068ce:	4b69      	ldr	r3, [pc, #420]	; (8006a74 <UART_SetConfig+0x33c>)
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	d826      	bhi.n	8006928 <UART_SetConfig+0x1f0>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <UART_SetConfig+0x1a8>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068f9 	.word	0x080068f9
 80068e4:	08006901 	.word	0x08006901
 80068e8:	08006909 	.word	0x08006909
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068fe:	e1ec      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006906:	e1e8      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800690e:	e1e4      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006916:	e1e0      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006918:	2320      	movs	r3, #32
 800691a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800691e:	e1dc      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006926:	e1d8      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800692e:	e1d4      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a51      	ldr	r2, [pc, #324]	; (8006a7c <UART_SetConfig+0x344>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d130      	bne.n	800699c <UART_SetConfig+0x264>
 800693a:	4b4e      	ldr	r3, [pc, #312]	; (8006a74 <UART_SetConfig+0x33c>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b05      	cmp	r3, #5
 8006944:	d826      	bhi.n	8006994 <UART_SetConfig+0x25c>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x214>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006965 	.word	0x08006965
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006975 	.word	0x08006975
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800696a:	e1b6      	b.n	8006cda <UART_SetConfig+0x5a2>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006972:	e1b2      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800697a:	e1ae      	b.n	8006cda <UART_SetConfig+0x5a2>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006982:	e1aa      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006984:	2320      	movs	r3, #32
 8006986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800698a:	e1a6      	b.n	8006cda <UART_SetConfig+0x5a2>
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006992:	e1a2      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800699a:	e19e      	b.n	8006cda <UART_SetConfig+0x5a2>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a37      	ldr	r2, [pc, #220]	; (8006a80 <UART_SetConfig+0x348>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d130      	bne.n	8006a08 <UART_SetConfig+0x2d0>
 80069a6:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <UART_SetConfig+0x33c>)
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d826      	bhi.n	8006a00 <UART_SetConfig+0x2c8>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x280>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069d1 	.word	0x080069d1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069e1 	.word	0x080069e1
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e180      	b.n	8006cda <UART_SetConfig+0x5a2>
 80069d8:	2304      	movs	r3, #4
 80069da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069de:	e17c      	b.n	8006cda <UART_SetConfig+0x5a2>
 80069e0:	2308      	movs	r3, #8
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	e178      	b.n	8006cda <UART_SetConfig+0x5a2>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e174      	b.n	8006cda <UART_SetConfig+0x5a2>
 80069f0:	2320      	movs	r3, #32
 80069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069f6:	e170      	b.n	8006cda <UART_SetConfig+0x5a2>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069fe:	e16c      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a06:	e168      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <UART_SetConfig+0x34c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d142      	bne.n	8006a98 <UART_SetConfig+0x360>
 8006a12:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <UART_SetConfig+0x33c>)
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b05      	cmp	r3, #5
 8006a1c:	d838      	bhi.n	8006a90 <UART_SetConfig+0x358>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <UART_SetConfig+0x2ec>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a3d 	.word	0x08006a3d
 8006a28:	08006a45 	.word	0x08006a45
 8006a2c:	08006a4d 	.word	0x08006a4d
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a89 	.word	0x08006a89
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a42:	e14a      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4a:	e146      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a52:	e142      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5a:	e13e      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a5c:	2320      	movs	r3, #32
 8006a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a62:	e13a      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a64:	cfff69f3 	.word	0xcfff69f3
 8006a68:	58000c00 	.word	0x58000c00
 8006a6c:	11fff4ff 	.word	0x11fff4ff
 8006a70:	40011000 	.word	0x40011000
 8006a74:	58024400 	.word	0x58024400
 8006a78:	40004400 	.word	0x40004400
 8006a7c:	40004800 	.word	0x40004800
 8006a80:	40004c00 	.word	0x40004c00
 8006a84:	40005000 	.word	0x40005000
 8006a88:	2340      	movs	r3, #64	; 0x40
 8006a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a8e:	e124      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e120      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4acc      	ldr	r2, [pc, #816]	; (8006dd0 <UART_SetConfig+0x698>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d176      	bne.n	8006b90 <UART_SetConfig+0x458>
 8006aa2:	4bcc      	ldr	r3, [pc, #816]	; (8006dd4 <UART_SetConfig+0x69c>)
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aaa:	2b28      	cmp	r3, #40	; 0x28
 8006aac:	d86c      	bhi.n	8006b88 <UART_SetConfig+0x450>
 8006aae:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <UART_SetConfig+0x37c>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006b59 	.word	0x08006b59
 8006ab8:	08006b89 	.word	0x08006b89
 8006abc:	08006b89 	.word	0x08006b89
 8006ac0:	08006b89 	.word	0x08006b89
 8006ac4:	08006b89 	.word	0x08006b89
 8006ac8:	08006b89 	.word	0x08006b89
 8006acc:	08006b89 	.word	0x08006b89
 8006ad0:	08006b89 	.word	0x08006b89
 8006ad4:	08006b61 	.word	0x08006b61
 8006ad8:	08006b89 	.word	0x08006b89
 8006adc:	08006b89 	.word	0x08006b89
 8006ae0:	08006b89 	.word	0x08006b89
 8006ae4:	08006b89 	.word	0x08006b89
 8006ae8:	08006b89 	.word	0x08006b89
 8006aec:	08006b89 	.word	0x08006b89
 8006af0:	08006b89 	.word	0x08006b89
 8006af4:	08006b69 	.word	0x08006b69
 8006af8:	08006b89 	.word	0x08006b89
 8006afc:	08006b89 	.word	0x08006b89
 8006b00:	08006b89 	.word	0x08006b89
 8006b04:	08006b89 	.word	0x08006b89
 8006b08:	08006b89 	.word	0x08006b89
 8006b0c:	08006b89 	.word	0x08006b89
 8006b10:	08006b89 	.word	0x08006b89
 8006b14:	08006b71 	.word	0x08006b71
 8006b18:	08006b89 	.word	0x08006b89
 8006b1c:	08006b89 	.word	0x08006b89
 8006b20:	08006b89 	.word	0x08006b89
 8006b24:	08006b89 	.word	0x08006b89
 8006b28:	08006b89 	.word	0x08006b89
 8006b2c:	08006b89 	.word	0x08006b89
 8006b30:	08006b89 	.word	0x08006b89
 8006b34:	08006b79 	.word	0x08006b79
 8006b38:	08006b89 	.word	0x08006b89
 8006b3c:	08006b89 	.word	0x08006b89
 8006b40:	08006b89 	.word	0x08006b89
 8006b44:	08006b89 	.word	0x08006b89
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006b89 	.word	0x08006b89
 8006b50:	08006b89 	.word	0x08006b89
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5e:	e0bc      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b66:	e0b8      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b6e:	e0b4      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b76:	e0b0      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b7e:	e0ac      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b86:	e0a8      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8e:	e0a4      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a90      	ldr	r2, [pc, #576]	; (8006dd8 <UART_SetConfig+0x6a0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d130      	bne.n	8006bfc <UART_SetConfig+0x4c4>
 8006b9a:	4b8e      	ldr	r3, [pc, #568]	; (8006dd4 <UART_SetConfig+0x69c>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d826      	bhi.n	8006bf4 <UART_SetConfig+0x4bc>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x474>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bc5 	.word	0x08006bc5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006bd5 	.word	0x08006bd5
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bca:	e086      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bd2:	e082      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bda:	e07e      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006be2:	e07a      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006be4:	2320      	movs	r3, #32
 8006be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bea:	e076      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bf2:	e072      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bfa:	e06e      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a76      	ldr	r2, [pc, #472]	; (8006ddc <UART_SetConfig+0x6a4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d130      	bne.n	8006c68 <UART_SetConfig+0x530>
 8006c06:	4b73      	ldr	r3, [pc, #460]	; (8006dd4 <UART_SetConfig+0x69c>)
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d826      	bhi.n	8006c60 <UART_SetConfig+0x528>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <UART_SetConfig+0x4e0>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c31 	.word	0x08006c31
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c41 	.word	0x08006c41
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c36:	e050      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c3e:	e04c      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c46:	e048      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c4e:	e044      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c50:	2320      	movs	r3, #32
 8006c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c56:	e040      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c5e:	e03c      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c66:	e038      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a5c      	ldr	r2, [pc, #368]	; (8006de0 <UART_SetConfig+0x6a8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d130      	bne.n	8006cd4 <UART_SetConfig+0x59c>
 8006c72:	4b58      	ldr	r3, [pc, #352]	; (8006dd4 <UART_SetConfig+0x69c>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d826      	bhi.n	8006ccc <UART_SetConfig+0x594>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0x54c>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006c9d 	.word	0x08006c9d
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cad 	.word	0x08006cad
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ca2:	e01a      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006caa:	e016      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006cac:	2308      	movs	r3, #8
 8006cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cb2:	e012      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cba:	e00e      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc2:	e00a      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006cc4:	2340      	movs	r3, #64	; 0x40
 8006cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cca:	e006      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cd2:	e002      	b.n	8006cda <UART_SetConfig+0x5a2>
 8006cd4:	2380      	movs	r3, #128	; 0x80
 8006cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a40      	ldr	r2, [pc, #256]	; (8006de0 <UART_SetConfig+0x6a8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	f040 80ef 	bne.w	8006ec4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	dc46      	bgt.n	8006d7c <UART_SetConfig+0x644>
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	f2c0 8081 	blt.w	8006df6 <UART_SetConfig+0x6be>
 8006cf4:	3b02      	subs	r3, #2
 8006cf6:	2b1e      	cmp	r3, #30
 8006cf8:	d87d      	bhi.n	8006df6 <UART_SetConfig+0x6be>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x5c8>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d83 	.word	0x08006d83
 8006d04:	08006df7 	.word	0x08006df7
 8006d08:	08006d8b 	.word	0x08006d8b
 8006d0c:	08006df7 	.word	0x08006df7
 8006d10:	08006df7 	.word	0x08006df7
 8006d14:	08006df7 	.word	0x08006df7
 8006d18:	08006d9b 	.word	0x08006d9b
 8006d1c:	08006df7 	.word	0x08006df7
 8006d20:	08006df7 	.word	0x08006df7
 8006d24:	08006df7 	.word	0x08006df7
 8006d28:	08006df7 	.word	0x08006df7
 8006d2c:	08006df7 	.word	0x08006df7
 8006d30:	08006df7 	.word	0x08006df7
 8006d34:	08006df7 	.word	0x08006df7
 8006d38:	08006dab 	.word	0x08006dab
 8006d3c:	08006df7 	.word	0x08006df7
 8006d40:	08006df7 	.word	0x08006df7
 8006d44:	08006df7 	.word	0x08006df7
 8006d48:	08006df7 	.word	0x08006df7
 8006d4c:	08006df7 	.word	0x08006df7
 8006d50:	08006df7 	.word	0x08006df7
 8006d54:	08006df7 	.word	0x08006df7
 8006d58:	08006df7 	.word	0x08006df7
 8006d5c:	08006df7 	.word	0x08006df7
 8006d60:	08006df7 	.word	0x08006df7
 8006d64:	08006df7 	.word	0x08006df7
 8006d68:	08006df7 	.word	0x08006df7
 8006d6c:	08006df7 	.word	0x08006df7
 8006d70:	08006df7 	.word	0x08006df7
 8006d74:	08006df7 	.word	0x08006df7
 8006d78:	08006de9 	.word	0x08006de9
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d036      	beq.n	8006dee <UART_SetConfig+0x6b6>
 8006d80:	e039      	b.n	8006df6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d82:	f7fe fd95 	bl	80058b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006d88:	e03b      	b.n	8006e02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8a:	f107 0314 	add.w	r3, r7, #20
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fda4 	bl	80058dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d98:	e033      	b.n	8006e02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fef0 	bl	8005b84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006da8:	e02b      	b.n	8006e02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <UART_SetConfig+0x69c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006db6:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <UART_SetConfig+0x69c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	4a08      	ldr	r2, [pc, #32]	; (8006de4 <UART_SetConfig+0x6ac>)
 8006dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dc8:	e01b      	b.n	8006e02 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <UART_SetConfig+0x6ac>)
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dce:	e018      	b.n	8006e02 <UART_SetConfig+0x6ca>
 8006dd0:	40011400 	.word	0x40011400
 8006dd4:	58024400 	.word	0x58024400
 8006dd8:	40007800 	.word	0x40007800
 8006ddc:	40007c00 	.word	0x40007c00
 8006de0:	58000c00 	.word	0x58000c00
 8006de4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006de8:	4bc4      	ldr	r3, [pc, #784]	; (80070fc <UART_SetConfig+0x9c4>)
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006dec:	e009      	b.n	8006e02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006df4:	e005      	b.n	8006e02 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 81da 	beq.w	80071be <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	4abc      	ldr	r2, [pc, #752]	; (8007100 <UART_SetConfig+0x9c8>)
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d305      	bcc.n	8006e3a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d903      	bls.n	8006e42 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006e40:	e1bd      	b.n	80071be <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	4618      	mov	r0, r3
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	4aac      	ldr	r2, [pc, #688]	; (8007100 <UART_SetConfig+0x9c8>)
 8006e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	f7f9 fa41 	bl	80002e0 <__aeabi_uldivmod>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	020b      	lsls	r3, r1, #8
 8006e70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e74:	0202      	lsls	r2, r0, #8
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	6849      	ldr	r1, [r1, #4]
 8006e7a:	0849      	lsrs	r1, r1, #1
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	f04f 0100 	mov.w	r1, #0
 8006e82:	1814      	adds	r4, r2, r0
 8006e84:	eb43 0501 	adc.w	r5, r3, r1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7f9 fa23 	bl	80002e0 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea8:	d308      	bcc.n	8006ebc <UART_SetConfig+0x784>
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb0:	d204      	bcs.n	8006ebc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	e180      	b.n	80071be <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ec2:	e17c      	b.n	80071be <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ecc:	f040 80bf 	bne.w	800704e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006ed0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	dc49      	bgt.n	8006f6c <UART_SetConfig+0x834>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db7c      	blt.n	8006fd6 <UART_SetConfig+0x89e>
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d87a      	bhi.n	8006fd6 <UART_SetConfig+0x89e>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <UART_SetConfig+0x7b0>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f73 	.word	0x08006f73
 8006eec:	08006f7b 	.word	0x08006f7b
 8006ef0:	08006fd7 	.word	0x08006fd7
 8006ef4:	08006fd7 	.word	0x08006fd7
 8006ef8:	08006f83 	.word	0x08006f83
 8006efc:	08006fd7 	.word	0x08006fd7
 8006f00:	08006fd7 	.word	0x08006fd7
 8006f04:	08006fd7 	.word	0x08006fd7
 8006f08:	08006f93 	.word	0x08006f93
 8006f0c:	08006fd7 	.word	0x08006fd7
 8006f10:	08006fd7 	.word	0x08006fd7
 8006f14:	08006fd7 	.word	0x08006fd7
 8006f18:	08006fd7 	.word	0x08006fd7
 8006f1c:	08006fd7 	.word	0x08006fd7
 8006f20:	08006fd7 	.word	0x08006fd7
 8006f24:	08006fd7 	.word	0x08006fd7
 8006f28:	08006fa3 	.word	0x08006fa3
 8006f2c:	08006fd7 	.word	0x08006fd7
 8006f30:	08006fd7 	.word	0x08006fd7
 8006f34:	08006fd7 	.word	0x08006fd7
 8006f38:	08006fd7 	.word	0x08006fd7
 8006f3c:	08006fd7 	.word	0x08006fd7
 8006f40:	08006fd7 	.word	0x08006fd7
 8006f44:	08006fd7 	.word	0x08006fd7
 8006f48:	08006fd7 	.word	0x08006fd7
 8006f4c:	08006fd7 	.word	0x08006fd7
 8006f50:	08006fd7 	.word	0x08006fd7
 8006f54:	08006fd7 	.word	0x08006fd7
 8006f58:	08006fd7 	.word	0x08006fd7
 8006f5c:	08006fd7 	.word	0x08006fd7
 8006f60:	08006fd7 	.word	0x08006fd7
 8006f64:	08006fd7 	.word	0x08006fd7
 8006f68:	08006fc9 	.word	0x08006fc9
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d02e      	beq.n	8006fce <UART_SetConfig+0x896>
 8006f70:	e031      	b.n	8006fd6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f72:	f7fd fcef 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8006f76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f78:	e033      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f7a:	f7fd fd01 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8006f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f80:	e02f      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f82:	f107 0314 	add.w	r3, r7, #20
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fca8 	bl	80058dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f90:	e027      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f92:	f107 0308 	add.w	r3, r7, #8
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fdf4 	bl	8005b84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fa0:	e01f      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa2:	4b58      	ldr	r3, [pc, #352]	; (8007104 <UART_SetConfig+0x9cc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fae:	4b55      	ldr	r3, [pc, #340]	; (8007104 <UART_SetConfig+0x9cc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	08db      	lsrs	r3, r3, #3
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	4a53      	ldr	r2, [pc, #332]	; (8007108 <UART_SetConfig+0x9d0>)
 8006fba:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fc0:	e00f      	b.n	8006fe2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006fc2:	4b51      	ldr	r3, [pc, #324]	; (8007108 <UART_SetConfig+0x9d0>)
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fc6:	e00c      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fc8:	4b4c      	ldr	r3, [pc, #304]	; (80070fc <UART_SetConfig+0x9c4>)
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fcc:	e009      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fd4:	e005      	b.n	8006fe2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006fe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80ea 	beq.w	80071be <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	4a44      	ldr	r2, [pc, #272]	; (8007100 <UART_SetConfig+0x9c8>)
 8006ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ffc:	005a      	lsls	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	441a      	add	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	b29b      	uxth	r3, r3
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	2b0f      	cmp	r3, #15
 8007016:	d916      	bls.n	8007046 <UART_SetConfig+0x90e>
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701e:	d212      	bcs.n	8007046 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	b29b      	uxth	r3, r3
 8007024:	f023 030f 	bic.w	r3, r3, #15
 8007028:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	b29b      	uxth	r3, r3
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	b29a      	uxth	r2, r3
 8007036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007038:	4313      	orrs	r3, r2
 800703a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007042:	60da      	str	r2, [r3, #12]
 8007044:	e0bb      	b.n	80071be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800704c:	e0b7      	b.n	80071be <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800704e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007052:	2b20      	cmp	r3, #32
 8007054:	dc4a      	bgt.n	80070ec <UART_SetConfig+0x9b4>
 8007056:	2b00      	cmp	r3, #0
 8007058:	f2c0 8086 	blt.w	8007168 <UART_SetConfig+0xa30>
 800705c:	2b20      	cmp	r3, #32
 800705e:	f200 8083 	bhi.w	8007168 <UART_SetConfig+0xa30>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <UART_SetConfig+0x930>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	080070f3 	.word	0x080070f3
 800706c:	0800710d 	.word	0x0800710d
 8007070:	08007169 	.word	0x08007169
 8007074:	08007169 	.word	0x08007169
 8007078:	08007115 	.word	0x08007115
 800707c:	08007169 	.word	0x08007169
 8007080:	08007169 	.word	0x08007169
 8007084:	08007169 	.word	0x08007169
 8007088:	08007125 	.word	0x08007125
 800708c:	08007169 	.word	0x08007169
 8007090:	08007169 	.word	0x08007169
 8007094:	08007169 	.word	0x08007169
 8007098:	08007169 	.word	0x08007169
 800709c:	08007169 	.word	0x08007169
 80070a0:	08007169 	.word	0x08007169
 80070a4:	08007169 	.word	0x08007169
 80070a8:	08007135 	.word	0x08007135
 80070ac:	08007169 	.word	0x08007169
 80070b0:	08007169 	.word	0x08007169
 80070b4:	08007169 	.word	0x08007169
 80070b8:	08007169 	.word	0x08007169
 80070bc:	08007169 	.word	0x08007169
 80070c0:	08007169 	.word	0x08007169
 80070c4:	08007169 	.word	0x08007169
 80070c8:	08007169 	.word	0x08007169
 80070cc:	08007169 	.word	0x08007169
 80070d0:	08007169 	.word	0x08007169
 80070d4:	08007169 	.word	0x08007169
 80070d8:	08007169 	.word	0x08007169
 80070dc:	08007169 	.word	0x08007169
 80070e0:	08007169 	.word	0x08007169
 80070e4:	08007169 	.word	0x08007169
 80070e8:	0800715b 	.word	0x0800715b
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d037      	beq.n	8007160 <UART_SetConfig+0xa28>
 80070f0:	e03a      	b.n	8007168 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f2:	f7fd fc2f 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 80070f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80070f8:	e03c      	b.n	8007174 <UART_SetConfig+0xa3c>
 80070fa:	bf00      	nop
 80070fc:	003d0900 	.word	0x003d0900
 8007100:	08008c24 	.word	0x08008c24
 8007104:	58024400 	.word	0x58024400
 8007108:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800710c:	f7fd fc38 	bl	8004980 <HAL_RCC_GetPCLK2Freq>
 8007110:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007112:	e02f      	b.n	8007174 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fbdf 	bl	80058dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007122:	e027      	b.n	8007174 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fd2b 	bl	8005b84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007132:	e01f      	b.n	8007174 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007134:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <UART_SetConfig+0xab0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007140:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <UART_SetConfig+0xab0>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	08db      	lsrs	r3, r3, #3
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	4a28      	ldr	r2, [pc, #160]	; (80071ec <UART_SetConfig+0xab4>)
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007152:	e00f      	b.n	8007174 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <UART_SetConfig+0xab4>)
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007158:	e00c      	b.n	8007174 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800715a:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <UART_SetConfig+0xab8>)
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800715e:	e009      	b.n	8007174 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007166:	e005      	b.n	8007174 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007172:	bf00      	nop
    }

    if (pclk != 0U)
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d021      	beq.n	80071be <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <UART_SetConfig+0xabc>)
 8007180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007184:	461a      	mov	r2, r3
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	fbb3 f2f2 	udiv	r2, r3, r2
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	085b      	lsrs	r3, r3, #1
 8007192:	441a      	add	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	fbb2 f3f3 	udiv	r3, r2, r3
 800719c:	b29b      	uxth	r3, r3
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	2b0f      	cmp	r3, #15
 80071a4:	d908      	bls.n	80071b8 <UART_SetConfig+0xa80>
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ac:	d204      	bcs.n	80071b8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b4:	60da      	str	r2, [r3, #12]
 80071b6:	e002      	b.n	80071be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3738      	adds	r7, #56	; 0x38
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bdb0      	pop	{r4, r5, r7, pc}
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	003d0900 	.word	0x003d0900
 80071f4:	08008c24 	.word	0x08008c24

080071f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01a      	beq.n	800730e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f6:	d10a      	bne.n	800730e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af02      	add	r7, sp, #8
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800734c:	f7fa fb86 	bl	8001a5c <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d10e      	bne.n	800737e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f82f 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e025      	b.n	80073ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b04      	cmp	r3, #4
 800738a:	d10e      	bne.n	80073aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f819 	bl	80073d2 <UART_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e00f      	b.n	80073ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e2:	e062      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d05e      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ec:	f7fa fb36 	bl	8001a5c <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d302      	bcc.n	8007402 <UART_WaitOnFlagUntilTimeout+0x30>
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d11d      	bne.n	800743e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007410:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e045      	b.n	80074ca <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d02e      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800745a:	d126      	bne.n	80074aa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007464:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007474:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e00f      	b.n	80074ca <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d08d      	beq.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e027      	b.n	8007538 <HAL_UARTEx_DisableFifoMode+0x66>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2224      	movs	r2, #36	; 0x24
 80074f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0201 	bic.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007516:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007558:	2302      	movs	r3, #2
 800755a:	e02d      	b.n	80075b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	; 0x24
 8007568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f84f 	bl	800763c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e02d      	b.n	8007634 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2224      	movs	r2, #36	; 0x24
 80075e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f811 	bl	800763c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800765c:	e031      	b.n	80076c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800765e:	2310      	movs	r3, #16
 8007660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007662:	2310      	movs	r3, #16
 8007664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	0e5b      	lsrs	r3, r3, #25
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	0f5b      	lsrs	r3, r3, #29
 800767e:	b2db      	uxtb	r3, r3
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	7b3a      	ldrb	r2, [r7, #12]
 800768a:	4911      	ldr	r1, [pc, #68]	; (80076d0 <UARTEx_SetNbDataToProcess+0x94>)
 800768c:	5c8a      	ldrb	r2, [r1, r2]
 800768e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007692:	7b3a      	ldrb	r2, [r7, #12]
 8007694:	490f      	ldr	r1, [pc, #60]	; (80076d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007698:	fb93 f3f2 	sdiv	r3, r3, r2
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	7b7a      	ldrb	r2, [r7, #13]
 80076a8:	4909      	ldr	r1, [pc, #36]	; (80076d0 <UARTEx_SetNbDataToProcess+0x94>)
 80076aa:	5c8a      	ldrb	r2, [r1, r2]
 80076ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076b0:	7b7a      	ldrb	r2, [r7, #13]
 80076b2:	4908      	ldr	r1, [pc, #32]	; (80076d4 <UARTEx_SetNbDataToProcess+0x98>)
 80076b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	08008c3c 	.word	0x08008c3c
 80076d4:	08008c44 	.word	0x08008c44

080076d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80076e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ea:	2b84      	cmp	r3, #132	; 0x84
 80076ec:	d005      	beq.n	80076fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80076ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	3303      	adds	r3, #3
 80076f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80076fa:	68fb      	ldr	r3, [r7, #12]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800770c:	f000 fade 	bl	8007ccc <vTaskStartScheduler>
  
  return osOK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	bd80      	pop	{r7, pc}

08007716 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007718:	b089      	sub	sp, #36	; 0x24
 800771a:	af04      	add	r7, sp, #16
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d020      	beq.n	800776a <osThreadCreate+0x54>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01c      	beq.n	800776a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685c      	ldr	r4, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681d      	ldr	r5, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691e      	ldr	r6, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff ffc8 	bl	80076d8 <makeFreeRtosPriority>
 8007748:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007752:	9202      	str	r2, [sp, #8]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	9100      	str	r1, [sp, #0]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	4632      	mov	r2, r6
 800775c:	4629      	mov	r1, r5
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f8ed 	bl	800793e <xTaskCreateStatic>
 8007764:	4603      	mov	r3, r0
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	e01c      	b.n	80077a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685c      	ldr	r4, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007776:	b29e      	uxth	r6, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ffaa 	bl	80076d8 <makeFreeRtosPriority>
 8007784:	4602      	mov	r2, r0
 8007786:	f107 030c 	add.w	r3, r7, #12
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	9200      	str	r2, [sp, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	4632      	mov	r2, r6
 8007792:	4629      	mov	r1, r5
 8007794:	4620      	mov	r0, r4
 8007796:	f000 f92f 	bl	80079f8 <xTaskCreate>
 800779a:	4603      	mov	r3, r0
 800779c:	2b01      	cmp	r3, #1
 800779e:	d001      	beq.n	80077a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80077a4:	68fb      	ldr	r3, [r7, #12]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <osDelay+0x16>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	e000      	b.n	80077c6 <osDelay+0x18>
 80077c4:	2301      	movs	r3, #1
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fa4c 	bl	8007c64 <vTaskDelay>
  
  return osOK;
 80077cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f103 0208 	add.w	r2, r3, #8
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f04f 32ff 	mov.w	r2, #4294967295
 80077ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f103 0208 	add.w	r2, r3, #8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f103 0208 	add.w	r2, r3, #8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	601a      	str	r2, [r3, #0]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d103      	bne.n	8007898 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	e00c      	b.n	80078b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3308      	adds	r3, #8
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e002      	b.n	80078a6 <vListInsert+0x2e>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d2f6      	bcs.n	80078a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6892      	ldr	r2, [r2, #8]
 8007900:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6852      	ldr	r2, [r2, #4]
 800790a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d103      	bne.n	800791e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689a      	ldr	r2, [r3, #8]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	1e5a      	subs	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08e      	sub	sp, #56	; 0x38
 8007942:	af04      	add	r7, sp, #16
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800794c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <xTaskCreateStatic+0x46>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	61fb      	str	r3, [r7, #28]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007984:	2354      	movs	r3, #84	; 0x54
 8007986:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b54      	cmp	r3, #84	; 0x54
 800798c:	d00a      	beq.n	80079a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	61bb      	str	r3, [r7, #24]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01e      	beq.n	80079ea <xTaskCreateStatic+0xac>
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01b      	beq.n	80079ea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079c4:	2300      	movs	r3, #0
 80079c6:	9303      	str	r3, [sp, #12]
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	9302      	str	r3, [sp, #8]
 80079cc:	f107 0314 	add.w	r3, r7, #20
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f850 	bl	8007a82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079e4:	f000 f8d4 	bl	8007b90 <prvAddNewTaskToReadyList>
 80079e8:	e001      	b.n	80079ee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079ee:	697b      	ldr	r3, [r7, #20]
	}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3728      	adds	r7, #40	; 0x28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08c      	sub	sp, #48	; 0x30
 80079fc:	af04      	add	r7, sp, #16
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fec3 	bl	8008798 <pvPortMalloc>
 8007a12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a1a:	2054      	movs	r0, #84	; 0x54
 8007a1c:	f000 febc 	bl	8008798 <pvPortMalloc>
 8007a20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8007a2e:	e005      	b.n	8007a3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a30:	6978      	ldr	r0, [r7, #20]
 8007a32:	f000 ff7d 	bl	8008930 <vPortFree>
 8007a36:	e001      	b.n	8007a3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d017      	beq.n	8007a72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9303      	str	r3, [sp, #12]
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	9302      	str	r3, [sp, #8]
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f80e 	bl	8007a82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a66:	69f8      	ldr	r0, [r7, #28]
 8007a68:	f000 f892 	bl	8007b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e002      	b.n	8007a78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a72:	f04f 33ff 	mov.w	r3, #4294967295
 8007a76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a78:	69bb      	ldr	r3, [r7, #24]
	}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b088      	sub	sp, #32
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a9a:	440b      	add	r3, r1
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f023 0307 	bic.w	r3, r3, #7
 8007aa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <prvInitialiseNewTask+0x48>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	617b      	str	r3, [r7, #20]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01f      	beq.n	8007b10 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	e012      	b.n	8007afc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3334      	adds	r3, #52	; 0x34
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d9e9      	bls.n	8007ad6 <prvInitialiseNewTask+0x54>
 8007b02:	e000      	b.n	8007b06 <prvInitialiseNewTask+0x84>
			{
				break;
 8007b04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b0e:	e003      	b.n	8007b18 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d901      	bls.n	8007b22 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b1e:	2306      	movs	r3, #6
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2200      	movs	r2, #0
 8007b32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	3304      	adds	r3, #4
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fe6c 	bl	8007816 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	3318      	adds	r3, #24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff fe67 	bl	8007816 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	f1c3 0207 	rsb	r2, r3, #7
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	68f9      	ldr	r1, [r7, #12]
 8007b70:	69b8      	ldr	r0, [r7, #24]
 8007b72:	f000 fc05 	bl	8008380 <pxPortInitialiseStack>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b88:	bf00      	nop
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b98:	f000 fd1c 	bl	80085d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b9c:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <prvAddNewTaskToReadyList+0xb8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	4a29      	ldr	r2, [pc, #164]	; (8007c48 <prvAddNewTaskToReadyList+0xb8>)
 8007ba4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ba6:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <prvAddNewTaskToReadyList+0xbc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bae:	4a27      	ldr	r2, [pc, #156]	; (8007c4c <prvAddNewTaskToReadyList+0xbc>)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bb4:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <prvAddNewTaskToReadyList+0xb8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d110      	bne.n	8007bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bbc:	f000 fabc 	bl	8008138 <prvInitialiseTaskLists>
 8007bc0:	e00d      	b.n	8007bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bc2:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <prvAddNewTaskToReadyList+0xc0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bca:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <prvAddNewTaskToReadyList+0xbc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d802      	bhi.n	8007bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <prvAddNewTaskToReadyList+0xbc>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <prvAddNewTaskToReadyList+0xc4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	4a1b      	ldr	r2, [pc, #108]	; (8007c54 <prvAddNewTaskToReadyList+0xc4>)
 8007be6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	2201      	movs	r2, #1
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <prvAddNewTaskToReadyList+0xc8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <prvAddNewTaskToReadyList+0xc8>)
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a15      	ldr	r2, [pc, #84]	; (8007c5c <prvAddNewTaskToReadyList+0xcc>)
 8007c08:	441a      	add	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f7ff fe0d 	bl	8007830 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c16:	f000 fd0d 	bl	8008634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <prvAddNewTaskToReadyList+0xc0>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00e      	beq.n	8007c40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c22:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <prvAddNewTaskToReadyList+0xbc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d207      	bcs.n	8007c40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <prvAddNewTaskToReadyList+0xd0>)
 8007c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20000384 	.word	0x20000384
 8007c4c:	20000284 	.word	0x20000284
 8007c50:	20000390 	.word	0x20000390
 8007c54:	200003a0 	.word	0x200003a0
 8007c58:	2000038c 	.word	0x2000038c
 8007c5c:	20000288 	.word	0x20000288
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d017      	beq.n	8007ca6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <vTaskDelay+0x60>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <vTaskDelay+0x30>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60bb      	str	r3, [r7, #8]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c94:	f000 f87a 	bl	8007d8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb0a 	bl	80082b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ca0:	f000 f882 	bl	8007da8 <xTaskResumeAll>
 8007ca4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <vTaskDelay+0x64>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	200003ac 	.word	0x200003ac
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	; 0x28
 8007cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cda:	463a      	mov	r2, r7
 8007cdc:	1d39      	adds	r1, r7, #4
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f8 fc78 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	491e      	ldr	r1, [pc, #120]	; (8007d74 <vTaskStartScheduler+0xa8>)
 8007cfc:	481e      	ldr	r0, [pc, #120]	; (8007d78 <vTaskStartScheduler+0xac>)
 8007cfe:	f7ff fe1e 	bl	800793e <xTaskCreateStatic>
 8007d02:	4603      	mov	r3, r0
 8007d04:	4a1d      	ldr	r2, [pc, #116]	; (8007d7c <vTaskStartScheduler+0xb0>)
 8007d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <vTaskStartScheduler+0xb0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	e001      	b.n	8007d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d116      	bne.n	8007d4e <vTaskStartScheduler+0x82>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d34:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <vTaskStartScheduler+0xb4>)
 8007d36:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <vTaskStartScheduler+0xb8>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <vTaskStartScheduler+0xbc>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d48:	f000 fba2 	bl	8008490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d4c:	e00e      	b.n	8007d6c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d10a      	bne.n	8007d6c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <vTaskStartScheduler+0x9e>
}
 8007d6c:	bf00      	nop
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	08008c04 	.word	0x08008c04
 8007d78:	08008109 	.word	0x08008109
 8007d7c:	200003a8 	.word	0x200003a8
 8007d80:	200003a4 	.word	0x200003a4
 8007d84:	20000390 	.word	0x20000390
 8007d88:	20000388 	.word	0x20000388

08007d8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <vTaskSuspendAll+0x18>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a03      	ldr	r2, [pc, #12]	; (8007da4 <vTaskSuspendAll+0x18>)
 8007d98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d9a:	bf00      	nop
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	200003ac 	.word	0x200003ac

08007da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007db6:	4b41      	ldr	r3, [pc, #260]	; (8007ebc <xTaskResumeAll+0x114>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	603b      	str	r3, [r7, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dd4:	f000 fbfe 	bl	80085d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dd8:	4b38      	ldr	r3, [pc, #224]	; (8007ebc <xTaskResumeAll+0x114>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	4a37      	ldr	r2, [pc, #220]	; (8007ebc <xTaskResumeAll+0x114>)
 8007de0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <xTaskResumeAll+0x114>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d161      	bne.n	8007eae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dea:	4b35      	ldr	r3, [pc, #212]	; (8007ec0 <xTaskResumeAll+0x118>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d05d      	beq.n	8007eae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df2:	e02e      	b.n	8007e52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df4:	4b33      	ldr	r3, [pc, #204]	; (8007ec4 <xTaskResumeAll+0x11c>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3318      	adds	r3, #24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff fd72 	bl	80078ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fd6d 	bl	80078ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	2201      	movs	r2, #1
 8007e16:	409a      	lsls	r2, r3
 8007e18:	4b2b      	ldr	r3, [pc, #172]	; (8007ec8 <xTaskResumeAll+0x120>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ec8 <xTaskResumeAll+0x120>)
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a27      	ldr	r2, [pc, #156]	; (8007ecc <xTaskResumeAll+0x124>)
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7ff fcf9 	bl	8007830 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	4b23      	ldr	r3, [pc, #140]	; (8007ed0 <xTaskResumeAll+0x128>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d302      	bcc.n	8007e52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007e4c:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <xTaskResumeAll+0x12c>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e52:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <xTaskResumeAll+0x11c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1cc      	bne.n	8007df4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e60:	f000 fa08 	bl	8008274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e64:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <xTaskResumeAll+0x130>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d010      	beq.n	8007e92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e70:	f000 f836 	bl	8007ee0 <xTaskIncrementTick>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007e7a:	4b16      	ldr	r3, [pc, #88]	; (8007ed4 <xTaskResumeAll+0x12c>)
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f1      	bne.n	8007e70 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007e8c:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <xTaskResumeAll+0x130>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e92:	4b10      	ldr	r3, [pc, #64]	; (8007ed4 <xTaskResumeAll+0x12c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <xTaskResumeAll+0x134>)
 8007ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eae:	f000 fbc1 	bl	8008634 <vPortExitCritical>

	return xAlreadyYielded;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200003ac 	.word	0x200003ac
 8007ec0:	20000384 	.word	0x20000384
 8007ec4:	20000344 	.word	0x20000344
 8007ec8:	2000038c 	.word	0x2000038c
 8007ecc:	20000288 	.word	0x20000288
 8007ed0:	20000284 	.word	0x20000284
 8007ed4:	20000398 	.word	0x20000398
 8007ed8:	20000394 	.word	0x20000394
 8007edc:	e000ed04 	.word	0xe000ed04

08007ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eea:	4b4e      	ldr	r3, [pc, #312]	; (8008024 <xTaskIncrementTick+0x144>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 808e 	bne.w	8008010 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ef4:	4b4c      	ldr	r3, [pc, #304]	; (8008028 <xTaskIncrementTick+0x148>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007efc:	4a4a      	ldr	r2, [pc, #296]	; (8008028 <xTaskIncrementTick+0x148>)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d120      	bne.n	8007f4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f08:	4b48      	ldr	r3, [pc, #288]	; (800802c <xTaskIncrementTick+0x14c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	603b      	str	r3, [r7, #0]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xTaskIncrementTick+0x46>
 8007f28:	4b40      	ldr	r3, [pc, #256]	; (800802c <xTaskIncrementTick+0x14c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	4b40      	ldr	r3, [pc, #256]	; (8008030 <xTaskIncrementTick+0x150>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a3e      	ldr	r2, [pc, #248]	; (800802c <xTaskIncrementTick+0x14c>)
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	4a3e      	ldr	r2, [pc, #248]	; (8008030 <xTaskIncrementTick+0x150>)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	4b3d      	ldr	r3, [pc, #244]	; (8008034 <xTaskIncrementTick+0x154>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <xTaskIncrementTick+0x154>)
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	f000 f995 	bl	8008274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f4a:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <xTaskIncrementTick+0x158>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d348      	bcc.n	8007fe6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f54:	4b35      	ldr	r3, [pc, #212]	; (800802c <xTaskIncrementTick+0x14c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5e:	4b36      	ldr	r3, [pc, #216]	; (8008038 <xTaskIncrementTick+0x158>)
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	601a      	str	r2, [r3, #0]
					break;
 8007f66:	e03e      	b.n	8007fe6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f68:	4b30      	ldr	r3, [pc, #192]	; (800802c <xTaskIncrementTick+0x14c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d203      	bcs.n	8007f88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f80:	4a2d      	ldr	r2, [pc, #180]	; (8008038 <xTaskIncrementTick+0x158>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f86:	e02e      	b.n	8007fe6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fcac 	bl	80078ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fca3 	bl	80078ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	2201      	movs	r2, #1
 8007faa:	409a      	lsls	r2, r3
 8007fac:	4b23      	ldr	r3, [pc, #140]	; (800803c <xTaskIncrementTick+0x15c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	4a22      	ldr	r2, [pc, #136]	; (800803c <xTaskIncrementTick+0x15c>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <xTaskIncrementTick+0x160>)
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7ff fc2f 	bl	8007830 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <xTaskIncrementTick+0x164>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d3b9      	bcc.n	8007f54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe4:	e7b6      	b.n	8007f54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <xTaskIncrementTick+0x164>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4914      	ldr	r1, [pc, #80]	; (8008040 <xTaskIncrementTick+0x160>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d901      	bls.n	8008002 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008002:	4b11      	ldr	r3, [pc, #68]	; (8008048 <xTaskIncrementTick+0x168>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800800a:	2301      	movs	r3, #1
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	e004      	b.n	800801a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <xTaskIncrementTick+0x16c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	4a0d      	ldr	r2, [pc, #52]	; (800804c <xTaskIncrementTick+0x16c>)
 8008018:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	200003ac 	.word	0x200003ac
 8008028:	20000388 	.word	0x20000388
 800802c:	2000033c 	.word	0x2000033c
 8008030:	20000340 	.word	0x20000340
 8008034:	2000039c 	.word	0x2000039c
 8008038:	200003a4 	.word	0x200003a4
 800803c:	2000038c 	.word	0x2000038c
 8008040:	20000288 	.word	0x20000288
 8008044:	20000284 	.word	0x20000284
 8008048:	20000398 	.word	0x20000398
 800804c:	20000394 	.word	0x20000394

08008050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <vTaskSwitchContext+0xa4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800805e:	4b26      	ldr	r3, [pc, #152]	; (80080f8 <vTaskSwitchContext+0xa8>)
 8008060:	2201      	movs	r2, #1
 8008062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008064:	e03f      	b.n	80080e6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <vTaskSwitchContext+0xa8>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800806c:	4b23      	ldr	r3, [pc, #140]	; (80080fc <vTaskSwitchContext+0xac>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	fab3 f383 	clz	r3, r3
 8008078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	f1c3 031f 	rsb	r3, r3, #31
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	491f      	ldr	r1, [pc, #124]	; (8008100 <vTaskSwitchContext+0xb0>)
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	607b      	str	r3, [r7, #4]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <vTaskSwitchContext+0x5a>
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4a12      	ldr	r2, [pc, #72]	; (8008100 <vTaskSwitchContext+0xb0>)
 80080b8:	4413      	add	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3308      	adds	r3, #8
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d104      	bne.n	80080dc <vTaskSwitchContext+0x8c>
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	605a      	str	r2, [r3, #4]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	4a08      	ldr	r2, [pc, #32]	; (8008104 <vTaskSwitchContext+0xb4>)
 80080e4:	6013      	str	r3, [r2, #0]
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	200003ac 	.word	0x200003ac
 80080f8:	20000398 	.word	0x20000398
 80080fc:	2000038c 	.word	0x2000038c
 8008100:	20000288 	.word	0x20000288
 8008104:	20000284 	.word	0x20000284

08008108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008110:	f000 f852 	bl	80081b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008114:	4b06      	ldr	r3, [pc, #24]	; (8008130 <prvIdleTask+0x28>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d9f9      	bls.n	8008110 <prvIdleTask+0x8>
			{
				taskYIELD();
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <prvIdleTask+0x2c>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800812c:	e7f0      	b.n	8008110 <prvIdleTask+0x8>
 800812e:	bf00      	nop
 8008130:	20000288 	.word	0x20000288
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800813e:	2300      	movs	r3, #0
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e00c      	b.n	800815e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4a12      	ldr	r2, [pc, #72]	; (8008198 <prvInitialiseTaskLists+0x60>)
 8008150:	4413      	add	r3, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fb3f 	bl	80077d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3301      	adds	r3, #1
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b06      	cmp	r3, #6
 8008162:	d9ef      	bls.n	8008144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008164:	480d      	ldr	r0, [pc, #52]	; (800819c <prvInitialiseTaskLists+0x64>)
 8008166:	f7ff fb36 	bl	80077d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800816a:	480d      	ldr	r0, [pc, #52]	; (80081a0 <prvInitialiseTaskLists+0x68>)
 800816c:	f7ff fb33 	bl	80077d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008170:	480c      	ldr	r0, [pc, #48]	; (80081a4 <prvInitialiseTaskLists+0x6c>)
 8008172:	f7ff fb30 	bl	80077d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008176:	480c      	ldr	r0, [pc, #48]	; (80081a8 <prvInitialiseTaskLists+0x70>)
 8008178:	f7ff fb2d 	bl	80077d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800817c:	480b      	ldr	r0, [pc, #44]	; (80081ac <prvInitialiseTaskLists+0x74>)
 800817e:	f7ff fb2a 	bl	80077d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008182:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <prvInitialiseTaskLists+0x78>)
 8008184:	4a05      	ldr	r2, [pc, #20]	; (800819c <prvInitialiseTaskLists+0x64>)
 8008186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <prvInitialiseTaskLists+0x7c>)
 800818a:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <prvInitialiseTaskLists+0x68>)
 800818c:	601a      	str	r2, [r3, #0]
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000288 	.word	0x20000288
 800819c:	20000314 	.word	0x20000314
 80081a0:	20000328 	.word	0x20000328
 80081a4:	20000344 	.word	0x20000344
 80081a8:	20000358 	.word	0x20000358
 80081ac:	20000370 	.word	0x20000370
 80081b0:	2000033c 	.word	0x2000033c
 80081b4:	20000340 	.word	0x20000340

080081b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081be:	e019      	b.n	80081f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081c0:	f000 fa08 	bl	80085d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c4:	4b10      	ldr	r3, [pc, #64]	; (8008208 <prvCheckTasksWaitingTermination+0x50>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff fb8a 	bl	80078ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081d6:	4b0d      	ldr	r3, [pc, #52]	; (800820c <prvCheckTasksWaitingTermination+0x54>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	4a0b      	ldr	r2, [pc, #44]	; (800820c <prvCheckTasksWaitingTermination+0x54>)
 80081de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <prvCheckTasksWaitingTermination+0x58>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <prvCheckTasksWaitingTermination+0x58>)
 80081e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ea:	f000 fa23 	bl	8008634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f810 	bl	8008214 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081f4:	4b06      	ldr	r3, [pc, #24]	; (8008210 <prvCheckTasksWaitingTermination+0x58>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e1      	bne.n	80081c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000358 	.word	0x20000358
 800820c:	20000384 	.word	0x20000384
 8008210:	2000036c 	.word	0x2000036c

08008214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008222:	2b00      	cmp	r3, #0
 8008224:	d108      	bne.n	8008238 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fb80 	bl	8008930 <vPortFree>
				vPortFree( pxTCB );
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fb7d 	bl	8008930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008236:	e018      	b.n	800826a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800823e:	2b01      	cmp	r3, #1
 8008240:	d103      	bne.n	800824a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fb74 	bl	8008930 <vPortFree>
	}
 8008248:	e00f      	b.n	800826a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008250:	2b02      	cmp	r3, #2
 8008252:	d00a      	beq.n	800826a <prvDeleteTCB+0x56>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <prvDeleteTCB+0x54>
	}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <prvResetNextTaskUnblockTime+0x38>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008284:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <prvResetNextTaskUnblockTime+0x3c>)
 8008286:	f04f 32ff 	mov.w	r2, #4294967295
 800828a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800828c:	e008      	b.n	80082a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <prvResetNextTaskUnblockTime+0x38>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4a04      	ldr	r2, [pc, #16]	; (80082b0 <prvResetNextTaskUnblockTime+0x3c>)
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	2000033c 	.word	0x2000033c
 80082b0:	200003a4 	.word	0x200003a4

080082b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082be:	4b29      	ldr	r3, [pc, #164]	; (8008364 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fb0d 	bl	80078ea <uxListRemove>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	2201      	movs	r2, #1
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43da      	mvns	r2, r3
 80082e4:	4b21      	ldr	r3, [pc, #132]	; (800836c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4013      	ands	r3, r2
 80082ea:	4a20      	ldr	r2, [pc, #128]	; (800836c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d10a      	bne.n	800830c <prvAddCurrentTaskToDelayedList+0x58>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	481a      	ldr	r0, [pc, #104]	; (8008370 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008306:	f7ff fa93 	bl	8007830 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800830a:	e026      	b.n	800835a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d209      	bcs.n	8008338 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3304      	adds	r3, #4
 800832e:	4619      	mov	r1, r3
 8008330:	4610      	mov	r0, r2
 8008332:	f7ff faa1 	bl	8007878 <vListInsert>
}
 8008336:	e010      	b.n	800835a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <prvAddCurrentTaskToDelayedList+0xc4>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7ff fa97 	bl	8007878 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <prvAddCurrentTaskToDelayedList+0xc8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	429a      	cmp	r2, r3
 8008352:	d202      	bcs.n	800835a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008354:	4a09      	ldr	r2, [pc, #36]	; (800837c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6013      	str	r3, [r2, #0]
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000388 	.word	0x20000388
 8008368:	20000284 	.word	0x20000284
 800836c:	2000038c 	.word	0x2000038c
 8008370:	20000370 	.word	0x20000370
 8008374:	20000340 	.word	0x20000340
 8008378:	2000033c 	.word	0x2000033c
 800837c:	200003a4 	.word	0x200003a4

08008380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b04      	subs	r3, #4
 8008390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3b04      	subs	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083b0:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <pxPortInitialiseStack+0x64>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b14      	subs	r3, #20
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f06f 0202 	mvn.w	r2, #2
 80083ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3b20      	subs	r3, #32
 80083d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	080083e9 	.word	0x080083e9

080083e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <prvTaskExitError+0x54>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d00a      	beq.n	8008412 <prvTaskExitError+0x2a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	60fb      	str	r3, [r7, #12]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <prvTaskExitError+0x28>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60bb      	str	r3, [r7, #8]
}
 8008424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008426:	bf00      	nop
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0fc      	beq.n	8008428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	20000010 	.word	0x20000010

08008440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008468:	4808      	ldr	r0, [pc, #32]	; (800848c <prvPortStartFirstTask+0x24>)
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	6800      	ldr	r0, [r0, #0]
 800846e:	f380 8808 	msr	MSP, r0
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8814 	msr	CONTROL, r0
 800847a:	b662      	cpsie	i
 800847c:	b661      	cpsie	f
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	df00      	svc	0
 8008488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800848a:	bf00      	nop
 800848c:	e000ed08 	.word	0xe000ed08

08008490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008496:	4b46      	ldr	r3, [pc, #280]	; (80085b0 <xPortStartScheduler+0x120>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a46      	ldr	r2, [pc, #280]	; (80085b4 <xPortStartScheduler+0x124>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10a      	bne.n	80084b6 <xPortStartScheduler+0x26>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	613b      	str	r3, [r7, #16]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084b6:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <xPortStartScheduler+0x120>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a3f      	ldr	r2, [pc, #252]	; (80085b8 <xPortStartScheduler+0x128>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10a      	bne.n	80084d6 <xPortStartScheduler+0x46>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60fb      	str	r3, [r7, #12]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084d6:	4b39      	ldr	r3, [pc, #228]	; (80085bc <xPortStartScheduler+0x12c>)
 80084d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <xPortStartScheduler+0x130>)
 80084fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084fe:	4b31      	ldr	r3, [pc, #196]	; (80085c4 <xPortStartScheduler+0x134>)
 8008500:	2207      	movs	r2, #7
 8008502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008504:	e009      	b.n	800851a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008506:	4b2f      	ldr	r3, [pc, #188]	; (80085c4 <xPortStartScheduler+0x134>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3b01      	subs	r3, #1
 800850c:	4a2d      	ldr	r2, [pc, #180]	; (80085c4 <xPortStartScheduler+0x134>)
 800850e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d0ef      	beq.n	8008506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008526:	4b27      	ldr	r3, [pc, #156]	; (80085c4 <xPortStartScheduler+0x134>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f1c3 0307 	rsb	r3, r3, #7
 800852e:	2b04      	cmp	r3, #4
 8008530:	d00a      	beq.n	8008548 <xPortStartScheduler+0xb8>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <xPortStartScheduler+0x134>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	021b      	lsls	r3, r3, #8
 800854e:	4a1d      	ldr	r2, [pc, #116]	; (80085c4 <xPortStartScheduler+0x134>)
 8008550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <xPortStartScheduler+0x134>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <xPortStartScheduler+0x134>)
 800855c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008566:	4b18      	ldr	r3, [pc, #96]	; (80085c8 <xPortStartScheduler+0x138>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <xPortStartScheduler+0x138>)
 800856c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <xPortStartScheduler+0x138>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a14      	ldr	r2, [pc, #80]	; (80085c8 <xPortStartScheduler+0x138>)
 8008578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800857c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800857e:	f000 f8dd 	bl	800873c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008582:	4b12      	ldr	r3, [pc, #72]	; (80085cc <xPortStartScheduler+0x13c>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008588:	f000 f8fc 	bl	8008784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800858c:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <xPortStartScheduler+0x140>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0f      	ldr	r2, [pc, #60]	; (80085d0 <xPortStartScheduler+0x140>)
 8008592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008598:	f7ff ff66 	bl	8008468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800859c:	f7ff fd58 	bl	8008050 <vTaskSwitchContext>
	prvTaskExitError();
 80085a0:	f7ff ff22 	bl	80083e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000ed00 	.word	0xe000ed00
 80085b4:	410fc271 	.word	0x410fc271
 80085b8:	410fc270 	.word	0x410fc270
 80085bc:	e000e400 	.word	0xe000e400
 80085c0:	200003b0 	.word	0x200003b0
 80085c4:	200003b4 	.word	0x200003b4
 80085c8:	e000ed20 	.word	0xe000ed20
 80085cc:	20000010 	.word	0x20000010
 80085d0:	e000ef34 	.word	0xe000ef34

080085d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	607b      	str	r3, [r7, #4]
}
 80085ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	; (800862c <vPortEnterCritical+0x58>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a0d      	ldr	r2, [pc, #52]	; (800862c <vPortEnterCritical+0x58>)
 80085f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <vPortEnterCritical+0x58>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d10f      	bne.n	8008620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <vPortEnterCritical+0x5c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <vPortEnterCritical+0x4c>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	603b      	str	r3, [r7, #0]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <vPortEnterCritical+0x4a>
	}
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20000010 	.word	0x20000010
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <vPortExitCritical+0x50>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <vPortExitCritical+0x24>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	607b      	str	r3, [r7, #4]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <vPortExitCritical+0x50>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <vPortExitCritical+0x50>)
 8008660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d105      	bne.n	8008676 <vPortExitCritical+0x42>
 800866a:	2300      	movs	r3, #0
 800866c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010
	...

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	f01e 0f10 	tst.w	lr, #16
 80086a0:	bf08      	it	eq
 80086a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	6010      	str	r0, [r2, #0]
 80086ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086b4:	f380 8811 	msr	BASEPRI, r0
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f7ff fcc6 	bl	8008050 <vTaskSwitchContext>
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f380 8811 	msr	BASEPRI, r0
 80086cc:	bc09      	pop	{r0, r3}
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6808      	ldr	r0, [r1, #0]
 80086d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	f01e 0f10 	tst.w	lr, #16
 80086da:	bf08      	it	eq
 80086dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086e0:	f380 8809 	msr	PSP, r0
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst>:
 80086f0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008712:	f7ff fbe5 	bl	8007ee0 <xTaskIncrementTick>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <SysTick_Handler+0x40>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f383 8811 	msr	BASEPRI, r3
}
 800872e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <vPortSetupTimerInterrupt+0x38>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <vPortSetupTimerInterrupt+0x3c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <vPortSetupTimerInterrupt+0x40>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	099b      	lsrs	r3, r3, #6
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <vPortSetupTimerInterrupt+0x44>)
 800875a:	3b01      	subs	r3, #1
 800875c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800875e:	4b04      	ldr	r3, [pc, #16]	; (8008770 <vPortSetupTimerInterrupt+0x34>)
 8008760:	2207      	movs	r2, #7
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	e000e010 	.word	0xe000e010
 8008774:	e000e018 	.word	0xe000e018
 8008778:	20000000 	.word	0x20000000
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	e000e014 	.word	0xe000e014

08008784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008794 <vPortEnableVFP+0x10>
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800878e:	6001      	str	r1, [r0, #0]
 8008790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008792:	bf00      	nop
 8008794:	e000ed88 	.word	0xe000ed88

08008798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087a4:	f7ff faf2 	bl	8007d8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087a8:	4b5b      	ldr	r3, [pc, #364]	; (8008918 <pvPortMalloc+0x180>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087b0:	f000 f920 	bl	80089f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087b4:	4b59      	ldr	r3, [pc, #356]	; (800891c <pvPortMalloc+0x184>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4013      	ands	r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f040 8093 	bne.w	80088e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01d      	beq.n	8008804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087c8:	2208      	movs	r2, #8
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d014      	beq.n	8008804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f023 0307 	bic.w	r3, r3, #7
 80087e0:	3308      	adds	r3, #8
 80087e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <pvPortMalloc+0x6c>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617b      	str	r3, [r7, #20]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d06e      	beq.n	80088e8 <pvPortMalloc+0x150>
 800880a:	4b45      	ldr	r3, [pc, #276]	; (8008920 <pvPortMalloc+0x188>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d869      	bhi.n	80088e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008814:	4b43      	ldr	r3, [pc, #268]	; (8008924 <pvPortMalloc+0x18c>)
 8008816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008818:	4b42      	ldr	r3, [pc, #264]	; (8008924 <pvPortMalloc+0x18c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800881e:	e004      	b.n	800882a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d903      	bls.n	800883c <pvPortMalloc+0xa4>
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f1      	bne.n	8008820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800883c:	4b36      	ldr	r3, [pc, #216]	; (8008918 <pvPortMalloc+0x180>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008842:	429a      	cmp	r2, r3
 8008844:	d050      	beq.n	80088e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2208      	movs	r2, #8
 800884c:	4413      	add	r3, r2
 800884e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	2308      	movs	r3, #8
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	429a      	cmp	r2, r3
 8008866:	d91f      	bls.n	80088a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <pvPortMalloc+0xf8>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	613b      	str	r3, [r7, #16]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088a2:	69b8      	ldr	r0, [r7, #24]
 80088a4:	f000 f908 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <pvPortMalloc+0x188>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	4a1b      	ldr	r2, [pc, #108]	; (8008920 <pvPortMalloc+0x188>)
 80088b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088b6:	4b1a      	ldr	r3, [pc, #104]	; (8008920 <pvPortMalloc+0x188>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <pvPortMalloc+0x190>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d203      	bcs.n	80088ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088c2:	4b17      	ldr	r3, [pc, #92]	; (8008920 <pvPortMalloc+0x188>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a18      	ldr	r2, [pc, #96]	; (8008928 <pvPortMalloc+0x190>)
 80088c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <pvPortMalloc+0x184>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	431a      	orrs	r2, r3
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <pvPortMalloc+0x194>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	4a11      	ldr	r2, [pc, #68]	; (800892c <pvPortMalloc+0x194>)
 80088e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088e8:	f7ff fa5e 	bl	8007da8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <pvPortMalloc+0x174>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	60fb      	str	r3, [r7, #12]
}
 8008908:	bf00      	nop
 800890a:	e7fe      	b.n	800890a <pvPortMalloc+0x172>
	return pvReturn;
 800890c:	69fb      	ldr	r3, [r7, #28]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3728      	adds	r7, #40	; 0x28
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20003fc0 	.word	0x20003fc0
 800891c:	20003fd4 	.word	0x20003fd4
 8008920:	20003fc4 	.word	0x20003fc4
 8008924:	20003fb8 	.word	0x20003fb8
 8008928:	20003fc8 	.word	0x20003fc8
 800892c:	20003fcc 	.word	0x20003fcc

08008930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d04d      	beq.n	80089de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008942:	2308      	movs	r3, #8
 8008944:	425b      	negs	r3, r3
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4413      	add	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <vPortFree+0xb8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4013      	ands	r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <vPortFree+0x44>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60fb      	str	r3, [r7, #12]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <vPortFree+0x62>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	60bb      	str	r3, [r7, #8]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <vPortFree+0xb8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01e      	beq.n	80089de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d11a      	bne.n	80089de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <vPortFree+0xb8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	43db      	mvns	r3, r3
 80089b2:	401a      	ands	r2, r3
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089b8:	f7ff f9e8 	bl	8007d8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <vPortFree+0xbc>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4413      	add	r3, r2
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <vPortFree+0xbc>)
 80089c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089ca:	6938      	ldr	r0, [r7, #16]
 80089cc:	f000 f874 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <vPortFree+0xc0>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3301      	adds	r3, #1
 80089d6:	4a06      	ldr	r2, [pc, #24]	; (80089f0 <vPortFree+0xc0>)
 80089d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089da:	f7ff f9e5 	bl	8007da8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089de:	bf00      	nop
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20003fd4 	.word	0x20003fd4
 80089ec:	20003fc4 	.word	0x20003fc4
 80089f0:	20003fd0 	.word	0x20003fd0

080089f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a00:	4b27      	ldr	r3, [pc, #156]	; (8008aa0 <prvHeapInit+0xac>)
 8008a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00c      	beq.n	8008a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3307      	adds	r3, #7
 8008a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <prvHeapInit+0xac>)
 8008a24:	4413      	add	r3, r2
 8008a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a40:	2208      	movs	r2, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <prvHeapInit+0xb8>)
 8008a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <prvHeapInit+0xbc>)
 8008a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a8c:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <prvHeapInit+0xc0>)
 8008a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	200003b8 	.word	0x200003b8
 8008aa4:	20003fb8 	.word	0x20003fb8
 8008aa8:	20003fc0 	.word	0x20003fc0
 8008aac:	20003fc8 	.word	0x20003fc8
 8008ab0:	20003fc4 	.word	0x20003fc4
 8008ab4:	20003fd4 	.word	0x20003fd4

08008ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ac0:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <prvInsertBlockIntoFreeList+0xac>)
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e002      	b.n	8008acc <prvInsertBlockIntoFreeList+0x14>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d8f7      	bhi.n	8008ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d108      	bne.n	8008afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	441a      	add	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	441a      	add	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d118      	bne.n	8008b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d00d      	beq.n	8008b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e008      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	e003      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d002      	beq.n	8008b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20003fb8 	.word	0x20003fb8
 8008b68:	20003fc0 	.word	0x20003fc0

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ba4 <__libc_init_array+0x38>)
 8008b70:	4c0d      	ldr	r4, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b72:	1b64      	subs	r4, r4, r5
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	2600      	movs	r6, #0
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	4d0b      	ldr	r5, [pc, #44]	; (8008bac <__libc_init_array+0x40>)
 8008b7e:	4c0c      	ldr	r4, [pc, #48]	; (8008bb0 <__libc_init_array+0x44>)
 8008b80:	f000 f820 	bl	8008bc4 <_init>
 8008b84:	1b64      	subs	r4, r4, r5
 8008b86:	10a4      	asrs	r4, r4, #2
 8008b88:	2600      	movs	r6, #0
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b94:	4798      	blx	r3
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9e:	4798      	blx	r3
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	08008c54 	.word	0x08008c54
 8008ba8:	08008c54 	.word	0x08008c54
 8008bac:	08008c54 	.word	0x08008c54
 8008bb0:	08008c58 	.word	0x08008c58

08008bb4 <memset>:
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
