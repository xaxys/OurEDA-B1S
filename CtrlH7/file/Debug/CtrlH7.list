
CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bedc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800c17c  0800c17c  0001c17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c290  0800c290  0001c290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c294  0800c294  0001c294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800c298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a04  20000014  0800c2ac  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004a18  0800c2ac  00024a18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000293db  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000476d  00000000  00000000  0004941d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0004db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001528  00000000  00000000  0004f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039331  00000000  00000000  00050748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c491  00000000  00000000  00089a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b808  00000000  00000000  000a5f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00211712  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005dd0  00000000  00000000  00211768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c164 	.word	0x0800c164

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800c164 	.word	0x0800c164

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <DownDetectPoint>:
static u8 *GY39SensorIO = 0; 	//温湿度和大气压传感器
static u8 *WT931SensorIO = 0; 	//九轴传感器

//下传数据读取格式化
void DownDetectPoint(u8 *RXString)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	PDBegin = RXString; //起始位对准
 80005e0:	4a24      	ldr	r2, [pc, #144]	; (8000674 <DownDetectPoint+0x9c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
	/* 其他各位对齐 */
	PDStraight = (u16*) (RXString + 1);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <DownDetectPoint+0xa0>)
 80005ec:	6013      	str	r3, [r2, #0]
	PDRotate = (u16*) (RXString + 3);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3303      	adds	r3, #3
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <DownDetectPoint+0xa4>)
 80005f4:	6013      	str	r3, [r2, #0]
	PDVertical = (u16*) (RXString + 5);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3305      	adds	r3, #5
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <DownDetectPoint+0xa8>)
 80005fc:	6013      	str	r3, [r2, #0]
	PDLight = (u16*) (RXString + 7);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3307      	adds	r3, #7
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <DownDetectPoint+0xac>)
 8000604:	6013      	str	r3, [r2, #0]
	PDTH = (u16*) (RXString + 9);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3309      	adds	r3, #9
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <DownDetectPoint+0xb0>)
 800060c:	6013      	str	r3, [r2, #0]
	PDTransp = (u16*) (RXString + 11);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	330b      	adds	r3, #11
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <DownDetectPoint+0xb4>)
 8000614:	6013      	str	r3, [r2, #0]
	PDArm[0] = (u16*) (RXString + 13);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	330d      	adds	r3, #13
 800061a:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <DownDetectPoint+0xb8>)
 800061c:	6013      	str	r3, [r2, #0]
	PDArm[1] = (u16*) (RXString + 15);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	330f      	adds	r3, #15
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <DownDetectPoint+0xb8>)
 8000624:	6053      	str	r3, [r2, #4]
	PDArm[2] = (u16*) (RXString + 17);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3311      	adds	r3, #17
 800062a:	4a19      	ldr	r2, [pc, #100]	; (8000690 <DownDetectPoint+0xb8>)
 800062c:	6093      	str	r3, [r2, #8]
	PDArm[3] = (u16*) (RXString + 19);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3313      	adds	r3, #19
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <DownDetectPoint+0xb8>)
 8000634:	60d3      	str	r3, [r2, #12]
	PDArm[4] = (u16*) (RXString + 21);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3315      	adds	r3, #21
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <DownDetectPoint+0xb8>)
 800063c:	6113      	str	r3, [r2, #16]
	PDArm[5] = (u16*) (RXString + 23);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3317      	adds	r3, #23
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <DownDetectPoint+0xb8>)
 8000644:	6153      	str	r3, [r2, #20]
	PDRes = (u16*) (RXString + 25);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3319      	adds	r3, #25
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <DownDetectPoint+0xbc>)
 800064c:	6013      	str	r3, [r2, #0]
	PDMode = RXString + 27;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	331b      	adds	r3, #27
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <DownDetectPoint+0xc0>)
 8000654:	6013      	str	r3, [r2, #0]
	PDId = RXString + 28;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	331c      	adds	r3, #28
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <DownDetectPoint+0xc4>)
 800065c:	6013      	str	r3, [r2, #0]
	PDEnd = RXString + 29; //结束位对准
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	331d      	adds	r3, #29
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <DownDetectPoint+0xc8>)
 8000664:	6013      	str	r3, [r2, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000034 	.word	0x20000034
 8000678:	20000038 	.word	0x20000038
 800067c:	2000003c 	.word	0x2000003c
 8000680:	20000040 	.word	0x20000040
 8000684:	20000044 	.word	0x20000044
 8000688:	20000048 	.word	0x20000048
 800068c:	2000004c 	.word	0x2000004c
 8000690:	20000050 	.word	0x20000050
 8000694:	20000068 	.word	0x20000068
 8000698:	2000006c 	.word	0x2000006c
 800069c:	20000070 	.word	0x20000070
 80006a0:	20000074 	.word	0x20000074

080006a4 <DownMoveDetect>:

/* 运动模式判断
 * 主控制端使用&6模式，推进器控制端使用&4模式
 * */
u8 DownMoveDetect(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
#ifdef CtrlSide
	return *PDMode & 6;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <DownMoveDetect+0x1c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f003 0306 	and.w	r3, r3, #6
 80006b2:	b2db      	uxtb	r3, r3
#endif
#ifdef PowerSide
	return *PDMode & 4;
#endif
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000006c 	.word	0x2000006c

080006c4 <SpecialMovePID>:

/* 特殊运动模式处理
 * 使用PID算法实现机器人自主定向定深
 * */
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	80bb      	strh	r3, [r7, #4]
 80006d2:	4613      	mov	r3, r2
 80006d4:	807b      	strh	r3, [r7, #2]
	//累计积分位置
	static float LocSum;
	//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	f040 808e 	bne.w	80007fa <SpecialMovePID+0x136>
	{
		PIDData = 0;
 80006de:	4b98      	ldr	r3, [pc, #608]	; (8000940 <SpecialMovePID+0x27c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 80006e4:	88ba      	ldrh	r2, [r7, #4]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	4b94      	ldr	r3, [pc, #592]	; (8000944 <SpecialMovePID+0x280>)
 80006f4:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 80006f8:	4b93      	ldr	r3, [pc, #588]	; (8000948 <SpecialMovePID+0x284>)
 80006fa:	ed93 7a00 	vldr	s14, [r3]
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <SpecialMovePID+0x280>)
 8000700:	edd3 7a00 	vldr	s15, [r3]
 8000704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000708:	4b8f      	ldr	r3, [pc, #572]	; (8000948 <SpecialMovePID+0x284>)
 800070a:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc = (u16) (1500
				+ RANGE(
 800070e:	4b8d      	ldr	r3, [pc, #564]	; (8000944 <SpecialMovePID+0x280>)
 8000710:	edd3 7a00 	vldr	s15, [r3]
 8000714:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800094c <SpecialMovePID+0x288>
 8000718:	ee27 7a87 	vmul.f32	s14, s15, s14
 800071c:	4b8a      	ldr	r3, [pc, #552]	; (8000948 <SpecialMovePID+0x284>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800072a:	4b89      	ldr	r3, [pc, #548]	; (8000950 <SpecialMovePID+0x28c>)
 800072c:	edd3 6a00 	vldr	s13, [r3]
 8000730:	4b84      	ldr	r3, [pc, #528]	; (8000944 <SpecialMovePID+0x280>)
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800073a:	eddf 6a86 	vldr	s13, [pc, #536]	; 8000954 <SpecialMovePID+0x290>
 800073e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074a:	ee17 3a90 	vmov	r3, s15
 800074e:	b21b      	sxth	r3, r3
		PIDLoc = (u16) (1500
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000754:	da4c      	bge.n	80007f0 <SpecialMovePID+0x12c>
				+ RANGE(
 8000756:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <SpecialMovePID+0x280>)
 8000758:	edd3 7a00 	vldr	s15, [r3]
 800075c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800094c <SpecialMovePID+0x288>
 8000760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000764:	4b78      	ldr	r3, [pc, #480]	; (8000948 <SpecialMovePID+0x284>)
 8000766:	edd3 7a00 	vldr	s15, [r3]
 800076a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800076e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000772:	4b77      	ldr	r3, [pc, #476]	; (8000950 <SpecialMovePID+0x28c>)
 8000774:	edd3 6a00 	vldr	s13, [r3]
 8000778:	4b72      	ldr	r3, [pc, #456]	; (8000944 <SpecialMovePID+0x280>)
 800077a:	edd3 7a00 	vldr	s15, [r3]
 800077e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000782:	eddf 6a74 	vldr	s13, [pc, #464]	; 8000954 <SpecialMovePID+0x290>
 8000786:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000792:	ee17 3a90 	vmov	r3, s15
 8000796:	b21b      	sxth	r3, r3
 8000798:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800079c:	dd25      	ble.n	80007ea <SpecialMovePID+0x126>
 800079e:	4b69      	ldr	r3, [pc, #420]	; (8000944 <SpecialMovePID+0x280>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800094c <SpecialMovePID+0x288>
 80007a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007ac:	4b66      	ldr	r3, [pc, #408]	; (8000948 <SpecialMovePID+0x284>)
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007ba:	4b65      	ldr	r3, [pc, #404]	; (8000950 <SpecialMovePID+0x28c>)
 80007bc:	edd3 6a00 	vldr	s13, [r3]
 80007c0:	4b60      	ldr	r3, [pc, #384]	; (8000944 <SpecialMovePID+0x280>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007ca:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000954 <SpecialMovePID+0x290>
 80007ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007da:	ee17 3a90 	vmov	r3, s15
 80007de:	b21b      	sxth	r3, r3
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	e004      	b.n	80007f4 <SpecialMovePID+0x130>
 80007ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007ee:	e001      	b.n	80007f4 <SpecialMovePID+0x130>
		PIDLoc = (u16) (1500
 80007f0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80007f4:	81bb      	strh	r3, [r7, #12]
						(int16_t) (PID_D_Kp * Ek + (PID_D_Ki * LocSum)
								+ PID_D_Kd * (Ek1 - Ek)), -1000, 1000));
		return PIDLoc;
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	e09b      	b.n	8000932 <SpecialMovePID+0x26e>
	}
	else if (ModeType == 2)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	f040 8088 	bne.w	8000912 <SpecialMovePID+0x24e>
	{
		PIDData = 0;
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <SpecialMovePID+0x27c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000808:	88ba      	ldrh	r2, [r7, #4]
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	ee07 3a90 	vmov	s15, r3
 8000812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <SpecialMovePID+0x280>)
 8000818:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 800081c:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <SpecialMovePID+0x284>)
 800081e:	ed93 7a00 	vldr	s14, [r3]
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <SpecialMovePID+0x280>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <SpecialMovePID+0x284>)
 800082e:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc = (u16) (1500
				+ RANGE(
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <SpecialMovePID+0x280>)
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000958 <SpecialMovePID+0x294>
 800083c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <SpecialMovePID+0x284>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <SpecialMovePID+0x28c>)
 800084c:	edd3 6a00 	vldr	s13, [r3]
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <SpecialMovePID+0x280>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800085a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800095c <SpecialMovePID+0x298>
 800085e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800086a:	ee17 3a90 	vmov	r3, s15
 800086e:	b21b      	sxth	r3, r3
		PIDLoc = (u16) (1500
 8000870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000874:	da48      	bge.n	8000908 <SpecialMovePID+0x244>
				+ RANGE(
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <SpecialMovePID+0x280>)
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000958 <SpecialMovePID+0x294>
 8000880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000884:	4b30      	ldr	r3, [pc, #192]	; (8000948 <SpecialMovePID+0x284>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <SpecialMovePID+0x28c>)
 8000890:	edd3 6a00 	vldr	s13, [r3]
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <SpecialMovePID+0x280>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800089e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800095c <SpecialMovePID+0x298>
 80008a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ae:	ee17 3a90 	vmov	r3, s15
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80008b8:	dd23      	ble.n	8000902 <SpecialMovePID+0x23e>
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SpecialMovePID+0x280>)
 80008bc:	edd3 7a00 	vldr	s15, [r3]
 80008c0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000958 <SpecialMovePID+0x294>
 80008c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SpecialMovePID+0x284>)
 80008ca:	edd3 7a00 	vldr	s15, [r3]
 80008ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <SpecialMovePID+0x28c>)
 80008d4:	edd3 6a00 	vldr	s13, [r3]
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <SpecialMovePID+0x280>)
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80008e2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800095c <SpecialMovePID+0x298>
 80008e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f2:	ee17 3a90 	vmov	r3, s15
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80008fe:	b29b      	uxth	r3, r3
 8000900:	e004      	b.n	800090c <SpecialMovePID+0x248>
 8000902:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000906:	e001      	b.n	800090c <SpecialMovePID+0x248>
		PIDLoc = (u16) (1500
 8000908:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800090c:	81fb      	strh	r3, [r7, #14]
						(int16_t) (PID_O_Kp * Ek + (PID_O_Ki * LocSum)
								+ PID_O_Kd * (Ek1 - Ek)), -1000, 1000));
		return PIDLoc;
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	e00f      	b.n	8000932 <SpecialMovePID+0x26e>
	}
	else
	{
		if (!PIDData)
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <SpecialMovePID+0x27c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <SpecialMovePID+0x26c>
		{
			PIDData = 1;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <SpecialMovePID+0x27c>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <SpecialMovePID+0x280>)
 8000922:	f04f 0200 	mov.w	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <SpecialMovePID+0x284>)
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000930:	2300      	movs	r3, #0
	}

}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000d4 	.word	0x200000d4
 8000944:	200000d8 	.word	0x200000d8
 8000948:	200000dc 	.word	0x200000dc
 800094c:	43480000 	.word	0x43480000
 8000950:	200000e0 	.word	0x200000e0
 8000954:	43960000 	.word	0x43960000
 8000958:	42c80000 	.word	0x42c80000
 800095c:	43160000 	.word	0x43160000

08000960 <SendBackPoint>:
/* 上传指针数据格式化
 * 将读取到的传感器数据合并
 * 然后格式化成可以上传的十六进制数据
 * */
void SendBackPoint(u8 *TXString, u8 *DeepSIO, u8 *WT931SIO, u8 *GY39SIO)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	DeepSensorIO = DeepSIO; //深度传感器数据
 800096e:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <SendBackPoint+0xf4>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	6013      	str	r3, [r2, #0]
	WT931SensorIO = WT931SIO; //九轴传感器数据
 8000974:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <SendBackPoint+0xf8>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
	GY39SensorIO = GY39SIO; //温湿度气压传感器数据
 800097a:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <SendBackPoint+0xfc>)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	6013      	str	r3, [r2, #0]
	TXString[0] = 0x25; //起始位
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2225      	movs	r2, #37	; 0x25
 8000984:	701a      	strb	r2, [r3, #0]
	TXString[39] = 0xFF; //结束位
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3327      	adds	r3, #39	; 0x27
 800098a:	22ff      	movs	r2, #255	; 0xff
 800098c:	701a      	strb	r2, [r3, #0]
	TXString[40] = 0xFF; //结束位
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3328      	adds	r3, #40	; 0x28
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	701a      	strb	r2, [r3, #0]
	/* 封装数据 */
	PUString = TXString;
 8000996:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <SendBackPoint+0x100>)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6013      	str	r3, [r2, #0]
	PUCabin = TXString + 1;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <SendBackPoint+0x104>)
 80009a2:	6013      	str	r3, [r2, #0]
	PUTemp = (u16*) (TXString + 2);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3302      	adds	r3, #2
 80009a8:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <SendBackPoint+0x108>)
 80009aa:	6013      	str	r3, [r2, #0]
	PUBaro[0] = (u16*) (TXString + 4);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3304      	adds	r3, #4
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <SendBackPoint+0x10c>)
 80009b2:	6013      	str	r3, [r2, #0]
	PUBaro[1] = (u16*) (TXString + 6);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3306      	adds	r3, #6
 80009b8:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <SendBackPoint+0x10c>)
 80009ba:	6053      	str	r3, [r2, #4]
	PUHum = (u16*) (TXString + 8);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3308      	adds	r3, #8
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <SendBackPoint+0x110>)
 80009c2:	6013      	str	r3, [r2, #0]
	PUAcc[0] = (u16*) (TXString + 10);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	330a      	adds	r3, #10
 80009c8:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <SendBackPoint+0x114>)
 80009ca:	6013      	str	r3, [r2, #0]
	PUAcc[1] = (u16*) (TXString + 12);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	330c      	adds	r3, #12
 80009d0:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <SendBackPoint+0x114>)
 80009d2:	6053      	str	r3, [r2, #4]
	PUAcc[2] = (u16*) (TXString + 14);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	330e      	adds	r3, #14
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <SendBackPoint+0x114>)
 80009da:	6093      	str	r3, [r2, #8]
	PURot[0] = (u16*) (TXString + 16);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3310      	adds	r3, #16
 80009e0:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <SendBackPoint+0x118>)
 80009e2:	6013      	str	r3, [r2, #0]
	PURot[1] = (u16*) (TXString + 18);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3312      	adds	r3, #18
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <SendBackPoint+0x118>)
 80009ea:	6053      	str	r3, [r2, #4]
	PURot[2] = (u16*) (TXString + 20);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3314      	adds	r3, #20
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SendBackPoint+0x118>)
 80009f2:	6093      	str	r3, [r2, #8]
	PUEul[0] = (u16*) (TXString + 22);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3316      	adds	r3, #22
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <SendBackPoint+0x11c>)
 80009fa:	6013      	str	r3, [r2, #0]
	PUEul[1] = (u16*) (TXString + 24);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3318      	adds	r3, #24
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <SendBackPoint+0x11c>)
 8000a02:	6053      	str	r3, [r2, #4]
	PUEul[2] = (u16*) (TXString + 26);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	331a      	adds	r3, #26
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <SendBackPoint+0x11c>)
 8000a0a:	6093      	str	r3, [r2, #8]
	PUMag[0] = (u16*) (TXString + 28);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	331c      	adds	r3, #28
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SendBackPoint+0x120>)
 8000a12:	6013      	str	r3, [r2, #0]
	PUMag[1] = (u16*) (TXString + 30);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	331e      	adds	r3, #30
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <SendBackPoint+0x120>)
 8000a1a:	6053      	str	r3, [r2, #4]
	PUMag[2] = (u16*) (TXString + 32);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3320      	adds	r3, #32
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <SendBackPoint+0x120>)
 8000a22:	6093      	str	r3, [r2, #8]
	PUWaterT = (u16*) (TXString + 34);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3322      	adds	r3, #34	; 0x22
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <SendBackPoint+0x124>)
 8000a2a:	6013      	str	r3, [r2, #0]
	PUWaterD = (u16*) (TXString + 36);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3324      	adds	r3, #36	; 0x24
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <SendBackPoint+0x128>)
 8000a32:	6013      	str	r3, [r2, #0]
	PUId = TXString + 38;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3326      	adds	r3, #38	; 0x26
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <SendBackPoint+0x12c>)
 8000a3a:	6013      	str	r3, [r2, #0]
	*PUId = XorCaculate(TXString, 38); //获取并封装奇偶校验位
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <SendBackPoint+0x12c>)
 8000a3e:	681c      	ldr	r4, [r3, #0]
 8000a40:	2126      	movs	r1, #38	; 0x26
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f000 f8f8 	bl	8000c38 <XorCaculate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	7023      	strb	r3, [r4, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	200000d0 	.word	0x200000d0
 8000a5c:	200000cc 	.word	0x200000cc
 8000a60:	20000030 	.word	0x20000030
 8000a64:	20000078 	.word	0x20000078
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000080 	.word	0x20000080
 8000a70:	20000088 	.word	0x20000088
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	20000098 	.word	0x20000098
 8000a7c:	200000a4 	.word	0x200000a4
 8000a80:	200000b0 	.word	0x200000b0
 8000a84:	200000bc 	.word	0x200000bc
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	200000c4 	.word	0x200000c4

08000a90 <SendBack>:
 * 将封装好的传感器数据再解析成能够回传到上位机和其他舱室的数据
 * */
void SendBack(u8 WaterDetect, u16 TempNum, u16 BaroNum[2], u16 HumNum,
		u16 AccNum[3], u16 RotNum[3], u16 EulNum[3], u16 MagNum[3],
		u16 WaterTNum, u16 WaterDNum)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	81bb      	strh	r3, [r7, #12]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]
	*PUCabin = CabinNum;
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <SendBack+0x11c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

	if (WaterDetect) //漏水检测
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <SendBack+0x34>
	{
		*PUCabin += WaterNum;
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <SendBack+0x11c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <SendBack+0x11c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3202      	adds	r2, #2
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	701a      	strb	r2, [r3, #0]
	}
	if (!(*GY39SensorIO)) //温湿度大气压传感器
 8000ac4:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <SendBack+0x120>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d111      	bne.n	8000af2 <SendBack+0x62>
	{
		*PUTemp = TempNum;
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <SendBack+0x124>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	89ba      	ldrh	r2, [r7, #12]
 8000ad4:	801a      	strh	r2, [r3, #0]
		*PUBaro[0] = BaroNum[0];
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <SendBack+0x128>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	8812      	ldrh	r2, [r2, #0]
 8000ade:	801a      	strh	r2, [r3, #0]
		*PUBaro[1] = BaroNum[1];
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <SendBack+0x128>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	8852      	ldrh	r2, [r2, #2]
 8000ae8:	801a      	strh	r2, [r3, #0]
		*PUHum = HumNum;
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <SendBack+0x12c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	801a      	strh	r2, [r3, #0]
	}
	if (!(*WT931SensorIO)) //九轴传感器
 8000af2:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <SendBack+0x130>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d13b      	bne.n	8000b74 <SendBack+0xe4>
	{
		*PUAcc[0] = AccNum[0];
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <SendBack+0x134>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	8812      	ldrh	r2, [r2, #0]
 8000b04:	801a      	strh	r2, [r3, #0]
		*PUAcc[1] = AccNum[1];
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <SendBack+0x134>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	8852      	ldrh	r2, [r2, #2]
 8000b0e:	801a      	strh	r2, [r3, #0]
		*PUAcc[2] = AccNum[2];
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <SendBack+0x134>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	6a3a      	ldr	r2, [r7, #32]
 8000b16:	8892      	ldrh	r2, [r2, #4]
 8000b18:	801a      	strh	r2, [r3, #0]
		*PURot[0] = RotNum[0];
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <SendBack+0x138>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b20:	8812      	ldrh	r2, [r2, #0]
 8000b22:	801a      	strh	r2, [r3, #0]
		*PURot[1] = RotNum[1];
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <SendBack+0x138>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2a:	8852      	ldrh	r2, [r2, #2]
 8000b2c:	801a      	strh	r2, [r3, #0]
		*PURot[2] = RotNum[2];
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SendBack+0x138>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b34:	8892      	ldrh	r2, [r2, #4]
 8000b36:	801a      	strh	r2, [r3, #0]
		*PUEul[0] = EulNum[0];
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SendBack+0x13c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3e:	8812      	ldrh	r2, [r2, #0]
 8000b40:	801a      	strh	r2, [r3, #0]
		*PUEul[1] = EulNum[1];
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <SendBack+0x13c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b48:	8852      	ldrh	r2, [r2, #2]
 8000b4a:	801a      	strh	r2, [r3, #0]
		*PUEul[2] = EulNum[2];
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <SendBack+0x13c>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b52:	8892      	ldrh	r2, [r2, #4]
 8000b54:	801a      	strh	r2, [r3, #0]
		*PUMag[0] = MagNum[0];
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <SendBack+0x140>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	801a      	strh	r2, [r3, #0]
		*PUMag[1] = MagNum[1];
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <SendBack+0x140>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b66:	8852      	ldrh	r2, [r2, #2]
 8000b68:	801a      	strh	r2, [r3, #0]
		*PUMag[2] = MagNum[2];
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <SendBack+0x140>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b70:	8892      	ldrh	r2, [r2, #4]
 8000b72:	801a      	strh	r2, [r3, #0]
	}
#ifdef CtrlSide
	//主控制仓有水深传感器，需要先检测是否正常连接
	if (!(*DeepSensorIO))
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <SendBack+0x144>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d107      	bne.n	8000b8e <SendBack+0xfe>
	{
		*PUWaterT = WaterTNum;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <SendBack+0x148>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b84:	801a      	strh	r2, [r3, #0]
		*PUWaterD = WaterDNum;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <SendBack+0x14c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b8c:	801a      	strh	r2, [r3, #0]
#ifdef PowerSide
	//推进器控制仓没有水深传感器
	*PUWaterT = NULL;
	*PUWaterD = NULL;
#endif
	*PUId = XorCaculate(PUString, 38);
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <SendBack+0x150>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <SendBack+0x154>)
 8000b94:	6814      	ldr	r4, [r2, #0]
 8000b96:	2126      	movs	r1, #38	; 0x26
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f84d 	bl	8000c38 <XorCaculate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	200000cc 	.word	0x200000cc
 8000bb4:	2000007c 	.word	0x2000007c
 8000bb8:	20000080 	.word	0x20000080
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	200000d0 	.word	0x200000d0
 8000bc4:	2000008c 	.word	0x2000008c
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	200000b0 	.word	0x200000b0
 8000bd4:	200000c8 	.word	0x200000c8
 8000bd8:	200000bc 	.word	0x200000bc
 8000bdc:	200000c0 	.word	0x200000c0
 8000be0:	20000030 	.word	0x20000030
 8000be4:	200000c4 	.word	0x200000c4

08000be8 <IdTest>:

//异或运算位检查，其中Format上传格式为1下传格式为0，正确为1错误为0
u8 IdTest(u8 *String, u8 Format)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
#ifdef DataIdentify
	if (Format)
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00d      	beq.n	8000c16 <IdTest+0x2e>
	{
		if (*(String + 38) == XorCaculate(String, 38))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3326      	adds	r3, #38	; 0x26
 8000bfe:	781c      	ldrb	r4, [r3, #0]
 8000c00:	2126      	movs	r1, #38	; 0x26
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f818 	bl	8000c38 <XorCaculate>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d101      	bne.n	8000c12 <IdTest+0x2a>
		{
			return 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e00c      	b.n	8000c30 <IdTest+0x48>
		}
	}
	else
	{
		if (*(String + 28) == XorCaculate(String, 28))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	331c      	adds	r3, #28
 8000c1a:	781c      	ldrb	r4, [r3, #0]
 8000c1c:	211c      	movs	r1, #28
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f80a 	bl	8000c38 <XorCaculate>
 8000c24:	4603      	mov	r3, r0
 8000c26:	429c      	cmp	r4, r3
 8000c28:	d101      	bne.n	8000c2e <IdTest+0x46>
		{
			return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000c2e:	2300      	movs	r3, #0
		}
	}
#endif
	return 1;
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <XorCaculate>:

//异或运算位计算
u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
	u8 CacResult = CacString[0];
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73bb      	strb	r3, [r7, #14]
 8000c4e:	e009      	b.n	8000c64 <XorCaculate+0x2c>
	{
		CacResult ^= CacString[i];
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4053      	eors	r3, r2
 8000c5c:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73bb      	strb	r3, [r7, #14]
 8000c64:	7bba      	ldrb	r2, [r7, #14]
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d3f1      	bcc.n	8000c50 <XorCaculate+0x18>
	}
	return CacResult;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <DeepPoint>:
const u8 TSendStr[3] =
{ 0xA5, 0x52, 0xF7 };

//水深数据指针定向
void DeepPoint(u8 *SerialData)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	DDepthPos = (u16*) (SerialData);
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <DeepPoint+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
	DWaterTemperturePos = (u16*) (SerialData + 2);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <DeepPoint+0x28>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	200000e8 	.word	0x200000e8

08000ca8 <DeepTake>:
//
//}

//水深数据输出
void DeepTake(u16 *DepthNum, u16 *WaterTempertureNum)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	*DepthNum = *DDepthPos;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <DeepTake+0x2c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	801a      	strh	r2, [r3, #0]
	*WaterTempertureNum = *DWaterTemperturePos;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <DeepTake+0x30>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	801a      	strh	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000e4 	.word	0x200000e4
 8000cd8:	200000e8 	.word	0x200000e8

08000cdc <WT931Point>:

//WT931数据指针定向
void WT931Point(u8 *SerialData)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	PAccPos[0] = (u16*) (SerialData + 2);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <WT931Point+0x94>)
 8000cea:	6013      	str	r3, [r2, #0]
	PAccPos[1] = (u16*) (SerialData + 4);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3304      	adds	r3, #4
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <WT931Point+0x94>)
 8000cf2:	6053      	str	r3, [r2, #4]
	PAccPos[2] = (u16*) (SerialData + 6);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3306      	adds	r3, #6
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <WT931Point+0x94>)
 8000cfa:	6093      	str	r3, [r2, #8]
	PInsTemPos[0] = (u16*) (SerialData + 8);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3308      	adds	r3, #8
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <WT931Point+0x98>)
 8000d02:	6013      	str	r3, [r2, #0]
	PRotPos[0] = (u16*) (SerialData + 13);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	330d      	adds	r3, #13
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <WT931Point+0x9c>)
 8000d0a:	6013      	str	r3, [r2, #0]
	PRotPos[1] = (u16*) (SerialData + 15);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	330f      	adds	r3, #15
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <WT931Point+0x9c>)
 8000d12:	6053      	str	r3, [r2, #4]
	PRotPos[2] = (u16*) (SerialData + 17);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3311      	adds	r3, #17
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <WT931Point+0x9c>)
 8000d1a:	6093      	str	r3, [r2, #8]
	PInsTemPos[1] = (u16*) (SerialData + 19);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3313      	adds	r3, #19
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <WT931Point+0x98>)
 8000d22:	6053      	str	r3, [r2, #4]
	PEulPos[0] = (u16*) (SerialData + 24);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3318      	adds	r3, #24
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <WT931Point+0xa0>)
 8000d2a:	6013      	str	r3, [r2, #0]
	PEulPos[1] = (u16*) (SerialData + 26);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	331a      	adds	r3, #26
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <WT931Point+0xa0>)
 8000d32:	6053      	str	r3, [r2, #4]
	PEulPos[2] = (u16*) (SerialData + 28);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	331c      	adds	r3, #28
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <WT931Point+0xa0>)
 8000d3a:	6093      	str	r3, [r2, #8]
	PInsTemPos[2] = (u16*) (SerialData + 30);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	331e      	adds	r3, #30
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <WT931Point+0x98>)
 8000d42:	6093      	str	r3, [r2, #8]
	PMagPos[0] = (u16*) (SerialData + 35);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3323      	adds	r3, #35	; 0x23
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <WT931Point+0xa4>)
 8000d4a:	6013      	str	r3, [r2, #0]
	PMagPos[1] = (u16*) (SerialData + 37);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3325      	adds	r3, #37	; 0x25
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <WT931Point+0xa4>)
 8000d52:	6053      	str	r3, [r2, #4]
	PMagPos[2] = (u16*) (SerialData + 39);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3327      	adds	r3, #39	; 0x27
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <WT931Point+0xa4>)
 8000d5a:	6093      	str	r3, [r2, #8]
	PInsTemPos[2] = (u16*) (SerialData + 41);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3329      	adds	r3, #41	; 0x29
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <WT931Point+0x98>)
 8000d62:	6093      	str	r3, [r2, #8]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	200000ec 	.word	0x200000ec
 8000d74:	2000011c 	.word	0x2000011c
 8000d78:	200000f8 	.word	0x200000f8
 8000d7c:	20000104 	.word	0x20000104
 8000d80:	20000110 	.word	0x20000110

08000d84 <WT931Take>:

//WT931数据取出
void WT931Take(u16 *AccelerationNum, u16 *RotSpeedNum, u16 *EulerAngleNum,
		u16 *MagnetismNum)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
	AccelerationNum[0] = *PAccPos[0];
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <WT931Take+0xa4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	801a      	strh	r2, [r3, #0]
	AccelerationNum[1] = *PAccPos[1];
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <WT931Take+0xa4>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3302      	adds	r3, #2
 8000da4:	8812      	ldrh	r2, [r2, #0]
 8000da6:	801a      	strh	r2, [r3, #0]
	AccelerationNum[2] = *PAccPos[2];
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <WT931Take+0xa4>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3304      	adds	r3, #4
 8000db0:	8812      	ldrh	r2, [r2, #0]
 8000db2:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[0] = *PRotPos[0];
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <WT931Take+0xa8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	881a      	ldrh	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[1] = *PRotPos[1];
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <WT931Take+0xa8>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	801a      	strh	r2, [r3, #0]
	RotSpeedNum[2] = *PRotPos[2];
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <WT931Take+0xa8>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[0] = *PEulPos[0];
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <WT931Take+0xac>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[1] = *PEulPos[1];
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <WT931Take+0xac>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3302      	adds	r3, #2
 8000de8:	8812      	ldrh	r2, [r2, #0]
 8000dea:	801a      	strh	r2, [r3, #0]
	EulerAngleNum[2] = *PEulPos[2];
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <WT931Take+0xac>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3304      	adds	r3, #4
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	801a      	strh	r2, [r3, #0]
	MagnetismNum[0] = *PMagPos[0];
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <WT931Take+0xb0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	801a      	strh	r2, [r3, #0]
	MagnetismNum[1] = *PMagPos[1];
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <WT931Take+0xb0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	801a      	strh	r2, [r3, #0]
	MagnetismNum[2] = *PMagPos[2];
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <WT931Take+0xb0>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	3304      	adds	r3, #4
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	801a      	strh	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200000ec 	.word	0x200000ec
 8000e2c:	200000f8 	.word	0x200000f8
 8000e30:	20000104 	.word	0x20000104
 8000e34:	20000110 	.word	0x20000110

08000e38 <GY39InitStr>:

//读取GY39初始化指令
void GY39InitStr(u8 TXCache[3])
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	TXCache[0] = TInitStr[0];
 8000e40:	22a5      	movs	r2, #165	; 0xa5
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	701a      	strb	r2, [r3, #0]
	TXCache[1] = TInitStr[1];
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	701a      	strb	r2, [r3, #0]
	TXCache[2] = TInitStr[2];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3302      	adds	r3, #2
 8000e52:	2225      	movs	r2, #37	; 0x25
 8000e54:	701a      	strb	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <GY39Point>:
//	TXCache[2]=TSendStr[2];
//}

//GY39数据指针定向
void GY39Point(u8 *SerialData)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	TTemPos = (u16*) (SerialData + 2);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <GY39Point+0x34>)
 8000e72:	6013      	str	r3, [r2, #0]
	TBaroPos[0] = (u16*) (SerialData + 4);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <GY39Point+0x38>)
 8000e7a:	6013      	str	r3, [r2, #0]
	TBaroPos[1] = (u16*) (SerialData + 6);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3306      	adds	r3, #6
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <GY39Point+0x38>)
 8000e82:	6053      	str	r3, [r2, #4]
	THumPos = (u16*) (SerialData + 8);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3308      	adds	r3, #8
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <GY39Point+0x3c>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	2000012c 	.word	0x2000012c
 8000e9c:	20000130 	.word	0x20000130
 8000ea0:	20000138 	.word	0x20000138

08000ea4 <GY39Take>:

//GY39数据输出
void GY39Take(u16 *TemNum, u16 BaroNum[2], u16 *HumNum)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	*TemNum = *TTemPos;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <GY39Take+0x44>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	801a      	strh	r2, [r3, #0]
	BaroNum[0] = *TBaroPos[0];
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <GY39Take+0x48>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	881a      	ldrh	r2, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	801a      	strh	r2, [r3, #0]
	BaroNum[1] = *TBaroPos[1];
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <GY39Take+0x48>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	8812      	ldrh	r2, [r2, #0]
 8000ece:	801a      	strh	r2, [r3, #0]
	*HumNum = *THumPos;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <GY39Take+0x4c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	881a      	ldrh	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	801a      	strh	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000012c 	.word	0x2000012c
 8000eec:	20000130 	.word	0x20000130
 8000ef0:	20000138 	.word	0x20000138

08000ef4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000013c 	.word	0x2000013c
 8000f24:	20000190 	.word	0x20000190

08000f28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b0a6      	sub	sp, #152	; 0x98
 8000f2c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <main+0x1d0>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d11b      	bne.n	8000f72 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
}
 8000f3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f40:	f3bf 8f6f 	isb	sy
}
 8000f44:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f46:	4b6c      	ldr	r3, [pc, #432]	; (80010f8 <main+0x1d0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4e:	f3bf 8f4f 	dsb	sy
}
 8000f52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f54:	f3bf 8f6f 	isb	sy
}
 8000f58:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f5a:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <main+0x1d0>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <main+0x1d0>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f66:	f3bf 8f4f 	dsb	sy
}
 8000f6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6c:	f3bf 8f6f 	isb	sy
}
 8000f70:	e000      	b.n	8000f74 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f72:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <main+0x1d0>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d143      	bne.n	8001008 <main+0xe0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f80:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <main+0x1d0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f88:	f3bf 8f4f 	dsb	sy
}
 8000f8c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <main+0x1d0>)
 8000f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f9c:	0b5b      	lsrs	r3, r3, #13
 8000f9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000fbe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000fc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000fc4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fc6:	494c      	ldr	r1, [pc, #304]	; (80010f8 <main+0x1d0>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1eb      	bne.n	8000fb4 <main+0x8c>
    } while(sets-- != 0U);
 8000fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1dd      	bne.n	8000fa6 <main+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fea:	f3bf 8f4f 	dsb	sy
}
 8000fee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <main+0x1d0>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <main+0x1d0>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffc:	f3bf 8f4f 	dsb	sy
}
 8001000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001002:	f3bf 8f6f 	isb	sy
}
 8001006:	e000      	b.n	800100a <main+0xe2>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001008:	bf00      	nop
	SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800100a:	f001 febb 	bl	8002d84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100e:	f000 f889 	bl	8001124 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001012:	f000 f90d 	bl	8001230 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001016:	f000 fb41 	bl	800169c <MX_GPIO_Init>
	MX_DMA_Init();
 800101a:	f000 facf 	bl	80015bc <MX_DMA_Init>
	MX_IWDG1_Init();
 800101e:	f000 f933 	bl	8001288 <MX_IWDG1_Init>
	MX_UART4_Init();
 8001022:	f000 f94f 	bl	80012c4 <MX_UART4_Init>
	MX_UART8_Init();
 8001026:	f000 f999 	bl	800135c <MX_UART8_Init>
	MX_USART1_UART_Init();
 800102a:	f000 f9e3 	bl	80013f4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800102e:	f000 fa2d 	bl	800148c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001032:	f000 fa77 	bl	8001524 <MX_USART3_UART_Init>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of UpTask */
	//和上位仓（MT7921）通信任务
	osThreadDef(UpTask, UpTaskF, osPriorityNormal, 0, 128);
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <main+0x1d4>)
 8001038:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800103c:	461d      	mov	r5, r3
 800103e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UpTaskHandle = osThreadCreate(osThread(UpTask), NULL);
 800104a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f009 fd08 	bl	800aa66 <osThreadCreate>
 8001056:	4603      	mov	r3, r0
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <main+0x1d8>)
 800105a:	6013      	str	r3, [r2, #0]

	/* definition and creation of DownTask */
	//和下位仓（STM32 PWM Hub）通信任务 与 自主定向定深任务
	osThreadDef(DownTask, DownTaskF, osPriorityNormal, 0, 128);
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <main+0x1dc>)
 800105e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001062:	461d      	mov	r5, r3
 8001064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	DownTaskHandle = osThreadCreate(osThread(DownTask), NULL);
 8001070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f009 fcf5 	bl	800aa66 <osThreadCreate>
 800107c:	4603      	mov	r3, r0
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <main+0x1e0>)
 8001080:	6013      	str	r3, [r2, #0]

	/* definition and creation of InitialTask */
	//初始化任务
	osThreadDef(InitialTask, InitialTaskF, osPriorityRealtime, 0, 128);
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <main+0x1e4>)
 8001084:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001088:	461d      	mov	r5, r3
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	InitialTaskHandle = osThreadCreate(osThread(InitialTask), NULL);
 8001096:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fce2 	bl	800aa66 <osThreadCreate>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <main+0x1e8>)
 80010a6:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	//传感器数据接收任务
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0x1ec>)
 80010aa:	f107 041c 	add.w	r4, r7, #28
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 fccf 	bl	800aa66 <osThreadCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <main+0x1f0>)
 80010cc:	6013      	str	r3, [r2, #0]

	/* definition and creation of EmptyTask */
	//空闲任务
	osThreadDef(EmptyTask, EmptyTaskF, osPriorityIdle, 0, 128);
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <main+0x1f4>)
 80010d0:	463c      	mov	r4, r7
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	EmptyTaskHandle = osThreadCreate(osThread(EmptyTask), NULL);
 80010e0:	463b      	mov	r3, r7
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 fcbe 	bl	800aa66 <osThreadCreate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <main+0x1f8>)
 80010ee:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80010f0:	f009 fcb2 	bl	800aa58 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80010f4:	e7fe      	b.n	80010f4 <main+0x1cc>
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	0800c1b4 	.word	0x0800c1b4
 8001100:	200046ec 	.word	0x200046ec
 8001104:	0800c1d0 	.word	0x0800c1d0
 8001108:	2000491c 	.word	0x2000491c
 800110c:	0800c1ec 	.word	0x0800c1ec
 8001110:	20004920 	.word	0x20004920
 8001114:	0800c208 	.word	0x0800c208
 8001118:	20004124 	.word	0x20004124
 800111c:	0800c224 	.word	0x0800c224
 8001120:	20004374 	.word	0x20004374

08001124 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	; 0x70
 8001128:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f00b f80e 	bl	800c154 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f808 	bl	800c154 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001144:	2002      	movs	r0, #2
 8001146:	f004 ffeb 	bl	8006120 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <SystemClock_Config+0x100>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <SystemClock_Config+0x100>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	62d3      	str	r3, [r2, #44]	; 0x2c
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <SystemClock_Config+0x100>)
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <SystemClock_Config+0x104>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <SystemClock_Config+0x104>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <SystemClock_Config+0x104>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800117c:	bf00      	nop
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <SystemClock_Config+0x104>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800118a:	d1f8      	bne.n	800117e <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <SystemClock_Config+0x108>)
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <SystemClock_Config+0x108>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800119c:	2309      	movs	r3, #9
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80011b2:	2305      	movs	r3, #5
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 80011be:	2306      	movs	r3, #6
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011c6:	2308      	movs	r3, #8
 80011c8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 ffdc 	bl	8006194 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80011e2:	f000 fda1 	bl	8001d28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011e6:	233f      	movs	r3, #63	; 0x3f
 80011e8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011f2:	2308      	movs	r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001204:	2340      	movs	r3, #64	; 0x40
 8001206:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2102      	movs	r1, #2
 800120c:	4618      	mov	r0, r3
 800120e:	f005 fbd1 	bl	80069b4 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8001218:	f000 fd86 	bl	8001d28 <Error_Handler>
	}
}
 800121c:	bf00      	nop
 800121e:	3770      	adds	r7, #112	; 0x70
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58000400 	.word	0x58000400
 8001228:	58024800 	.word	0x58024800
 800122c:	58024400 	.word	0x58024400

08001230 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0b0      	sub	sp, #192	; 0xc0
 8001234:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	22bc      	movs	r2, #188	; 0xbc
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f00a ff89 	bl	800c154 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8
 8001242:	2303      	movs	r3, #3
 8001244:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001246:	2319      	movs	r3, #25
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800124a:	23c0      	movs	r3, #192	; 0xc0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800125e:	2300      	movs	r3, #0
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 8001266:	2302      	movs	r3, #2
 8001268:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800126a:	2310      	movs	r3, #16
 800126c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4618      	mov	r0, r3
 8001272:	f005 ff6d 	bl	8007150 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 800127c:	f000 fd54 	bl	8001d28 <Error_Handler>
	}
}
 8001280:	bf00      	nop
 8001282:	37c0      	adds	r7, #192	; 0xc0
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_IWDG1_Init+0x34>)
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <MX_IWDG1_Init+0x38>)
 8001290:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_IWDG1_Init+0x34>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 2047;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_IWDG1_Init+0x34>)
 800129a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800129e:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 2047;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_IWDG1_Init+0x34>)
 80012a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012a6:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_IWDG1_Init+0x34>)
 80012aa:	f004 feda 	bl	8006062 <HAL_IWDG_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 80012b4:	f000 fd38 	bl	8001d28 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20004218 	.word	0x20004218
 80012c0:	58004800 	.word	0x58004800

080012c4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_UART4_Init+0x90>)
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <MX_UART4_Init+0x94>)
 80012cc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_UART4_Init+0x90>)
 80012d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80012d4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_UART4_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_UART4_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_UART4_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_UART4_Init+0x90>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_UART4_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_UART4_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_UART4_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_UART4_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_UART4_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_UART4_Init+0x90>)
 800130e:	f007 fd53 	bl	8008db8 <HAL_UART_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8001318:	f000 fd06 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 800131c:	2100      	movs	r1, #0
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_UART4_Init+0x90>)
 8001320:	f009 fab8 	bl	800a894 <HAL_UARTEx_SetTxFifoThreshold>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800132a:	f000 fcfd 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_UART4_Init+0x90>)
 8001332:	f009 faed 	bl	800a910 <HAL_UARTEx_SetRxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800133c:	f000 fcf4 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_UART4_Init+0x90>)
 8001342:	f009 fa6e 	bl	800a822 <HAL_UARTEx_DisableFifoMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800134c:	f000 fcec 	bl	8001d28 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200047dc 	.word	0x200047dc
 8001358:	40004c00 	.word	0x40004c00

0800135c <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_UART8_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_UART8_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_UART8_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_UART8_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_UART8_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_UART8_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_UART8_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_UART8_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_UART8_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_UART8_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_UART8_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_UART8_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_UART8_Init+0x90>)
 80013a6:	f007 fd07 	bl	8008db8 <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 80013b0:	f000 fcba 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_UART8_Init+0x90>)
 80013b8:	f009 fa6c 	bl	800a894 <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80013c2:	f000 fcb1 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_UART8_Init+0x90>)
 80013ca:	f009 faa1 	bl	800a910 <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80013d4:	f000 fca8 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_UART8_Init+0x90>)
 80013da:	f009 fa22 	bl	800a822 <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 80013e4:	f000 fca0 	bl	8001d28 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20004710 	.word	0x20004710
 80013f0:	40007c00 	.word	0x40007c00

080013f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_USART1_UART_Init+0x90>)
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <MX_USART1_UART_Init+0x94>)
 80013fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001400:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001404:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_USART1_UART_Init+0x90>)
 800143e:	f007 fcbb 	bl	8008db8 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001448:	f000 fc6e 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800144c:	2100      	movs	r1, #0
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001450:	f009 fa20 	bl	800a894 <HAL_UARTEx_SetTxFifoThreshold>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800145a:	f000 fc65 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800145e:	2100      	movs	r1, #0
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001462:	f009 fa55 	bl	800a910 <HAL_UARTEx_SetRxFifoThreshold>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800146c:	f000 fc5c 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_USART1_UART_Init+0x90>)
 8001472:	f009 f9d6 	bl	800a822 <HAL_UARTEx_DisableFifoMode>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 800147c:	f000 fc54 	bl	8001d28 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20004558 	.word	0x20004558
 8001488:	40011000 	.word	0x40011000

0800148c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_USART2_UART_Init+0x90>)
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MX_USART2_UART_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_USART2_UART_Init+0x90>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014d6:	f007 fc6f 	bl	8008db8 <HAL_UART_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80014e0:	f000 fc22 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014e8:	f009 f9d4 	bl	800a894 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80014f2:	f000 fc19 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x90>)
 80014fa:	f009 fa09 	bl	800a910 <HAL_UARTEx_SetRxFifoThreshold>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001504:	f000 fc10 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_USART2_UART_Init+0x90>)
 800150a:	f009 f98a 	bl	800a822 <HAL_UARTEx_DisableFifoMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001514:	f000 fc08 	bl	8001d28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000486c 	.word	0x2000486c
 8001520:	40004400 	.word	0x40004400

08001524 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <MX_USART3_UART_Init+0x94>)
 800152c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 800156e:	f007 fc23 	bl	8008db8 <HAL_UART_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001578:	f000 fbd6 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001580:	f009 f988 	bl	800a894 <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800158a:	f000 fbcd 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800158e:	2100      	movs	r1, #0
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 8001592:	f009 f9bd 	bl	800a910 <HAL_UARTEx_SetRxFifoThreshold>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800159c:	f000 fbc4 	bl	8001d28 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_USART3_UART_Init+0x90>)
 80015a2:	f009 f93e 	bl	800a822 <HAL_UARTEx_DisableFifoMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 80015ac:	f000 fbbc 	bl	8001d28 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200042d4 	.word	0x200042d4
 80015b8:	40004800 	.word	0x40004800

080015bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <MX_DMA_Init+0xdc>)
 80015c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c8:	4a33      	ldr	r2, [pc, #204]	; (8001698 <MX_DMA_Init+0xdc>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <MX_DMA_Init+0xdc>)
 80015d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_DMA_Init+0xdc>)
 80015e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e6:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <MX_DMA_Init+0xdc>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_DMA_Init+0xdc>)
 80015f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	200b      	movs	r0, #11
 8001604:	f001 fcde 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001608:	200b      	movs	r0, #11
 800160a:	f001 fcf5 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	200c      	movs	r0, #12
 8001614:	f001 fcd6 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001618:	200c      	movs	r0, #12
 800161a:	f001 fced 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2105      	movs	r1, #5
 8001622:	200d      	movs	r0, #13
 8001624:	f001 fcce 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001628:	200d      	movs	r0, #13
 800162a:	f001 fce5 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2105      	movs	r1, #5
 8001632:	200e      	movs	r0, #14
 8001634:	f001 fcc6 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001638:	200e      	movs	r0, #14
 800163a:	f001 fcdd 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2105      	movs	r1, #5
 8001642:	200f      	movs	r0, #15
 8001644:	f001 fcbe 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001648:	200f      	movs	r0, #15
 800164a:	f001 fcd5 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	2010      	movs	r0, #16
 8001654:	f001 fcb6 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001658:	2010      	movs	r0, #16
 800165a:	f001 fccd 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2105      	movs	r1, #5
 8001662:	2011      	movs	r0, #17
 8001664:	f001 fcae 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001668:	2011      	movs	r0, #17
 800166a:	f001 fcc5 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2105      	movs	r1, #5
 8001672:	202f      	movs	r0, #47	; 0x2f
 8001674:	f001 fca6 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001678:	202f      	movs	r0, #47	; 0x2f
 800167a:	f001 fcbd 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	2038      	movs	r0, #56	; 0x38
 8001684:	f001 fc9e 	bl	8002fc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001688:	2038      	movs	r0, #56	; 0x38
 800168a:	f001 fcb5 	bl	8002ff8 <HAL_NVIC_EnableIRQ>

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	58024400 	.word	0x58024400

0800169c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4a35      	ldr	r2, [pc, #212]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <MX_GPIO_Init+0xf4>)
 80016f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <MX_GPIO_Init+0xf4>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <MX_GPIO_Init+0xf4>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <MX_GPIO_Init+0xf4>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_GPIO_Init+0xf4>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_GPIO_Init+0xf4>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <MX_GPIO_Init+0xf4>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_GPIO_Init+0xf4>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <MX_GPIO_Init+0xf8>)
 800174e:	f004 fc6f 	bl	8006030 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001752:	2310      	movs	r3, #16
 8001754:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <MX_GPIO_Init+0xf8>)
 800176a:	f004 fa99 	bl	8005ca0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_GPIO_Init+0xf8>)
 8001782:	f004 fa8d 	bl	8005ca0 <HAL_GPIO_Init>

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	58024400 	.word	0x58024400
 8001794:	58021000 	.word	0x58021000

08001798 <UpTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_UpTaskF */
void UpTaskF(void const *argument)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af06      	add	r7, sp, #24
 800179e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		while (!UpSideFinish) //等待上位机下传指令解析完毕
 80017a0:	e002      	b.n	80017a8 <UpTaskF+0x10>
		{
			osDelay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f009 f9ab 	bl	800aafe <osDelay>
		while (!UpSideFinish) //等待上位机下传指令解析完毕
 80017a8:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <UpTaskF+0x128>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f8      	beq.n	80017a2 <UpTaskF+0xa>
		}
		UpSideFinish = 0; //下传指令解析完毕
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <UpTaskF+0x128>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
		if (IdTest(UART1RXCache, 0)) //校验从上位机发来的数据
 80017b6:	2100      	movs	r1, #0
 80017b8:	4842      	ldr	r0, [pc, #264]	; (80018c4 <UpTaskF+0x12c>)
 80017ba:	f7ff fa15 	bl	8000be8 <IdTest>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01d      	beq.n	8001800 <UpTaskF+0x68>
		{
			while (UpIO) //等待上位机数据读写完成
 80017c4:	e002      	b.n	80017cc <UpTaskF+0x34>
			{
				osDelay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f009 f999 	bl	800aafe <osDelay>
			while (UpIO) //等待上位机数据读写完成
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <UpTaskF+0x130>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f7      	bne.n	80017c6 <UpTaskF+0x2e>
			}
			UpIO = 1; //正在读写上位机数据
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <UpTaskF+0x130>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART1RXLen; ++i)
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e008      	b.n	80017f4 <UpTaskF+0x5c>
			{
				UpCache[i] = UART1RXCache[i]; //存储上位机发来的数据
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	4937      	ldr	r1, [pc, #220]	; (80018c4 <UpTaskF+0x12c>)
 80017e8:	5c89      	ldrb	r1, [r1, r2]
 80017ea:	4a38      	ldr	r2, [pc, #224]	; (80018cc <UpTaskF+0x134>)
 80017ec:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART1RXLen; ++i)
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	3301      	adds	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b1d      	cmp	r3, #29
 80017f8:	d9f3      	bls.n	80017e2 <UpTaskF+0x4a>
			}
			UpIO = 0; //上位机数据读写完毕
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <UpTaskF+0x130>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <UpTaskF+0x138>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <UpTaskF+0x138>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0210 	orr.w	r2, r2, #16
 800180e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, UART1RXCache, UART1RXLen); //接收上位机发来的数据
 8001810:	221e      	movs	r2, #30
 8001812:	492c      	ldr	r1, [pc, #176]	; (80018c4 <UpTaskF+0x12c>)
 8001814:	482e      	ldr	r0, [pc, #184]	; (80018d0 <UpTaskF+0x138>)
 8001816:	f007 fb9f 	bl	8008f58 <HAL_UART_Receive_DMA>

		DownEn = 1; //允许下位仓通讯
 800181a:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <UpTaskF+0x13c>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
		if (SensorCabin)
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <UpTaskF+0x140>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <UpTaskF+0xd8>
		{
			while (DownIO) //等待下位仓串口读写完毕
 8001828:	e002      	b.n	8001830 <UpTaskF+0x98>
			{
				osDelay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f009 f967 	bl	800aafe <osDelay>
			while (DownIO) //等待下位仓串口读写完毕
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <UpTaskF+0x144>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f7      	bne.n	800182a <UpTaskF+0x92>
			}
			DownIO = 1; //下位仓串口正在读写
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <UpTaskF+0x144>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART1TXLen; ++i)
 8001840:	2300      	movs	r3, #0
 8001842:	73bb      	strb	r3, [r7, #14]
 8001844:	e008      	b.n	8001858 <UpTaskF+0xc0>
			{
				UART1TXCache_P[i] = DownCache[i]; //接收下位机回传的数据
 8001846:	7bba      	ldrb	r2, [r7, #14]
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	4925      	ldr	r1, [pc, #148]	; (80018e0 <UpTaskF+0x148>)
 800184c:	5c89      	ldrb	r1, [r1, r2]
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <UpTaskF+0x14c>)
 8001850:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART1TXLen; ++i)
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	73bb      	strb	r3, [r7, #14]
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	2b28      	cmp	r3, #40	; 0x28
 800185c:	d9f3      	bls.n	8001846 <UpTaskF+0xae>
			}
			DownIO = 0; //下位仓串口读写完毕
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <UpTaskF+0x144>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart1, UART1TXCache_P, UART1TXLen); //转发下位机数据给上位机
 8001864:	2229      	movs	r2, #41	; 0x29
 8001866:	491f      	ldr	r1, [pc, #124]	; (80018e4 <UpTaskF+0x14c>)
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <UpTaskF+0x138>)
 800186a:	f007 faf5 	bl	8008e58 <HAL_UART_Transmit_DMA>
 800186e:	e01c      	b.n	80018aa <UpTaskF+0x112>
		}
		else
		{
			/* 上传数据处理 */
			SendBack(WaterDetect, TemCache, BaroCache, HumCache,
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <UpTaskF+0x150>)
 8001872:	7818      	ldrb	r0, [r3, #0]
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <UpTaskF+0x154>)
 8001876:	8819      	ldrh	r1, [r3, #0]
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <UpTaskF+0x158>)
 800187a:	881c      	ldrh	r4, [r3, #0]
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <UpTaskF+0x15c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <UpTaskF+0x160>)
 8001882:	8812      	ldrh	r2, [r2, #0]
 8001884:	9205      	str	r2, [sp, #20]
 8001886:	9304      	str	r3, [sp, #16]
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <UpTaskF+0x164>)
 800188a:	9303      	str	r3, [sp, #12]
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <UpTaskF+0x168>)
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <UpTaskF+0x16c>)
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <UpTaskF+0x170>)
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4623      	mov	r3, r4
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <UpTaskF+0x174>)
 800189c:	f7ff f8f8 	bl	8000a90 <SendBack>
					AccelerationCache, RotSpeedCache, EulerAngleCache,
					MagnetisCache, WaterTempertureCache, DepthCache);
			HAL_UART_Transmit_DMA(&huart1, UART1TXCache_C, UART1TXLen);
 80018a0:	2229      	movs	r2, #41	; 0x29
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <UpTaskF+0x178>)
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <UpTaskF+0x138>)
 80018a6:	f007 fad7 	bl	8008e58 <HAL_UART_Transmit_DMA>
		}
		SensorCabin = ~SensorCabin; //每间隔一次任务执行一次上传数据处理
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <UpTaskF+0x140>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <UpTaskF+0x140>)
 80018b4:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 80018b6:	4817      	ldr	r0, [pc, #92]	; (8001914 <UpTaskF+0x17c>)
 80018b8:	f004 fc22 	bl	8006100 <HAL_IWDG_Refresh>
		while (!UpSideFinish) //等待上位机下传指令解析完毕
 80018bc:	e774      	b.n	80017a8 <UpTaskF+0x10>
 80018be:	bf00      	nop
 80018c0:	20000391 	.word	0x20000391
 80018c4:	200046f0 	.word	0x200046f0
 80018c8:	20000399 	.word	0x20000399
 80018cc:	200046a0 	.word	0x200046a0
 80018d0:	20004558 	.word	0x20004558
 80018d4:	2000039b 	.word	0x2000039b
 80018d8:	20000390 	.word	0x20000390
 80018dc:	2000039a 	.word	0x2000039a
 80018e0:	20004230 	.word	0x20004230
 80018e4:	20004924 	.word	0x20004924
 80018e8:	200003a0 	.word	0x200003a0
 80018ec:	200003c2 	.word	0x200003c2
 80018f0:	200003c8 	.word	0x200003c8
 80018f4:	200003cc 	.word	0x200003cc
 80018f8:	200003ca 	.word	0x200003ca
 80018fc:	200003bc 	.word	0x200003bc
 8001900:	200003b4 	.word	0x200003b4
 8001904:	200003ac 	.word	0x200003ac
 8001908:	200003a4 	.word	0x200003a4
 800190c:	200003c4 	.word	0x200003c4
 8001910:	200046c0 	.word	0x200046c0
 8001914:	20004218 	.word	0x20004218

08001918 <DownTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DownTaskF */
void DownTaskF(void const *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DownTaskF */
	while (!DownEn) //等待下位仓激活指令
 8001920:	e002      	b.n	8001928 <DownTaskF+0x10>
	{
		osDelay(1); //否则不会启动该任务
 8001922:	2001      	movs	r0, #1
 8001924:	f009 f8eb 	bl	800aafe <osDelay>
	while (!DownEn) //等待下位仓激活指令
 8001928:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <DownTaskF+0x14c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f8      	beq.n	8001922 <DownTaskF+0xa>
	}
	/* Infinite loop */
	for (;;)
	{
		/* 开启PID定向定深模式 */
		if (DownMoveDetect() == 2)
 8001930:	f7fe feb8 	bl	80006a4 <DownMoveDetect>
 8001934:	4603      	mov	r3, r0
 8001936:	2b02      	cmp	r3, #2
 8001938:	d113      	bne.n	8001962 <DownTaskF+0x4a>
		{
			if (DIPFlag == 0)
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <DownTaskF+0x150>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <DownTaskF+0x38>
			{
				DIPFlag = 1;
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <DownTaskF+0x150>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				DIPStartNum = EulerAngleCache[2];
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <DownTaskF+0x154>)
 800194a:	889a      	ldrh	r2, [r3, #4]
 800194c:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <DownTaskF+0x158>)
 800194e:	801a      	strh	r2, [r3, #0]
			}
			SpecialMovePID(2, DIPStartNum, EulerAngleCache[2]);
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <DownTaskF+0x158>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <DownTaskF+0x154>)
 8001956:	8892      	ldrh	r2, [r2, #4]
 8001958:	4619      	mov	r1, r3
 800195a:	2002      	movs	r0, #2
 800195c:	f7fe feb2 	bl	80006c4 <SpecialMovePID>
 8001960:	e01f      	b.n	80019a2 <DownTaskF+0x8a>
		}
		else if (DownMoveDetect() == 4)
 8001962:	f7fe fe9f 	bl	80006a4 <DownMoveDetect>
 8001966:	4603      	mov	r3, r0
 8001968:	2b04      	cmp	r3, #4
 800196a:	d113      	bne.n	8001994 <DownTaskF+0x7c>
		{
			if (DIPFlag == 0)
 800196c:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <DownTaskF+0x150>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <DownTaskF+0x6a>
			{
				DIPFlag = 1;
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <DownTaskF+0x150>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
				DIPStartNum = DepthCache;
 800197a:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <DownTaskF+0x15c>)
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <DownTaskF+0x158>)
 8001980:	801a      	strh	r2, [r3, #0]
			}
			SpecialMovePID(4, DIPStartNum, DepthCache);
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <DownTaskF+0x158>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <DownTaskF+0x15c>)
 8001988:	8812      	ldrh	r2, [r2, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	2004      	movs	r0, #4
 800198e:	f7fe fe99 	bl	80006c4 <SpecialMovePID>
 8001992:	e006      	b.n	80019a2 <DownTaskF+0x8a>
		}
		else
		{
			DIPFlag = 0; //不开启定向定深
 8001994:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <DownTaskF+0x150>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
		}

		/* 下位仓数据收发就是个傻任务透传就完事了 */
		/* 有一说一这还不如直接把上位仓的串口直接连到下位仓来得方便 */
		while (UpIO) //等待上位仓数据读写完毕
 800199a:	e002      	b.n	80019a2 <DownTaskF+0x8a>
		{
			osDelay(1);
 800199c:	2001      	movs	r0, #1
 800199e:	f009 f8ae 	bl	800aafe <osDelay>
		while (UpIO) //等待上位仓数据读写完毕
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <DownTaskF+0x160>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f7      	bne.n	800199c <DownTaskF+0x84>
		}
		UpIO = 1; //开始上位机数据读写
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <DownTaskF+0x160>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
		for (u8 i = 0; i < UART8TXLen; ++i) //向下位仓发送从上位机发来的指令数据
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e008      	b.n	80019ca <DownTaskF+0xb2>
		{
			UART8TXCache[i] = UpCache[i];
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	492f      	ldr	r1, [pc, #188]	; (8001a7c <DownTaskF+0x164>)
 80019be:	5c89      	ldrb	r1, [r1, r2]
 80019c0:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <DownTaskF+0x168>)
 80019c2:	54d1      	strb	r1, [r2, r3]
		for (u8 i = 0; i < UART8TXLen; ++i) //向下位仓发送从上位机发来的指令数据
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b1d      	cmp	r3, #29
 80019ce:	d9f3      	bls.n	80019b8 <DownTaskF+0xa0>
		}
		UpIO = 0; //上位仓数据读写完毕
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <DownTaskF+0x160>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart8, UART8TXCache, UART8TXLen); //开始发送数据
 80019d6:	221e      	movs	r2, #30
 80019d8:	4929      	ldr	r1, [pc, #164]	; (8001a80 <DownTaskF+0x168>)
 80019da:	482a      	ldr	r0, [pc, #168]	; (8001a84 <DownTaskF+0x16c>)
 80019dc:	f007 fa3c 	bl	8008e58 <HAL_UART_Transmit_DMA>

		while (!DownSideFinish) //等待下位仓通信处理完毕
 80019e0:	e002      	b.n	80019e8 <DownTaskF+0xd0>
		{
			osDelay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f009 f88b 	bl	800aafe <osDelay>
		while (!DownSideFinish) //等待下位仓通信处理完毕
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <DownTaskF+0x170>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f8      	beq.n	80019e2 <DownTaskF+0xca>
		}
		DownSideFinish = 0; //下位仓通信处理完毕
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <DownTaskF+0x170>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		if (IdTest(UART8RXCache, 1)) //校验下位仓发来的数据
 80019f6:	2101      	movs	r1, #1
 80019f8:	4824      	ldr	r0, [pc, #144]	; (8001a8c <DownTaskF+0x174>)
 80019fa:	f7ff f8f5 	bl	8000be8 <IdTest>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01d      	beq.n	8001a40 <DownTaskF+0x128>
		{
			while (DownIO) //等待下位仓数据读写完成
 8001a04:	e002      	b.n	8001a0c <DownTaskF+0xf4>
			{
				osDelay(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f009 f879 	bl	800aafe <osDelay>
			while (DownIO) //等待下位仓数据读写完成
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <DownTaskF+0x178>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f7      	bne.n	8001a06 <DownTaskF+0xee>
			}
			DownIO = 1; //开始下位仓数据读写
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <DownTaskF+0x178>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			for (u8 i = 0; i < UART8RXLen; ++i) //收取下位仓发来的数据到缓存区
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73bb      	strb	r3, [r7, #14]
 8001a20:	e008      	b.n	8001a34 <DownTaskF+0x11c>
			{
				DownCache[i] = UART8RXCache[i];
 8001a22:	7bba      	ldrb	r2, [r7, #14]
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	4919      	ldr	r1, [pc, #100]	; (8001a8c <DownTaskF+0x174>)
 8001a28:	5c89      	ldrb	r1, [r1, r2]
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <DownTaskF+0x17c>)
 8001a2c:	54d1      	strb	r1, [r2, r3]
			for (u8 i = 0; i < UART8RXLen; ++i) //收取下位仓发来的数据到缓存区
 8001a2e:	7bbb      	ldrb	r3, [r7, #14]
 8001a30:	3301      	adds	r3, #1
 8001a32:	73bb      	strb	r3, [r7, #14]
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	2b28      	cmp	r3, #40	; 0x28
 8001a38:	d9f3      	bls.n	8001a22 <DownTaskF+0x10a>
			}
			DownIO = 0; //下位仓数据读写完毕
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <DownTaskF+0x178>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_ENABLE_IT(&huart8, UART_IT_IDLE);
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <DownTaskF+0x16c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <DownTaskF+0x16c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0210 	orr.w	r2, r2, #16
 8001a4e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart8, UART8RXCache, UART8RXLen); //收取下位仓发来的串口数据
 8001a50:	2229      	movs	r2, #41	; 0x29
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <DownTaskF+0x174>)
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <DownTaskF+0x16c>)
 8001a56:	f007 fa7f 	bl	8008f58 <HAL_UART_Receive_DMA>
		HAL_IWDG_Refresh(&hiwdg1);
 8001a5a:	480f      	ldr	r0, [pc, #60]	; (8001a98 <DownTaskF+0x180>)
 8001a5c:	f004 fb50 	bl	8006100 <HAL_IWDG_Refresh>
		if (DownMoveDetect() == 2)
 8001a60:	e766      	b.n	8001930 <DownTaskF+0x18>
 8001a62:	bf00      	nop
 8001a64:	2000039b 	.word	0x2000039b
 8001a68:	2000039c 	.word	0x2000039c
 8001a6c:	200003b4 	.word	0x200003b4
 8001a70:	2000039e 	.word	0x2000039e
 8001a74:	200003ca 	.word	0x200003ca
 8001a78:	20000399 	.word	0x20000399
 8001a7c:	200046a0 	.word	0x200046a0
 8001a80:	200048fc 	.word	0x200048fc
 8001a84:	20004710 	.word	0x20004710
 8001a88:	20000392 	.word	0x20000392
 8001a8c:	20004674 	.word	0x20004674
 8001a90:	2000039a 	.word	0x2000039a
 8001a94:	20004230 	.word	0x20004230
 8001a98:	20004218 	.word	0x20004218

08001a9c <InitialTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_InitialTaskF */
void InitialTaskF(void const *argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN InitialTaskF */
	//挂起任务防止初始化进程被打断
	vTaskSuspend(SensorTaskHandle);
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <InitialTaskF+0x80>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f009 fab7 	bl	800b01c <vTaskSuspend>
	vTaskSuspend(UpTaskHandle);
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <InitialTaskF+0x84>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f009 fab2 	bl	800b01c <vTaskSuspend>
	vTaskSuspend(DownTaskHandle);
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <InitialTaskF+0x88>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 faad 	bl	800b01c <vTaskSuspend>
	//初始化下位机
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <InitialTaskF+0x8c>)
 8001ac8:	f004 fab2 	bl	8006030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4815      	ldr	r0, [pc, #84]	; (8001b28 <InitialTaskF+0x8c>)
 8001ad2:	f004 faad 	bl	8006030 <HAL_GPIO_WritePin>
	//初始化回传指针
	SendBackPoint(UART1TXCache_C, &DeepIO, &WT931IO, &GY39IO);
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <InitialTaskF+0x90>)
 8001ad8:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <InitialTaskF+0x94>)
 8001ada:	4916      	ldr	r1, [pc, #88]	; (8001b34 <InitialTaskF+0x98>)
 8001adc:	4816      	ldr	r0, [pc, #88]	; (8001b38 <InitialTaskF+0x9c>)
 8001ade:	f7fe ff3f 	bl	8000960 <SendBackPoint>
	//初始化下传数据读取指针
	DownDetectPoint(UpCache);
 8001ae2:	4816      	ldr	r0, [pc, #88]	; (8001b3c <InitialTaskF+0xa0>)
 8001ae4:	f7fe fd78 	bl	80005d8 <DownDetectPoint>
	//先开启上传任务和传感器处理任务
	vTaskResume(UpTaskHandle);
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <InitialTaskF+0x84>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f009 fb59 	bl	800b1a4 <vTaskResume>
	vTaskResume(SensorTaskHandle);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <InitialTaskF+0x80>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f009 fb54 	bl	800b1a4 <vTaskResume>
	//然后喂狗
	HAL_IWDG_Refresh(&hiwdg1);
 8001afc:	4810      	ldr	r0, [pc, #64]	; (8001b40 <InitialTaskF+0xa4>)
 8001afe:	f004 faff 	bl	8006100 <HAL_IWDG_Refresh>
	//挂起初始化任务不再执行
	vTaskSuspend(InitialTaskHandle);
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <InitialTaskF+0xa8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f009 fa88 	bl	800b01c <vTaskSuspend>
	/* Infinite loop */
	for (;;)
	{
		HAL_IWDG_Refresh(&hiwdg1);
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <InitialTaskF+0xa4>)
 8001b0e:	f004 faf7 	bl	8006100 <HAL_IWDG_Refresh>
		osDelay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f008 fff3 	bl	800aafe <osDelay>
		HAL_IWDG_Refresh(&hiwdg1);
 8001b18:	e7f8      	b.n	8001b0c <InitialTaskF+0x70>
 8001b1a:	bf00      	nop
 8001b1c:	20004124 	.word	0x20004124
 8001b20:	200046ec 	.word	0x200046ec
 8001b24:	2000491c 	.word	0x2000491c
 8001b28:	58021000 	.word	0x58021000
 8001b2c:	20000397 	.word	0x20000397
 8001b30:	20000398 	.word	0x20000398
 8001b34:	20000396 	.word	0x20000396
 8001b38:	200046c0 	.word	0x200046c0
 8001b3c:	200046a0 	.word	0x200046a0
 8001b40:	20004218 	.word	0x20004218
 8001b44:	20004920 	.word	0x20004920

08001b48 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN SensorTaskF */
	//初始化九轴对应DMA
	WT931Point(UART3RXCache);
 8001b50:	484c      	ldr	r0, [pc, #304]	; (8001c84 <SensorTaskF+0x13c>)
 8001b52:	f7ff f8c3 	bl	8000cdc <WT931Point>
	//初始化温湿度气压传感器对应DMA，并发送初始化数据
	GY39InitStr(UART2TXCache);
 8001b56:	484c      	ldr	r0, [pc, #304]	; (8001c88 <SensorTaskF+0x140>)
 8001b58:	f7ff f96e 	bl	8000e38 <GY39InitStr>
	HAL_UART_Transmit_DMA(&huart2, UART2TXCache, UART2TXLen);
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	494a      	ldr	r1, [pc, #296]	; (8001c88 <SensorTaskF+0x140>)
 8001b60:	484a      	ldr	r0, [pc, #296]	; (8001c8c <SensorTaskF+0x144>)
 8001b62:	f007 f979 	bl	8008e58 <HAL_UART_Transmit_DMA>
	GY39Point(UART2RXCache);
 8001b66:	484a      	ldr	r0, [pc, #296]	; (8001c90 <SensorTaskF+0x148>)
 8001b68:	f7ff f97c 	bl	8000e64 <GY39Point>
	//初始化深度传感器对应DMA
	DeepPoint(UART4TXCache);
 8001b6c:	4849      	ldr	r0, [pc, #292]	; (8001c94 <SensorTaskF+0x14c>)
 8001b6e:	f7ff f885 	bl	8000c7c <DeepPoint>
	/* Infinite loop */
	for (;;)
	{
		WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6); //检测漏水
 8001b72:	2140      	movs	r1, #64	; 0x40
 8001b74:	4848      	ldr	r0, [pc, #288]	; (8001c98 <SensorTaskF+0x150>)
 8001b76:	f004 fa43 	bl	8006000 <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <SensorTaskF+0x154>)
 8001b80:	701a      	strb	r2, [r3, #0]

		if (WT931Finish) //等待九轴传感器数据解析完成
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <SensorTaskF+0x158>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d028      	beq.n	8001bdc <SensorTaskF+0x94>
		{
			while (WT931IO) //等待九轴传感器数据读写完毕
 8001b8a:	e002      	b.n	8001b92 <SensorTaskF+0x4a>
			{
				osDelay(1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f008 ffb6 	bl	800aafe <osDelay>
			while (WT931IO) //等待九轴传感器数据读写完毕
 8001b92:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <SensorTaskF+0x15c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f7      	bne.n	8001b8c <SensorTaskF+0x44>
			}
			WT931IO = 1; //正在读写传感器数据
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <SensorTaskF+0x15c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
			if (WT931Len == 44) //检查读取到的传感器数据长度
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <SensorTaskF+0x160>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba8:	d105      	bne.n	8001bb6 <SensorTaskF+0x6e>
			{
				WT931Take(AccelerationCache, RotSpeedCache, EulerAngleCache,
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <SensorTaskF+0x164>)
 8001bac:	4a40      	ldr	r2, [pc, #256]	; (8001cb0 <SensorTaskF+0x168>)
 8001bae:	4941      	ldr	r1, [pc, #260]	; (8001cb4 <SensorTaskF+0x16c>)
 8001bb0:	4841      	ldr	r0, [pc, #260]	; (8001cb8 <SensorTaskF+0x170>)
 8001bb2:	f7ff f8e7 	bl	8000d84 <WT931Take>
						MagnetisCache); //解析九轴数据
			}
			WT931Finish = 0; //传感器数据解析完成
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <SensorTaskF+0x158>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, UART3RXCache, UART2RXLen);
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	4931      	ldr	r1, [pc, #196]	; (8001c84 <SensorTaskF+0x13c>)
 8001bc0:	483e      	ldr	r0, [pc, #248]	; (8001cbc <SensorTaskF+0x174>)
 8001bc2:	f007 f9c9 	bl	8008f58 <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <SensorTaskF+0x174>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <SensorTaskF+0x174>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0210 	orr.w	r2, r2, #16
 8001bd4:	601a      	str	r2, [r3, #0]
			WT931IO = 0; //传感器数据读写完毕
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <SensorTaskF+0x15c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
		}
		if (GY39Finish) //等待温湿度大气压传感器数据解析完成
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <SensorTaskF+0x178>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d023      	beq.n	8001c2c <SensorTaskF+0xe4>
		{
			while (GY39IO) //等待传感器数据读写完成
 8001be4:	e002      	b.n	8001bec <SensorTaskF+0xa4>
			{
				osDelay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f008 ff89 	bl	800aafe <osDelay>
			while (GY39IO) //等待传感器数据读写完成
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <SensorTaskF+0x17c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f7      	bne.n	8001be6 <SensorTaskF+0x9e>
			}
			GY39IO = 1; //正在读写传感器数据
 8001bf6:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <SensorTaskF+0x17c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
			GY39Take(&TemCache, BaroCache, &HumCache); //解析温湿度大气压传感器数据
 8001bfc:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <SensorTaskF+0x180>)
 8001bfe:	4933      	ldr	r1, [pc, #204]	; (8001ccc <SensorTaskF+0x184>)
 8001c00:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <SensorTaskF+0x188>)
 8001c02:	f7ff f94f 	bl	8000ea4 <GY39Take>
			GY39Finish = 0; //传感器数据解析完成
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <SensorTaskF+0x178>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, UART2RXCache, UART2RXLen);
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	4920      	ldr	r1, [pc, #128]	; (8001c90 <SensorTaskF+0x148>)
 8001c10:	481e      	ldr	r0, [pc, #120]	; (8001c8c <SensorTaskF+0x144>)
 8001c12:	f007 f9a1 	bl	8008f58 <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <SensorTaskF+0x144>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <SensorTaskF+0x144>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0210 	orr.w	r2, r2, #16
 8001c24:	601a      	str	r2, [r3, #0]
			GY39IO = 0; //传感器数据读写完毕
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <SensorTaskF+0x17c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
		}
		if (DeepFinish) //等待深度传感器数据解析完成
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <SensorTaskF+0x18c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d022      	beq.n	8001c7a <SensorTaskF+0x132>
		{
			while (DeepIO) //等待传感器数据读写完成
 8001c34:	e002      	b.n	8001c3c <SensorTaskF+0xf4>
			{
				osDelay(1);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f008 ff61 	bl	800aafe <osDelay>
			while (DeepIO) //等待传感器数据读写完成
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <SensorTaskF+0x190>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f7      	bne.n	8001c36 <SensorTaskF+0xee>
			}
			DeepIO = 1; //正在读写传感器数据
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <SensorTaskF+0x190>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
			DeepTake(&DepthCache, &WaterTempertureCache); //解析深度传感器数据
 8001c4c:	4923      	ldr	r1, [pc, #140]	; (8001cdc <SensorTaskF+0x194>)
 8001c4e:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <SensorTaskF+0x198>)
 8001c50:	f7ff f82a 	bl	8000ca8 <DeepTake>
			DeepFinish = 0; //传感器数据解析完成
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <SensorTaskF+0x18c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, UART4RXCache, UART4RXLen);
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4921      	ldr	r1, [pc, #132]	; (8001ce4 <SensorTaskF+0x19c>)
 8001c5e:	4822      	ldr	r0, [pc, #136]	; (8001ce8 <SensorTaskF+0x1a0>)
 8001c60:	f007 f97a 	bl	8008f58 <HAL_UART_Receive_DMA>
			__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <SensorTaskF+0x1a0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <SensorTaskF+0x1a0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0210 	orr.w	r2, r2, #16
 8001c72:	601a      	str	r2, [r3, #0]
			DeepIO = 0; //传感器数据读写完毕
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <SensorTaskF+0x190>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001c7a:	481c      	ldr	r0, [pc, #112]	; (8001cec <SensorTaskF+0x1a4>)
 8001c7c:	f004 fa40 	bl	8006100 <HAL_IWDG_Refresh>
		WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6); //检测漏水
 8001c80:	e777      	b.n	8001b72 <SensorTaskF+0x2a>
 8001c82:	bf00      	nop
 8001c84:	200047a0 	.word	0x200047a0
 8001c88:	2000422c 	.word	0x2000422c
 8001c8c:	2000486c 	.word	0x2000486c
 8001c90:	20004364 	.word	0x20004364
 8001c94:	200045e8 	.word	0x200045e8
 8001c98:	58021000 	.word	0x58021000
 8001c9c:	200003a0 	.word	0x200003a0
 8001ca0:	20000395 	.word	0x20000395
 8001ca4:	20000398 	.word	0x20000398
 8001ca8:	200003ce 	.word	0x200003ce
 8001cac:	200003bc 	.word	0x200003bc
 8001cb0:	200003b4 	.word	0x200003b4
 8001cb4:	200003ac 	.word	0x200003ac
 8001cb8:	200003a4 	.word	0x200003a4
 8001cbc:	200042d4 	.word	0x200042d4
 8001cc0:	20000394 	.word	0x20000394
 8001cc4:	20000397 	.word	0x20000397
 8001cc8:	200003c8 	.word	0x200003c8
 8001ccc:	200003c4 	.word	0x200003c4
 8001cd0:	200003c2 	.word	0x200003c2
 8001cd4:	20000393 	.word	0x20000393
 8001cd8:	20000396 	.word	0x20000396
 8001cdc:	200003cc 	.word	0x200003cc
 8001ce0:	200003ca 	.word	0x200003ca
 8001ce4:	20004228 	.word	0x20004228
 8001ce8:	200047dc 	.word	0x200047dc
 8001cec:	20004218 	.word	0x20004218

08001cf0 <EmptyTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EmptyTaskF */
void EmptyTaskF(void const *argument)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EmptyTaskF */
	/* Infinite loop */
	for (;;)
	{
		HAL_IWDG_Refresh(&hiwdg1); //空闲时喂狗
 8001cf8:	4801      	ldr	r0, [pc, #4]	; (8001d00 <EmptyTaskF+0x10>)
 8001cfa:	f004 fa01 	bl	8006100 <HAL_IWDG_Refresh>
 8001cfe:	e7fb      	b.n	8001cf8 <EmptyTaskF+0x8>
 8001d00:	20004218 	.word	0x20004218

08001d04 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001d16:	f001 f871 	bl	8002dfc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40001000 	.word	0x40001000

08001d28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>
	...

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x38>)
 8001d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_MspInit+0x38>)
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_MspInit+0x38>)
 8001d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f06f 0001 	mvn.w	r0, #1
 8001d60:	f001 f930 	bl	8002fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58024400 	.word	0x58024400

08001d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b092      	sub	sp, #72	; 0x48
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a95      	ldr	r2, [pc, #596]	; (8001fe4 <HAL_UART_MspInit+0x274>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	f040 8091 	bne.w	8001eb6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d94:	4b94      	ldr	r3, [pc, #592]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d9a:	4a93      	ldr	r2, [pc, #588]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001da4:	4b90      	ldr	r3, [pc, #576]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001de0:	2308      	movs	r3, #8
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001de8:	4619      	mov	r1, r3
 8001dea:	4880      	ldr	r0, [pc, #512]	; (8001fec <HAL_UART_MspInit+0x27c>)
 8001dec:	f003 ff58 	bl	8005ca0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream4;
 8001df0:	4b7f      	ldr	r3, [pc, #508]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001df2:	4a80      	ldr	r2, [pc, #512]	; (8001ff4 <HAL_UART_MspInit+0x284>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001df6:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e02:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e10:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e1c:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e22:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e28:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e2e:	4870      	ldr	r0, [pc, #448]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e30:	f001 f8f0 	bl	8003014 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e3a:	f7ff ff75 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a6b      	ldr	r2, [pc, #428]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e42:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e44:	4a6a      	ldr	r2, [pc, #424]	; (8001ff0 <HAL_UART_MspInit+0x280>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream5;
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	; (8001ffc <HAL_UART_MspInit+0x28c>)
 8001e4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001e50:	4b69      	ldr	r3, [pc, #420]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e56:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e58:	2240      	movs	r2, #64	; 0x40
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001e76:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001e88:	485b      	ldr	r0, [pc, #364]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e8a:	f001 f8c3 	bl	8003014 <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001e94:	f7ff ff48 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001e9c:	679a      	str	r2, [r3, #120]	; 0x78
 8001e9e:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_UART_MspInit+0x288>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2105      	movs	r1, #5
 8001ea8:	2034      	movs	r0, #52	; 0x34
 8001eaa:	f001 f88b 	bl	8002fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001eae:	2034      	movs	r0, #52	; 0x34
 8001eb0:	f001 f8a2 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb4:	e263      	b.n	800237e <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==UART8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_UART_MspInit+0x290>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f040 80ab 	bne.w	8002018 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec8:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ece:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ed2:	4b45      	ldr	r3, [pc, #276]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001ee8:	f043 0310 	orr.w	r3, r3, #16
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef0:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <HAL_UART_MspInit+0x278>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efe:	2303      	movs	r3, #3
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f0e:	2308      	movs	r3, #8
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f16:	4619      	mov	r1, r3
 8001f18:	483a      	ldr	r0, [pc, #232]	; (8002004 <HAL_UART_MspInit+0x294>)
 8001f1a:	f003 fec1 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <HAL_UART_MspInit+0x29c>)
 8001f22:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001f24:	4b38      	ldr	r3, [pc, #224]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f26:	2251      	movs	r2, #81	; 0x51
 8001f28:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3c:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f5e:	f001 f859 	bl	8003014 <HAL_DMA_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001f68:	f7ff fede 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f70:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f72:	4a25      	ldr	r2, [pc, #148]	; (8002008 <HAL_UART_MspInit+0x298>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream7;
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001f7a:	4a26      	ldr	r2, [pc, #152]	; (8002014 <HAL_UART_MspInit+0x2a4>)
 8001f7c:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001f80:	2252      	movs	r2, #82	; 0x52
 8001f82:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f96:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001fb6:	4816      	ldr	r0, [pc, #88]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fb8:	f001 f82c 	bl	8003014 <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8001fc2:	f7ff feb1 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fca:	679a      	str	r2, [r3, #120]	; 0x78
 8001fcc:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_UART_MspInit+0x2a0>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2105      	movs	r1, #5
 8001fd6:	2053      	movs	r0, #83	; 0x53
 8001fd8:	f000 fff4 	bl	8002fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001fdc:	2053      	movs	r0, #83	; 0x53
 8001fde:	f001 f80b 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
}
 8001fe2:	e1cc      	b.n	800237e <HAL_UART_MspInit+0x60e>
 8001fe4:	40004c00 	.word	0x40004c00
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58020000 	.word	0x58020000
 8001ff0:	20004128 	.word	0x20004128
 8001ff4:	40020070 	.word	0x40020070
 8001ff8:	20004950 	.word	0x20004950
 8001ffc:	40020088 	.word	0x40020088
 8002000:	40007c00 	.word	0x40007c00
 8002004:	58021000 	.word	0x58021000
 8002008:	200044e0 	.word	0x200044e0
 800200c:	400200a0 	.word	0x400200a0
 8002010:	200045fc 	.word	0x200045fc
 8002014:	400200b8 	.word	0x400200b8
  else if(huart->Instance==USART1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a96      	ldr	r2, [pc, #600]	; (8002278 <HAL_UART_MspInit+0x508>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f040 8092 	bne.w	8002148 <HAL_UART_MspInit+0x3d8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002024:	4b95      	ldr	r3, [pc, #596]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800202a:	4a94      	ldr	r2, [pc, #592]	; (800227c <HAL_UART_MspInit+0x50c>)
 800202c:	f043 0310 	orr.w	r3, r3, #16
 8002030:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002034:	4b91      	ldr	r3, [pc, #580]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b8e      	ldr	r3, [pc, #568]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	4a8c      	ldr	r2, [pc, #560]	; (800227c <HAL_UART_MspInit+0x50c>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002052:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002060:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002072:	2304      	movs	r3, #4
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800207a:	4619      	mov	r1, r3
 800207c:	4880      	ldr	r0, [pc, #512]	; (8002280 <HAL_UART_MspInit+0x510>)
 800207e:	f003 fe0f 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002082:	4b80      	ldr	r3, [pc, #512]	; (8002284 <HAL_UART_MspInit+0x514>)
 8002084:	4a80      	ldr	r2, [pc, #512]	; (8002288 <HAL_UART_MspInit+0x518>)
 8002086:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002088:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <HAL_UART_MspInit+0x514>)
 800208a:	2229      	movs	r2, #41	; 0x29
 800208c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208e:	4b7d      	ldr	r3, [pc, #500]	; (8002284 <HAL_UART_MspInit+0x514>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002094:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <HAL_UART_MspInit+0x514>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209a:	4b7a      	ldr	r3, [pc, #488]	; (8002284 <HAL_UART_MspInit+0x514>)
 800209c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a2:	4b78      	ldr	r3, [pc, #480]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020ae:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b73      	ldr	r3, [pc, #460]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ba:	4b72      	ldr	r3, [pc, #456]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020c0:	4870      	ldr	r0, [pc, #448]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020c2:	f000 ffa7 	bl	8003014 <HAL_DMA_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0x360>
      Error_Handler();
 80020cc:	f7ff fe2c 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a6c      	ldr	r2, [pc, #432]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80020d6:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <HAL_UART_MspInit+0x514>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80020dc:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_UART_MspInit+0x51c>)
 80020de:	4a6c      	ldr	r2, [pc, #432]	; (8002290 <HAL_UART_MspInit+0x520>)
 80020e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020e2:	4b6a      	ldr	r3, [pc, #424]	; (800228c <HAL_UART_MspInit+0x51c>)
 80020e4:	222a      	movs	r2, #42	; 0x2a
 80020e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_UART_MspInit+0x51c>)
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ee:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_UART_MspInit+0x51c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f4:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_UART_MspInit+0x51c>)
 80020f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fc:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_UART_MspInit+0x51c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_UART_MspInit+0x51c>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_UART_MspInit+0x51c>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_UART_MspInit+0x51c>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002114:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_UART_MspInit+0x51c>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800211a:	485c      	ldr	r0, [pc, #368]	; (800228c <HAL_UART_MspInit+0x51c>)
 800211c:	f000 ff7a 	bl	8003014 <HAL_DMA_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8002126:	f7ff fdff 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_UART_MspInit+0x51c>)
 800212e:	679a      	str	r2, [r3, #120]	; 0x78
 8002130:	4a56      	ldr	r2, [pc, #344]	; (800228c <HAL_UART_MspInit+0x51c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2105      	movs	r1, #5
 800213a:	2025      	movs	r0, #37	; 0x25
 800213c:	f000 ff42 	bl	8002fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002140:	2025      	movs	r0, #37	; 0x25
 8002142:	f000 ff59 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
}
 8002146:	e11a      	b.n	800237e <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a51      	ldr	r2, [pc, #324]	; (8002294 <HAL_UART_MspInit+0x524>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f040 80ac 	bne.w	80022ac <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002154:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215a:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_UART_MspInit+0x50c>)
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002164:	4b45      	ldr	r3, [pc, #276]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b42      	ldr	r3, [pc, #264]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a40      	ldr	r2, [pc, #256]	; (800227c <HAL_UART_MspInit+0x50c>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_UART_MspInit+0x50c>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002190:	230c      	movs	r3, #12
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a0:	2307      	movs	r3, #7
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a8:	4619      	mov	r1, r3
 80021aa:	483b      	ldr	r0, [pc, #236]	; (8002298 <HAL_UART_MspInit+0x528>)
 80021ac:	f003 fd78 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_UART_MspInit+0x530>)
 80021b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021b8:	222b      	movs	r2, #43	; 0x2b
 80021ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021bc:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c8:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021ee:	482b      	ldr	r0, [pc, #172]	; (800229c <HAL_UART_MspInit+0x52c>)
 80021f0:	f000 ff10 	bl	8003014 <HAL_DMA_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_UART_MspInit+0x48e>
      Error_Handler();
 80021fa:	f7ff fd95 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <HAL_UART_MspInit+0x52c>)
 8002202:	67da      	str	r2, [r3, #124]	; 0x7c
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <HAL_UART_MspInit+0x52c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream0;
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_UART_MspInit+0x534>)
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <HAL_UART_MspInit+0x538>)
 800220e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002212:	222c      	movs	r2, #44	; 0x2c
 8002214:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_UART_MspInit+0x534>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002228:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_UART_MspInit+0x534>)
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002232:	2200      	movs	r2, #0
 8002234:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002238:	2200      	movs	r2, #0
 800223a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_UART_MspInit+0x534>)
 800223e:	2200      	movs	r2, #0
 8002240:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002248:	4816      	ldr	r0, [pc, #88]	; (80022a4 <HAL_UART_MspInit+0x534>)
 800224a:	f000 fee3 	bl	8003014 <HAL_DMA_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0x4e8>
      Error_Handler();
 8002254:	f7ff fd68 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_UART_MspInit+0x534>)
 800225c:	679a      	str	r2, [r3, #120]	; 0x78
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_UART_MspInit+0x534>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2105      	movs	r1, #5
 8002268:	2026      	movs	r0, #38	; 0x26
 800226a:	f000 feab 	bl	8002fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800226e:	2026      	movs	r0, #38	; 0x26
 8002270:	f000 fec2 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
}
 8002274:	e083      	b.n	800237e <HAL_UART_MspInit+0x60e>
 8002276:	bf00      	nop
 8002278:	40011000 	.word	0x40011000
 800227c:	58024400 	.word	0x58024400
 8002280:	58020400 	.word	0x58020400
 8002284:	200043f0 	.word	0x200043f0
 8002288:	40020010 	.word	0x40020010
 800228c:	20004378 	.word	0x20004378
 8002290:	40020028 	.word	0x40020028
 8002294:	40004400 	.word	0x40004400
 8002298:	58020000 	.word	0x58020000
 800229c:	200041a0 	.word	0x200041a0
 80022a0:	40020040 	.word	0x40020040
 80022a4:	20004468 	.word	0x20004468
 80022a8:	40020410 	.word	0x40020410
  else if(huart->Instance==USART3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a35      	ldr	r2, [pc, #212]	; (8002388 <HAL_UART_MspInit+0x618>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d163      	bne.n	800237e <HAL_UART_MspInit+0x60e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b6:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_UART_MspInit+0x61c>)
 80022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022bc:	4a33      	ldr	r2, [pc, #204]	; (800238c <HAL_UART_MspInit+0x61c>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_UART_MspInit+0x61c>)
 80022c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_UART_MspInit+0x61c>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	4a2c      	ldr	r2, [pc, #176]	; (800238c <HAL_UART_MspInit+0x61c>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_UART_MspInit+0x61c>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002304:	2307      	movs	r3, #7
 8002306:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800230c:	4619      	mov	r1, r3
 800230e:	4820      	ldr	r0, [pc, #128]	; (8002390 <HAL_UART_MspInit+0x620>)
 8002310:	f003 fcc6 	bl	8005ca0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002316:	4a20      	ldr	r2, [pc, #128]	; (8002398 <HAL_UART_MspInit+0x628>)
 8002318:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_UART_MspInit+0x624>)
 800231c:	222d      	movs	r2, #45	; 0x2d
 800231e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_UART_MspInit+0x624>)
 800232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002332:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_UART_MspInit+0x624>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_UART_MspInit+0x624>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002352:	4810      	ldr	r0, [pc, #64]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002354:	f000 fe5e 	bl	8003014 <HAL_DMA_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 800235e:	f7ff fce3 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_UART_MspInit+0x624>)
 8002366:	67da      	str	r2, [r3, #124]	; 0x7c
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_UART_MspInit+0x624>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2105      	movs	r1, #5
 8002372:	2027      	movs	r0, #39	; 0x27
 8002374:	f000 fe26 	bl	8002fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002378:	2027      	movs	r0, #39	; 0x27
 800237a:	f000 fe3d 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3748      	adds	r7, #72	; 0x48
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40004800 	.word	0x40004800
 800238c:	58024400 	.word	0x58024400
 8002390:	58020400 	.word	0x58020400
 8002394:	2000425c 	.word	0x2000425c
 8002398:	40020058 	.word	0x40020058

0800239c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b090      	sub	sp, #64	; 0x40
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	d827      	bhi.n	80023fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80023aa:	2200      	movs	r2, #0
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	2036      	movs	r0, #54	; 0x36
 80023b0:	f000 fe08 	bl	8002fc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b4:	2036      	movs	r0, #54	; 0x36
 80023b6:	f000 fe1f 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023ba:	4a29      	ldr	r2, [pc, #164]	; (8002460 <HAL_InitTick+0xc4>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <HAL_InitTick+0xc8>)
 80023c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023c6:	4a27      	ldr	r2, [pc, #156]	; (8002464 <HAL_InitTick+0xc8>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_InitTick+0xc8>)
 80023d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023de:	f107 0210 	add.w	r2, r7, #16
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f004 fe6f 	bl	80070cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_InitTick+0x6a>
 80023f8:	e001      	b.n	80023fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e02b      	b.n	8002456 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023fe:	f004 fe39 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 8002402:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002404:	e004      	b.n	8002410 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002406:	f004 fe35 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800240a:	4603      	mov	r3, r0
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_InitTick+0xcc>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9b      	lsrs	r3, r3, #18
 800241a:	3b01      	subs	r3, #1
 800241c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_InitTick+0xd0>)
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <HAL_InitTick+0xd4>)
 8002422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_InitTick+0xd0>)
 8002426:	f240 32e7 	movw	r2, #999	; 0x3e7
 800242a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_InitTick+0xd0>)
 800242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002430:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_InitTick+0xd0>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_InitTick+0xd0>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800243e:	480b      	ldr	r0, [pc, #44]	; (800246c <HAL_InitTick+0xd0>)
 8002440:	f006 f9e8 	bl	8008814 <HAL_TIM_Base_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <HAL_InitTick+0xd0>)
 800244c:	f006 fa44 	bl	80088d8 <HAL_TIM_Base_Start_IT>
 8002450:	4603      	mov	r3, r0
 8002452:	e000      	b.n	8002456 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	3740      	adds	r7, #64	; 0x40
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	58024400 	.word	0x58024400
 8002468:	431bde83 	.word	0x431bde83
 800246c:	200049c8 	.word	0x200049c8
 8002470:	40001000 	.word	0x40001000

08002474 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002478:	e7fe      	b.n	8002478 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800247e:	e7fe      	b.n	800247e <HardFault_Handler+0x4>

08002480 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002484:	e7fe      	b.n	8002484 <MemManage_Handler+0x4>

08002486 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800248a:	e7fe      	b.n	800248a <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002490:	e7fe      	b.n	8002490 <UsageFault_Handler+0x4>

08002492 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA1_Stream0_IRQHandler+0x10>)
 80024a6:	f002 f8dd 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200043f0 	.word	0x200043f0

080024b4 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <DMA1_Stream1_IRQHandler+0x10>)
 80024ba:	f002 f8d3 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20004378 	.word	0x20004378

080024c8 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Stream2_IRQHandler+0x10>)
 80024ce:	f002 f8c9 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200041a0 	.word	0x200041a0

080024dc <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA1_Stream3_IRQHandler+0x10>)
 80024e2:	f002 f8bf 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000425c 	.word	0x2000425c

080024f0 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <DMA1_Stream4_IRQHandler+0x10>)
 80024f6:	f002 f8b5 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20004128 	.word	0x20004128

08002504 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <DMA1_Stream5_IRQHandler+0x10>)
 800250a:	f002 f8ab 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20004950 	.word	0x20004950

08002518 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DMA1_Stream6_IRQHandler+0x10>)
 800251e:	f002 f8a1 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200044e0 	.word	0x200044e0

0800252c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <USART1_IRQHandler+0x108>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b10      	cmp	r3, #16
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d068      	beq.n	8002624 <USART1_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <USART1_IRQHandler+0x108>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 800255a:	4836      	ldr	r0, [pc, #216]	; (8002634 <USART1_IRQHandler+0x108>)
 800255c:	f006 fd42 	bl	8008fe4 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <USART1_IRQHandler+0x10c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a35      	ldr	r2, [pc, #212]	; (800263c <USART1_IRQHandler+0x110>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04a      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 800256a:	4b33      	ldr	r3, [pc, #204]	; (8002638 <USART1_IRQHandler+0x10c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a34      	ldr	r2, [pc, #208]	; (8002640 <USART1_IRQHandler+0x114>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d045      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <USART1_IRQHandler+0x10c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a32      	ldr	r2, [pc, #200]	; (8002644 <USART1_IRQHandler+0x118>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d040      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <USART1_IRQHandler+0x10c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <USART1_IRQHandler+0x11c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d03b      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <USART1_IRQHandler+0x10c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2f      	ldr	r2, [pc, #188]	; (800264c <USART1_IRQHandler+0x120>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d036      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <USART1_IRQHandler+0x10c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <USART1_IRQHandler+0x124>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 800259c:	4b26      	ldr	r3, [pc, #152]	; (8002638 <USART1_IRQHandler+0x10c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <USART1_IRQHandler+0x128>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02c      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <USART1_IRQHandler+0x12c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d027      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <USART1_IRQHandler+0x130>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a28      	ldr	r2, [pc, #160]	; (8002660 <USART1_IRQHandler+0x134>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01d      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <USART1_IRQHandler+0x138>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <USART1_IRQHandler+0x13c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <USART1_IRQHandler+0x140>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <USART1_IRQHandler+0x144>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <USART1_IRQHandler+0x148>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <USART1_IRQHandler+0xd4>
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <USART1_IRQHandler+0x10c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <USART1_IRQHandler+0x14c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d103      	bne.n	8002608 <USART1_IRQHandler+0xdc>
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <USART1_IRQHandler+0x10c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	e002      	b.n	800260e <USART1_IRQHandler+0xe2>
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <USART1_IRQHandler+0x10c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <USART1_IRQHandler+0x108>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <USART1_IRQHandler+0x108>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0210 	bic.w	r2, r2, #16
 800261c:	601a      	str	r2, [r3, #0]
		UpSideFinish = 1;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <USART1_IRQHandler+0x150>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <USART1_IRQHandler+0x108>)
 8002626:	f006 fd4d 	bl	80090c4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20004558 	.word	0x20004558
 8002638:	200043f0 	.word	0x200043f0
 800263c:	40020010 	.word	0x40020010
 8002640:	40020028 	.word	0x40020028
 8002644:	40020040 	.word	0x40020040
 8002648:	40020058 	.word	0x40020058
 800264c:	40020070 	.word	0x40020070
 8002650:	40020088 	.word	0x40020088
 8002654:	400200a0 	.word	0x400200a0
 8002658:	400200b8 	.word	0x400200b8
 800265c:	40020410 	.word	0x40020410
 8002660:	40020428 	.word	0x40020428
 8002664:	40020440 	.word	0x40020440
 8002668:	40020458 	.word	0x40020458
 800266c:	40020470 	.word	0x40020470
 8002670:	40020488 	.word	0x40020488
 8002674:	400204a0 	.word	0x400204a0
 8002678:	400204b8 	.word	0x400204b8
 800267c:	20000391 	.word	0x20000391

08002680 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <USART2_IRQHandler+0x108>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d068      	beq.n	8002778 <USART2_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <USART2_IRQHandler+0x108>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2210      	movs	r2, #16
 80026ac:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 80026ae:	4836      	ldr	r0, [pc, #216]	; (8002788 <USART2_IRQHandler+0x108>)
 80026b0:	f006 fc98 	bl	8008fe4 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <USART2_IRQHandler+0x10c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a35      	ldr	r2, [pc, #212]	; (8002790 <USART2_IRQHandler+0x110>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04a      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <USART2_IRQHandler+0x10c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a34      	ldr	r2, [pc, #208]	; (8002794 <USART2_IRQHandler+0x114>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d045      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <USART2_IRQHandler+0x10c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a32      	ldr	r2, [pc, #200]	; (8002798 <USART2_IRQHandler+0x118>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d040      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <USART2_IRQHandler+0x10c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a31      	ldr	r2, [pc, #196]	; (800279c <USART2_IRQHandler+0x11c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d03b      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <USART2_IRQHandler+0x10c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <USART2_IRQHandler+0x120>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d036      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <USART2_IRQHandler+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2e      	ldr	r2, [pc, #184]	; (80027a4 <USART2_IRQHandler+0x124>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d031      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026f0:	4b26      	ldr	r3, [pc, #152]	; (800278c <USART2_IRQHandler+0x10c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	; (80027a8 <USART2_IRQHandler+0x128>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02c      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <USART2_IRQHandler+0x10c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <USART2_IRQHandler+0x12c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d027      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <USART2_IRQHandler+0x10c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <USART2_IRQHandler+0x130>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <USART2_IRQHandler+0x10c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <USART2_IRQHandler+0x134>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d01d      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <USART2_IRQHandler+0x10c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <USART2_IRQHandler+0x138>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <USART2_IRQHandler+0x10c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <USART2_IRQHandler+0x13c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <USART2_IRQHandler+0x10c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <USART2_IRQHandler+0x140>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <USART2_IRQHandler+0x10c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <USART2_IRQHandler+0x144>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <USART2_IRQHandler+0x10c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <USART2_IRQHandler+0x148>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <USART2_IRQHandler+0xd4>
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <USART2_IRQHandler+0x10c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <USART2_IRQHandler+0x14c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d103      	bne.n	800275c <USART2_IRQHandler+0xdc>
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <USART2_IRQHandler+0x10c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	e002      	b.n	8002762 <USART2_IRQHandler+0xe2>
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <USART2_IRQHandler+0x10c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <USART2_IRQHandler+0x108>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <USART2_IRQHandler+0x108>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0210 	bic.w	r2, r2, #16
 8002770:	601a      	str	r2, [r3, #0]
		GY39Finish = 1;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <USART2_IRQHandler+0x150>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <USART2_IRQHandler+0x108>)
 800277a:	f006 fca3 	bl	80090c4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000486c 	.word	0x2000486c
 800278c:	200041a0 	.word	0x200041a0
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	20000394 	.word	0x20000394

080027d4 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <USART3_IRQHandler+0x110>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d06c      	beq.n	80028d4 <USART3_IRQHandler+0x100>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80027fa:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <USART3_IRQHandler+0x110>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2210      	movs	r2, #16
 8002800:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8002802:	4838      	ldr	r0, [pc, #224]	; (80028e4 <USART3_IRQHandler+0x110>)
 8002804:	f006 fbee 	bl	8008fe4 <HAL_UART_DMAStop>
		WT931Len = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <USART3_IRQHandler+0x114>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a37      	ldr	r2, [pc, #220]	; (80028ec <USART3_IRQHandler+0x118>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d04a      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a36      	ldr	r2, [pc, #216]	; (80028f0 <USART3_IRQHandler+0x11c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d045      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 800281c:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <USART3_IRQHandler+0x114>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <USART3_IRQHandler+0x120>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d040      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a33      	ldr	r2, [pc, #204]	; (80028f8 <USART3_IRQHandler+0x124>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d03b      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a31      	ldr	r2, [pc, #196]	; (80028fc <USART3_IRQHandler+0x128>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d036      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <USART3_IRQHandler+0x114>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a30      	ldr	r2, [pc, #192]	; (8002900 <USART3_IRQHandler+0x12c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d031      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2e      	ldr	r2, [pc, #184]	; (8002904 <USART3_IRQHandler+0x130>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d02c      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 800284e:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <USART3_IRQHandler+0x134>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d027      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <USART3_IRQHandler+0x114>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2b      	ldr	r2, [pc, #172]	; (800290c <USART3_IRQHandler+0x138>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d022      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <USART3_IRQHandler+0x13c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d01d      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <USART3_IRQHandler+0x114>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <USART3_IRQHandler+0x140>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d018      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a27      	ldr	r2, [pc, #156]	; (8002918 <USART3_IRQHandler+0x144>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <USART3_IRQHandler+0x148>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <USART3_IRQHandler+0x114>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a24      	ldr	r2, [pc, #144]	; (8002920 <USART3_IRQHandler+0x14c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d009      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <USART3_IRQHandler+0x114>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <USART3_IRQHandler+0x150>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <USART3_IRQHandler+0xd4>
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <USART3_IRQHandler+0x114>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a21      	ldr	r2, [pc, #132]	; (8002928 <USART3_IRQHandler+0x154>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d104      	bne.n	80028b2 <USART3_IRQHandler+0xde>
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <USART3_IRQHandler+0x114>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e003      	b.n	80028ba <USART3_IRQHandler+0xe6>
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <USART3_IRQHandler+0x114>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <USART3_IRQHandler+0x158>)
 80028bc:	7013      	strb	r3, [r2, #0]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <USART3_IRQHandler+0x110>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <USART3_IRQHandler+0x110>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0210 	bic.w	r2, r2, #16
 80028cc:	601a      	str	r2, [r3, #0]
		WT931Finish = 1;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <USART3_IRQHandler+0x15c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <USART3_IRQHandler+0x110>)
 80028d6:	f006 fbf5 	bl	80090c4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200042d4 	.word	0x200042d4
 80028e8:	2000425c 	.word	0x2000425c
 80028ec:	40020010 	.word	0x40020010
 80028f0:	40020028 	.word	0x40020028
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020058 	.word	0x40020058
 80028fc:	40020070 	.word	0x40020070
 8002900:	40020088 	.word	0x40020088
 8002904:	400200a0 	.word	0x400200a0
 8002908:	400200b8 	.word	0x400200b8
 800290c:	40020410 	.word	0x40020410
 8002910:	40020428 	.word	0x40020428
 8002914:	40020440 	.word	0x40020440
 8002918:	40020458 	.word	0x40020458
 800291c:	40020470 	.word	0x40020470
 8002920:	40020488 	.word	0x40020488
 8002924:	400204a0 	.word	0x400204a0
 8002928:	400204b8 	.word	0x400204b8
 800292c:	200003ce 	.word	0x200003ce
 8002930:	20000395 	.word	0x20000395

08002934 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <DMA1_Stream7_IRQHandler+0x10>)
 800293a:	f001 fe93 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200045fc 	.word	0x200045fc

08002948 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <UART4_IRQHandler+0x108>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d068      	beq.n	8002a40 <UART4_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800296e:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <UART4_IRQHandler+0x108>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2210      	movs	r2, #16
 8002974:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8002976:	4836      	ldr	r0, [pc, #216]	; (8002a50 <UART4_IRQHandler+0x108>)
 8002978:	f006 fb34 	bl	8008fe4 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <UART4_IRQHandler+0x10c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a35      	ldr	r2, [pc, #212]	; (8002a58 <UART4_IRQHandler+0x110>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d04a      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <UART4_IRQHandler+0x114>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d045      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <UART4_IRQHandler+0x118>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d040      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <UART4_IRQHandler+0x10c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <UART4_IRQHandler+0x11c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d03b      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2f      	ldr	r2, [pc, #188]	; (8002a68 <UART4_IRQHandler+0x120>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d036      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <UART4_IRQHandler+0x124>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d031      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <UART4_IRQHandler+0x128>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02c      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <UART4_IRQHandler+0x12c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d027      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <UART4_IRQHandler+0x130>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <UART4_IRQHandler+0x134>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01d      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <UART4_IRQHandler+0x138>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d018      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <UART4_IRQHandler+0x13c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <UART4_IRQHandler+0x10c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <UART4_IRQHandler+0x140>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00e      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <UART4_IRQHandler+0x144>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <UART4_IRQHandler+0x148>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <UART4_IRQHandler+0xd4>
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <UART4_IRQHandler+0x14c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <UART4_IRQHandler+0xdc>
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	e002      	b.n	8002a2a <UART4_IRQHandler+0xe2>
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <UART4_IRQHandler+0x10c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <UART4_IRQHandler+0x108>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <UART4_IRQHandler+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0210 	bic.w	r2, r2, #16
 8002a38:	601a      	str	r2, [r3, #0]
		DeepFinish = 1;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <UART4_IRQHandler+0x150>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8002a40:	4803      	ldr	r0, [pc, #12]	; (8002a50 <UART4_IRQHandler+0x108>)
 8002a42:	f006 fb3f 	bl	80090c4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200047dc 	.word	0x200047dc
 8002a54:	20004128 	.word	0x20004128
 8002a58:	40020010 	.word	0x40020010
 8002a5c:	40020028 	.word	0x40020028
 8002a60:	40020040 	.word	0x40020040
 8002a64:	40020058 	.word	0x40020058
 8002a68:	40020070 	.word	0x40020070
 8002a6c:	40020088 	.word	0x40020088
 8002a70:	400200a0 	.word	0x400200a0
 8002a74:	400200b8 	.word	0x400200b8
 8002a78:	40020410 	.word	0x40020410
 8002a7c:	40020428 	.word	0x40020428
 8002a80:	40020440 	.word	0x40020440
 8002a84:	40020458 	.word	0x40020458
 8002a88:	40020470 	.word	0x40020470
 8002a8c:	40020488 	.word	0x40020488
 8002a90:	400204a0 	.word	0x400204a0
 8002a94:	400204b8 	.word	0x400204b8
 8002a98:	20000393 	.word	0x20000393

08002a9c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <TIM6_DAC_IRQHandler+0x10>)
 8002aa2:	f005 ff89 	bl	80089b8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200049c8 	.word	0x200049c8

08002ab0 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <DMA2_Stream0_IRQHandler+0x10>)
 8002ab6:	f001 fdd5 	bl	8004664 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20004468 	.word	0x20004468

08002ac4 <UART8_IRQHandler>:

/**
 * @brief This function handles UART8 global interrupt.
 */
void UART8_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <UART8_IRQHandler+0x108>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d068      	beq.n	8002bbc <UART8_IRQHandler+0xf8>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <UART8_IRQHandler+0x108>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2210      	movs	r2, #16
 8002af0:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8002af2:	4836      	ldr	r0, [pc, #216]	; (8002bcc <UART8_IRQHandler+0x108>)
 8002af4:	f006 fa76 	bl	8008fe4 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8002af8:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <UART8_IRQHandler+0x110>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d04a      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b02:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <UART8_IRQHandler+0x114>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d045      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b0c:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <UART8_IRQHandler+0x118>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d040      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <UART8_IRQHandler+0x11c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d03b      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2f      	ldr	r2, [pc, #188]	; (8002be4 <UART8_IRQHandler+0x120>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d036      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <UART8_IRQHandler+0x124>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d031      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <UART8_IRQHandler+0x128>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02c      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <UART8_IRQHandler+0x12c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d027      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <UART8_IRQHandler+0x130>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b52:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <UART8_IRQHandler+0x134>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d01d      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <UART8_IRQHandler+0x138>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <UART8_IRQHandler+0x13c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <UART8_IRQHandler+0x140>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <UART8_IRQHandler+0x144>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <UART8_IRQHandler+0x148>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <UART8_IRQHandler+0xd4>
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <UART8_IRQHandler+0x14c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <UART8_IRQHandler+0xdc>
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	e002      	b.n	8002ba6 <UART8_IRQHandler+0xe2>
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <UART8_IRQHandler+0x10c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <UART8_IRQHandler+0x108>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <UART8_IRQHandler+0x108>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0210 	bic.w	r2, r2, #16
 8002bb4:	601a      	str	r2, [r3, #0]
		DownSideFinish = 1;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <UART8_IRQHandler+0x150>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END UART8_IRQn 0 */
	HAL_UART_IRQHandler(&huart8);
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <UART8_IRQHandler+0x108>)
 8002bbe:	f006 fa81 	bl	80090c4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART8_IRQn 1 */

	/* USER CODE END UART8_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20004710 	.word	0x20004710
 8002bd0:	200044e0 	.word	0x200044e0
 8002bd4:	40020010 	.word	0x40020010
 8002bd8:	40020028 	.word	0x40020028
 8002bdc:	40020040 	.word	0x40020040
 8002be0:	40020058 	.word	0x40020058
 8002be4:	40020070 	.word	0x40020070
 8002be8:	40020088 	.word	0x40020088
 8002bec:	400200a0 	.word	0x400200a0
 8002bf0:	400200b8 	.word	0x400200b8
 8002bf4:	40020410 	.word	0x40020410
 8002bf8:	40020428 	.word	0x40020428
 8002bfc:	40020440 	.word	0x40020440
 8002c00:	40020458 	.word	0x40020458
 8002c04:	40020470 	.word	0x40020470
 8002c08:	40020488 	.word	0x40020488
 8002c0c:	400204a0 	.word	0x400204a0
 8002c10:	400204b8 	.word	0x400204b8
 8002c14:	20000392 	.word	0x20000392

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <SystemInit+0xec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <SystemInit+0xec>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <SystemInit+0xf0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d807      	bhi.n	8002c48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c38:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <SystemInit+0xf0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 030f 	bic.w	r3, r3, #15
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <SystemInit+0xf0>)
 8002c42:	f043 0307 	orr.w	r3, r3, #7
 8002c46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <SystemInit+0xf4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2f      	ldr	r2, [pc, #188]	; (8002d0c <SystemInit+0xf4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <SystemInit+0xf4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <SystemInit+0xf4>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	492b      	ldr	r1, [pc, #172]	; (8002d0c <SystemInit+0xf4>)
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <SystemInit+0xf8>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <SystemInit+0xf0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c72:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <SystemInit+0xf0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 030f 	bic.w	r3, r3, #15
 8002c7a:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <SystemInit+0xf0>)
 8002c7c:	f043 0307 	orr.w	r3, r3, #7
 8002c80:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <SystemInit+0xf4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c88:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <SystemInit+0xf4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <SystemInit+0xf4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <SystemInit+0xf4>)
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <SystemInit+0xfc>)
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <SystemInit+0xf4>)
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <SystemInit+0x100>)
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <SystemInit+0xf4>)
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <SystemInit+0x104>)
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <SystemInit+0xf4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <SystemInit+0xf4>)
 8002cae:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <SystemInit+0x104>)
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <SystemInit+0xf4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <SystemInit+0xf4>)
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <SystemInit+0x104>)
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <SystemInit+0xf4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <SystemInit+0xf4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <SystemInit+0xf4>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <SystemInit+0xf4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <SystemInit+0x108>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <SystemInit+0x10c>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce2:	d202      	bcs.n	8002cea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <SystemInit+0x110>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <SystemInit+0x114>)
 8002cec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <SystemInit+0xec>)
 8002cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cf8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00
 8002d08:	52002000 	.word	0x52002000
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d14:	02020200 	.word	0x02020200
 8002d18:	01ff0000 	.word	0x01ff0000
 8002d1c:	01010280 	.word	0x01010280
 8002d20:	5c001000 	.word	0x5c001000
 8002d24:	ffff0000 	.word	0xffff0000
 8002d28:	51008108 	.word	0x51008108
 8002d2c:	52004000 	.word	0x52004000

08002d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d34:	f7ff ff70 	bl	8002c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d3a:	490d      	ldr	r1, [pc, #52]	; (8002d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d50:	4c0a      	ldr	r4, [pc, #40]	; (8002d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5e:	f009 f9d5 	bl	800c10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d62:	f7fe f8e1 	bl	8000f28 <main>
  bx  lr
 8002d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d70:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002d74:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 8002d78:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002d7c:	20004a18 	.word	0x20004a18

08002d80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d80:	e7fe      	b.n	8002d80 <ADC3_IRQHandler>
	...

08002d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	f000 f90f 	bl	8002fae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d90:	f003 ffc6 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_Init+0x68>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	4913      	ldr	r1, [pc, #76]	; (8002df0 <HAL_Init+0x6c>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_Init+0x68>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_Init+0x6c>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_Init+0x70>)
 8002dc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <HAL_Init+0x74>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff fae4 	bl	800239c <HAL_InitTick>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e002      	b.n	8002de4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dde:	f7fe ffa9 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	0800c248 	.word	0x0800c248
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x20>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_IncTick+0x24>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <HAL_IncTick+0x24>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000000c 	.word	0x2000000c
 8002e20:	20004a14 	.word	0x20004a14

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_GetTick+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20004a14 	.word	0x20004a14

08002e3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_GetREVID+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0c1b      	lsrs	r3, r3, #16
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	5c001000 	.word	0x5c001000

08002e54 <__NVIC_SetPriorityGrouping>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <__NVIC_SetPriorityGrouping+0x40>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x40>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00
 8002e98:	05fa0000 	.word	0x05fa0000

08002e9c <__NVIC_GetPriorityGrouping>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <__NVIC_EnableIRQ+0x38>)
 8002ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db0a      	blt.n	8002f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <__NVIC_SetPriority+0x4c>)
 8002f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f1c:	e00a      	b.n	8002f34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <__NVIC_SetPriority+0x50>)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	440b      	add	r3, r1
 8002f32:	761a      	strb	r2, [r3, #24]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000e100 	.word	0xe000e100
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <NVIC_EncodePriority>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f1c3 0307 	rsb	r3, r3, #7
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf28      	it	cs
 8002f66:	2304      	movcs	r3, #4
 8002f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <NVIC_EncodePriority+0x30>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b03      	subs	r3, #3
 8002f76:	e000      	b.n	8002f7a <NVIC_EncodePriority+0x32>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	4313      	orrs	r3, r2
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff4c 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd2:	f7ff ff63 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8002fd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	6978      	ldr	r0, [r7, #20]
 8002fde:	f7ff ffb3 	bl	8002f48 <NVIC_EncodePriority>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff82 	bl	8002ef4 <__NVIC_SetPriority>
}
 8002ff0:	bf00      	nop
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff56 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff ff02 	bl	8002e24 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e316      	b.n	800365a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a66      	ldr	r2, [pc, #408]	; (80031cc <HAL_DMA_Init+0x1b8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d04a      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a65      	ldr	r2, [pc, #404]	; (80031d0 <HAL_DMA_Init+0x1bc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d045      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a63      	ldr	r2, [pc, #396]	; (80031d4 <HAL_DMA_Init+0x1c0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d040      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a62      	ldr	r2, [pc, #392]	; (80031d8 <HAL_DMA_Init+0x1c4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d03b      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a60      	ldr	r2, [pc, #384]	; (80031dc <HAL_DMA_Init+0x1c8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d036      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <HAL_DMA_Init+0x1cc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d031      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5d      	ldr	r2, [pc, #372]	; (80031e4 <HAL_DMA_Init+0x1d0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02c      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <HAL_DMA_Init+0x1d4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d027      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <HAL_DMA_Init+0x1d8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d022      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a59      	ldr	r2, [pc, #356]	; (80031f0 <HAL_DMA_Init+0x1dc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01d      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <HAL_DMA_Init+0x1e0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d018      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <HAL_DMA_Init+0x1e4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_DMA_Init+0x1e8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00e      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a53      	ldr	r2, [pc, #332]	; (8003200 <HAL_DMA_Init+0x1ec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a51      	ldr	r2, [pc, #324]	; (8003204 <HAL_DMA_Init+0x1f0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_DMA_Init+0xb8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a50      	ldr	r2, [pc, #320]	; (8003208 <HAL_DMA_Init+0x1f4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_DMA_Init+0xbc>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_DMA_Init+0xbe>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 813b 	beq.w	800334e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a37      	ldr	r2, [pc, #220]	; (80031cc <HAL_DMA_Init+0x1b8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d04a      	beq.n	8003188 <HAL_DMA_Init+0x174>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <HAL_DMA_Init+0x1bc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d045      	beq.n	8003188 <HAL_DMA_Init+0x174>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_DMA_Init+0x1c0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d040      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a33      	ldr	r2, [pc, #204]	; (80031d8 <HAL_DMA_Init+0x1c4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03b      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_DMA_Init+0x1c8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d036      	beq.n	8003188 <HAL_DMA_Init+0x174>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <HAL_DMA_Init+0x1cc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d031      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2e      	ldr	r2, [pc, #184]	; (80031e4 <HAL_DMA_Init+0x1d0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02c      	beq.n	8003188 <HAL_DMA_Init+0x174>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2d      	ldr	r2, [pc, #180]	; (80031e8 <HAL_DMA_Init+0x1d4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d027      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2b      	ldr	r2, [pc, #172]	; (80031ec <HAL_DMA_Init+0x1d8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <HAL_DMA_Init+0x1dc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01d      	beq.n	8003188 <HAL_DMA_Init+0x174>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a28      	ldr	r2, [pc, #160]	; (80031f4 <HAL_DMA_Init+0x1e0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <HAL_DMA_Init+0x1e4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <HAL_DMA_Init+0x1e8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_DMA_Init+0x174>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a24      	ldr	r2, [pc, #144]	; (8003200 <HAL_DMA_Init+0x1ec>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_DMA_Init+0x174>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <HAL_DMA_Init+0x1f0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Init+0x174>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a21      	ldr	r2, [pc, #132]	; (8003208 <HAL_DMA_Init+0x1f4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <HAL_DMA_Init+0x186>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e007      	b.n	80031aa <HAL_DMA_Init+0x196>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031aa:	e02f      	b.n	800320c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ac:	f7ff fe3a 	bl	8002e24 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d928      	bls.n	800320c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e246      	b.n	800365a <HAL_DMA_Init+0x646>
 80031cc:	40020010 	.word	0x40020010
 80031d0:	40020028 	.word	0x40020028
 80031d4:	40020040 	.word	0x40020040
 80031d8:	40020058 	.word	0x40020058
 80031dc:	40020070 	.word	0x40020070
 80031e0:	40020088 	.word	0x40020088
 80031e4:	400200a0 	.word	0x400200a0
 80031e8:	400200b8 	.word	0x400200b8
 80031ec:	40020410 	.word	0x40020410
 80031f0:	40020428 	.word	0x40020428
 80031f4:	40020440 	.word	0x40020440
 80031f8:	40020458 	.word	0x40020458
 80031fc:	40020470 	.word	0x40020470
 8003200:	40020488 	.word	0x40020488
 8003204:	400204a0 	.word	0x400204a0
 8003208:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1c8      	bne.n	80031ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4b83      	ldr	r3, [pc, #524]	; (8003434 <HAL_DMA_Init+0x420>)
 8003226:	4013      	ands	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003232:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b04      	cmp	r3, #4
 800325e:	d107      	bne.n	8003270 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	4313      	orrs	r3, r2
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003270:	4b71      	ldr	r3, [pc, #452]	; (8003438 <HAL_DMA_Init+0x424>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b71      	ldr	r3, [pc, #452]	; (800343c <HAL_DMA_Init+0x428>)
 8003276:	4013      	ands	r3, r2
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d328      	bcc.n	80032d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b28      	cmp	r3, #40	; 0x28
 8003284:	d903      	bls.n	800328e <HAL_DMA_Init+0x27a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b2e      	cmp	r3, #46	; 0x2e
 800328c:	d917      	bls.n	80032be <HAL_DMA_Init+0x2aa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b3e      	cmp	r3, #62	; 0x3e
 8003294:	d903      	bls.n	800329e <HAL_DMA_Init+0x28a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b42      	cmp	r3, #66	; 0x42
 800329c:	d90f      	bls.n	80032be <HAL_DMA_Init+0x2aa>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b46      	cmp	r3, #70	; 0x46
 80032a4:	d903      	bls.n	80032ae <HAL_DMA_Init+0x29a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b48      	cmp	r3, #72	; 0x48
 80032ac:	d907      	bls.n	80032be <HAL_DMA_Init+0x2aa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b4e      	cmp	r3, #78	; 0x4e
 80032b4:	d905      	bls.n	80032c2 <HAL_DMA_Init+0x2ae>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b52      	cmp	r3, #82	; 0x52
 80032bc:	d801      	bhi.n	80032c2 <HAL_DMA_Init+0x2ae>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_DMA_Init+0x2b0>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0307 	bic.w	r3, r3, #7
 80032e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d117      	bne.n	800332a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f002 fb3d 	bl	800598c <DMA_CheckFifoParam>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2240      	movs	r2, #64	; 0x40
 800331c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e197      	b.n	800365a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f002 fa78 	bl	8005828 <DMA_CalcBaseAndBitshift>
 8003338:	4603      	mov	r3, r0
 800333a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	e0cd      	b.n	80034ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3b      	ldr	r2, [pc, #236]	; (8003440 <HAL_DMA_Init+0x42c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMA_Init+0x38a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a39      	ldr	r2, [pc, #228]	; (8003444 <HAL_DMA_Init+0x430>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01d      	beq.n	800339e <HAL_DMA_Init+0x38a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a38      	ldr	r2, [pc, #224]	; (8003448 <HAL_DMA_Init+0x434>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d018      	beq.n	800339e <HAL_DMA_Init+0x38a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a36      	ldr	r2, [pc, #216]	; (800344c <HAL_DMA_Init+0x438>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_DMA_Init+0x38a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a35      	ldr	r2, [pc, #212]	; (8003450 <HAL_DMA_Init+0x43c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00e      	beq.n	800339e <HAL_DMA_Init+0x38a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a33      	ldr	r2, [pc, #204]	; (8003454 <HAL_DMA_Init+0x440>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <HAL_DMA_Init+0x38a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a32      	ldr	r2, [pc, #200]	; (8003458 <HAL_DMA_Init+0x444>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_DMA_Init+0x38a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a30      	ldr	r2, [pc, #192]	; (800345c <HAL_DMA_Init+0x448>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Init+0x38e>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_DMA_Init+0x390>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a24      	ldr	r2, [pc, #144]	; (8003440 <HAL_DMA_Init+0x42c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d021      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a22      	ldr	r2, [pc, #136]	; (8003444 <HAL_DMA_Init+0x430>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01c      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_DMA_Init+0x434>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d017      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_DMA_Init+0x438>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d012      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_DMA_Init+0x43c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00d      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_DMA_Init+0x440>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d008      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_DMA_Init+0x444>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_Init+0x3e4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_DMA_Init+0x448>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_DMA_Init+0x44c>)
 8003416:	4013      	ands	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d020      	beq.n	8003464 <HAL_DMA_Init+0x450>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d102      	bne.n	8003430 <HAL_DMA_Init+0x41c>
 800342a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800342e:	e01a      	b.n	8003466 <HAL_DMA_Init+0x452>
 8003430:	2300      	movs	r3, #0
 8003432:	e018      	b.n	8003466 <HAL_DMA_Init+0x452>
 8003434:	fe10803f 	.word	0xfe10803f
 8003438:	5c001000 	.word	0x5c001000
 800343c:	ffff0000 	.word	0xffff0000
 8003440:	58025408 	.word	0x58025408
 8003444:	5802541c 	.word	0x5802541c
 8003448:	58025430 	.word	0x58025430
 800344c:	58025444 	.word	0x58025444
 8003450:	58025458 	.word	0x58025458
 8003454:	5802546c 	.word	0x5802546c
 8003458:	58025480 	.word	0x58025480
 800345c:	58025494 	.word	0x58025494
 8003460:	fffe000f 	.word	0xfffe000f
 8003464:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800346c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800347c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800348c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003494:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b6e      	ldr	r3, [pc, #440]	; (8003664 <HAL_DMA_Init+0x650>)
 80034ac:	4413      	add	r3, r2
 80034ae:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_DMA_Init+0x654>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	009a      	lsls	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f002 f9b3 	bl	8005828 <DMA_CalcBaseAndBitshift>
 80034c2:	4603      	mov	r3, r0
 80034c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2201      	movs	r2, #1
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e008      	b.n	80034ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2203      	movs	r2, #3
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0b7      	b.n	800365a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a5f      	ldr	r2, [pc, #380]	; (800366c <HAL_DMA_Init+0x658>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d072      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <HAL_DMA_Init+0x65c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d06d      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5c      	ldr	r2, [pc, #368]	; (8003674 <HAL_DMA_Init+0x660>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d068      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5a      	ldr	r2, [pc, #360]	; (8003678 <HAL_DMA_Init+0x664>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d063      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a59      	ldr	r2, [pc, #356]	; (800367c <HAL_DMA_Init+0x668>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d05e      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a57      	ldr	r2, [pc, #348]	; (8003680 <HAL_DMA_Init+0x66c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d059      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_DMA_Init+0x670>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d054      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a54      	ldr	r2, [pc, #336]	; (8003688 <HAL_DMA_Init+0x674>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d04f      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a53      	ldr	r2, [pc, #332]	; (800368c <HAL_DMA_Init+0x678>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d04a      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_DMA_Init+0x67c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d045      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_DMA_Init+0x680>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d040      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <HAL_DMA_Init+0x684>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d03b      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4d      	ldr	r2, [pc, #308]	; (800369c <HAL_DMA_Init+0x688>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d036      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a4b      	ldr	r2, [pc, #300]	; (80036a0 <HAL_DMA_Init+0x68c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d031      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_DMA_Init+0x690>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d02c      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a48      	ldr	r2, [pc, #288]	; (80036a8 <HAL_DMA_Init+0x694>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d027      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a47      	ldr	r2, [pc, #284]	; (80036ac <HAL_DMA_Init+0x698>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a45      	ldr	r2, [pc, #276]	; (80036b0 <HAL_DMA_Init+0x69c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01d      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <HAL_DMA_Init+0x6a0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a42      	ldr	r2, [pc, #264]	; (80036b8 <HAL_DMA_Init+0x6a4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a41      	ldr	r2, [pc, #260]	; (80036bc <HAL_DMA_Init+0x6a8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3f      	ldr	r2, [pc, #252]	; (80036c0 <HAL_DMA_Init+0x6ac>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3e      	ldr	r2, [pc, #248]	; (80036c4 <HAL_DMA_Init+0x6b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_DMA_Init+0x5c6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <HAL_DMA_Init+0x6b4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_DMA_Init+0x5ca>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_DMA_Init+0x5cc>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d032      	beq.n	800364a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f002 fa4d 	bl	8005a84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d102      	bne.n	80035f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800360c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_DMA_Init+0x624>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b08      	cmp	r3, #8
 800361c:	d80c      	bhi.n	8003638 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f002 faca 	bl	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	e008      	b.n	800364a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	a7fdabf8 	.word	0xa7fdabf8
 8003668:	cccccccd 	.word	0xcccccccd
 800366c:	40020010 	.word	0x40020010
 8003670:	40020028 	.word	0x40020028
 8003674:	40020040 	.word	0x40020040
 8003678:	40020058 	.word	0x40020058
 800367c:	40020070 	.word	0x40020070
 8003680:	40020088 	.word	0x40020088
 8003684:	400200a0 	.word	0x400200a0
 8003688:	400200b8 	.word	0x400200b8
 800368c:	40020410 	.word	0x40020410
 8003690:	40020428 	.word	0x40020428
 8003694:	40020440 	.word	0x40020440
 8003698:	40020458 	.word	0x40020458
 800369c:	40020470 	.word	0x40020470
 80036a0:	40020488 	.word	0x40020488
 80036a4:	400204a0 	.word	0x400204a0
 80036a8:	400204b8 	.word	0x400204b8
 80036ac:	58025408 	.word	0x58025408
 80036b0:	5802541c 	.word	0x5802541c
 80036b4:	58025430 	.word	0x58025430
 80036b8:	58025444 	.word	0x58025444
 80036bc:	58025458 	.word	0x58025458
 80036c0:	5802546c 	.word	0x5802546c
 80036c4:	58025480 	.word	0x58025480
 80036c8:	58025494 	.word	0x58025494

080036cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e226      	b.n	8003b36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_DMA_Start_IT+0x2a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e21f      	b.n	8003b36 <HAL_DMA_Start_IT+0x46a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	f040 820a 	bne.w	8003b20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a68      	ldr	r2, [pc, #416]	; (80038c0 <HAL_DMA_Start_IT+0x1f4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d04a      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a66      	ldr	r2, [pc, #408]	; (80038c4 <HAL_DMA_Start_IT+0x1f8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d045      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a65      	ldr	r2, [pc, #404]	; (80038c8 <HAL_DMA_Start_IT+0x1fc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d040      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a63      	ldr	r2, [pc, #396]	; (80038cc <HAL_DMA_Start_IT+0x200>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d03b      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a62      	ldr	r2, [pc, #392]	; (80038d0 <HAL_DMA_Start_IT+0x204>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d036      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a60      	ldr	r2, [pc, #384]	; (80038d4 <HAL_DMA_Start_IT+0x208>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d031      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a5f      	ldr	r2, [pc, #380]	; (80038d8 <HAL_DMA_Start_IT+0x20c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d02c      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5d      	ldr	r2, [pc, #372]	; (80038dc <HAL_DMA_Start_IT+0x210>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d027      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a5c      	ldr	r2, [pc, #368]	; (80038e0 <HAL_DMA_Start_IT+0x214>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d022      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5a      	ldr	r2, [pc, #360]	; (80038e4 <HAL_DMA_Start_IT+0x218>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01d      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a59      	ldr	r2, [pc, #356]	; (80038e8 <HAL_DMA_Start_IT+0x21c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d018      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_DMA_Start_IT+0x220>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a56      	ldr	r2, [pc, #344]	; (80038f0 <HAL_DMA_Start_IT+0x224>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a54      	ldr	r2, [pc, #336]	; (80038f4 <HAL_DMA_Start_IT+0x228>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a53      	ldr	r2, [pc, #332]	; (80038f8 <HAL_DMA_Start_IT+0x22c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_DMA_Start_IT+0xee>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a51      	ldr	r2, [pc, #324]	; (80038fc <HAL_DMA_Start_IT+0x230>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <HAL_DMA_Start_IT+0x100>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e007      	b.n	80037dc <HAL_DMA_Start_IT+0x110>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f001 fe74 	bl	80054d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <HAL_DMA_Start_IT+0x1f4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a33      	ldr	r2, [pc, #204]	; (80038c4 <HAL_DMA_Start_IT+0x1f8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d045      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_DMA_Start_IT+0x1fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d040      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_DMA_Start_IT+0x200>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d03b      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2e      	ldr	r2, [pc, #184]	; (80038d0 <HAL_DMA_Start_IT+0x204>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d036      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_DMA_Start_IT+0x208>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d031      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <HAL_DMA_Start_IT+0x20c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <HAL_DMA_Start_IT+0x210>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d027      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a28      	ldr	r2, [pc, #160]	; (80038e0 <HAL_DMA_Start_IT+0x214>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <HAL_DMA_Start_IT+0x218>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01d      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <HAL_DMA_Start_IT+0x21c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a24      	ldr	r2, [pc, #144]	; (80038ec <HAL_DMA_Start_IT+0x220>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <HAL_DMA_Start_IT+0x224>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <HAL_DMA_Start_IT+0x228>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_DMA_Start_IT+0x22c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_DMA_Start_IT+0x1bc>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_DMA_Start_IT+0x230>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_DMA_Start_IT+0x1c0>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_DMA_Start_IT+0x1c2>
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d036      	beq.n	8003900 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 021e 	bic.w	r2, r3, #30
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0216 	orr.w	r2, r2, #22
 80038a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03e      	beq.n	800392c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0208 	orr.w	r2, r2, #8
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e035      	b.n	800392c <HAL_DMA_Start_IT+0x260>
 80038c0:	40020010 	.word	0x40020010
 80038c4:	40020028 	.word	0x40020028
 80038c8:	40020040 	.word	0x40020040
 80038cc:	40020058 	.word	0x40020058
 80038d0:	40020070 	.word	0x40020070
 80038d4:	40020088 	.word	0x40020088
 80038d8:	400200a0 	.word	0x400200a0
 80038dc:	400200b8 	.word	0x400200b8
 80038e0:	40020410 	.word	0x40020410
 80038e4:	40020428 	.word	0x40020428
 80038e8:	40020440 	.word	0x40020440
 80038ec:	40020458 	.word	0x40020458
 80038f0:	40020470 	.word	0x40020470
 80038f4:	40020488 	.word	0x40020488
 80038f8:	400204a0 	.word	0x400204a0
 80038fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 020e 	bic.w	r2, r3, #14
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 020a 	orr.w	r2, r2, #10
 8003912:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0204 	orr.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a83      	ldr	r2, [pc, #524]	; (8003b40 <HAL_DMA_Start_IT+0x474>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d072      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a82      	ldr	r2, [pc, #520]	; (8003b44 <HAL_DMA_Start_IT+0x478>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d06d      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a80      	ldr	r2, [pc, #512]	; (8003b48 <HAL_DMA_Start_IT+0x47c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d068      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7f      	ldr	r2, [pc, #508]	; (8003b4c <HAL_DMA_Start_IT+0x480>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d063      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a7d      	ldr	r2, [pc, #500]	; (8003b50 <HAL_DMA_Start_IT+0x484>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d05e      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a7c      	ldr	r2, [pc, #496]	; (8003b54 <HAL_DMA_Start_IT+0x488>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d059      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7a      	ldr	r2, [pc, #488]	; (8003b58 <HAL_DMA_Start_IT+0x48c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d054      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a79      	ldr	r2, [pc, #484]	; (8003b5c <HAL_DMA_Start_IT+0x490>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d04f      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a77      	ldr	r2, [pc, #476]	; (8003b60 <HAL_DMA_Start_IT+0x494>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a76      	ldr	r2, [pc, #472]	; (8003b64 <HAL_DMA_Start_IT+0x498>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a74      	ldr	r2, [pc, #464]	; (8003b68 <HAL_DMA_Start_IT+0x49c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a73      	ldr	r2, [pc, #460]	; (8003b6c <HAL_DMA_Start_IT+0x4a0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a71      	ldr	r2, [pc, #452]	; (8003b70 <HAL_DMA_Start_IT+0x4a4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a70      	ldr	r2, [pc, #448]	; (8003b74 <HAL_DMA_Start_IT+0x4a8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_DMA_Start_IT+0x4ac>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6d      	ldr	r2, [pc, #436]	; (8003b7c <HAL_DMA_Start_IT+0x4b0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a6b      	ldr	r2, [pc, #428]	; (8003b80 <HAL_DMA_Start_IT+0x4b4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6a      	ldr	r2, [pc, #424]	; (8003b84 <HAL_DMA_Start_IT+0x4b8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a68      	ldr	r2, [pc, #416]	; (8003b88 <HAL_DMA_Start_IT+0x4bc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a67      	ldr	r2, [pc, #412]	; (8003b8c <HAL_DMA_Start_IT+0x4c0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a65      	ldr	r2, [pc, #404]	; (8003b90 <HAL_DMA_Start_IT+0x4c4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a64      	ldr	r2, [pc, #400]	; (8003b94 <HAL_DMA_Start_IT+0x4c8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a62      	ldr	r2, [pc, #392]	; (8003b98 <HAL_DMA_Start_IT+0x4cc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_Start_IT+0x350>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a61      	ldr	r2, [pc, #388]	; (8003b9c <HAL_DMA_Start_IT+0x4d0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_DMA_Start_IT+0x354>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_DMA_Start_IT+0x356>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01a      	beq.n	8003a5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a37      	ldr	r2, [pc, #220]	; (8003b40 <HAL_DMA_Start_IT+0x474>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04a      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a36      	ldr	r2, [pc, #216]	; (8003b44 <HAL_DMA_Start_IT+0x478>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d045      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <HAL_DMA_Start_IT+0x47c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a33      	ldr	r2, [pc, #204]	; (8003b4c <HAL_DMA_Start_IT+0x480>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d03b      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a31      	ldr	r2, [pc, #196]	; (8003b50 <HAL_DMA_Start_IT+0x484>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d036      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a30      	ldr	r2, [pc, #192]	; (8003b54 <HAL_DMA_Start_IT+0x488>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d031      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2e      	ldr	r2, [pc, #184]	; (8003b58 <HAL_DMA_Start_IT+0x48c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02c      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2d      	ldr	r2, [pc, #180]	; (8003b5c <HAL_DMA_Start_IT+0x490>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d027      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2b      	ldr	r2, [pc, #172]	; (8003b60 <HAL_DMA_Start_IT+0x494>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <HAL_DMA_Start_IT+0x498>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01d      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	; (8003b68 <HAL_DMA_Start_IT+0x49c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <HAL_DMA_Start_IT+0x4a0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <HAL_DMA_Start_IT+0x4a4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_DMA_Start_IT+0x4a8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a22      	ldr	r2, [pc, #136]	; (8003b78 <HAL_DMA_Start_IT+0x4ac>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_DMA_Start_IT+0x430>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <HAL_DMA_Start_IT+0x4b0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <HAL_DMA_Start_IT+0x442>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e012      	b.n	8003b34 <HAL_DMA_Start_IT+0x468>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e009      	b.n	8003b34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40020028 	.word	0x40020028
 8003b48:	40020040 	.word	0x40020040
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	40020070 	.word	0x40020070
 8003b54:	40020088 	.word	0x40020088
 8003b58:	400200a0 	.word	0x400200a0
 8003b5c:	400200b8 	.word	0x400200b8
 8003b60:	40020410 	.word	0x40020410
 8003b64:	40020428 	.word	0x40020428
 8003b68:	40020440 	.word	0x40020440
 8003b6c:	40020458 	.word	0x40020458
 8003b70:	40020470 	.word	0x40020470
 8003b74:	40020488 	.word	0x40020488
 8003b78:	400204a0 	.word	0x400204a0
 8003b7c:	400204b8 	.word	0x400204b8
 8003b80:	58025408 	.word	0x58025408
 8003b84:	5802541c 	.word	0x5802541c
 8003b88:	58025430 	.word	0x58025430
 8003b8c:	58025444 	.word	0x58025444
 8003b90:	58025458 	.word	0x58025458
 8003b94:	5802546c 	.word	0x5802546c
 8003b98:	58025480 	.word	0x58025480
 8003b9c:	58025494 	.word	0x58025494

08003ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff f93c 	bl	8002e24 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e2dc      	b.n	8004172 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d008      	beq.n	8003bd6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e2cd      	b.n	8004172 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a76      	ldr	r2, [pc, #472]	; (8003db4 <HAL_DMA_Abort+0x214>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a74      	ldr	r2, [pc, #464]	; (8003db8 <HAL_DMA_Abort+0x218>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a73      	ldr	r2, [pc, #460]	; (8003dbc <HAL_DMA_Abort+0x21c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a71      	ldr	r2, [pc, #452]	; (8003dc0 <HAL_DMA_Abort+0x220>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a70      	ldr	r2, [pc, #448]	; (8003dc4 <HAL_DMA_Abort+0x224>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6e      	ldr	r2, [pc, #440]	; (8003dc8 <HAL_DMA_Abort+0x228>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6d      	ldr	r2, [pc, #436]	; (8003dcc <HAL_DMA_Abort+0x22c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <HAL_DMA_Abort+0x230>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6a      	ldr	r2, [pc, #424]	; (8003dd4 <HAL_DMA_Abort+0x234>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_DMA_Abort+0x238>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a67      	ldr	r2, [pc, #412]	; (8003ddc <HAL_DMA_Abort+0x23c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a65      	ldr	r2, [pc, #404]	; (8003de0 <HAL_DMA_Abort+0x240>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a64      	ldr	r2, [pc, #400]	; (8003de4 <HAL_DMA_Abort+0x244>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a62      	ldr	r2, [pc, #392]	; (8003de8 <HAL_DMA_Abort+0x248>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a61      	ldr	r2, [pc, #388]	; (8003dec <HAL_DMA_Abort+0x24c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_Abort+0xd6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5f      	ldr	r2, [pc, #380]	; (8003df0 <HAL_DMA_Abort+0x250>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Abort+0xda>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_Abort+0xdc>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 021e 	bic.w	r2, r2, #30
 8003c8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e00a      	b.n	8003cbe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 020e 	bic.w	r2, r2, #14
 8003cb6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	; (8003db4 <HAL_DMA_Abort+0x214>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d072      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3a      	ldr	r2, [pc, #232]	; (8003db8 <HAL_DMA_Abort+0x218>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d06d      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a39      	ldr	r2, [pc, #228]	; (8003dbc <HAL_DMA_Abort+0x21c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d068      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a37      	ldr	r2, [pc, #220]	; (8003dc0 <HAL_DMA_Abort+0x220>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d063      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <HAL_DMA_Abort+0x224>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d05e      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <HAL_DMA_Abort+0x228>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d059      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_DMA_Abort+0x22c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d054      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a31      	ldr	r2, [pc, #196]	; (8003dd0 <HAL_DMA_Abort+0x230>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d04f      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <HAL_DMA_Abort+0x234>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2e      	ldr	r2, [pc, #184]	; (8003dd8 <HAL_DMA_Abort+0x238>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <HAL_DMA_Abort+0x23c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2b      	ldr	r2, [pc, #172]	; (8003de0 <HAL_DMA_Abort+0x240>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <HAL_DMA_Abort+0x244>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <HAL_DMA_Abort+0x248>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_DMA_Abort+0x24c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <HAL_DMA_Abort+0x250>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <HAL_DMA_Abort+0x254>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_DMA_Abort+0x258>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_DMA_Abort+0x25c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <HAL_DMA_Abort+0x260>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <HAL_DMA_Abort+0x264>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <HAL_DMA_Abort+0x268>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_DMA_Abort+0x26c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_Abort+0x20e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_DMA_Abort+0x270>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d132      	bne.n	8003e14 <HAL_DMA_Abort+0x274>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e031      	b.n	8003e16 <HAL_DMA_Abort+0x276>
 8003db2:	bf00      	nop
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8
 8003df4:	58025408 	.word	0x58025408
 8003df8:	5802541c 	.word	0x5802541c
 8003dfc:	58025430 	.word	0x58025430
 8003e00:	58025444 	.word	0x58025444
 8003e04:	58025458 	.word	0x58025458
 8003e08:	5802546c 	.word	0x5802546c
 8003e0c:	58025480 	.word	0x58025480
 8003e10:	58025494 	.word	0x58025494
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_DMA_Abort+0x444>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d04a      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6b      	ldr	r2, [pc, #428]	; (8003fe8 <HAL_DMA_Abort+0x448>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d045      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6a      	ldr	r2, [pc, #424]	; (8003fec <HAL_DMA_Abort+0x44c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d040      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	; (8003ff0 <HAL_DMA_Abort+0x450>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d03b      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <HAL_DMA_Abort+0x454>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d036      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <HAL_DMA_Abort+0x458>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d031      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a64      	ldr	r2, [pc, #400]	; (8003ffc <HAL_DMA_Abort+0x45c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d02c      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a62      	ldr	r2, [pc, #392]	; (8004000 <HAL_DMA_Abort+0x460>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d027      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a61      	ldr	r2, [pc, #388]	; (8004004 <HAL_DMA_Abort+0x464>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d022      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5f      	ldr	r2, [pc, #380]	; (8004008 <HAL_DMA_Abort+0x468>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01d      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5e      	ldr	r2, [pc, #376]	; (800400c <HAL_DMA_Abort+0x46c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d018      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5c      	ldr	r2, [pc, #368]	; (8004010 <HAL_DMA_Abort+0x470>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	; (8004014 <HAL_DMA_Abort+0x474>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a59      	ldr	r2, [pc, #356]	; (8004018 <HAL_DMA_Abort+0x478>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a58      	ldr	r2, [pc, #352]	; (800401c <HAL_DMA_Abort+0x47c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_DMA_Abort+0x32a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a56      	ldr	r2, [pc, #344]	; (8004020 <HAL_DMA_Abort+0x480>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <HAL_DMA_Abort+0x33c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e007      	b.n	8003eec <HAL_DMA_Abort+0x34c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003eec:	e013      	b.n	8003f16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eee:	f7fe ff99 	bl	8002e24 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d90c      	bls.n	8003f16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e12d      	b.n	8004172 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <HAL_DMA_Abort+0x444>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04a      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <HAL_DMA_Abort+0x448>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d045      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_DMA_Abort+0x44c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d040      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <HAL_DMA_Abort+0x450>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_DMA_Abort+0x454>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d036      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <HAL_DMA_Abort+0x458>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d031      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_DMA_Abort+0x45c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d02c      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <HAL_DMA_Abort+0x460>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d027      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_DMA_Abort+0x464>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d022      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a21      	ldr	r2, [pc, #132]	; (8004008 <HAL_DMA_Abort+0x468>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a20      	ldr	r2, [pc, #128]	; (800400c <HAL_DMA_Abort+0x46c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_DMA_Abort+0x470>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <HAL_DMA_Abort+0x474>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_DMA_Abort+0x478>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_DMA_Abort+0x47c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_Abort+0x422>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_DMA_Abort+0x480>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_DMA_Abort+0x426>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_DMA_Abort+0x428>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02b      	beq.n	8004024 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	223f      	movs	r2, #63	; 0x3f
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
 8003fe2:	e02a      	b.n	800403a <HAL_DMA_Abort+0x49a>
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	40020028 	.word	0x40020028
 8003fec:	40020040 	.word	0x40020040
 8003ff0:	40020058 	.word	0x40020058
 8003ff4:	40020070 	.word	0x40020070
 8003ff8:	40020088 	.word	0x40020088
 8003ffc:	400200a0 	.word	0x400200a0
 8004000:	400200b8 	.word	0x400200b8
 8004004:	40020410 	.word	0x40020410
 8004008:	40020428 	.word	0x40020428
 800400c:	40020440 	.word	0x40020440
 8004010:	40020458 	.word	0x40020458
 8004014:	40020470 	.word	0x40020470
 8004018:	40020488 	.word	0x40020488
 800401c:	400204a0 	.word	0x400204a0
 8004020:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2201      	movs	r2, #1
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_DMA_Abort+0x5dc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d072      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a4d      	ldr	r2, [pc, #308]	; (8004180 <HAL_DMA_Abort+0x5e0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d06d      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a4c      	ldr	r2, [pc, #304]	; (8004184 <HAL_DMA_Abort+0x5e4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d068      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <HAL_DMA_Abort+0x5e8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d063      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a49      	ldr	r2, [pc, #292]	; (800418c <HAL_DMA_Abort+0x5ec>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d05e      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a47      	ldr	r2, [pc, #284]	; (8004190 <HAL_DMA_Abort+0x5f0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d059      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_DMA_Abort+0x5f4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d054      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a44      	ldr	r2, [pc, #272]	; (8004198 <HAL_DMA_Abort+0x5f8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d04f      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a43      	ldr	r2, [pc, #268]	; (800419c <HAL_DMA_Abort+0x5fc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d04a      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a41      	ldr	r2, [pc, #260]	; (80041a0 <HAL_DMA_Abort+0x600>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d045      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <HAL_DMA_Abort+0x604>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d040      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3e      	ldr	r2, [pc, #248]	; (80041a8 <HAL_DMA_Abort+0x608>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03b      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a3d      	ldr	r2, [pc, #244]	; (80041ac <HAL_DMA_Abort+0x60c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d036      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3b      	ldr	r2, [pc, #236]	; (80041b0 <HAL_DMA_Abort+0x610>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3a      	ldr	r2, [pc, #232]	; (80041b4 <HAL_DMA_Abort+0x614>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d02c      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a38      	ldr	r2, [pc, #224]	; (80041b8 <HAL_DMA_Abort+0x618>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d027      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a37      	ldr	r2, [pc, #220]	; (80041bc <HAL_DMA_Abort+0x61c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a35      	ldr	r2, [pc, #212]	; (80041c0 <HAL_DMA_Abort+0x620>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <HAL_DMA_Abort+0x624>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a32      	ldr	r2, [pc, #200]	; (80041c8 <HAL_DMA_Abort+0x628>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a31      	ldr	r2, [pc, #196]	; (80041cc <HAL_DMA_Abort+0x62c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2f      	ldr	r2, [pc, #188]	; (80041d0 <HAL_DMA_Abort+0x630>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2e      	ldr	r2, [pc, #184]	; (80041d4 <HAL_DMA_Abort+0x634>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_DMA_Abort+0x58a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2c      	ldr	r2, [pc, #176]	; (80041d8 <HAL_DMA_Abort+0x638>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_DMA_Abort+0x58e>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_DMA_Abort+0x590>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800413c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004154:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800415e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
 80041bc:	58025408 	.word	0x58025408
 80041c0:	5802541c 	.word	0x5802541c
 80041c4:	58025430 	.word	0x58025430
 80041c8:	58025444 	.word	0x58025444
 80041cc:	58025458 	.word	0x58025458
 80041d0:	5802546c 	.word	0x5802546c
 80041d4:	58025480 	.word	0x58025480
 80041d8:	58025494 	.word	0x58025494

080041dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e205      	b.n	80045fa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d004      	beq.n	8004204 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2280      	movs	r2, #128	; 0x80
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e1fa      	b.n	80045fa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a8c      	ldr	r2, [pc, #560]	; (800443c <HAL_DMA_Abort_IT+0x260>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04a      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a8b      	ldr	r2, [pc, #556]	; (8004440 <HAL_DMA_Abort_IT+0x264>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d045      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a89      	ldr	r2, [pc, #548]	; (8004444 <HAL_DMA_Abort_IT+0x268>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d040      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a88      	ldr	r2, [pc, #544]	; (8004448 <HAL_DMA_Abort_IT+0x26c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d03b      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a86      	ldr	r2, [pc, #536]	; (800444c <HAL_DMA_Abort_IT+0x270>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d036      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a85      	ldr	r2, [pc, #532]	; (8004450 <HAL_DMA_Abort_IT+0x274>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d031      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <HAL_DMA_Abort_IT+0x278>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02c      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a82      	ldr	r2, [pc, #520]	; (8004458 <HAL_DMA_Abort_IT+0x27c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d027      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a80      	ldr	r2, [pc, #512]	; (800445c <HAL_DMA_Abort_IT+0x280>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d022      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7f      	ldr	r2, [pc, #508]	; (8004460 <HAL_DMA_Abort_IT+0x284>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d01d      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a7d      	ldr	r2, [pc, #500]	; (8004464 <HAL_DMA_Abort_IT+0x288>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d018      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7c      	ldr	r2, [pc, #496]	; (8004468 <HAL_DMA_Abort_IT+0x28c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7a      	ldr	r2, [pc, #488]	; (800446c <HAL_DMA_Abort_IT+0x290>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00e      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a79      	ldr	r2, [pc, #484]	; (8004470 <HAL_DMA_Abort_IT+0x294>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a77      	ldr	r2, [pc, #476]	; (8004474 <HAL_DMA_Abort_IT+0x298>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_DMA_Abort_IT+0xc8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a76      	ldr	r2, [pc, #472]	; (8004478 <HAL_DMA_Abort_IT+0x29c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_DMA_Abort_IT+0xcc>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_DMA_Abort_IT+0xce>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d065      	beq.n	800437a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a60      	ldr	r2, [pc, #384]	; (800443c <HAL_DMA_Abort_IT+0x260>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a5e      	ldr	r2, [pc, #376]	; (8004440 <HAL_DMA_Abort_IT+0x264>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5d      	ldr	r2, [pc, #372]	; (8004444 <HAL_DMA_Abort_IT+0x268>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5b      	ldr	r2, [pc, #364]	; (8004448 <HAL_DMA_Abort_IT+0x26c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a5a      	ldr	r2, [pc, #360]	; (800444c <HAL_DMA_Abort_IT+0x270>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a58      	ldr	r2, [pc, #352]	; (8004450 <HAL_DMA_Abort_IT+0x274>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a57      	ldr	r2, [pc, #348]	; (8004454 <HAL_DMA_Abort_IT+0x278>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a55      	ldr	r2, [pc, #340]	; (8004458 <HAL_DMA_Abort_IT+0x27c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a54      	ldr	r2, [pc, #336]	; (800445c <HAL_DMA_Abort_IT+0x280>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a52      	ldr	r2, [pc, #328]	; (8004460 <HAL_DMA_Abort_IT+0x284>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a51      	ldr	r2, [pc, #324]	; (8004464 <HAL_DMA_Abort_IT+0x288>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_DMA_Abort_IT+0x28c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a4e      	ldr	r2, [pc, #312]	; (800446c <HAL_DMA_Abort_IT+0x290>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4c      	ldr	r2, [pc, #304]	; (8004470 <HAL_DMA_Abort_IT+0x294>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a4b      	ldr	r2, [pc, #300]	; (8004474 <HAL_DMA_Abort_IT+0x298>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_Abort_IT+0x17a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a49      	ldr	r2, [pc, #292]	; (8004478 <HAL_DMA_Abort_IT+0x29c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <HAL_DMA_Abort_IT+0x18c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e147      	b.n	80045f8 <HAL_DMA_Abort_IT+0x41c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e13e      	b.n	80045f8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 020e 	bic.w	r2, r2, #14
 8004388:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2b      	ldr	r2, [pc, #172]	; (800443c <HAL_DMA_Abort_IT+0x260>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_DMA_Abort_IT+0x264>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_DMA_Abort_IT+0x268>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a26      	ldr	r2, [pc, #152]	; (8004448 <HAL_DMA_Abort_IT+0x26c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a25      	ldr	r2, [pc, #148]	; (800444c <HAL_DMA_Abort_IT+0x270>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_DMA_Abort_IT+0x274>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a22      	ldr	r2, [pc, #136]	; (8004454 <HAL_DMA_Abort_IT+0x278>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a20      	ldr	r2, [pc, #128]	; (8004458 <HAL_DMA_Abort_IT+0x27c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_DMA_Abort_IT+0x280>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_DMA_Abort_IT+0x284>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_DMA_Abort_IT+0x288>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_DMA_Abort_IT+0x28c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_DMA_Abort_IT+0x290>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <HAL_DMA_Abort_IT+0x294>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a16      	ldr	r2, [pc, #88]	; (8004474 <HAL_DMA_Abort_IT+0x298>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_Abort_IT+0x24e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a14      	ldr	r2, [pc, #80]	; (8004478 <HAL_DMA_Abort_IT+0x29c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d128      	bne.n	800447c <HAL_DMA_Abort_IT+0x2a0>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e027      	b.n	800448c <HAL_DMA_Abort_IT+0x2b0>
 800443c:	40020010 	.word	0x40020010
 8004440:	40020028 	.word	0x40020028
 8004444:	40020040 	.word	0x40020040
 8004448:	40020058 	.word	0x40020058
 800444c:	40020070 	.word	0x40020070
 8004450:	40020088 	.word	0x40020088
 8004454:	400200a0 	.word	0x400200a0
 8004458:	400200b8 	.word	0x400200b8
 800445c:	40020410 	.word	0x40020410
 8004460:	40020428 	.word	0x40020428
 8004464:	40020440 	.word	0x40020440
 8004468:	40020458 	.word	0x40020458
 800446c:	40020470 	.word	0x40020470
 8004470:	40020488 	.word	0x40020488
 8004474:	400204a0 	.word	0x400204a0
 8004478:	400204b8 	.word	0x400204b8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5c      	ldr	r2, [pc, #368]	; (8004604 <HAL_DMA_Abort_IT+0x428>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d072      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a5b      	ldr	r2, [pc, #364]	; (8004608 <HAL_DMA_Abort_IT+0x42c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d06d      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a59      	ldr	r2, [pc, #356]	; (800460c <HAL_DMA_Abort_IT+0x430>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d068      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_DMA_Abort_IT+0x434>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d063      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a56      	ldr	r2, [pc, #344]	; (8004614 <HAL_DMA_Abort_IT+0x438>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d05e      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a55      	ldr	r2, [pc, #340]	; (8004618 <HAL_DMA_Abort_IT+0x43c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d059      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a53      	ldr	r2, [pc, #332]	; (800461c <HAL_DMA_Abort_IT+0x440>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d054      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_DMA_Abort_IT+0x444>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d04f      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a50      	ldr	r2, [pc, #320]	; (8004624 <HAL_DMA_Abort_IT+0x448>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d04a      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_DMA_Abort_IT+0x44c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d045      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a4d      	ldr	r2, [pc, #308]	; (800462c <HAL_DMA_Abort_IT+0x450>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d040      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a4c      	ldr	r2, [pc, #304]	; (8004630 <HAL_DMA_Abort_IT+0x454>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d03b      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a4a      	ldr	r2, [pc, #296]	; (8004634 <HAL_DMA_Abort_IT+0x458>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d036      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a49      	ldr	r2, [pc, #292]	; (8004638 <HAL_DMA_Abort_IT+0x45c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d031      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a47      	ldr	r2, [pc, #284]	; (800463c <HAL_DMA_Abort_IT+0x460>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d02c      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a46      	ldr	r2, [pc, #280]	; (8004640 <HAL_DMA_Abort_IT+0x464>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d027      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a44      	ldr	r2, [pc, #272]	; (8004644 <HAL_DMA_Abort_IT+0x468>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a43      	ldr	r2, [pc, #268]	; (8004648 <HAL_DMA_Abort_IT+0x46c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d01d      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a41      	ldr	r2, [pc, #260]	; (800464c <HAL_DMA_Abort_IT+0x470>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a40      	ldr	r2, [pc, #256]	; (8004650 <HAL_DMA_Abort_IT+0x474>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <HAL_DMA_Abort_IT+0x478>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3d      	ldr	r2, [pc, #244]	; (8004658 <HAL_DMA_Abort_IT+0x47c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3b      	ldr	r2, [pc, #236]	; (800465c <HAL_DMA_Abort_IT+0x480>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_DMA_Abort_IT+0x3a0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <HAL_DMA_Abort_IT+0x484>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d101      	bne.n	8004580 <HAL_DMA_Abort_IT+0x3a4>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_DMA_Abort_IT+0x3a6>
 8004580:	2300      	movs	r3, #0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d028      	beq.n	80045d8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004594:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2201      	movs	r2, #1
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40020010 	.word	0x40020010
 8004608:	40020028 	.word	0x40020028
 800460c:	40020040 	.word	0x40020040
 8004610:	40020058 	.word	0x40020058
 8004614:	40020070 	.word	0x40020070
 8004618:	40020088 	.word	0x40020088
 800461c:	400200a0 	.word	0x400200a0
 8004620:	400200b8 	.word	0x400200b8
 8004624:	40020410 	.word	0x40020410
 8004628:	40020428 	.word	0x40020428
 800462c:	40020440 	.word	0x40020440
 8004630:	40020458 	.word	0x40020458
 8004634:	40020470 	.word	0x40020470
 8004638:	40020488 	.word	0x40020488
 800463c:	400204a0 	.word	0x400204a0
 8004640:	400204b8 	.word	0x400204b8
 8004644:	58025408 	.word	0x58025408
 8004648:	5802541c 	.word	0x5802541c
 800464c:	58025430 	.word	0x58025430
 8004650:	58025444 	.word	0x58025444
 8004654:	58025458 	.word	0x58025458
 8004658:	5802546c 	.word	0x5802546c
 800465c:	58025480 	.word	0x58025480
 8004660:	58025494 	.word	0x58025494

08004664 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004670:	4b67      	ldr	r3, [pc, #412]	; (8004810 <HAL_DMA_IRQHandler+0x1ac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a67      	ldr	r2, [pc, #412]	; (8004814 <HAL_DMA_IRQHandler+0x1b0>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	0a9b      	lsrs	r3, r3, #10
 800467c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a5f      	ldr	r2, [pc, #380]	; (8004818 <HAL_DMA_IRQHandler+0x1b4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d04a      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5d      	ldr	r2, [pc, #372]	; (800481c <HAL_DMA_IRQHandler+0x1b8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d045      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5c      	ldr	r2, [pc, #368]	; (8004820 <HAL_DMA_IRQHandler+0x1bc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d040      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5a      	ldr	r2, [pc, #360]	; (8004824 <HAL_DMA_IRQHandler+0x1c0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d03b      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a59      	ldr	r2, [pc, #356]	; (8004828 <HAL_DMA_IRQHandler+0x1c4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d036      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a57      	ldr	r2, [pc, #348]	; (800482c <HAL_DMA_IRQHandler+0x1c8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d031      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a56      	ldr	r2, [pc, #344]	; (8004830 <HAL_DMA_IRQHandler+0x1cc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d02c      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a54      	ldr	r2, [pc, #336]	; (8004834 <HAL_DMA_IRQHandler+0x1d0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d027      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a53      	ldr	r2, [pc, #332]	; (8004838 <HAL_DMA_IRQHandler+0x1d4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a51      	ldr	r2, [pc, #324]	; (800483c <HAL_DMA_IRQHandler+0x1d8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a50      	ldr	r2, [pc, #320]	; (8004840 <HAL_DMA_IRQHandler+0x1dc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4e      	ldr	r2, [pc, #312]	; (8004844 <HAL_DMA_IRQHandler+0x1e0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a4d      	ldr	r2, [pc, #308]	; (8004848 <HAL_DMA_IRQHandler+0x1e4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a4b      	ldr	r2, [pc, #300]	; (800484c <HAL_DMA_IRQHandler+0x1e8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a4a      	ldr	r2, [pc, #296]	; (8004850 <HAL_DMA_IRQHandler+0x1ec>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_DMA_IRQHandler+0xd2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a48      	ldr	r2, [pc, #288]	; (8004854 <HAL_DMA_IRQHandler+0x1f0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_DMA_IRQHandler+0xd6>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_DMA_IRQHandler+0xd8>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 842b 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2208      	movs	r2, #8
 800474c:	409a      	lsls	r2, r3
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a2 	beq.w	800489c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <HAL_DMA_IRQHandler+0x1b4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d04a      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_DMA_IRQHandler+0x1b8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d045      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <HAL_DMA_IRQHandler+0x1bc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d040      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <HAL_DMA_IRQHandler+0x1c0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d03b      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_DMA_IRQHandler+0x1c4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d036      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a27      	ldr	r2, [pc, #156]	; (800482c <HAL_DMA_IRQHandler+0x1c8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d031      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_DMA_IRQHandler+0x1cc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02c      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <HAL_DMA_IRQHandler+0x1d0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d027      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_DMA_IRQHandler+0x1d4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a21      	ldr	r2, [pc, #132]	; (800483c <HAL_DMA_IRQHandler+0x1d8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_DMA_IRQHandler+0x1dc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_DMA_IRQHandler+0x1e0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_DMA_IRQHandler+0x1e4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_DMA_IRQHandler+0x1e8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <HAL_DMA_IRQHandler+0x1ec>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x194>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a18      	ldr	r2, [pc, #96]	; (8004854 <HAL_DMA_IRQHandler+0x1f0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d12f      	bne.n	8004858 <HAL_DMA_IRQHandler+0x1f4>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e02e      	b.n	800486c <HAL_DMA_IRQHandler+0x208>
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000
 8004814:	1b4e81b5 	.word	0x1b4e81b5
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2208      	movs	r2, #8
 800488a:	409a      	lsls	r2, r3
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f043 0201 	orr.w	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d06e      	beq.n	8004990 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a69      	ldr	r2, [pc, #420]	; (8004a5c <HAL_DMA_IRQHandler+0x3f8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04a      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a67      	ldr	r2, [pc, #412]	; (8004a60 <HAL_DMA_IRQHandler+0x3fc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d045      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a66      	ldr	r2, [pc, #408]	; (8004a64 <HAL_DMA_IRQHandler+0x400>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d040      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a64      	ldr	r2, [pc, #400]	; (8004a68 <HAL_DMA_IRQHandler+0x404>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d03b      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a63      	ldr	r2, [pc, #396]	; (8004a6c <HAL_DMA_IRQHandler+0x408>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <HAL_DMA_IRQHandler+0x40c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a60      	ldr	r2, [pc, #384]	; (8004a74 <HAL_DMA_IRQHandler+0x410>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02c      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a5e      	ldr	r2, [pc, #376]	; (8004a78 <HAL_DMA_IRQHandler+0x414>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d027      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5d      	ldr	r2, [pc, #372]	; (8004a7c <HAL_DMA_IRQHandler+0x418>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <HAL_DMA_IRQHandler+0x41c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a5a      	ldr	r2, [pc, #360]	; (8004a84 <HAL_DMA_IRQHandler+0x420>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <HAL_DMA_IRQHandler+0x424>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <HAL_DMA_IRQHandler+0x428>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a55      	ldr	r2, [pc, #340]	; (8004a90 <HAL_DMA_IRQHandler+0x42c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a54      	ldr	r2, [pc, #336]	; (8004a94 <HAL_DMA_IRQHandler+0x430>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_IRQHandler+0x2ee>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a52      	ldr	r2, [pc, #328]	; (8004a98 <HAL_DMA_IRQHandler+0x434>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10a      	bne.n	8004968 <HAL_DMA_IRQHandler+0x304>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e003      	b.n	8004970 <HAL_DMA_IRQHandler+0x30c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	f043 0202 	orr.w	r2, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2204      	movs	r2, #4
 800499a:	409a      	lsls	r2, r3
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 808f 	beq.w	8004ac4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <HAL_DMA_IRQHandler+0x3f8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04a      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <HAL_DMA_IRQHandler+0x3fc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d045      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a29      	ldr	r2, [pc, #164]	; (8004a64 <HAL_DMA_IRQHandler+0x400>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d040      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <HAL_DMA_IRQHandler+0x404>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d03b      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a26      	ldr	r2, [pc, #152]	; (8004a6c <HAL_DMA_IRQHandler+0x408>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d036      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <HAL_DMA_IRQHandler+0x40c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <HAL_DMA_IRQHandler+0x410>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d02c      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <HAL_DMA_IRQHandler+0x414>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d027      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <HAL_DMA_IRQHandler+0x418>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_DMA_IRQHandler+0x41c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01d      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_DMA_IRQHandler+0x420>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <HAL_DMA_IRQHandler+0x424>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <HAL_DMA_IRQHandler+0x428>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <HAL_DMA_IRQHandler+0x42c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <HAL_DMA_IRQHandler+0x430>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x3e2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <HAL_DMA_IRQHandler+0x434>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d12a      	bne.n	8004a9c <HAL_DMA_IRQHandler+0x438>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e023      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x440>
 8004a5c:	40020010 	.word	0x40020010
 8004a60:	40020028 	.word	0x40020028
 8004a64:	40020040 	.word	0x40020040
 8004a68:	40020058 	.word	0x40020058
 8004a6c:	40020070 	.word	0x40020070
 8004a70:	40020088 	.word	0x40020088
 8004a74:	400200a0 	.word	0x400200a0
 8004a78:	400200b8 	.word	0x400200b8
 8004a7c:	40020410 	.word	0x40020410
 8004a80:	40020428 	.word	0x40020428
 8004a84:	40020440 	.word	0x40020440
 8004a88:	40020458 	.word	0x40020458
 8004a8c:	40020470 	.word	0x40020470
 8004a90:	40020488 	.word	0x40020488
 8004a94:	400204a0 	.word	0x400204a0
 8004a98:	400204b8 	.word	0x400204b8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	2210      	movs	r2, #16
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80a6 	beq.w	8004c26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a85      	ldr	r2, [pc, #532]	; (8004cf4 <HAL_DMA_IRQHandler+0x690>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d04a      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a83      	ldr	r2, [pc, #524]	; (8004cf8 <HAL_DMA_IRQHandler+0x694>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d045      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a82      	ldr	r2, [pc, #520]	; (8004cfc <HAL_DMA_IRQHandler+0x698>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d040      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a80      	ldr	r2, [pc, #512]	; (8004d00 <HAL_DMA_IRQHandler+0x69c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d03b      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a7f      	ldr	r2, [pc, #508]	; (8004d04 <HAL_DMA_IRQHandler+0x6a0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d036      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a7d      	ldr	r2, [pc, #500]	; (8004d08 <HAL_DMA_IRQHandler+0x6a4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d031      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7c      	ldr	r2, [pc, #496]	; (8004d0c <HAL_DMA_IRQHandler+0x6a8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d02c      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7a      	ldr	r2, [pc, #488]	; (8004d10 <HAL_DMA_IRQHandler+0x6ac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d027      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a79      	ldr	r2, [pc, #484]	; (8004d14 <HAL_DMA_IRQHandler+0x6b0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d022      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a77      	ldr	r2, [pc, #476]	; (8004d18 <HAL_DMA_IRQHandler+0x6b4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01d      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a76      	ldr	r2, [pc, #472]	; (8004d1c <HAL_DMA_IRQHandler+0x6b8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d018      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a74      	ldr	r2, [pc, #464]	; (8004d20 <HAL_DMA_IRQHandler+0x6bc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a73      	ldr	r2, [pc, #460]	; (8004d24 <HAL_DMA_IRQHandler+0x6c0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a71      	ldr	r2, [pc, #452]	; (8004d28 <HAL_DMA_IRQHandler+0x6c4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a70      	ldr	r2, [pc, #448]	; (8004d2c <HAL_DMA_IRQHandler+0x6c8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x516>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a6e      	ldr	r2, [pc, #440]	; (8004d30 <HAL_DMA_IRQHandler+0x6cc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10a      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x52c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e009      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x540>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d03e      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d018      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d108      	bne.n	8004be6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d024      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
 8004be4:	e01f      	b.n	8004c26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e016      	b.n	8004c26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0208 	bic.w	r2, r2, #8
 8004c14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2220      	movs	r2, #32
 8004c30:	409a      	lsls	r2, r3
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8110 	beq.w	8004e5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <HAL_DMA_IRQHandler+0x690>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d04a      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_DMA_IRQHandler+0x694>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d045      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_DMA_IRQHandler+0x698>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d040      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <HAL_DMA_IRQHandler+0x69c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d03b      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <HAL_DMA_IRQHandler+0x6a0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d036      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <HAL_DMA_IRQHandler+0x6a4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d031      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <HAL_DMA_IRQHandler+0x6a8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d02c      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <HAL_DMA_IRQHandler+0x6ac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d027      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <HAL_DMA_IRQHandler+0x6b0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d022      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_DMA_IRQHandler+0x6b4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d01d      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_DMA_IRQHandler+0x6b8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_DMA_IRQHandler+0x6bc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_DMA_IRQHandler+0x6c0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_DMA_IRQHandler+0x6c4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <HAL_DMA_IRQHandler+0x6c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x678>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <HAL_DMA_IRQHandler+0x6cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d12b      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x6d0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e02a      	b.n	8004d48 <HAL_DMA_IRQHandler+0x6e4>
 8004cf2:	bf00      	nop
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf14      	ite	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	2300      	moveq	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8087 	beq.w	8004e5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	2220      	movs	r2, #32
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d139      	bne.n	8004dde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0216 	bic.w	r2, r2, #22
 8004d78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <HAL_DMA_IRQHandler+0x736>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0208 	bic.w	r2, r2, #8
 8004da8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	223f      	movs	r2, #63	; 0x3f
 8004db4:	409a      	lsls	r2, r3
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 834a 	beq.w	8005468 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
          }
          return;
 8004ddc:	e344      	b.n	8005468 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d018      	beq.n	8004e1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d108      	bne.n	8004e0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02c      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
 8004e0a:	e027      	b.n	8004e5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d023      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
 8004e1c:	e01e      	b.n	8004e5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10f      	bne.n	8004e4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0210 	bic.w	r2, r2, #16
 8004e3a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8306 	beq.w	8005472 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8088 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a7a      	ldr	r2, [pc, #488]	; (800506c <HAL_DMA_IRQHandler+0xa08>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d04a      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a79      	ldr	r2, [pc, #484]	; (8005070 <HAL_DMA_IRQHandler+0xa0c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d045      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a77      	ldr	r2, [pc, #476]	; (8005074 <HAL_DMA_IRQHandler+0xa10>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d040      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a76      	ldr	r2, [pc, #472]	; (8005078 <HAL_DMA_IRQHandler+0xa14>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d03b      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a74      	ldr	r2, [pc, #464]	; (800507c <HAL_DMA_IRQHandler+0xa18>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d036      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a73      	ldr	r2, [pc, #460]	; (8005080 <HAL_DMA_IRQHandler+0xa1c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d031      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a71      	ldr	r2, [pc, #452]	; (8005084 <HAL_DMA_IRQHandler+0xa20>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02c      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a70      	ldr	r2, [pc, #448]	; (8005088 <HAL_DMA_IRQHandler+0xa24>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d027      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a6e      	ldr	r2, [pc, #440]	; (800508c <HAL_DMA_IRQHandler+0xa28>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d022      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6d      	ldr	r2, [pc, #436]	; (8005090 <HAL_DMA_IRQHandler+0xa2c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d01d      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6b      	ldr	r2, [pc, #428]	; (8005094 <HAL_DMA_IRQHandler+0xa30>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6a      	ldr	r2, [pc, #424]	; (8005098 <HAL_DMA_IRQHandler+0xa34>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a68      	ldr	r2, [pc, #416]	; (800509c <HAL_DMA_IRQHandler+0xa38>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a65      	ldr	r2, [pc, #404]	; (80050a4 <HAL_DMA_IRQHandler+0xa40>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x8b8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a64      	ldr	r2, [pc, #400]	; (80050a8 <HAL_DMA_IRQHandler+0xa44>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <HAL_DMA_IRQHandler+0x8ca>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e007      	b.n	8004f3e <HAL_DMA_IRQHandler+0x8da>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d307      	bcc.n	8004f5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f2      	bne.n	8004f3e <HAL_DMA_IRQHandler+0x8da>
 8004f58:	e000      	b.n	8004f5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f5a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2203      	movs	r2, #3
 8004f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f7a:	e003      	b.n	8004f84 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8272 	beq.w	8005472 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	4798      	blx	r3
 8004f96:	e26c      	b.n	8005472 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a43      	ldr	r2, [pc, #268]	; (80050ac <HAL_DMA_IRQHandler+0xa48>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a42      	ldr	r2, [pc, #264]	; (80050b0 <HAL_DMA_IRQHandler+0xa4c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a40      	ldr	r2, [pc, #256]	; (80050b4 <HAL_DMA_IRQHandler+0xa50>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <HAL_DMA_IRQHandler+0xa54>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3d      	ldr	r2, [pc, #244]	; (80050bc <HAL_DMA_IRQHandler+0xa58>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <HAL_DMA_IRQHandler+0xa5c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <HAL_DMA_IRQHandler+0xa60>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x984>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a39      	ldr	r2, [pc, #228]	; (80050c8 <HAL_DMA_IRQHandler+0xa64>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_IRQHandler+0x988>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_DMA_IRQHandler+0x98a>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 823f 	beq.w	8005472 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	2204      	movs	r2, #4
 8005006:	409a      	lsls	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80cd 	beq.w	80051ac <HAL_DMA_IRQHandler+0xb48>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80c7 	beq.w	80051ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2204      	movs	r2, #4
 8005028:	409a      	lsls	r2, r3
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d049      	beq.n	80050cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8210 	beq.w	800546c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005054:	e20a      	b.n	800546c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8206 	beq.w	800546c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005068:	e200      	b.n	800546c <HAL_DMA_IRQHandler+0xe08>
 800506a:	bf00      	nop
 800506c:	40020010 	.word	0x40020010
 8005070:	40020028 	.word	0x40020028
 8005074:	40020040 	.word	0x40020040
 8005078:	40020058 	.word	0x40020058
 800507c:	40020070 	.word	0x40020070
 8005080:	40020088 	.word	0x40020088
 8005084:	400200a0 	.word	0x400200a0
 8005088:	400200b8 	.word	0x400200b8
 800508c:	40020410 	.word	0x40020410
 8005090:	40020428 	.word	0x40020428
 8005094:	40020440 	.word	0x40020440
 8005098:	40020458 	.word	0x40020458
 800509c:	40020470 	.word	0x40020470
 80050a0:	40020488 	.word	0x40020488
 80050a4:	400204a0 	.word	0x400204a0
 80050a8:	400204b8 	.word	0x400204b8
 80050ac:	58025408 	.word	0x58025408
 80050b0:	5802541c 	.word	0x5802541c
 80050b4:	58025430 	.word	0x58025430
 80050b8:	58025444 	.word	0x58025444
 80050bc:	58025458 	.word	0x58025458
 80050c0:	5802546c 	.word	0x5802546c
 80050c4:	58025480 	.word	0x58025480
 80050c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d160      	bne.n	8005198 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a8c      	ldr	r2, [pc, #560]	; (800530c <HAL_DMA_IRQHandler+0xca8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d04a      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a8a      	ldr	r2, [pc, #552]	; (8005310 <HAL_DMA_IRQHandler+0xcac>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d045      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a89      	ldr	r2, [pc, #548]	; (8005314 <HAL_DMA_IRQHandler+0xcb0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d040      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a87      	ldr	r2, [pc, #540]	; (8005318 <HAL_DMA_IRQHandler+0xcb4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d03b      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a86      	ldr	r2, [pc, #536]	; (800531c <HAL_DMA_IRQHandler+0xcb8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d036      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a84      	ldr	r2, [pc, #528]	; (8005320 <HAL_DMA_IRQHandler+0xcbc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d031      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a83      	ldr	r2, [pc, #524]	; (8005324 <HAL_DMA_IRQHandler+0xcc0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d02c      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a81      	ldr	r2, [pc, #516]	; (8005328 <HAL_DMA_IRQHandler+0xcc4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d027      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a80      	ldr	r2, [pc, #512]	; (800532c <HAL_DMA_IRQHandler+0xcc8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d022      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a7e      	ldr	r2, [pc, #504]	; (8005330 <HAL_DMA_IRQHandler+0xccc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01d      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_DMA_IRQHandler+0xcd0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a7b      	ldr	r2, [pc, #492]	; (8005338 <HAL_DMA_IRQHandler+0xcd4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a7a      	ldr	r2, [pc, #488]	; (800533c <HAL_DMA_IRQHandler+0xcd8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a78      	ldr	r2, [pc, #480]	; (8005340 <HAL_DMA_IRQHandler+0xcdc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a77      	ldr	r2, [pc, #476]	; (8005344 <HAL_DMA_IRQHandler+0xce0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_DMA_IRQHandler+0xb12>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a75      	ldr	r2, [pc, #468]	; (8005348 <HAL_DMA_IRQHandler+0xce4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <HAL_DMA_IRQHandler+0xb24>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0208 	bic.w	r2, r2, #8
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e007      	b.n	8005198 <HAL_DMA_IRQHandler+0xb34>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0204 	bic.w	r2, r2, #4
 8005196:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8165 	beq.w	800546c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051aa:	e15f      	b.n	800546c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2202      	movs	r2, #2
 80051b6:	409a      	lsls	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80c5 	beq.w	800534c <HAL_DMA_IRQHandler+0xce8>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80bf 	beq.w	800534c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2202      	movs	r2, #2
 80051d8:	409a      	lsls	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d018      	beq.n	800521a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 813a 	beq.w	8005470 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005204:	e134      	b.n	8005470 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8130 	beq.w	8005470 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005218:	e12a      	b.n	8005470 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d168      	bne.n	80052f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a38      	ldr	r2, [pc, #224]	; (800530c <HAL_DMA_IRQHandler+0xca8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a37      	ldr	r2, [pc, #220]	; (8005310 <HAL_DMA_IRQHandler+0xcac>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a35      	ldr	r2, [pc, #212]	; (8005314 <HAL_DMA_IRQHandler+0xcb0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a34      	ldr	r2, [pc, #208]	; (8005318 <HAL_DMA_IRQHandler+0xcb4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a32      	ldr	r2, [pc, #200]	; (800531c <HAL_DMA_IRQHandler+0xcb8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a31      	ldr	r2, [pc, #196]	; (8005320 <HAL_DMA_IRQHandler+0xcbc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <HAL_DMA_IRQHandler+0xcc0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2e      	ldr	r2, [pc, #184]	; (8005328 <HAL_DMA_IRQHandler+0xcc4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2c      	ldr	r2, [pc, #176]	; (800532c <HAL_DMA_IRQHandler+0xcc8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <HAL_DMA_IRQHandler+0xccc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a29      	ldr	r2, [pc, #164]	; (8005334 <HAL_DMA_IRQHandler+0xcd0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a28      	ldr	r2, [pc, #160]	; (8005338 <HAL_DMA_IRQHandler+0xcd4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a26      	ldr	r2, [pc, #152]	; (800533c <HAL_DMA_IRQHandler+0xcd8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a25      	ldr	r2, [pc, #148]	; (8005340 <HAL_DMA_IRQHandler+0xcdc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <HAL_DMA_IRQHandler+0xce0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_IRQHandler+0xc60>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a22      	ldr	r2, [pc, #136]	; (8005348 <HAL_DMA_IRQHandler+0xce4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d108      	bne.n	80052d6 <HAL_DMA_IRQHandler+0xc72>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0214 	bic.w	r2, r2, #20
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e007      	b.n	80052e6 <HAL_DMA_IRQHandler+0xc82>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 020a 	bic.w	r2, r2, #10
 80052e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80b8 	beq.w	8005470 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005308:	e0b2      	b.n	8005470 <HAL_DMA_IRQHandler+0xe0c>
 800530a:	bf00      	nop
 800530c:	40020010 	.word	0x40020010
 8005310:	40020028 	.word	0x40020028
 8005314:	40020040 	.word	0x40020040
 8005318:	40020058 	.word	0x40020058
 800531c:	40020070 	.word	0x40020070
 8005320:	40020088 	.word	0x40020088
 8005324:	400200a0 	.word	0x400200a0
 8005328:	400200b8 	.word	0x400200b8
 800532c:	40020410 	.word	0x40020410
 8005330:	40020428 	.word	0x40020428
 8005334:	40020440 	.word	0x40020440
 8005338:	40020458 	.word	0x40020458
 800533c:	40020470 	.word	0x40020470
 8005340:	40020488 	.word	0x40020488
 8005344:	400204a0 	.word	0x400204a0
 8005348:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2208      	movs	r2, #8
 8005356:	409a      	lsls	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8088 	beq.w	8005472 <HAL_DMA_IRQHandler+0xe0e>
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8082 	beq.w	8005472 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a41      	ldr	r2, [pc, #260]	; (8005478 <HAL_DMA_IRQHandler+0xe14>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04a      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <HAL_DMA_IRQHandler+0xe18>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d045      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a3e      	ldr	r2, [pc, #248]	; (8005480 <HAL_DMA_IRQHandler+0xe1c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a3c      	ldr	r2, [pc, #240]	; (8005484 <HAL_DMA_IRQHandler+0xe20>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d03b      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a3b      	ldr	r2, [pc, #236]	; (8005488 <HAL_DMA_IRQHandler+0xe24>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d036      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a39      	ldr	r2, [pc, #228]	; (800548c <HAL_DMA_IRQHandler+0xe28>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a38      	ldr	r2, [pc, #224]	; (8005490 <HAL_DMA_IRQHandler+0xe2c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d02c      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a36      	ldr	r2, [pc, #216]	; (8005494 <HAL_DMA_IRQHandler+0xe30>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d027      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a35      	ldr	r2, [pc, #212]	; (8005498 <HAL_DMA_IRQHandler+0xe34>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a33      	ldr	r2, [pc, #204]	; (800549c <HAL_DMA_IRQHandler+0xe38>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01d      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <HAL_DMA_IRQHandler+0xe3c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a30      	ldr	r2, [pc, #192]	; (80054a4 <HAL_DMA_IRQHandler+0xe40>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <HAL_DMA_IRQHandler+0xe44>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2d      	ldr	r2, [pc, #180]	; (80054ac <HAL_DMA_IRQHandler+0xe48>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2c      	ldr	r2, [pc, #176]	; (80054b0 <HAL_DMA_IRQHandler+0xe4c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_DMA_IRQHandler+0xdaa>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <HAL_DMA_IRQHandler+0xe50>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <HAL_DMA_IRQHandler+0xdbc>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 021c 	bic.w	r2, r2, #28
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e007      	b.n	8005430 <HAL_DMA_IRQHandler+0xdcc>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 020e 	bic.w	r2, r2, #14
 800542e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	2201      	movs	r2, #1
 800543a:	409a      	lsls	r2, r3
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
 8005466:	e004      	b.n	8005472 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005468:	bf00      	nop
 800546a:	e002      	b.n	8005472 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800546c:	bf00      	nop
 800546e:	e000      	b.n	8005472 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005470:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005472:	3728      	adds	r7, #40	; 0x28
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40020010 	.word	0x40020010
 800547c:	40020028 	.word	0x40020028
 8005480:	40020040 	.word	0x40020040
 8005484:	40020058 	.word	0x40020058
 8005488:	40020070 	.word	0x40020070
 800548c:	40020088 	.word	0x40020088
 8005490:	400200a0 	.word	0x400200a0
 8005494:	400200b8 	.word	0x400200b8
 8005498:	40020410 	.word	0x40020410
 800549c:	40020428 	.word	0x40020428
 80054a0:	40020440 	.word	0x40020440
 80054a4:	40020458 	.word	0x40020458
 80054a8:	40020470 	.word	0x40020470
 80054ac:	40020488 	.word	0x40020488
 80054b0:	400204a0 	.word	0x400204a0
 80054b4:	400204b8 	.word	0x400204b8

080054b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a84      	ldr	r2, [pc, #528]	; (8005700 <DMA_SetConfig+0x230>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d072      	beq.n	80055da <DMA_SetConfig+0x10a>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a82      	ldr	r2, [pc, #520]	; (8005704 <DMA_SetConfig+0x234>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d06d      	beq.n	80055da <DMA_SetConfig+0x10a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a81      	ldr	r2, [pc, #516]	; (8005708 <DMA_SetConfig+0x238>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d068      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7f      	ldr	r2, [pc, #508]	; (800570c <DMA_SetConfig+0x23c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d063      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7e      	ldr	r2, [pc, #504]	; (8005710 <DMA_SetConfig+0x240>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d05e      	beq.n	80055da <DMA_SetConfig+0x10a>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7c      	ldr	r2, [pc, #496]	; (8005714 <DMA_SetConfig+0x244>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d059      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a7b      	ldr	r2, [pc, #492]	; (8005718 <DMA_SetConfig+0x248>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d054      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a79      	ldr	r2, [pc, #484]	; (800571c <DMA_SetConfig+0x24c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04f      	beq.n	80055da <DMA_SetConfig+0x10a>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a78      	ldr	r2, [pc, #480]	; (8005720 <DMA_SetConfig+0x250>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d04a      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a76      	ldr	r2, [pc, #472]	; (8005724 <DMA_SetConfig+0x254>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d045      	beq.n	80055da <DMA_SetConfig+0x10a>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a75      	ldr	r2, [pc, #468]	; (8005728 <DMA_SetConfig+0x258>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d040      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a73      	ldr	r2, [pc, #460]	; (800572c <DMA_SetConfig+0x25c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d03b      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a72      	ldr	r2, [pc, #456]	; (8005730 <DMA_SetConfig+0x260>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d036      	beq.n	80055da <DMA_SetConfig+0x10a>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a70      	ldr	r2, [pc, #448]	; (8005734 <DMA_SetConfig+0x264>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d031      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6f      	ldr	r2, [pc, #444]	; (8005738 <DMA_SetConfig+0x268>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d02c      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a6d      	ldr	r2, [pc, #436]	; (800573c <DMA_SetConfig+0x26c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d027      	beq.n	80055da <DMA_SetConfig+0x10a>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6c      	ldr	r2, [pc, #432]	; (8005740 <DMA_SetConfig+0x270>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d022      	beq.n	80055da <DMA_SetConfig+0x10a>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a6a      	ldr	r2, [pc, #424]	; (8005744 <DMA_SetConfig+0x274>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01d      	beq.n	80055da <DMA_SetConfig+0x10a>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a69      	ldr	r2, [pc, #420]	; (8005748 <DMA_SetConfig+0x278>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d018      	beq.n	80055da <DMA_SetConfig+0x10a>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a67      	ldr	r2, [pc, #412]	; (800574c <DMA_SetConfig+0x27c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <DMA_SetConfig+0x10a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a66      	ldr	r2, [pc, #408]	; (8005750 <DMA_SetConfig+0x280>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00e      	beq.n	80055da <DMA_SetConfig+0x10a>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a64      	ldr	r2, [pc, #400]	; (8005754 <DMA_SetConfig+0x284>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d009      	beq.n	80055da <DMA_SetConfig+0x10a>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a63      	ldr	r2, [pc, #396]	; (8005758 <DMA_SetConfig+0x288>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <DMA_SetConfig+0x10a>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a61      	ldr	r2, [pc, #388]	; (800575c <DMA_SetConfig+0x28c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d101      	bne.n	80055de <DMA_SetConfig+0x10e>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <DMA_SetConfig+0x110>
 80055de:	2300      	movs	r3, #0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00d      	beq.n	8005600 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a3e      	ldr	r2, [pc, #248]	; (8005700 <DMA_SetConfig+0x230>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d04a      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3d      	ldr	r2, [pc, #244]	; (8005704 <DMA_SetConfig+0x234>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d045      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a3b      	ldr	r2, [pc, #236]	; (8005708 <DMA_SetConfig+0x238>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d040      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a3a      	ldr	r2, [pc, #232]	; (800570c <DMA_SetConfig+0x23c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d03b      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a38      	ldr	r2, [pc, #224]	; (8005710 <DMA_SetConfig+0x240>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d036      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a37      	ldr	r2, [pc, #220]	; (8005714 <DMA_SetConfig+0x244>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d031      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a35      	ldr	r2, [pc, #212]	; (8005718 <DMA_SetConfig+0x248>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d02c      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a34      	ldr	r2, [pc, #208]	; (800571c <DMA_SetConfig+0x24c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d027      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a32      	ldr	r2, [pc, #200]	; (8005720 <DMA_SetConfig+0x250>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a31      	ldr	r2, [pc, #196]	; (8005724 <DMA_SetConfig+0x254>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d01d      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <DMA_SetConfig+0x258>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <DMA_SetConfig+0x25c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <DMA_SetConfig+0x260>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <DMA_SetConfig+0x264>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a29      	ldr	r2, [pc, #164]	; (8005738 <DMA_SetConfig+0x268>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <DMA_SetConfig+0x1d0>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a28      	ldr	r2, [pc, #160]	; (800573c <DMA_SetConfig+0x26c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d101      	bne.n	80056a4 <DMA_SetConfig+0x1d4>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <DMA_SetConfig+0x1d6>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d05a      	beq.n	8005760 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	223f      	movs	r2, #63	; 0x3f
 80056b4:	409a      	lsls	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d108      	bne.n	80056ec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80056ea:	e087      	b.n	80057fc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]
}
 80056fc:	e07e      	b.n	80057fc <DMA_SetConfig+0x32c>
 80056fe:	bf00      	nop
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
 8005740:	58025408 	.word	0x58025408
 8005744:	5802541c 	.word	0x5802541c
 8005748:	58025430 	.word	0x58025430
 800574c:	58025444 	.word	0x58025444
 8005750:	58025458 	.word	0x58025458
 8005754:	5802546c 	.word	0x5802546c
 8005758:	58025480 	.word	0x58025480
 800575c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a28      	ldr	r2, [pc, #160]	; (8005808 <DMA_SetConfig+0x338>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d022      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a27      	ldr	r2, [pc, #156]	; (800580c <DMA_SetConfig+0x33c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d01d      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a25      	ldr	r2, [pc, #148]	; (8005810 <DMA_SetConfig+0x340>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d018      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a24      	ldr	r2, [pc, #144]	; (8005814 <DMA_SetConfig+0x344>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a22      	ldr	r2, [pc, #136]	; (8005818 <DMA_SetConfig+0x348>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00e      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a21      	ldr	r2, [pc, #132]	; (800581c <DMA_SetConfig+0x34c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d009      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <DMA_SetConfig+0x350>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <DMA_SetConfig+0x2e0>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <DMA_SetConfig+0x354>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d101      	bne.n	80057b4 <DMA_SetConfig+0x2e4>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <DMA_SetConfig+0x2e6>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d020      	beq.n	80057fc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2201      	movs	r2, #1
 80057c4:	409a      	lsls	r2, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d108      	bne.n	80057ec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	60da      	str	r2, [r3, #12]
}
 80057ea:	e007      	b.n	80057fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	60da      	str	r2, [r3, #12]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	58025408 	.word	0x58025408
 800580c:	5802541c 	.word	0x5802541c
 8005810:	58025430 	.word	0x58025430
 8005814:	58025444 	.word	0x58025444
 8005818:	58025458 	.word	0x58025458
 800581c:	5802546c 	.word	0x5802546c
 8005820:	58025480 	.word	0x58025480
 8005824:	58025494 	.word	0x58025494

08005828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a42      	ldr	r2, [pc, #264]	; (8005940 <DMA_CalcBaseAndBitshift+0x118>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d04a      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a41      	ldr	r2, [pc, #260]	; (8005944 <DMA_CalcBaseAndBitshift+0x11c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d045      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <DMA_CalcBaseAndBitshift+0x120>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d040      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a3e      	ldr	r2, [pc, #248]	; (800594c <DMA_CalcBaseAndBitshift+0x124>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d03b      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3c      	ldr	r2, [pc, #240]	; (8005950 <DMA_CalcBaseAndBitshift+0x128>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d036      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3b      	ldr	r2, [pc, #236]	; (8005954 <DMA_CalcBaseAndBitshift+0x12c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d031      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a39      	ldr	r2, [pc, #228]	; (8005958 <DMA_CalcBaseAndBitshift+0x130>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d02c      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a38      	ldr	r2, [pc, #224]	; (800595c <DMA_CalcBaseAndBitshift+0x134>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d027      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a36      	ldr	r2, [pc, #216]	; (8005960 <DMA_CalcBaseAndBitshift+0x138>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a35      	ldr	r2, [pc, #212]	; (8005964 <DMA_CalcBaseAndBitshift+0x13c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d01d      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a33      	ldr	r2, [pc, #204]	; (8005968 <DMA_CalcBaseAndBitshift+0x140>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a32      	ldr	r2, [pc, #200]	; (800596c <DMA_CalcBaseAndBitshift+0x144>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a30      	ldr	r2, [pc, #192]	; (8005970 <DMA_CalcBaseAndBitshift+0x148>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <DMA_CalcBaseAndBitshift+0x14c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <DMA_CalcBaseAndBitshift+0x150>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <DMA_CalcBaseAndBitshift+0xa8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <DMA_CalcBaseAndBitshift+0x154>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <DMA_CalcBaseAndBitshift+0xac>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <DMA_CalcBaseAndBitshift+0xae>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d024      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	3b10      	subs	r3, #16
 80058e2:	4a27      	ldr	r2, [pc, #156]	; (8005980 <DMA_CalcBaseAndBitshift+0x158>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <DMA_CalcBaseAndBitshift+0x15c>)
 80058f4:	5cd3      	ldrb	r3, [r2, r3]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d908      	bls.n	8005914 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <DMA_CalcBaseAndBitshift+0x160>)
 800590a:	4013      	ands	r3, r2
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	659a      	str	r2, [r3, #88]	; 0x58
 8005912:	e00d      	b.n	8005930 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <DMA_CalcBaseAndBitshift+0x160>)
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6593      	str	r3, [r2, #88]	; 0x58
 8005922:	e005      	b.n	8005930 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40020010 	.word	0x40020010
 8005944:	40020028 	.word	0x40020028
 8005948:	40020040 	.word	0x40020040
 800594c:	40020058 	.word	0x40020058
 8005950:	40020070 	.word	0x40020070
 8005954:	40020088 	.word	0x40020088
 8005958:	400200a0 	.word	0x400200a0
 800595c:	400200b8 	.word	0x400200b8
 8005960:	40020410 	.word	0x40020410
 8005964:	40020428 	.word	0x40020428
 8005968:	40020440 	.word	0x40020440
 800596c:	40020458 	.word	0x40020458
 8005970:	40020470 	.word	0x40020470
 8005974:	40020488 	.word	0x40020488
 8005978:	400204a0 	.word	0x400204a0
 800597c:	400204b8 	.word	0x400204b8
 8005980:	aaaaaaab 	.word	0xaaaaaaab
 8005984:	0800c258 	.word	0x0800c258
 8005988:	fffffc00 	.word	0xfffffc00

0800598c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d120      	bne.n	80059e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d858      	bhi.n	8005a5a <DMA_CheckFifoParam+0xce>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <DMA_CheckFifoParam+0x24>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d3 	.word	0x080059d3
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	08005a5b 	.word	0x08005a5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d048      	beq.n	8005a5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059d0:	e045      	b.n	8005a5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059da:	d142      	bne.n	8005a62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059e0:	e03f      	b.n	8005a62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ea:	d123      	bne.n	8005a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d838      	bhi.n	8005a66 <DMA_CheckFifoParam+0xda>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <DMA_CheckFifoParam+0x70>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a13 	.word	0x08005a13
 8005a04:	08005a0d 	.word	0x08005a0d
 8005a08:	08005a25 	.word	0x08005a25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
        break;
 8005a10:	e030      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d025      	beq.n	8005a6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a22:	e022      	b.n	8005a6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a2c:	d11f      	bne.n	8005a6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a32:	e01c      	b.n	8005a6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d902      	bls.n	8005a42 <DMA_CheckFifoParam+0xb6>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d003      	beq.n	8005a48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005a40:	e018      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
        break;
 8005a46:	e015      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
    break;
 8005a58:	e00b      	b.n	8005a72 <DMA_CheckFifoParam+0xe6>
        break;
 8005a5a:	bf00      	nop
 8005a5c:	e00a      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        break;
 8005a5e:	bf00      	nop
 8005a60:	e008      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        break;
 8005a62:	bf00      	nop
 8005a64:	e006      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        break;
 8005a66:	bf00      	nop
 8005a68:	e004      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e002      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
        break;
 8005a6e:	bf00      	nop
 8005a70:	e000      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
    break;
 8005a72:	bf00      	nop
    }
  }

  return status;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a38      	ldr	r2, [pc, #224]	; (8005b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d022      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a36      	ldr	r2, [pc, #216]	; (8005b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01d      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a35      	ldr	r2, [pc, #212]	; (8005b80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d018      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a33      	ldr	r2, [pc, #204]	; (8005b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a32      	ldr	r2, [pc, #200]	; (8005b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a30      	ldr	r2, [pc, #192]	; (8005b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2f      	ldr	r2, [pc, #188]	; (8005b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d101      	bne.n	8005ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01a      	beq.n	8005b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	3b08      	subs	r3, #8
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2201      	movs	r2, #1
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b20:	e024      	b.n	8005b6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	3b10      	subs	r3, #16
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d806      	bhi.n	8005b4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d902      	bls.n	8005b4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3308      	adds	r3, #8
 8005b48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	461a      	mov	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005b5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2201      	movs	r2, #1
 8005b66:	409a      	lsls	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	58025408 	.word	0x58025408
 8005b7c:	5802541c 	.word	0x5802541c
 8005b80:	58025430 	.word	0x58025430
 8005b84:	58025444 	.word	0x58025444
 8005b88:	58025458 	.word	0x58025458
 8005b8c:	5802546c 	.word	0x5802546c
 8005b90:	58025480 	.word	0x58025480
 8005b94:	58025494 	.word	0x58025494
 8005b98:	cccccccd 	.word	0xcccccccd
 8005b9c:	16009600 	.word	0x16009600
 8005ba0:	58025880 	.word	0x58025880
 8005ba4:	aaaaaaab 	.word	0xaaaaaaab
 8005ba8:	400204b8 	.word	0x400204b8
 8005bac:	4002040f 	.word	0x4002040f
 8005bb0:	10008200 	.word	0x10008200
 8005bb4:	40020880 	.word	0x40020880

08005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04a      	beq.n	8005c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d847      	bhi.n	8005c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d022      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d01d      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d018      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00e      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d101      	bne.n	8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	461a      	mov	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005c40:	671a      	str	r2, [r3, #112]	; 0x70
 8005c42:	e009      	b.n	8005c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005c56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	409a      	lsls	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	58025408 	.word	0x58025408
 8005c74:	5802541c 	.word	0x5802541c
 8005c78:	58025430 	.word	0x58025430
 8005c7c:	58025444 	.word	0x58025444
 8005c80:	58025458 	.word	0x58025458
 8005c84:	5802546c 	.word	0x5802546c
 8005c88:	58025480 	.word	0x58025480
 8005c8c:	58025494 	.word	0x58025494
 8005c90:	1600963f 	.word	0x1600963f
 8005c94:	58025940 	.word	0x58025940
 8005c98:	1000823f 	.word	0x1000823f
 8005c9c:	40020940 	.word	0x40020940

08005ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cae:	4b89      	ldr	r3, [pc, #548]	; (8005ed4 <HAL_GPIO_Init+0x234>)
 8005cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cb2:	e194      	b.n	8005fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2101      	movs	r1, #1
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8186 	beq.w	8005fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d00b      	beq.n	8005cec <HAL_GPIO_Init+0x4c>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d007      	beq.n	8005cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ce0:	2b11      	cmp	r3, #17
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b12      	cmp	r3, #18
 8005cea:	d130      	bne.n	8005d4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4013      	ands	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d22:	2201      	movs	r2, #1
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 0201 	and.w	r2, r3, #1
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d003      	beq.n	8005d8e <HAL_GPIO_Init+0xee>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b12      	cmp	r3, #18
 8005d8c:	d123      	bne.n	8005dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	08da      	lsrs	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3208      	adds	r2, #8
 8005d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	220f      	movs	r2, #15
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	08da      	lsrs	r2, r3, #3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3208      	adds	r2, #8
 8005dd0:	69b9      	ldr	r1, [r7, #24]
 8005dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	2203      	movs	r2, #3
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f003 0203 	and.w	r2, r3, #3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80e0 	beq.w	8005fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e18:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_GPIO_Init+0x238>)
 8005e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e1e:	4a2e      	ldr	r2, [pc, #184]	; (8005ed8 <HAL_GPIO_Init+0x238>)
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_GPIO_Init+0x238>)
 8005e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e36:	4a29      	ldr	r2, [pc, #164]	; (8005edc <HAL_GPIO_Init+0x23c>)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	220f      	movs	r2, #15
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <HAL_GPIO_Init+0x240>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d052      	beq.n	8005f08 <HAL_GPIO_Init+0x268>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <HAL_GPIO_Init+0x244>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d031      	beq.n	8005ece <HAL_GPIO_Init+0x22e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <HAL_GPIO_Init+0x248>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02b      	beq.n	8005eca <HAL_GPIO_Init+0x22a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <HAL_GPIO_Init+0x24c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d025      	beq.n	8005ec6 <HAL_GPIO_Init+0x226>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <HAL_GPIO_Init+0x250>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01f      	beq.n	8005ec2 <HAL_GPIO_Init+0x222>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a1b      	ldr	r2, [pc, #108]	; (8005ef4 <HAL_GPIO_Init+0x254>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d019      	beq.n	8005ebe <HAL_GPIO_Init+0x21e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ef8 <HAL_GPIO_Init+0x258>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_GPIO_Init+0x21a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <HAL_GPIO_Init+0x25c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00d      	beq.n	8005eb6 <HAL_GPIO_Init+0x216>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <HAL_GPIO_Init+0x260>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <HAL_GPIO_Init+0x212>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <HAL_GPIO_Init+0x264>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d101      	bne.n	8005eae <HAL_GPIO_Init+0x20e>
 8005eaa:	2309      	movs	r3, #9
 8005eac:	e02d      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005eae:	230a      	movs	r3, #10
 8005eb0:	e02b      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	e029      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005eb6:	2307      	movs	r3, #7
 8005eb8:	e027      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005eba:	2306      	movs	r3, #6
 8005ebc:	e025      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005ebe:	2305      	movs	r3, #5
 8005ec0:	e023      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	e021      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e01f      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e01d      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e01b      	b.n	8005f0a <HAL_GPIO_Init+0x26a>
 8005ed2:	bf00      	nop
 8005ed4:	58000080 	.word	0x58000080
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	58000400 	.word	0x58000400
 8005ee0:	58020000 	.word	0x58020000
 8005ee4:	58020400 	.word	0x58020400
 8005ee8:	58020800 	.word	0x58020800
 8005eec:	58020c00 	.word	0x58020c00
 8005ef0:	58021000 	.word	0x58021000
 8005ef4:	58021400 	.word	0x58021400
 8005ef8:	58021800 	.word	0x58021800
 8005efc:	58021c00 	.word	0x58021c00
 8005f00:	58022000 	.word	0x58022000
 8005f04:	58022400 	.word	0x58022400
 8005f08:	2300      	movs	r3, #0
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	f002 0203 	and.w	r2, r2, #3
 8005f10:	0092      	lsls	r2, r2, #2
 8005f12:	4093      	lsls	r3, r2
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f1a:	4938      	ldr	r1, [pc, #224]	; (8005ffc <HAL_GPIO_Init+0x35c>)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	3302      	adds	r3, #2
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f47f ae63 	bne.w	8005cb4 <HAL_GPIO_Init+0x14>
  }
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	3724      	adds	r7, #36	; 0x24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	58000400 	.word	0x58000400

08006000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	887b      	ldrh	r3, [r7, #2]
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
 800601c:	e001      	b.n	8006022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
 800603c:	4613      	mov	r3, r2
 800603e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006040:	787b      	ldrb	r3, [r7, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006046:	887a      	ldrh	r2, [r7, #2]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800604c:	e003      	b.n	8006056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800604e:	887b      	ldrh	r3, [r7, #2]
 8006050:	041a      	lsls	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	619a      	str	r2, [r3, #24]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e041      	b.n	80060f8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800607c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f245 5255 	movw	r2, #21845	; 0x5555
 8006086:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6852      	ldr	r2, [r2, #4]
 8006090:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6892      	ldr	r2, [r2, #8]
 800609a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800609c:	f7fc fec2 	bl	8002e24 <HAL_GetTick>
 80060a0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060a2:	e00f      	b.n	80060c4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80060a4:	f7fc febe 	bl	8002e24 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b30      	cmp	r3, #48	; 0x30
 80060b0:	d908      	bls.n	80060c4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e019      	b.n	80060f8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e8      	bne.n	80060a4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d005      	beq.n	80060ec <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68d2      	ldr	r2, [r2, #12]
 80060e8:	611a      	str	r2, [r3, #16]
 80060ea:	e004      	b.n	80060f6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80060f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006110:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006128:	4b19      	ldr	r3, [pc, #100]	; (8006190 <HAL_PWREx_ConfigSupply+0x70>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b04      	cmp	r3, #4
 8006132:	d00a      	beq.n	800614a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006134:	4b16      	ldr	r3, [pc, #88]	; (8006190 <HAL_PWREx_ConfigSupply+0x70>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	429a      	cmp	r2, r3
 8006140:	d001      	beq.n	8006146 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e01f      	b.n	8006186 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e01d      	b.n	8006186 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800614a:	4b11      	ldr	r3, [pc, #68]	; (8006190 <HAL_PWREx_ConfigSupply+0x70>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f023 0207 	bic.w	r2, r3, #7
 8006152:	490f      	ldr	r1, [pc, #60]	; (8006190 <HAL_PWREx_ConfigSupply+0x70>)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4313      	orrs	r3, r2
 8006158:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800615a:	f7fc fe63 	bl	8002e24 <HAL_GetTick>
 800615e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006160:	e009      	b.n	8006176 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006162:	f7fc fe5f 	bl	8002e24 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006170:	d901      	bls.n	8006176 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e007      	b.n	8006186 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_PWREx_ConfigSupply+0x70>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800617e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006182:	d1ee      	bne.n	8006162 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	58024800 	.word	0x58024800

08006194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e3ff      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8087 	beq.w	80062c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b4:	4b99      	ldr	r3, [pc, #612]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061be:	4b97      	ldr	r3, [pc, #604]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d007      	beq.n	80061da <HAL_RCC_OscConfig+0x46>
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	2b18      	cmp	r3, #24
 80061ce:	d110      	bne.n	80061f2 <HAL_RCC_OscConfig+0x5e>
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d10b      	bne.n	80061f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061da:	4b90      	ldr	r3, [pc, #576]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d06c      	beq.n	80062c0 <HAL_RCC_OscConfig+0x12c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d168      	bne.n	80062c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e3d9      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fa:	d106      	bne.n	800620a <HAL_RCC_OscConfig+0x76>
 80061fc:	4b87      	ldr	r3, [pc, #540]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a86      	ldr	r2, [pc, #536]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e02e      	b.n	8006268 <HAL_RCC_OscConfig+0xd4>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10c      	bne.n	800622c <HAL_RCC_OscConfig+0x98>
 8006212:	4b82      	ldr	r3, [pc, #520]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a81      	ldr	r2, [pc, #516]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	4b7f      	ldr	r3, [pc, #508]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a7e      	ldr	r2, [pc, #504]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e01d      	b.n	8006268 <HAL_RCC_OscConfig+0xd4>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006234:	d10c      	bne.n	8006250 <HAL_RCC_OscConfig+0xbc>
 8006236:	4b79      	ldr	r3, [pc, #484]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a78      	ldr	r2, [pc, #480]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800623c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a75      	ldr	r2, [pc, #468]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e00b      	b.n	8006268 <HAL_RCC_OscConfig+0xd4>
 8006250:	4b72      	ldr	r3, [pc, #456]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a71      	ldr	r2, [pc, #452]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	4b6f      	ldr	r3, [pc, #444]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a6e      	ldr	r2, [pc, #440]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d013      	beq.n	8006298 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fc fdd8 	bl	8002e24 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006278:	f7fc fdd4 	bl	8002e24 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	; 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e38d      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800628a:	4b64      	ldr	r3, [pc, #400]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0xe4>
 8006296:	e014      	b.n	80062c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fc fdc4 	bl	8002e24 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062a0:	f7fc fdc0 	bl	8002e24 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b64      	cmp	r3, #100	; 0x64
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e379      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062b2:	4b5a      	ldr	r3, [pc, #360]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x10c>
 80062be:	e000      	b.n	80062c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80ae 	beq.w	800642c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062d0:	4b52      	ldr	r3, [pc, #328]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062da:	4b50      	ldr	r3, [pc, #320]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_RCC_OscConfig+0x162>
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	2b18      	cmp	r3, #24
 80062ea:	d13a      	bne.n	8006362 <HAL_RCC_OscConfig+0x1ce>
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d135      	bne.n	8006362 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f6:	4b49      	ldr	r3, [pc, #292]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_RCC_OscConfig+0x17a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e34b      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630e:	f7fc fd95 	bl	8002e3c <HAL_GetREVID>
 8006312:	4603      	mov	r3, r0
 8006314:	f241 0203 	movw	r2, #4099	; 0x1003
 8006318:	4293      	cmp	r3, r2
 800631a:	d817      	bhi.n	800634c <HAL_RCC_OscConfig+0x1b8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d108      	bne.n	8006336 <HAL_RCC_OscConfig+0x1a2>
 8006324:	4b3d      	ldr	r3, [pc, #244]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800632c:	4a3b      	ldr	r2, [pc, #236]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006332:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006334:	e07a      	b.n	800642c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006336:	4b39      	ldr	r3, [pc, #228]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	031b      	lsls	r3, r3, #12
 8006344:	4935      	ldr	r1, [pc, #212]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800634a:	e06f      	b.n	800642c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634c:	4b33      	ldr	r3, [pc, #204]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	061b      	lsls	r3, r3, #24
 800635a:	4930      	ldr	r1, [pc, #192]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800635c:	4313      	orrs	r3, r2
 800635e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006360:	e064      	b.n	800642c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d045      	beq.n	80063f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800636a:	4b2c      	ldr	r3, [pc, #176]	; (800641c <HAL_RCC_OscConfig+0x288>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 0219 	bic.w	r2, r3, #25
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	4929      	ldr	r1, [pc, #164]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006378:	4313      	orrs	r3, r2
 800637a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fc fd52 	bl	8002e24 <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006384:	f7fc fd4e 	bl	8002e24 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e307      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <HAL_RCC_OscConfig+0x288>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a2:	f7fc fd4b 	bl	8002e3c <HAL_GetREVID>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d817      	bhi.n	80063e0 <HAL_RCC_OscConfig+0x24c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d108      	bne.n	80063ca <HAL_RCC_OscConfig+0x236>
 80063b8:	4b18      	ldr	r3, [pc, #96]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c6:	6053      	str	r3, [r2, #4]
 80063c8:	e030      	b.n	800642c <HAL_RCC_OscConfig+0x298>
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	031b      	lsls	r3, r3, #12
 80063d8:	4910      	ldr	r1, [pc, #64]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	604b      	str	r3, [r1, #4]
 80063de:	e025      	b.n	800642c <HAL_RCC_OscConfig+0x298>
 80063e0:	4b0e      	ldr	r3, [pc, #56]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	061b      	lsls	r3, r3, #24
 80063ee:	490b      	ldr	r1, [pc, #44]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
 80063f4:	e01a      	b.n	800642c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a08      	ldr	r2, [pc, #32]	; (800641c <HAL_RCC_OscConfig+0x288>)
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fc fd0f 	bl	8002e24 <HAL_GetTick>
 8006406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006408:	e00a      	b.n	8006420 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640a:	f7fc fd0b 	bl	8002e24 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d903      	bls.n	8006420 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e2c4      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
 800641c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006420:	4ba4      	ldr	r3, [pc, #656]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1ee      	bne.n	800640a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80a9 	beq.w	800658c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643a:	4b9e      	ldr	r3, [pc, #632]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006442:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006444:	4b9b      	ldr	r3, [pc, #620]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d007      	beq.n	8006460 <HAL_RCC_OscConfig+0x2cc>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b18      	cmp	r3, #24
 8006454:	d13a      	bne.n	80064cc <HAL_RCC_OscConfig+0x338>
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d135      	bne.n	80064cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006460:	4b94      	ldr	r3, [pc, #592]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_OscConfig+0x2e4>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d001      	beq.n	8006478 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e296      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006478:	f7fc fce0 	bl	8002e3c <HAL_GetREVID>
 800647c:	4603      	mov	r3, r0
 800647e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006482:	4293      	cmp	r3, r2
 8006484:	d817      	bhi.n	80064b6 <HAL_RCC_OscConfig+0x322>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	2b20      	cmp	r3, #32
 800648c:	d108      	bne.n	80064a0 <HAL_RCC_OscConfig+0x30c>
 800648e:	4b89      	ldr	r3, [pc, #548]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006496:	4a87      	ldr	r2, [pc, #540]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800649c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800649e:	e075      	b.n	800658c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064a0:	4b84      	ldr	r3, [pc, #528]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	069b      	lsls	r3, r3, #26
 80064ae:	4981      	ldr	r1, [pc, #516]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064b4:	e06a      	b.n	800658c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064b6:	4b7f      	ldr	r3, [pc, #508]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	061b      	lsls	r3, r3, #24
 80064c4:	497b      	ldr	r1, [pc, #492]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064ca:	e05f      	b.n	800658c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d042      	beq.n	800655a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064d4:	4b77      	ldr	r3, [pc, #476]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a76      	ldr	r2, [pc, #472]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc fca0 	bl	8002e24 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064e8:	f7fc fc9c 	bl	8002e24 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e255      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064fa:	4b6e      	ldr	r3, [pc, #440]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006506:	f7fc fc99 	bl	8002e3c <HAL_GetREVID>
 800650a:	4603      	mov	r3, r0
 800650c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006510:	4293      	cmp	r3, r2
 8006512:	d817      	bhi.n	8006544 <HAL_RCC_OscConfig+0x3b0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	2b20      	cmp	r3, #32
 800651a:	d108      	bne.n	800652e <HAL_RCC_OscConfig+0x39a>
 800651c:	4b65      	ldr	r3, [pc, #404]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006524:	4a63      	ldr	r2, [pc, #396]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652a:	6053      	str	r3, [r2, #4]
 800652c:	e02e      	b.n	800658c <HAL_RCC_OscConfig+0x3f8>
 800652e:	4b61      	ldr	r3, [pc, #388]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	069b      	lsls	r3, r3, #26
 800653c:	495d      	ldr	r1, [pc, #372]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 800653e:	4313      	orrs	r3, r2
 8006540:	604b      	str	r3, [r1, #4]
 8006542:	e023      	b.n	800658c <HAL_RCC_OscConfig+0x3f8>
 8006544:	4b5b      	ldr	r3, [pc, #364]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	061b      	lsls	r3, r3, #24
 8006552:	4958      	ldr	r1, [pc, #352]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006554:	4313      	orrs	r3, r2
 8006556:	60cb      	str	r3, [r1, #12]
 8006558:	e018      	b.n	800658c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a55      	ldr	r2, [pc, #340]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006566:	f7fc fc5d 	bl	8002e24 <HAL_GetTick>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800656e:	f7fc fc59 	bl	8002e24 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e212      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d036      	beq.n	8006606 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d019      	beq.n	80065d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a0:	4b44      	ldr	r3, [pc, #272]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80065a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a4:	4a43      	ldr	r2, [pc, #268]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fc fc3a 	bl	8002e24 <HAL_GetTick>
 80065b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b4:	f7fc fc36 	bl	8002e24 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e1ef      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065c6:	4b3b      	ldr	r3, [pc, #236]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80065c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x420>
 80065d2:	e018      	b.n	8006606 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d4:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80065d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d8:	4a36      	ldr	r2, [pc, #216]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e0:	f7fc fc20 	bl	8002e24 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e8:	f7fc fc1c 	bl	8002e24 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e1d5      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065fa:	4b2e      	ldr	r3, [pc, #184]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 80065fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d036      	beq.n	8006680 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d019      	beq.n	800664e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800661a:	4b26      	ldr	r3, [pc, #152]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a25      	ldr	r2, [pc, #148]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006624:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006626:	f7fc fbfd 	bl	8002e24 <HAL_GetTick>
 800662a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800662e:	f7fc fbf9 	bl	8002e24 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e1b2      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006640:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x49a>
 800664c:	e018      	b.n	8006680 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800665a:	f7fc fbe3 	bl	8002e24 <HAL_GetTick>
 800665e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006662:	f7fc fbdf 	bl	8002e24 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e198      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006674:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <HAL_RCC_OscConfig+0x520>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8085 	beq.w	8006798 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <HAL_RCC_OscConfig+0x524>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <HAL_RCC_OscConfig+0x524>)
 8006694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006698:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800669a:	f7fc fbc3 	bl	8002e24 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066a0:	e00c      	b.n	80066bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066a2:	f7fc fbbf 	bl	8002e24 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b64      	cmp	r3, #100	; 0x64
 80066ae:	d905      	bls.n	80066bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e178      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
 80066b4:	58024400 	.word	0x58024400
 80066b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066bc:	4b96      	ldr	r3, [pc, #600]	; (8006918 <HAL_RCC_OscConfig+0x784>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0ec      	beq.n	80066a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d106      	bne.n	80066de <HAL_RCC_OscConfig+0x54a>
 80066d0:	4b92      	ldr	r3, [pc, #584]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a91      	ldr	r2, [pc, #580]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	e02d      	b.n	800673a <HAL_RCC_OscConfig+0x5a6>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10c      	bne.n	8006700 <HAL_RCC_OscConfig+0x56c>
 80066e6:	4b8d      	ldr	r3, [pc, #564]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4a8c      	ldr	r2, [pc, #560]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6713      	str	r3, [r2, #112]	; 0x70
 80066f2:	4b8a      	ldr	r3, [pc, #552]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	4a89      	ldr	r2, [pc, #548]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	6713      	str	r3, [r2, #112]	; 0x70
 80066fe:	e01c      	b.n	800673a <HAL_RCC_OscConfig+0x5a6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b05      	cmp	r3, #5
 8006706:	d10c      	bne.n	8006722 <HAL_RCC_OscConfig+0x58e>
 8006708:	4b84      	ldr	r3, [pc, #528]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	4a83      	ldr	r2, [pc, #524]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800670e:	f043 0304 	orr.w	r3, r3, #4
 8006712:	6713      	str	r3, [r2, #112]	; 0x70
 8006714:	4b81      	ldr	r3, [pc, #516]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	4a80      	ldr	r2, [pc, #512]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	; 0x70
 8006720:	e00b      	b.n	800673a <HAL_RCC_OscConfig+0x5a6>
 8006722:	4b7e      	ldr	r3, [pc, #504]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a7d      	ldr	r2, [pc, #500]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	4b7b      	ldr	r3, [pc, #492]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	4a7a      	ldr	r2, [pc, #488]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006734:	f023 0304 	bic.w	r3, r3, #4
 8006738:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d015      	beq.n	800676e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006742:	f7fc fb6f 	bl	8002e24 <HAL_GetTick>
 8006746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006748:	e00a      	b.n	8006760 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800674a:	f7fc fb6b 	bl	8002e24 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f241 3288 	movw	r2, #5000	; 0x1388
 8006758:	4293      	cmp	r3, r2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e122      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006760:	4b6e      	ldr	r3, [pc, #440]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0ee      	beq.n	800674a <HAL_RCC_OscConfig+0x5b6>
 800676c:	e014      	b.n	8006798 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fc fb59 	bl	8002e24 <HAL_GetTick>
 8006772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006774:	e00a      	b.n	800678c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fc fb55 	bl	8002e24 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	; 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e10c      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800678c:	4b63      	ldr	r3, [pc, #396]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1ee      	bne.n	8006776 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8101 	beq.w	80069a4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067a2:	4b5e      	ldr	r3, [pc, #376]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067aa:	2b18      	cmp	r3, #24
 80067ac:	f000 80bc 	beq.w	8006928 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	f040 8095 	bne.w	80068e4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ba:	4b58      	ldr	r3, [pc, #352]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a57      	ldr	r2, [pc, #348]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80067c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fc fb2d 	bl	8002e24 <HAL_GetTick>
 80067ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ce:	f7fc fb29 	bl	8002e24 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e0e2      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067e0:	4b4e      	ldr	r3, [pc, #312]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ec:	4b4b      	ldr	r3, [pc, #300]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80067ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067f0:	4b4b      	ldr	r3, [pc, #300]	; (8006920 <HAL_RCC_OscConfig+0x78c>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067fc:	0112      	lsls	r2, r2, #4
 80067fe:	430a      	orrs	r2, r1
 8006800:	4946      	ldr	r1, [pc, #280]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006802:	4313      	orrs	r3, r2
 8006804:	628b      	str	r3, [r1, #40]	; 0x28
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	3b01      	subs	r3, #1
 800680c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	3b01      	subs	r3, #1
 8006816:	025b      	lsls	r3, r3, #9
 8006818:	b29b      	uxth	r3, r3
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	3b01      	subs	r3, #1
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	3b01      	subs	r3, #1
 8006830:	061b      	lsls	r3, r3, #24
 8006832:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006836:	4939      	ldr	r1, [pc, #228]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006838:	4313      	orrs	r3, r2
 800683a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800683c:	4b37      	ldr	r3, [pc, #220]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a36      	ldr	r2, [pc, #216]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006848:	4b34      	ldr	r3, [pc, #208]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800684a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684c:	4b35      	ldr	r3, [pc, #212]	; (8006924 <HAL_RCC_OscConfig+0x790>)
 800684e:	4013      	ands	r3, r2
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006854:	00d2      	lsls	r2, r2, #3
 8006856:	4931      	ldr	r1, [pc, #196]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006858:	4313      	orrs	r3, r2
 800685a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800685c:	4b2f      	ldr	r3, [pc, #188]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	f023 020c 	bic.w	r2, r3, #12
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	492c      	ldr	r1, [pc, #176]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800686a:	4313      	orrs	r3, r2
 800686c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800686e:	4b2b      	ldr	r3, [pc, #172]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	f023 0202 	bic.w	r2, r3, #2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	4928      	ldr	r1, [pc, #160]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800687c:	4313      	orrs	r3, r2
 800687e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006880:	4b26      	ldr	r3, [pc, #152]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	4a25      	ldr	r2, [pc, #148]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4b23      	ldr	r3, [pc, #140]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a22      	ldr	r2, [pc, #136]	; (800691c <HAL_RCC_OscConfig+0x788>)
 8006892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006898:	4b20      	ldr	r3, [pc, #128]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800689e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80068a4:	4b1d      	ldr	r3, [pc, #116]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4a1c      	ldr	r2, [pc, #112]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fc fab2 	bl	8002e24 <HAL_GetTick>
 80068c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fc faae 	bl	8002e24 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e067      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0x730>
 80068e2:	e05f      	b.n	80069a4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e4:	4b0d      	ldr	r3, [pc, #52]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a0c      	ldr	r2, [pc, #48]	; (800691c <HAL_RCC_OscConfig+0x788>)
 80068ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fc fa98 	bl	8002e24 <HAL_GetTick>
 80068f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f8:	f7fc fa94 	bl	8002e24 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e04d      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <HAL_RCC_OscConfig+0x788>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f0      	bne.n	80068f8 <HAL_RCC_OscConfig+0x764>
 8006916:	e045      	b.n	80069a4 <HAL_RCC_OscConfig+0x810>
 8006918:	58024800 	.word	0x58024800
 800691c:	58024400 	.word	0x58024400
 8006920:	fffffc0c 	.word	0xfffffc0c
 8006924:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006928:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <HAL_RCC_OscConfig+0x81c>)
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800692e:	4b20      	ldr	r3, [pc, #128]	; (80069b0 <HAL_RCC_OscConfig+0x81c>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b01      	cmp	r3, #1
 800693a:	d031      	beq.n	80069a0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f003 0203 	and.w	r2, r3, #3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006946:	429a      	cmp	r2, r3
 8006948:	d12a      	bne.n	80069a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d122      	bne.n	80069a0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d11a      	bne.n	80069a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	0a5b      	lsrs	r3, r3, #9
 800696e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006976:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006978:	429a      	cmp	r2, r3
 800697a:	d111      	bne.n	80069a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800698a:	429a      	cmp	r2, r3
 800698c:	d108      	bne.n	80069a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	0e1b      	lsrs	r3, r3, #24
 8006992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3730      	adds	r7, #48	; 0x30
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	58024400 	.word	0x58024400

080069b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e19c      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c8:	4b8a      	ldr	r3, [pc, #552]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d910      	bls.n	80069f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b87      	ldr	r3, [pc, #540]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 020f 	bic.w	r2, r3, #15
 80069de:	4985      	ldr	r1, [pc, #532]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	4b83      	ldr	r3, [pc, #524]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d001      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e184      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d010      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	4b7b      	ldr	r3, [pc, #492]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d908      	bls.n	8006a26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a14:	4b78      	ldr	r3, [pc, #480]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	4975      	ldr	r1, [pc, #468]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	4b70      	ldr	r3, [pc, #448]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d908      	bls.n	8006a54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a42:	4b6d      	ldr	r3, [pc, #436]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	496a      	ldr	r1, [pc, #424]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	4b64      	ldr	r3, [pc, #400]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d908      	bls.n	8006a82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a70:	4b61      	ldr	r3, [pc, #388]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	495e      	ldr	r1, [pc, #376]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d010      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69da      	ldr	r2, [r3, #28]
 8006a92:	4b59      	ldr	r3, [pc, #356]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d908      	bls.n	8006ab0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a9e:	4b56      	ldr	r3, [pc, #344]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	4953      	ldr	r1, [pc, #332]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	4b4d      	ldr	r3, [pc, #308]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d908      	bls.n	8006ade <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006acc:	4b4a      	ldr	r3, [pc, #296]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f023 020f 	bic.w	r2, r3, #15
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4947      	ldr	r1, [pc, #284]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d055      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aea:	4b43      	ldr	r3, [pc, #268]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4940      	ldr	r1, [pc, #256]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b04:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d121      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0f6      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b1c:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d115      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0ea      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b34:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0de      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b44:	4b2c      	ldr	r3, [pc, #176]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0d6      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b54:	4b28      	ldr	r3, [pc, #160]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f023 0207 	bic.w	r2, r3, #7
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4925      	ldr	r1, [pc, #148]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b66:	f7fc f95d 	bl	8002e24 <HAL_GetTick>
 8006b6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6e:	f7fc f959 	bl	8002e24 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0be      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b84:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d1eb      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d010      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d208      	bcs.n	8006bc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f023 020f 	bic.w	r2, r3, #15
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	490e      	ldr	r1, [pc, #56]	; (8006bf8 <HAL_RCC_ClockConfig+0x244>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d214      	bcs.n	8006bfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 020f 	bic.w	r2, r3, #15
 8006bda:	4906      	ldr	r1, [pc, #24]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <HAL_RCC_ClockConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d005      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e086      	b.n	8006d02 <HAL_RCC_ClockConfig+0x34e>
 8006bf4:	52002000 	.word	0x52002000
 8006bf8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	4b3f      	ldr	r3, [pc, #252]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d208      	bcs.n	8006c2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c18:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	4939      	ldr	r1, [pc, #228]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d010      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695a      	ldr	r2, [r3, #20]
 8006c3a:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d208      	bcs.n	8006c58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c46:	4b31      	ldr	r3, [pc, #196]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	492e      	ldr	r1, [pc, #184]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d010      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d208      	bcs.n	8006c86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c74:	4b25      	ldr	r3, [pc, #148]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	4922      	ldr	r1, [pc, #136]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d010      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d208      	bcs.n	8006cb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	4917      	ldr	r1, [pc, #92]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cb4:	f000 f834 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	4912      	ldr	r1, [pc, #72]	; (8006d10 <HAL_RCC_ClockConfig+0x35c>)
 8006cc6:	5ccb      	ldrb	r3, [r1, r3]
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cd2:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <HAL_RCC_ClockConfig+0x358>)
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	4a0d      	ldr	r2, [pc, #52]	; (8006d10 <HAL_RCC_ClockConfig+0x35c>)
 8006cdc:	5cd3      	ldrb	r3, [r2, r3]
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce8:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <HAL_RCC_ClockConfig+0x360>)
 8006cea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cec:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <HAL_RCC_ClockConfig+0x364>)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <HAL_RCC_ClockConfig+0x368>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fb fb50 	bl	800239c <HAL_InitTick>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	0800c248 	.word	0x0800c248
 8006d14:	20000004 	.word	0x20000004
 8006d18:	20000000 	.word	0x20000000
 8006d1c:	20000008 	.word	0x20000008

08006d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d26:	4bb3      	ldr	r3, [pc, #716]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d2e:	2b18      	cmp	r3, #24
 8006d30:	f200 8155 	bhi.w	8006fde <HAL_RCC_GetSysClockFreq+0x2be>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006da1 	.word	0x08006da1
 8006d40:	08006fdf 	.word	0x08006fdf
 8006d44:	08006fdf 	.word	0x08006fdf
 8006d48:	08006fdf 	.word	0x08006fdf
 8006d4c:	08006fdf 	.word	0x08006fdf
 8006d50:	08006fdf 	.word	0x08006fdf
 8006d54:	08006fdf 	.word	0x08006fdf
 8006d58:	08006fdf 	.word	0x08006fdf
 8006d5c:	08006dc7 	.word	0x08006dc7
 8006d60:	08006fdf 	.word	0x08006fdf
 8006d64:	08006fdf 	.word	0x08006fdf
 8006d68:	08006fdf 	.word	0x08006fdf
 8006d6c:	08006fdf 	.word	0x08006fdf
 8006d70:	08006fdf 	.word	0x08006fdf
 8006d74:	08006fdf 	.word	0x08006fdf
 8006d78:	08006fdf 	.word	0x08006fdf
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006fdf 	.word	0x08006fdf
 8006d84:	08006fdf 	.word	0x08006fdf
 8006d88:	08006fdf 	.word	0x08006fdf
 8006d8c:	08006fdf 	.word	0x08006fdf
 8006d90:	08006fdf 	.word	0x08006fdf
 8006d94:	08006fdf 	.word	0x08006fdf
 8006d98:	08006fdf 	.word	0x08006fdf
 8006d9c:	08006dd3 	.word	0x08006dd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006da0:	4b94      	ldr	r3, [pc, #592]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d009      	beq.n	8006dc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dac:	4b91      	ldr	r3, [pc, #580]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	08db      	lsrs	r3, r3, #3
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	4a90      	ldr	r2, [pc, #576]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006dbe:	e111      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006dc0:	4b8d      	ldr	r3, [pc, #564]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dc2:	61bb      	str	r3, [r7, #24]
    break;
 8006dc4:	e10e      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006dc6:	4b8d      	ldr	r3, [pc, #564]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dc8:	61bb      	str	r3, [r7, #24]
    break;
 8006dca:	e10b      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006dcc:	4b8c      	ldr	r3, [pc, #560]	; (8007000 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dce:	61bb      	str	r3, [r7, #24]
    break;
 8006dd0:	e108      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dd2:	4b88      	ldr	r3, [pc, #544]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ddc:	4b85      	ldr	r3, [pc, #532]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006de8:	4b82      	ldr	r3, [pc, #520]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006df2:	4b80      	ldr	r3, [pc, #512]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80e1 	beq.w	8006fd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	f000 8083 	beq.w	8006f24 <HAL_RCC_GetSysClockFreq+0x204>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	f200 80a1 	bhi.w	8006f68 <HAL_RCC_GetSysClockFreq+0x248>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x114>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d056      	beq.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e32:	e099      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e34:	4b6f      	ldr	r3, [pc, #444]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d02d      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e40:	4b6c      	ldr	r3, [pc, #432]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	08db      	lsrs	r3, r3, #3
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	4a6b      	ldr	r2, [pc, #428]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6a:	4b62      	ldr	r3, [pc, #392]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e9a:	e087      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007008 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eae:	4b51      	ldr	r3, [pc, #324]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ec2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ede:	e065      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800700c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b40      	ldr	r3, [pc, #256]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f22:	e043      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007010 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f66:	e021      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eddf 6a26 	vldr	s13, [pc, #152]	; 800700c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007004 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006faa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006fac:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	0a5b      	lsrs	r3, r3, #9
 8006fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd0:	ee17 3a90 	vmov	r3, s15
 8006fd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006fd6:	e005      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61bb      	str	r3, [r7, #24]
    break;
 8006fdc:	e002      	b.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006fde:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fe0:	61bb      	str	r3, [r7, #24]
    break;
 8006fe2:	bf00      	nop
  }

  return sysclockfreq;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3724      	adds	r7, #36	; 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	03d09000 	.word	0x03d09000
 8006ffc:	003d0900 	.word	0x003d0900
 8007000:	017d7840 	.word	0x017d7840
 8007004:	46000000 	.word	0x46000000
 8007008:	4c742400 	.word	0x4c742400
 800700c:	4a742400 	.word	0x4a742400
 8007010:	4bbebc20 	.word	0x4bbebc20

08007014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800701a:	f7ff fe81 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 800701e:	4602      	mov	r2, r0
 8007020:	4b10      	ldr	r3, [pc, #64]	; (8007064 <HAL_RCC_GetHCLKFreq+0x50>)
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	490f      	ldr	r1, [pc, #60]	; (8007068 <HAL_RCC_GetHCLKFreq+0x54>)
 800702c:	5ccb      	ldrb	r3, [r1, r3]
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	fa22 f303 	lsr.w	r3, r2, r3
 8007036:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <HAL_RCC_GetHCLKFreq+0x50>)
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	4a09      	ldr	r2, [pc, #36]	; (8007068 <HAL_RCC_GetHCLKFreq+0x54>)
 8007042:	5cd3      	ldrb	r3, [r2, r3]
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	4a07      	ldr	r2, [pc, #28]	; (800706c <HAL_RCC_GetHCLKFreq+0x58>)
 8007050:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007058:	4b04      	ldr	r3, [pc, #16]	; (800706c <HAL_RCC_GetHCLKFreq+0x58>)
 800705a:	681b      	ldr	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	58024400 	.word	0x58024400
 8007068:	0800c248 	.word	0x0800c248
 800706c:	20000004 	.word	0x20000004
 8007070:	20000000 	.word	0x20000000

08007074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007078:	f7ff ffcc 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b06      	ldr	r3, [pc, #24]	; (8007098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4904      	ldr	r1, [pc, #16]	; (800709c <HAL_RCC_GetPCLK1Freq+0x28>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007094:	4618      	mov	r0, r3
 8007096:	bd80      	pop	{r7, pc}
 8007098:	58024400 	.word	0x58024400
 800709c:	0800c248 	.word	0x0800c248

080070a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070a4:	f7ff ffb6 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	58024400 	.word	0x58024400
 80070c8:	0800c248 	.word	0x0800c248

080070cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	223f      	movs	r2, #63	; 0x3f
 80070da:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070dc:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f003 0207 	and.w	r2, r3, #7
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80070e8:	4b17      	ldr	r3, [pc, #92]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80070f4:	4b14      	ldr	r3, [pc, #80]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 020f 	and.w	r2, r3, #15
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007100:	4b11      	ldr	r3, [pc, #68]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_RCC_GetClockConfig+0x7c>)
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <HAL_RCC_GetClockConfig+0x80>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 020f 	and.w	r2, r3, #15
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	601a      	str	r2, [r3, #0]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	58024400 	.word	0x58024400
 800714c:	52002000 	.word	0x52002000

08007150 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007158:	2300      	movs	r3, #0
 800715a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800715c:	2300      	movs	r3, #0
 800715e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d03f      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007170:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007174:	d02a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800717a:	d824      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800717c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007180:	d018      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007186:	d81e      	bhi.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800718c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007190:	d007      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007192:	e018      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007194:	4bab      	ldr	r3, [pc, #684]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	4aaa      	ldr	r2, [pc, #680]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071a0:	e015      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3304      	adds	r3, #4
 80071a6:	2102      	movs	r1, #2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 f9cf 	bl	800854c <RCCEx_PLL2_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071b2:	e00c      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3324      	adds	r3, #36	; 0x24
 80071b8:	2102      	movs	r1, #2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 fa78 	bl	80086b0 <RCCEx_PLL3_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071c4:	e003      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ca:	e000      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071d4:	4b9b      	ldr	r3, [pc, #620]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e0:	4998      	ldr	r1, [pc, #608]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	650b      	str	r3, [r1, #80]	; 0x50
 80071e6:	e001      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d03d      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d826      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800721d 	.word	0x0800721d
 800720c:	0800722b 	.word	0x0800722b
 8007210:	0800723d 	.word	0x0800723d
 8007214:	08007255 	.word	0x08007255
 8007218:	08007255 	.word	0x08007255
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4b89      	ldr	r3, [pc, #548]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a88      	ldr	r2, [pc, #544]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007228:	e015      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f001 f98b 	bl	800854c <RCCEx_PLL2_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800723a:	e00c      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f001 fa34 	bl	80086b0 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800724c:	e003      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
      break;
 8007252:	e000      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800725c:	4b79      	ldr	r3, [pc, #484]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	f023 0207 	bic.w	r2, r3, #7
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	4976      	ldr	r1, [pc, #472]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800726a:	4313      	orrs	r3, r2
 800726c:	650b      	str	r3, [r1, #80]	; 0x50
 800726e:	e001      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727c:	2b00      	cmp	r3, #0
 800727e:	d042      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007288:	d02b      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800728a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728e:	d825      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007290:	2bc0      	cmp	r3, #192	; 0xc0
 8007292:	d028      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007294:	2bc0      	cmp	r3, #192	; 0xc0
 8007296:	d821      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007298:	2b80      	cmp	r3, #128	; 0x80
 800729a:	d016      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800729c:	2b80      	cmp	r3, #128	; 0x80
 800729e:	d81d      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d007      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80072a8:	e018      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072aa:	4b66      	ldr	r3, [pc, #408]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	4a65      	ldr	r2, [pc, #404]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072b6:	e017      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f001 f944 	bl	800854c <RCCEx_PLL2_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072c8:	e00e      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3324      	adds	r3, #36	; 0x24
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f9ed 	bl	80086b0 <RCCEx_PLL3_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072da:	e005      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
      break;
 80072e0:	e002      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80072e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072ee:	4b55      	ldr	r3, [pc, #340]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	4952      	ldr	r1, [pc, #328]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007300:	e001      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730e:	2b00      	cmp	r3, #0
 8007310:	d049      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731c:	d030      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800731e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007322:	d82a      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007324:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007328:	d02c      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800732a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800732e:	d824      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007334:	d018      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800733a:	d81e      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007344:	d007      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007346:	e018      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007348:	4b3e      	ldr	r3, [pc, #248]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	4a3d      	ldr	r2, [pc, #244]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800734e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007354:	e017      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f001 f8f5 	bl	800854c <RCCEx_PLL2_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007366:	e00e      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3324      	adds	r3, #36	; 0x24
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f001 f99e 	bl	80086b0 <RCCEx_PLL3_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007378:	e005      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	75fb      	strb	r3, [r7, #23]
      break;
 800737e:	e002      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800738c:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800739a:	492a      	ldr	r1, [pc, #168]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800739c:	4313      	orrs	r3, r2
 800739e:	658b      	str	r3, [r1, #88]	; 0x58
 80073a0:	e001      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04c      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073bc:	d030      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80073be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073c2:	d82a      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073c8:	d02c      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80073ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073ce:	d824      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d4:	d018      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80073d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073da:	d81e      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80073e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073e4:	d007      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80073e6:	e018      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4b16      	ldr	r3, [pc, #88]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a15      	ldr	r2, [pc, #84]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073f4:	e017      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2100      	movs	r1, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 f8a5 	bl	800854c <RCCEx_PLL2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007406:	e00e      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f001 f94e 	bl	80086b0 <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007418:	e005      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	e002      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007420:	bf00      	nop
 8007422:	e000      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10d      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007430:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800743a:	4902      	ldr	r1, [pc, #8]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800743c:	4313      	orrs	r3, r2
 800743e:	658b      	str	r3, [r1, #88]	; 0x58
 8007440:	e004      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d032      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745c:	2b30      	cmp	r3, #48	; 0x30
 800745e:	d01c      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007460:	2b30      	cmp	r3, #48	; 0x30
 8007462:	d817      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007464:	2b20      	cmp	r3, #32
 8007466:	d00c      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007468:	2b20      	cmp	r3, #32
 800746a:	d813      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d016      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007470:	2b10      	cmp	r3, #16
 8007472:	d10f      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007474:	4baf      	ldr	r3, [pc, #700]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4aae      	ldr	r2, [pc, #696]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800747a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007480:	e00e      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	2102      	movs	r1, #2
 8007488:	4618      	mov	r0, r3
 800748a:	f001 f85f 	bl	800854c <RCCEx_PLL2_Config>
 800748e:	4603      	mov	r3, r0
 8007490:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007492:	e005      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
      break;
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800749e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074a6:	4ba3      	ldr	r3, [pc, #652]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b2:	49a0      	ldr	r1, [pc, #640]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074b8:	e001      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d047      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d2:	d030      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80074d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d8:	d82a      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074de:	d02c      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80074e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074e4:	d824      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ea:	d018      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80074ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f0:	d81e      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80074f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fa:	d007      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80074fc:	e018      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fe:	4b8d      	ldr	r3, [pc, #564]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a8c      	ldr	r2, [pc, #560]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800750a:	e017      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	2100      	movs	r1, #0
 8007512:	4618      	mov	r0, r3
 8007514:	f001 f81a 	bl	800854c <RCCEx_PLL2_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800751c:	e00e      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	; 0x24
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f001 f8c3 	bl	80086b0 <RCCEx_PLL3_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800752e:	e005      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800753a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007542:	4b7c      	ldr	r3, [pc, #496]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007546:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754e:	4979      	ldr	r1, [pc, #484]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007550:	4313      	orrs	r3, r2
 8007552:	650b      	str	r3, [r1, #80]	; 0x50
 8007554:	e001      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d049      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800756e:	d02e      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007574:	d828      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800757a:	d02a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800757c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007580:	d822      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007582:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007586:	d026      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007588:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800758c:	d81c      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800758e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007592:	d010      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007598:	d816      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01d      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800759e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a2:	d111      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	2101      	movs	r1, #1
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 ffce 	bl	800854c <RCCEx_PLL2_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075b4:	e012      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3324      	adds	r3, #36	; 0x24
 80075ba:	2101      	movs	r1, #1
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 f877 	bl	80086b0 <RCCEx_PLL3_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075c6:	e009      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
      break;
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075ce:	bf00      	nop
 80075d0:	e004      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075d2:	bf00      	nop
 80075d4:	e002      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80075da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075e2:	4b54      	ldr	r3, [pc, #336]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ee:	4951      	ldr	r1, [pc, #324]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	650b      	str	r3, [r1, #80]	; 0x50
 80075f4:	e001      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d04b      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007610:	d02e      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007616:	d828      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761c:	d02a      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007622:	d822      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007624:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007628:	d026      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800762a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800762e:	d81c      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007634:	d010      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800763a:	d816      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01d      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007644:	d111      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3304      	adds	r3, #4
 800764a:	2101      	movs	r1, #1
 800764c:	4618      	mov	r0, r3
 800764e:	f000 ff7d 	bl	800854c <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007656:	e012      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3324      	adds	r3, #36	; 0x24
 800765c:	2101      	movs	r1, #1
 800765e:	4618      	mov	r0, r3
 8007660:	f001 f826 	bl	80086b0 <RCCEx_PLL3_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007668:	e009      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
      break;
 800766e:	e006      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007670:	bf00      	nop
 8007672:	e004      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007674:	bf00      	nop
 8007676:	e002      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007678:	bf00      	nop
 800767a:	e000      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800767c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007688:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007692:	4928      	ldr	r1, [pc, #160]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007694:	4313      	orrs	r3, r2
 8007696:	658b      	str	r3, [r1, #88]	; 0x58
 8007698:	e001      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02f      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b2:	d00e      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80076b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b8:	d814      	bhi.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d015      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80076be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076c2:	d10f      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076d0:	e00c      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 ff37 	bl	800854c <RCCEx_PLL2_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80076e2:	e003      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]
      break;
 80076e8:	e000      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80076ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076f2:	4b10      	ldr	r3, [pc, #64]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fe:	490d      	ldr	r1, [pc, #52]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007700:	4313      	orrs	r3, r2
 8007702:	650b      	str	r3, [r1, #80]	; 0x50
 8007704:	e001      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d033      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	2b03      	cmp	r3, #3
 800771c:	d81c      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800771e:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	0800775f 	.word	0x0800775f
 8007728:	08007739 	.word	0x08007739
 800772c:	08007747 	.word	0x08007747
 8007730:	0800775f 	.word	0x0800775f
 8007734:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007738:	4bb8      	ldr	r3, [pc, #736]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	4ab7      	ldr	r2, [pc, #732]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800773e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007744:	e00c      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	2102      	movs	r1, #2
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fefd 	bl	800854c <RCCEx_PLL2_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
      break;
 800775c:	e000      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800775e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007766:	4bad      	ldr	r3, [pc, #692]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	f023 0203 	bic.w	r2, r3, #3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007772:	49aa      	ldr	r1, [pc, #680]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007774:	4313      	orrs	r3, r2
 8007776:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007778:	e001      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8086 	beq.w	8007898 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800778c:	4ba4      	ldr	r3, [pc, #656]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4aa3      	ldr	r2, [pc, #652]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007796:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007798:	f7fb fb44 	bl	8002e24 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800779e:	e009      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a0:	f7fb fb40 	bl	8002e24 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b64      	cmp	r3, #100	; 0x64
 80077ac:	d902      	bls.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	75fb      	strb	r3, [r7, #23]
        break;
 80077b2:	e005      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0ef      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d166      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077c6:	4b95      	ldr	r3, [pc, #596]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077d0:	4053      	eors	r3, r2
 80077d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077da:	4b90      	ldr	r3, [pc, #576]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077e4:	4b8d      	ldr	r3, [pc, #564]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	4a8c      	ldr	r2, [pc, #560]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077f0:	4b8a      	ldr	r3, [pc, #552]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f4:	4a89      	ldr	r2, [pc, #548]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077fc:	4a87      	ldr	r2, [pc, #540]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780c:	d115      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780e:	f7fb fb09 	bl	8002e24 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007814:	e00b      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007816:	f7fb fb05 	bl	8002e24 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f241 3288 	movw	r2, #5000	; 0x1388
 8007824:	4293      	cmp	r3, r2
 8007826:	d902      	bls.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	75fb      	strb	r3, [r7, #23]
            break;
 800782c:	e005      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800782e:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0ed      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d126      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800784a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800784e:	d10d      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007850:	4b72      	ldr	r3, [pc, #456]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800785e:	0919      	lsrs	r1, r3, #4
 8007860:	4b70      	ldr	r3, [pc, #448]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007862:	400b      	ands	r3, r1
 8007864:	496d      	ldr	r1, [pc, #436]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007866:	4313      	orrs	r3, r2
 8007868:	610b      	str	r3, [r1, #16]
 800786a:	e005      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800786c:	4b6b      	ldr	r3, [pc, #428]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	4a6a      	ldr	r2, [pc, #424]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007876:	6113      	str	r3, [r2, #16]
 8007878:	4b68      	ldr	r3, [pc, #416]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800787a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007886:	4965      	ldr	r1, [pc, #404]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007888:	4313      	orrs	r3, r2
 800788a:	670b      	str	r3, [r1, #112]	; 0x70
 800788c:	e004      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	75bb      	strb	r3, [r7, #22]
 8007892:	e001      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d07e      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a8:	2b28      	cmp	r3, #40	; 0x28
 80078aa:	d867      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	08007983 	.word	0x08007983
 80078b8:	0800797d 	.word	0x0800797d
 80078bc:	0800797d 	.word	0x0800797d
 80078c0:	0800797d 	.word	0x0800797d
 80078c4:	0800797d 	.word	0x0800797d
 80078c8:	0800797d 	.word	0x0800797d
 80078cc:	0800797d 	.word	0x0800797d
 80078d0:	0800797d 	.word	0x0800797d
 80078d4:	08007959 	.word	0x08007959
 80078d8:	0800797d 	.word	0x0800797d
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	0800797d 	.word	0x0800797d
 80078e4:	0800797d 	.word	0x0800797d
 80078e8:	0800797d 	.word	0x0800797d
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800796b 	.word	0x0800796b
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	0800797d 	.word	0x0800797d
 8007900:	0800797d 	.word	0x0800797d
 8007904:	0800797d 	.word	0x0800797d
 8007908:	0800797d 	.word	0x0800797d
 800790c:	0800797d 	.word	0x0800797d
 8007910:	0800797d 	.word	0x0800797d
 8007914:	08007983 	.word	0x08007983
 8007918:	0800797d 	.word	0x0800797d
 800791c:	0800797d 	.word	0x0800797d
 8007920:	0800797d 	.word	0x0800797d
 8007924:	0800797d 	.word	0x0800797d
 8007928:	0800797d 	.word	0x0800797d
 800792c:	0800797d 	.word	0x0800797d
 8007930:	0800797d 	.word	0x0800797d
 8007934:	08007983 	.word	0x08007983
 8007938:	0800797d 	.word	0x0800797d
 800793c:	0800797d 	.word	0x0800797d
 8007940:	0800797d 	.word	0x0800797d
 8007944:	0800797d 	.word	0x0800797d
 8007948:	0800797d 	.word	0x0800797d
 800794c:	0800797d 	.word	0x0800797d
 8007950:	0800797d 	.word	0x0800797d
 8007954:	08007983 	.word	0x08007983
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fdf4 	bl	800854c <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007968:	e00c      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3324      	adds	r3, #36	; 0x24
 800796e:	2101      	movs	r1, #1
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fe9d 	bl	80086b0 <RCCEx_PLL3_Config>
 8007976:	4603      	mov	r3, r0
 8007978:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]
      break;
 8007980:	e000      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d109      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007996:	4921      	ldr	r1, [pc, #132]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007998:	4313      	orrs	r3, r2
 800799a:	654b      	str	r3, [r1, #84]	; 0x54
 800799c:	e001      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d03e      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b2:	2b05      	cmp	r3, #5
 80079b4:	d820      	bhi.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079ff 	.word	0x080079ff
 80079c0:	080079d5 	.word	0x080079d5
 80079c4:	080079e7 	.word	0x080079e7
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	080079ff 	.word	0x080079ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	2101      	movs	r1, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fdb6 	bl	800854c <RCCEx_PLL2_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	2101      	movs	r1, #1
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fe5f 	bl	80086b0 <RCCEx_PLL3_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079f6:	e003      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
      break;
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80079fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d110      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	f023 0207 	bic.w	r2, r3, #7
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a12:	4902      	ldr	r1, [pc, #8]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	654b      	str	r3, [r1, #84]	; 0x54
 8007a18:	e008      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007a1a:	bf00      	nop
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	58024800 	.word	0x58024800
 8007a24:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d039      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	2b05      	cmp	r3, #5
 8007a40:	d820      	bhi.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a8b 	.word	0x08007a8b
 8007a4c:	08007a61 	.word	0x08007a61
 8007a50:	08007a73 	.word	0x08007a73
 8007a54:	08007a8b 	.word	0x08007a8b
 8007a58:	08007a8b 	.word	0x08007a8b
 8007a5c:	08007a8b 	.word	0x08007a8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	2101      	movs	r1, #1
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fd70 	bl	800854c <RCCEx_PLL2_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a70:	e00c      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3324      	adds	r3, #36	; 0x24
 8007a76:	2101      	movs	r1, #1
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fe19 	bl	80086b0 <RCCEx_PLL3_Config>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a82:	e003      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
      break;
 8007a88:	e000      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a92:	4bb7      	ldr	r3, [pc, #732]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a96:	f023 0207 	bic.w	r2, r3, #7
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa0:	49b3      	ldr	r1, [pc, #716]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	658b      	str	r3, [r1, #88]	; 0x58
 8007aa6:	e001      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d04b      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac2:	d02e      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac8:	d828      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ace:	d02a      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d822      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ada:	d026      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007adc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ae0:	d81c      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae6:	d010      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aec:	d816      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01d      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af6:	d111      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fd24 	bl	800854c <RCCEx_PLL2_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b08:	e012      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	2102      	movs	r1, #2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fdcd 	bl	80086b0 <RCCEx_PLL3_Config>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b1a:	e009      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b36:	4b8e      	ldr	r3, [pc, #568]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b44:	498a      	ldr	r1, [pc, #552]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	654b      	str	r3, [r1, #84]	; 0x54
 8007b4a:	e001      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d04b      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b66:	d02e      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007b68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b6c:	d828      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	d02a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b78:	d822      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b7e:	d026      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b84:	d81c      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8a:	d010      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b90:	d816      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01d      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9a:	d111      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fcd2 	bl	800854c <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bac:	e012      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3324      	adds	r3, #36	; 0x24
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fd7b 	bl	80086b0 <RCCEx_PLL3_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bbe:	e009      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc4:	e006      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e004      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bda:	4b65      	ldr	r3, [pc, #404]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be8:	4961      	ldr	r1, [pc, #388]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	658b      	str	r3, [r1, #88]	; 0x58
 8007bee:	e001      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d04b      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c0a:	d02e      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007c0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c10:	d828      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c16:	d02a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c1c:	d822      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c22:	d026      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007c24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c28:	d81c      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c2e:	d010      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c34:	d816      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01d      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3e:	d111      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3304      	adds	r3, #4
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fc80 	bl	800854c <RCCEx_PLL2_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c50:	e012      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3324      	adds	r3, #36	; 0x24
 8007c56:	2102      	movs	r1, #2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fd29 	bl	80086b0 <RCCEx_PLL3_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c62:	e009      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
      break;
 8007c68:	e006      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e004      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c7e:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c8c:	4938      	ldr	r1, [pc, #224]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	658b      	str	r3, [r1, #88]	; 0x58
 8007c92:	e001      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cae:	d10a      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3324      	adds	r3, #36	; 0x24
 8007cb4:	2102      	movs	r1, #2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fcfa 	bl	80086b0 <RCCEx_PLL3_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cc6:	4b2a      	ldr	r3, [pc, #168]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cd4:	4926      	ldr	r1, [pc, #152]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d10a      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3324      	adds	r3, #36	; 0x24
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fcd9 	bl	80086b0 <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d08:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d16:	4916      	ldr	r1, [pc, #88]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d036      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d32:	d01f      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d38:	d817      	bhi.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d42:	d009      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007d44:	e011      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fbfd 	bl	800854c <RCCEx_PLL2_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d56:	e00e      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3324      	adds	r3, #36	; 0x24
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fca6 	bl	80086b0 <RCCEx_PLL3_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d68:	e005      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6e:	e002      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007d70:	58024400 	.word	0x58024400
      break;
 8007d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d7c:	4b93      	ldr	r3, [pc, #588]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d8a:	4990      	ldr	r1, [pc, #576]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	658b      	str	r3, [r1, #88]	; 0x58
 8007d90:	e001      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d033      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dac:	d01c      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007dae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007db2:	d816      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db8:	d003      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dbe:	d007      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007dc0:	e00f      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc2:	4b82      	ldr	r3, [pc, #520]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	4a81      	ldr	r2, [pc, #516]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007dce:	e00c      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fc6a 	bl	80086b0 <RCCEx_PLL3_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007de0:	e003      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	e000      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007df0:	4b76      	ldr	r3, [pc, #472]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfe:	4973      	ldr	r1, [pc, #460]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	654b      	str	r3, [r1, #84]	; 0x54
 8007e04:	e001      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d029      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e22:	d007      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007e24:	e00f      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e26:	4b69      	ldr	r3, [pc, #420]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a68      	ldr	r2, [pc, #416]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e32:	e00b      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	2102      	movs	r1, #2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fb86 	bl	800854c <RCCEx_PLL2_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e52:	4b5e      	ldr	r3, [pc, #376]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	495b      	ldr	r1, [pc, #364]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e64:	e001      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3324      	adds	r3, #36	; 0x24
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fc17 	bl	80086b0 <RCCEx_PLL3_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d030      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea0:	d017      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea6:	d811      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eac:	d013      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb2:	d80b      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d010      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebc:	d106      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebe:	4b43      	ldr	r3, [pc, #268]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	4a42      	ldr	r2, [pc, #264]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007eca:	e007      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed0:	e004      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d109      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee2:	4b3a      	ldr	r3, [pc, #232]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eee:	4937      	ldr	r1, [pc, #220]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	654b      	str	r3, [r1, #84]	; 0x54
 8007ef4:	e001      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d008      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f06:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	492e      	ldr	r1, [pc, #184]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d009      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f24:	4b29      	ldr	r3, [pc, #164]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f32:	4926      	ldr	r1, [pc, #152]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f44:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f50:	491e      	ldr	r1, [pc, #120]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f62:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f6c:	6113      	str	r3, [r2, #16]
 8007f6e:	4b17      	ldr	r3, [pc, #92]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f78:	4914      	ldr	r1, [pc, #80]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da08      	bge.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f86:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f92:	490e      	ldr	r1, [pc, #56]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb2:	4906      	ldr	r1, [pc, #24]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007fb8:	7dbb      	ldrb	r3, [r7, #22]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	58024400 	.word	0x58024400

08007fd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fd4:	f7ff f81e 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	4904      	ldr	r1, [pc, #16]	; (8007ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fe6:	5ccb      	ldrb	r3, [r1, r3]
 8007fe8:	f003 031f 	and.w	r3, r3, #31
 8007fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	0800c248 	.word	0x0800c248

08007ffc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008004:	4ba1      	ldr	r3, [pc, #644]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800800e:	4b9f      	ldr	r3, [pc, #636]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	0b1b      	lsrs	r3, r3, #12
 8008014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008018:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800801a:	4b9c      	ldr	r3, [pc, #624]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008026:	4b99      	ldr	r3, [pc, #612]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	08db      	lsrs	r3, r3, #3
 800802c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8111 	beq.w	800826c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b02      	cmp	r3, #2
 800804e:	f000 8083 	beq.w	8008158 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b02      	cmp	r3, #2
 8008056:	f200 80a1 	bhi.w	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d056      	beq.n	8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008066:	e099      	b.n	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008068:	4b88      	ldr	r3, [pc, #544]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d02d      	beq.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008074:	4b85      	ldr	r3, [pc, #532]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	08db      	lsrs	r3, r3, #3
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	4a84      	ldr	r2, [pc, #528]	; (8008290 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
 8008084:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809e:	4b7b      	ldr	r3, [pc, #492]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080ce:	e087      	b.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008298 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80080de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e2:	4b6a      	ldr	r3, [pc, #424]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008112:	e065      	b.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800829c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008126:	4b59      	ldr	r3, [pc, #356]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008136:	ed97 6a03 	vldr	s12, [r7, #12]
 800813a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008152:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008156:	e043      	b.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008162:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816a:	4b48      	ldr	r3, [pc, #288]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817a:	ed97 6a03 	vldr	s12, [r7, #12]
 800817e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800818e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800819a:	e021      	b.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800829c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ae:	4b37      	ldr	r3, [pc, #220]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80081e0:	4b2a      	ldr	r3, [pc, #168]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	0a5b      	lsrs	r3, r3, #9
 80081e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80081fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008206:	ee17 2a90 	vmov	r2, s15
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800820e:	4b1f      	ldr	r3, [pc, #124]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	0c1b      	lsrs	r3, r3, #16
 8008214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008218:	ee07 3a90 	vmov	s15, r3
 800821c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008224:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008228:	edd7 6a07 	vldr	s13, [r7, #28]
 800822c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008234:	ee17 2a90 	vmov	r2, s15
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800823c:	4b13      	ldr	r3, [pc, #76]	; (800828c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	0e1b      	lsrs	r3, r3, #24
 8008242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008252:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008256:	edd7 6a07 	vldr	s13, [r7, #28]
 800825a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008262:	ee17 2a90 	vmov	r2, s15
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800826a:	e008      	b.n	800827e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	609a      	str	r2, [r3, #8]
}
 800827e:	bf00      	nop
 8008280:	3724      	adds	r7, #36	; 0x24
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	58024400 	.word	0x58024400
 8008290:	03d09000 	.word	0x03d09000
 8008294:	46000000 	.word	0x46000000
 8008298:	4c742400 	.word	0x4c742400
 800829c:	4a742400 	.word	0x4a742400
 80082a0:	4bbebc20 	.word	0x4bbebc20

080082a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b089      	sub	sp, #36	; 0x24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ac:	4ba1      	ldr	r3, [pc, #644]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80082b6:	4b9f      	ldr	r3, [pc, #636]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	0d1b      	lsrs	r3, r3, #20
 80082bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082c2:	4b9c      	ldr	r3, [pc, #624]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80082ce:	4b99      	ldr	r3, [pc, #612]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d2:	08db      	lsrs	r3, r3, #3
 80082d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8111 	beq.w	8008514 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f000 8083 	beq.w	8008400 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	f200 80a1 	bhi.w	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d056      	beq.n	80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800830e:	e099      	b.n	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008310:	4b88      	ldr	r3, [pc, #544]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d02d      	beq.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800831c:	4b85      	ldr	r3, [pc, #532]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	08db      	lsrs	r3, r3, #3
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	4a84      	ldr	r2, [pc, #528]	; (8008538 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008346:	4b7b      	ldr	r3, [pc, #492]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008356:	ed97 6a03 	vldr	s12, [r7, #12]
 800835a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800836a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008376:	e087      	b.n	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008540 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838a:	4b6a      	ldr	r3, [pc, #424]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839a:	ed97 6a03 	vldr	s12, [r7, #12]
 800839e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ba:	e065      	b.n	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b59      	ldr	r3, [pc, #356]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083de:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fe:	e043      	b.n	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800840e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008412:	4b48      	ldr	r3, [pc, #288]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008422:	ed97 6a03 	vldr	s12, [r7, #12]
 8008426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800842a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008442:	e021      	b.n	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008456:	4b37      	ldr	r3, [pc, #220]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008466:	ed97 6a03 	vldr	s12, [r7, #12]
 800846a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800853c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800846e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800847a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008486:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	0a5b      	lsrs	r3, r3, #9
 800848e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800849e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ae:	ee17 2a90 	vmov	r2, s15
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80084b6:	4b1f      	ldr	r3, [pc, #124]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c0:	ee07 3a90 	vmov	s15, r3
 80084c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084dc:	ee17 2a90 	vmov	r2, s15
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80084e4:	4b13      	ldr	r3, [pc, #76]	; (8008534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	0e1b      	lsrs	r3, r3, #24
 80084ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850a:	ee17 2a90 	vmov	r2, s15
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008512:	e008      	b.n	8008526 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	609a      	str	r2, [r3, #8]
}
 8008526:	bf00      	nop
 8008528:	3724      	adds	r7, #36	; 0x24
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
 8008538:	03d09000 	.word	0x03d09000
 800853c:	46000000 	.word	0x46000000
 8008540:	4c742400 	.word	0x4c742400
 8008544:	4a742400 	.word	0x4a742400
 8008548:	4bbebc20 	.word	0x4bbebc20

0800854c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800855a:	4b53      	ldr	r3, [pc, #332]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d101      	bne.n	800856a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e099      	b.n	800869e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800856a:	4b4f      	ldr	r3, [pc, #316]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a4e      	ldr	r2, [pc, #312]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008570:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008576:	f7fa fc55 	bl	8002e24 <HAL_GetTick>
 800857a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800857c:	e008      	b.n	8008590 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800857e:	f7fa fc51 	bl	8002e24 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e086      	b.n	800869e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008590:	4b45      	ldr	r3, [pc, #276]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f0      	bne.n	800857e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800859c:	4b42      	ldr	r3, [pc, #264]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	031b      	lsls	r3, r3, #12
 80085aa:	493f      	ldr	r1, [pc, #252]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	628b      	str	r3, [r1, #40]	; 0x28
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	3b01      	subs	r3, #1
 80085c0:	025b      	lsls	r3, r3, #9
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	3b01      	subs	r3, #1
 80085da:	061b      	lsls	r3, r3, #24
 80085dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085e0:	4931      	ldr	r1, [pc, #196]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80085e6:	4b30      	ldr	r3, [pc, #192]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	492d      	ldr	r1, [pc, #180]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085f8:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f023 0220 	bic.w	r2, r3, #32
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	4928      	ldr	r1, [pc, #160]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008606:	4313      	orrs	r3, r2
 8008608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800860a:	4b27      	ldr	r3, [pc, #156]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	4a26      	ldr	r2, [pc, #152]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008610:	f023 0310 	bic.w	r3, r3, #16
 8008614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008616:	4b24      	ldr	r3, [pc, #144]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800861a:	4b24      	ldr	r3, [pc, #144]	; (80086ac <RCCEx_PLL2_Config+0x160>)
 800861c:	4013      	ands	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	69d2      	ldr	r2, [r2, #28]
 8008622:	00d2      	lsls	r2, r2, #3
 8008624:	4920      	ldr	r1, [pc, #128]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800862a:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008630:	f043 0310 	orr.w	r3, r3, #16
 8008634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d106      	bne.n	800864a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800863c:	4b1a      	ldr	r3, [pc, #104]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a19      	ldr	r2, [pc, #100]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008648:	e00f      	b.n	800866a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d106      	bne.n	800865e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008650:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800865a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800865c:	e005      	b.n	800866a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4a11      	ldr	r2, [pc, #68]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a0e      	ldr	r2, [pc, #56]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008676:	f7fa fbd5 	bl	8002e24 <HAL_GetTick>
 800867a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800867c:	e008      	b.n	8008690 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800867e:	f7fa fbd1 	bl	8002e24 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d901      	bls.n	8008690 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e006      	b.n	800869e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <RCCEx_PLL2_Config+0x15c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0f0      	beq.n	800867e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	58024400 	.word	0x58024400
 80086ac:	ffff0007 	.word	0xffff0007

080086b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086be:	4b53      	ldr	r3, [pc, #332]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d101      	bne.n	80086ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e099      	b.n	8008802 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086ce:	4b4f      	ldr	r3, [pc, #316]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a4e      	ldr	r2, [pc, #312]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80086d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086da:	f7fa fba3 	bl	8002e24 <HAL_GetTick>
 80086de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086e0:	e008      	b.n	80086f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086e2:	f7fa fb9f 	bl	8002e24 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d901      	bls.n	80086f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e086      	b.n	8008802 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086f4:	4b45      	ldr	r3, [pc, #276]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1f0      	bne.n	80086e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008700:	4b42      	ldr	r3, [pc, #264]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	051b      	lsls	r3, r3, #20
 800870e:	493f      	ldr	r1, [pc, #252]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008710:	4313      	orrs	r3, r2
 8008712:	628b      	str	r3, [r1, #40]	; 0x28
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	3b01      	subs	r3, #1
 800871a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	3b01      	subs	r3, #1
 8008724:	025b      	lsls	r3, r3, #9
 8008726:	b29b      	uxth	r3, r3
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	3b01      	subs	r3, #1
 8008730:	041b      	lsls	r3, r3, #16
 8008732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008736:	431a      	orrs	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	3b01      	subs	r3, #1
 800873e:	061b      	lsls	r3, r3, #24
 8008740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008744:	4931      	ldr	r1, [pc, #196]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008746:	4313      	orrs	r3, r2
 8008748:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800874a:	4b30      	ldr	r3, [pc, #192]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	492d      	ldr	r1, [pc, #180]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008758:	4313      	orrs	r3, r2
 800875a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800875c:	4b2b      	ldr	r3, [pc, #172]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	4928      	ldr	r1, [pc, #160]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 800876a:	4313      	orrs	r3, r2
 800876c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800876e:	4b27      	ldr	r3, [pc, #156]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	4a26      	ldr	r2, [pc, #152]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800877a:	4b24      	ldr	r3, [pc, #144]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 800877c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800877e:	4b24      	ldr	r3, [pc, #144]	; (8008810 <RCCEx_PLL3_Config+0x160>)
 8008780:	4013      	ands	r3, r2
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	69d2      	ldr	r2, [r2, #28]
 8008786:	00d2      	lsls	r2, r2, #3
 8008788:	4920      	ldr	r1, [pc, #128]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800878e:	4b1f      	ldr	r3, [pc, #124]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	4a1e      	ldr	r2, [pc, #120]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 8008794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087a0:	4b1a      	ldr	r3, [pc, #104]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087ac:	e00f      	b.n	80087ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d106      	bne.n	80087c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087b4:	4b15      	ldr	r3, [pc, #84]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	4a14      	ldr	r2, [pc, #80]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087c0:	e005      	b.n	80087ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80087c2:	4b12      	ldr	r3, [pc, #72]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	4a11      	ldr	r2, [pc, #68]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80087ce:	4b0f      	ldr	r3, [pc, #60]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a0e      	ldr	r2, [pc, #56]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087da:	f7fa fb23 	bl	8002e24 <HAL_GetTick>
 80087de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087e0:	e008      	b.n	80087f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087e2:	f7fa fb1f 	bl	8002e24 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e006      	b.n	8008802 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <RCCEx_PLL3_Config+0x15c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400
 8008810:	ffff0007 	.word	0xffff0007

08008814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e049      	b.n	80088ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f841 	bl	80088c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f000 f9f8 	bl	8008c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
	...

080088d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d001      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e04f      	b.n	8008990 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a23      	ldr	r2, [pc, #140]	; (800899c <HAL_TIM_Base_Start_IT+0xc4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d01d      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891a:	d018      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1f      	ldr	r2, [pc, #124]	; (80089a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1e      	ldr	r2, [pc, #120]	; (80089a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00e      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1c      	ldr	r2, [pc, #112]	; (80089a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d009      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a1b      	ldr	r2, [pc, #108]	; (80089ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d004      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d115      	bne.n	800897a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	4b17      	ldr	r3, [pc, #92]	; (80089b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008956:	4013      	ands	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b06      	cmp	r3, #6
 800895e:	d015      	beq.n	800898c <HAL_TIM_Base_Start_IT+0xb4>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008966:	d011      	beq.n	800898c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0201 	orr.w	r2, r2, #1
 8008976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008978:	e008      	b.n	800898c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	e000      	b.n	800898e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	40010000 	.word	0x40010000
 80089a0:	40000400 	.word	0x40000400
 80089a4:	40000800 	.word	0x40000800
 80089a8:	40000c00 	.word	0x40000c00
 80089ac:	40010400 	.word	0x40010400
 80089b0:	40001800 	.word	0x40001800
 80089b4:	00010007 	.word	0x00010007

080089b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d122      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d11b      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f06f 0202 	mvn.w	r2, #2
 80089e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f905 	bl	8008c0a <HAL_TIM_IC_CaptureCallback>
 8008a00:	e005      	b.n	8008a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f8f7 	bl	8008bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f908 	bl	8008c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d122      	bne.n	8008a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d11b      	bne.n	8008a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0204 	mvn.w	r2, #4
 8008a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f8db 	bl	8008c0a <HAL_TIM_IC_CaptureCallback>
 8008a54:	e005      	b.n	8008a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f8cd 	bl	8008bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8de 	bl	8008c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b08      	cmp	r3, #8
 8008a74:	d122      	bne.n	8008abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d11b      	bne.n	8008abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f06f 0208 	mvn.w	r2, #8
 8008a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2204      	movs	r2, #4
 8008a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f8b1 	bl	8008c0a <HAL_TIM_IC_CaptureCallback>
 8008aa8:	e005      	b.n	8008ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f8a3 	bl	8008bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f8b4 	bl	8008c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f003 0310 	and.w	r3, r3, #16
 8008ac6:	2b10      	cmp	r3, #16
 8008ac8:	d122      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d11b      	bne.n	8008b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f06f 0210 	mvn.w	r2, #16
 8008ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2208      	movs	r2, #8
 8008ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f887 	bl	8008c0a <HAL_TIM_IC_CaptureCallback>
 8008afc:	e005      	b.n	8008b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f879 	bl	8008bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f88a 	bl	8008c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d10e      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d107      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0201 	mvn.w	r2, #1
 8008b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7f9 f8e4 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d10e      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b54:	2b80      	cmp	r3, #128	; 0x80
 8008b56:	d107      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f914 	bl	8008d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b76:	d10e      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b82:	2b80      	cmp	r3, #128	; 0x80
 8008b84:	d107      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f907 	bl	8008da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d10e      	bne.n	8008bc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bae:	2b40      	cmp	r3, #64	; 0x40
 8008bb0:	d107      	bne.n	8008bc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f838 	bl	8008c32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d10e      	bne.n	8008bee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d107      	bne.n	8008bee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f06f 0220 	mvn.w	r2, #32
 8008be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f8c7 	bl	8008d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a40      	ldr	r2, [pc, #256]	; (8008d5c <TIM_Base_SetConfig+0x114>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <TIM_Base_SetConfig+0x40>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c66:	d00f      	beq.n	8008c88 <TIM_Base_SetConfig+0x40>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a3d      	ldr	r2, [pc, #244]	; (8008d60 <TIM_Base_SetConfig+0x118>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00b      	beq.n	8008c88 <TIM_Base_SetConfig+0x40>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a3c      	ldr	r2, [pc, #240]	; (8008d64 <TIM_Base_SetConfig+0x11c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d007      	beq.n	8008c88 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a3b      	ldr	r2, [pc, #236]	; (8008d68 <TIM_Base_SetConfig+0x120>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <TIM_Base_SetConfig+0x40>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a3a      	ldr	r2, [pc, #232]	; (8008d6c <TIM_Base_SetConfig+0x124>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d108      	bne.n	8008c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a2f      	ldr	r2, [pc, #188]	; (8008d5c <TIM_Base_SetConfig+0x114>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01f      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca8:	d01b      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2c      	ldr	r2, [pc, #176]	; (8008d60 <TIM_Base_SetConfig+0x118>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d017      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a2b      	ldr	r2, [pc, #172]	; (8008d64 <TIM_Base_SetConfig+0x11c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a2a      	ldr	r2, [pc, #168]	; (8008d68 <TIM_Base_SetConfig+0x120>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00f      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a29      	ldr	r2, [pc, #164]	; (8008d6c <TIM_Base_SetConfig+0x124>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00b      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a28      	ldr	r2, [pc, #160]	; (8008d70 <TIM_Base_SetConfig+0x128>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d007      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a27      	ldr	r2, [pc, #156]	; (8008d74 <TIM_Base_SetConfig+0x12c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d003      	beq.n	8008ce2 <TIM_Base_SetConfig+0x9a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a26      	ldr	r2, [pc, #152]	; (8008d78 <TIM_Base_SetConfig+0x130>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d108      	bne.n	8008cf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <TIM_Base_SetConfig+0x114>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00f      	beq.n	8008d40 <TIM_Base_SetConfig+0xf8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a12      	ldr	r2, [pc, #72]	; (8008d6c <TIM_Base_SetConfig+0x124>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d00b      	beq.n	8008d40 <TIM_Base_SetConfig+0xf8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <TIM_Base_SetConfig+0x128>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d007      	beq.n	8008d40 <TIM_Base_SetConfig+0xf8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <TIM_Base_SetConfig+0x12c>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_Base_SetConfig+0xf8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a0f      	ldr	r2, [pc, #60]	; (8008d78 <TIM_Base_SetConfig+0x130>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d103      	bne.n	8008d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	615a      	str	r2, [r3, #20]
}
 8008d4e:	bf00      	nop
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40010400 	.word	0x40010400
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40014400 	.word	0x40014400
 8008d78:	40014800 	.word	0x40014800

08008d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e042      	b.n	8008e50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7f8 ffc7 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2224      	movs	r2, #36	; 0x24
 8008de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0201 	bic.w	r2, r2, #1
 8008df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fc5a 	bl	80096b4 <UART_SetConfig>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d101      	bne.n	8008e0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e022      	b.n	8008e50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 f9ae 	bl	800a174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689a      	ldr	r2, [r3, #8]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0201 	orr.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 fa35 	bl	800a2b8 <UART_CheckIdleState>
 8008e4e:	4603      	mov	r3, r0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d168      	bne.n	8008f42 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <HAL_UART_Transmit_DMA+0x24>
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e061      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Transmit_DMA+0x36>
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e05a      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xec>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	88fa      	ldrh	r2, [r7, #6]
 8008ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2221      	movs	r2, #33	; 0x21
 8008eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02c      	beq.n	8008f1e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ec8:	4a20      	ldr	r2, [pc, #128]	; (8008f4c <HAL_UART_Transmit_DMA+0xf4>)
 8008eca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed0:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <HAL_UART_Transmit_DMA+0xf8>)
 8008ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed8:	4a1e      	ldr	r2, [pc, #120]	; (8008f54 <HAL_UART_Transmit_DMA+0xfc>)
 8008eda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eec:	4619      	mov	r1, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3328      	adds	r3, #40	; 0x28
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	f7fa fbe8 	bl	80036cc <HAL_DMA_Start_IT>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00d      	beq.n	8008f1e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2210      	movs	r2, #16
 8008f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e012      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2240      	movs	r2, #64	; 0x40
 8008f24:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f3c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e000      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
  }
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	0800a5cd 	.word	0x0800a5cd
 8008f50:	0800a61d 	.word	0x0800a61d
 8008f54:	0800a707 	.word	0x0800a707

08008f58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d131      	bne.n	8008fd4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_UART_Receive_DMA+0x24>
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e02a      	b.n	8008fd6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Receive_DMA+0x36>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e023      	b.n	8008fd6 <HAL_UART_Receive_DMA+0x7e>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <HAL_UART_Receive_DMA+0x88>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00e      	beq.n	8008fc4 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fc2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f001 fa40 	bl	800a450 <UART_Start_Receive_DMA>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	e000      	b.n	8008fd6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	58000c00 	.word	0x58000c00

08008fe4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff2:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009006:	2b80      	cmp	r3, #128	; 0x80
 8009008:	d127      	bne.n	800905a <HAL_UART_DMAStop+0x76>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b21      	cmp	r3, #33	; 0x21
 800900e:	d124      	bne.n	800905a <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689a      	ldr	r2, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800901e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009024:	2b00      	cmp	r3, #0
 8009026:	d015      	beq.n	8009054 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902c:	4618      	mov	r0, r3
 800902e:	f7fa fdb7 	bl	8003ba0 <HAL_DMA_Abort>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00d      	beq.n	8009054 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800903c:	4618      	mov	r0, r3
 800903e:	f7fc fa3b 	bl	80054b8 <HAL_DMA_GetError>
 8009042:	4603      	mov	r3, r0
 8009044:	2b20      	cmp	r3, #32
 8009046:	d105      	bne.n	8009054 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2210      	movs	r2, #16
 800904c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e032      	b.n	80090ba <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fa69 	bl	800a52c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	d127      	bne.n	80090b8 <HAL_UART_DMAStop+0xd4>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b22      	cmp	r3, #34	; 0x22
 800906c:	d124      	bne.n	80090b8 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800907c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d015      	beq.n	80090b2 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800908a:	4618      	mov	r0, r3
 800908c:	f7fa fd88 	bl	8003ba0 <HAL_DMA_Abort>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800909a:	4618      	mov	r0, r3
 800909c:	f7fc fa0c 	bl	80054b8 <HAL_DMA_GetError>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b20      	cmp	r3, #32
 80090a4:	d105      	bne.n	80090b2 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2210      	movs	r2, #16
 80090aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e003      	b.n	80090ba <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 fa58 	bl	800a568 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80090ea:	4013      	ands	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d118      	bne.n	8009126 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d013      	beq.n	8009126 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d104      	bne.n	8009112 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8282 	beq.w	8009620 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
      }
      return;
 8009124:	e27c      	b.n	8009620 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 80ef 	beq.w	800930c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4b73      	ldr	r3, [pc, #460]	; (8009300 <HAL_UART_IRQHandler+0x23c>)
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d105      	bne.n	8009144 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	4b72      	ldr	r3, [pc, #456]	; (8009304 <HAL_UART_IRQHandler+0x240>)
 800913c:	4013      	ands	r3, r2
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 80e4 	beq.w	800930c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d010      	beq.n	8009170 <HAL_UART_IRQHandler+0xac>
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2201      	movs	r2, #1
 800915e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009166:	f043 0201 	orr.w	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d010      	beq.n	800919c <HAL_UART_IRQHandler+0xd8>
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2202      	movs	r2, #2
 800918a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009192:	f043 0204 	orr.w	r2, r3, #4
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d010      	beq.n	80091c8 <HAL_UART_IRQHandler+0x104>
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2204      	movs	r2, #4
 80091b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091be:	f043 0202 	orr.w	r2, r3, #2
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f003 0308 	and.w	r3, r3, #8
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d015      	beq.n	80091fe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4b48      	ldr	r3, [pc, #288]	; (8009300 <HAL_UART_IRQHandler+0x23c>)
 80091e0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2208      	movs	r2, #8
 80091ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f4:	f043 0208 	orr.w	r2, r3, #8
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009204:	2b00      	cmp	r3, #0
 8009206:	d011      	beq.n	800922c <HAL_UART_IRQHandler+0x168>
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00c      	beq.n	800922c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800921a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009222:	f043 0220 	orr.w	r2, r3, #32
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 81f6 	beq.w	8009624 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d011      	beq.n	8009266 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800926c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	d004      	beq.n	8009286 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009282:	2b00      	cmp	r3, #0
 8009284:	d031      	beq.n	80092ea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 f96e 	bl	800a568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009296:	2b40      	cmp	r3, #64	; 0x40
 8009298:	d123      	bne.n	80092e2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d013      	beq.n	80092da <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b6:	4a14      	ldr	r2, [pc, #80]	; (8009308 <HAL_UART_IRQHandler+0x244>)
 80092b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fa ff8c 	bl	80041dc <HAL_DMA_Abort_IT>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d017      	beq.n	80092fa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d8:	e00f      	b.n	80092fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9d4 	bl	8009688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	e00b      	b.n	80092fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9d0 	bl	8009688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e8:	e007      	b.n	80092fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f9cc 	bl	8009688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80092f8:	e194      	b.n	8009624 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092fa:	bf00      	nop
    return;
 80092fc:	e192      	b.n	8009624 <HAL_UART_IRQHandler+0x560>
 80092fe:	bf00      	nop
 8009300:	10000001 	.word	0x10000001
 8009304:	04000120 	.word	0x04000120
 8009308:	0800a787 	.word	0x0800a787

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009310:	2b01      	cmp	r3, #1
 8009312:	f040 810f 	bne.w	8009534 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8109 	beq.w	8009534 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8103 	beq.w	8009534 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2210      	movs	r2, #16
 8009334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009340:	2b40      	cmp	r3, #64	; 0x40
 8009342:	f040 80bb 	bne.w	80094bc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a96      	ldr	r2, [pc, #600]	; (80095a8 <HAL_UART_IRQHandler+0x4e4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d059      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a94      	ldr	r2, [pc, #592]	; (80095ac <HAL_UART_IRQHandler+0x4e8>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d053      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a92      	ldr	r2, [pc, #584]	; (80095b0 <HAL_UART_IRQHandler+0x4ec>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d04d      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a90      	ldr	r2, [pc, #576]	; (80095b4 <HAL_UART_IRQHandler+0x4f0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d047      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a8e      	ldr	r2, [pc, #568]	; (80095b8 <HAL_UART_IRQHandler+0x4f4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d041      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a8c      	ldr	r2, [pc, #560]	; (80095bc <HAL_UART_IRQHandler+0x4f8>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d03b      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a8a      	ldr	r2, [pc, #552]	; (80095c0 <HAL_UART_IRQHandler+0x4fc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d035      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a88      	ldr	r2, [pc, #544]	; (80095c4 <HAL_UART_IRQHandler+0x500>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d02f      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a86      	ldr	r2, [pc, #536]	; (80095c8 <HAL_UART_IRQHandler+0x504>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d029      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a84      	ldr	r2, [pc, #528]	; (80095cc <HAL_UART_IRQHandler+0x508>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d023      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a82      	ldr	r2, [pc, #520]	; (80095d0 <HAL_UART_IRQHandler+0x50c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d01d      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a80      	ldr	r2, [pc, #512]	; (80095d4 <HAL_UART_IRQHandler+0x510>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d017      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a7e      	ldr	r2, [pc, #504]	; (80095d8 <HAL_UART_IRQHandler+0x514>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d011      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a7c      	ldr	r2, [pc, #496]	; (80095dc <HAL_UART_IRQHandler+0x518>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00b      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a7a      	ldr	r2, [pc, #488]	; (80095e0 <HAL_UART_IRQHandler+0x51c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d005      	beq.n	8009406 <HAL_UART_IRQHandler+0x342>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a78      	ldr	r2, [pc, #480]	; (80095e4 <HAL_UART_IRQHandler+0x520>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d105      	bne.n	8009412 <HAL_UART_IRQHandler+0x34e>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	b29b      	uxth	r3, r3
 8009410:	e004      	b.n	800941c <HAL_UART_IRQHandler+0x358>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	b29b      	uxth	r3, r3
 800941c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800941e:	893b      	ldrh	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8101 	beq.w	8009628 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800942c:	893a      	ldrh	r2, [r7, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	f080 80fa 	bcs.w	8009628 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	893a      	ldrh	r2, [r7, #8]
 8009438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009446:	d02b      	beq.n	80094a0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009456:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009476:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2220      	movs	r2, #32
 800947c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0210 	bic.w	r2, r2, #16
 8009494:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800949a:	4618      	mov	r0, r3
 800949c:	f7fa fb80 	bl	8003ba0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f8f1 	bl	800969c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094ba:	e0b5      	b.n	8009628 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80a8 	beq.w	800962c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80094dc:	897b      	ldrh	r3, [r7, #10]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 80a4 	beq.w	800962c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094f2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6899      	ldr	r1, [r3, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b3a      	ldr	r3, [pc, #232]	; (80095e8 <HAL_UART_IRQHandler+0x524>)
 8009500:	400b      	ands	r3, r1
 8009502:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0210 	bic.w	r2, r2, #16
 8009526:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009528:	897b      	ldrh	r3, [r7, #10]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f8b5 	bl	800969c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009532:	e07b      	b.n	800962c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <HAL_UART_IRQHandler+0x496>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 f947 	bl	800a7e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009558:	e06b      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009560:	2b00      	cmp	r3, #0
 8009562:	d012      	beq.n	800958a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956a:	2b00      	cmp	r3, #0
 800956c:	d104      	bne.n	8009578 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d008      	beq.n	800958a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957c:	2b00      	cmp	r3, #0
 800957e:	d057      	beq.n	8009630 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
    }
    return;
 8009588:	e052      	b.n	8009630 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d02b      	beq.n	80095ec <HAL_UART_IRQHandler+0x528>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b00      	cmp	r3, #0
 800959c:	d026      	beq.n	80095ec <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 f907 	bl	800a7b2 <UART_EndTransmit_IT>
    return;
 80095a4:	e045      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
 80095a6:	bf00      	nop
 80095a8:	40020010 	.word	0x40020010
 80095ac:	40020028 	.word	0x40020028
 80095b0:	40020040 	.word	0x40020040
 80095b4:	40020058 	.word	0x40020058
 80095b8:	40020070 	.word	0x40020070
 80095bc:	40020088 	.word	0x40020088
 80095c0:	400200a0 	.word	0x400200a0
 80095c4:	400200b8 	.word	0x400200b8
 80095c8:	40020410 	.word	0x40020410
 80095cc:	40020428 	.word	0x40020428
 80095d0:	40020440 	.word	0x40020440
 80095d4:	40020458 	.word	0x40020458
 80095d8:	40020470 	.word	0x40020470
 80095dc:	40020488 	.word	0x40020488
 80095e0:	400204a0 	.word	0x400204a0
 80095e4:	400204b8 	.word	0x400204b8
 80095e8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d008      	beq.n	8009608 <HAL_UART_IRQHandler+0x544>
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 f904 	bl	800a80e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009606:	e014      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00f      	beq.n	8009632 <HAL_UART_IRQHandler+0x56e>
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	da0c      	bge.n	8009632 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f8ee 	bl	800a7fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800961e:	e008      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
      return;
 8009620:	bf00      	nop
 8009622:	e006      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
    return;
 8009624:	bf00      	nop
 8009626:	e004      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
      return;
 8009628:	bf00      	nop
 800962a:	e002      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
      return;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <HAL_UART_IRQHandler+0x56e>
    return;
 8009630:	bf00      	nop
  }
}
 8009632:	3720      	adds	r7, #32
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096b4:	b5b0      	push	{r4, r5, r7, lr}
 80096b6:	b08e      	sub	sp, #56	; 0x38
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	4bbf      	ldr	r3, [pc, #764]	; (80099e0 <UART_SetConfig+0x32c>)
 80096e2:	4013      	ands	r3, r2
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096ea:	430b      	orrs	r3, r1
 80096ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68da      	ldr	r2, [r3, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4ab5      	ldr	r2, [pc, #724]	; (80099e4 <UART_SetConfig+0x330>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d004      	beq.n	800971e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800971a:	4313      	orrs	r3, r2
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	4bb0      	ldr	r3, [pc, #704]	; (80099e8 <UART_SetConfig+0x334>)
 8009726:	4013      	ands	r3, r2
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6812      	ldr	r2, [r2, #0]
 800972c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800972e:	430b      	orrs	r3, r1
 8009730:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	f023 010f 	bic.w	r1, r3, #15
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4aa7      	ldr	r2, [pc, #668]	; (80099ec <UART_SetConfig+0x338>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d176      	bne.n	8009840 <UART_SetConfig+0x18c>
 8009752:	4ba7      	ldr	r3, [pc, #668]	; (80099f0 <UART_SetConfig+0x33c>)
 8009754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800975a:	2b28      	cmp	r3, #40	; 0x28
 800975c:	d86c      	bhi.n	8009838 <UART_SetConfig+0x184>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <UART_SetConfig+0xb0>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	08009809 	.word	0x08009809
 8009768:	08009839 	.word	0x08009839
 800976c:	08009839 	.word	0x08009839
 8009770:	08009839 	.word	0x08009839
 8009774:	08009839 	.word	0x08009839
 8009778:	08009839 	.word	0x08009839
 800977c:	08009839 	.word	0x08009839
 8009780:	08009839 	.word	0x08009839
 8009784:	08009811 	.word	0x08009811
 8009788:	08009839 	.word	0x08009839
 800978c:	08009839 	.word	0x08009839
 8009790:	08009839 	.word	0x08009839
 8009794:	08009839 	.word	0x08009839
 8009798:	08009839 	.word	0x08009839
 800979c:	08009839 	.word	0x08009839
 80097a0:	08009839 	.word	0x08009839
 80097a4:	08009819 	.word	0x08009819
 80097a8:	08009839 	.word	0x08009839
 80097ac:	08009839 	.word	0x08009839
 80097b0:	08009839 	.word	0x08009839
 80097b4:	08009839 	.word	0x08009839
 80097b8:	08009839 	.word	0x08009839
 80097bc:	08009839 	.word	0x08009839
 80097c0:	08009839 	.word	0x08009839
 80097c4:	08009821 	.word	0x08009821
 80097c8:	08009839 	.word	0x08009839
 80097cc:	08009839 	.word	0x08009839
 80097d0:	08009839 	.word	0x08009839
 80097d4:	08009839 	.word	0x08009839
 80097d8:	08009839 	.word	0x08009839
 80097dc:	08009839 	.word	0x08009839
 80097e0:	08009839 	.word	0x08009839
 80097e4:	08009829 	.word	0x08009829
 80097e8:	08009839 	.word	0x08009839
 80097ec:	08009839 	.word	0x08009839
 80097f0:	08009839 	.word	0x08009839
 80097f4:	08009839 	.word	0x08009839
 80097f8:	08009839 	.word	0x08009839
 80097fc:	08009839 	.word	0x08009839
 8009800:	08009839 	.word	0x08009839
 8009804:	08009831 	.word	0x08009831
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e222      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e21e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e21a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e216      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e212      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009830:	2340      	movs	r3, #64	; 0x40
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e20e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009838:	2380      	movs	r3, #128	; 0x80
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e20a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a6b      	ldr	r2, [pc, #428]	; (80099f4 <UART_SetConfig+0x340>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d130      	bne.n	80098ac <UART_SetConfig+0x1f8>
 800984a:	4b69      	ldr	r3, [pc, #420]	; (80099f0 <UART_SetConfig+0x33c>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d826      	bhi.n	80098a4 <UART_SetConfig+0x1f0>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x1a8>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e1ec      	b.n	8009c56 <UART_SetConfig+0x5a2>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e1e8      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e1e4      	b.n	8009c56 <UART_SetConfig+0x5a2>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e1e0      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e1dc      	b.n	8009c56 <UART_SetConfig+0x5a2>
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e1d8      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e1d4      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a51      	ldr	r2, [pc, #324]	; (80099f8 <UART_SetConfig+0x344>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d130      	bne.n	8009918 <UART_SetConfig+0x264>
 80098b6:	4b4e      	ldr	r3, [pc, #312]	; (80099f0 <UART_SetConfig+0x33c>)
 80098b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d826      	bhi.n	8009910 <UART_SetConfig+0x25c>
 80098c2:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <UART_SetConfig+0x214>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098e9 	.word	0x080098e9
 80098d0:	080098f1 	.word	0x080098f1
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009909 	.word	0x08009909
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e1b6      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e1b2      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e1ae      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e1aa      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009900:	2320      	movs	r3, #32
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e1a6      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e1a2      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009910:	2380      	movs	r3, #128	; 0x80
 8009912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009916:	e19e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a37      	ldr	r2, [pc, #220]	; (80099fc <UART_SetConfig+0x348>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d130      	bne.n	8009984 <UART_SetConfig+0x2d0>
 8009922:	4b33      	ldr	r3, [pc, #204]	; (80099f0 <UART_SetConfig+0x33c>)
 8009924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b05      	cmp	r3, #5
 800992c:	d826      	bhi.n	800997c <UART_SetConfig+0x2c8>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <UART_SetConfig+0x280>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	0800994d 	.word	0x0800994d
 8009938:	08009955 	.word	0x08009955
 800993c:	0800995d 	.word	0x0800995d
 8009940:	08009965 	.word	0x08009965
 8009944:	0800996d 	.word	0x0800996d
 8009948:	08009975 	.word	0x08009975
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009952:	e180      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009954:	2304      	movs	r3, #4
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e17c      	b.n	8009c56 <UART_SetConfig+0x5a2>
 800995c:	2308      	movs	r3, #8
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e178      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009964:	2310      	movs	r3, #16
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e174      	b.n	8009c56 <UART_SetConfig+0x5a2>
 800996c:	2320      	movs	r3, #32
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e170      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e16c      	b.n	8009c56 <UART_SetConfig+0x5a2>
 800997c:	2380      	movs	r3, #128	; 0x80
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e168      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1d      	ldr	r2, [pc, #116]	; (8009a00 <UART_SetConfig+0x34c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d142      	bne.n	8009a14 <UART_SetConfig+0x360>
 800998e:	4b18      	ldr	r3, [pc, #96]	; (80099f0 <UART_SetConfig+0x33c>)
 8009990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	2b05      	cmp	r3, #5
 8009998:	d838      	bhi.n	8009a0c <UART_SetConfig+0x358>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x2ec>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099b9 	.word	0x080099b9
 80099a4:	080099c1 	.word	0x080099c1
 80099a8:	080099c9 	.word	0x080099c9
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d9 	.word	0x080099d9
 80099b4:	08009a05 	.word	0x08009a05
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e14a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e146      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e142      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e13e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e13a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 80099e0:	cfff69f3 	.word	0xcfff69f3
 80099e4:	58000c00 	.word	0x58000c00
 80099e8:	11fff4ff 	.word	0x11fff4ff
 80099ec:	40011000 	.word	0x40011000
 80099f0:	58024400 	.word	0x58024400
 80099f4:	40004400 	.word	0x40004400
 80099f8:	40004800 	.word	0x40004800
 80099fc:	40004c00 	.word	0x40004c00
 8009a00:	40005000 	.word	0x40005000
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e124      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e120      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4acc      	ldr	r2, [pc, #816]	; (8009d4c <UART_SetConfig+0x698>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d176      	bne.n	8009b0c <UART_SetConfig+0x458>
 8009a1e:	4bcc      	ldr	r3, [pc, #816]	; (8009d50 <UART_SetConfig+0x69c>)
 8009a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a26:	2b28      	cmp	r3, #40	; 0x28
 8009a28:	d86c      	bhi.n	8009b04 <UART_SetConfig+0x450>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <UART_SetConfig+0x37c>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009ad5 	.word	0x08009ad5
 8009a34:	08009b05 	.word	0x08009b05
 8009a38:	08009b05 	.word	0x08009b05
 8009a3c:	08009b05 	.word	0x08009b05
 8009a40:	08009b05 	.word	0x08009b05
 8009a44:	08009b05 	.word	0x08009b05
 8009a48:	08009b05 	.word	0x08009b05
 8009a4c:	08009b05 	.word	0x08009b05
 8009a50:	08009add 	.word	0x08009add
 8009a54:	08009b05 	.word	0x08009b05
 8009a58:	08009b05 	.word	0x08009b05
 8009a5c:	08009b05 	.word	0x08009b05
 8009a60:	08009b05 	.word	0x08009b05
 8009a64:	08009b05 	.word	0x08009b05
 8009a68:	08009b05 	.word	0x08009b05
 8009a6c:	08009b05 	.word	0x08009b05
 8009a70:	08009ae5 	.word	0x08009ae5
 8009a74:	08009b05 	.word	0x08009b05
 8009a78:	08009b05 	.word	0x08009b05
 8009a7c:	08009b05 	.word	0x08009b05
 8009a80:	08009b05 	.word	0x08009b05
 8009a84:	08009b05 	.word	0x08009b05
 8009a88:	08009b05 	.word	0x08009b05
 8009a8c:	08009b05 	.word	0x08009b05
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009b05 	.word	0x08009b05
 8009a98:	08009b05 	.word	0x08009b05
 8009a9c:	08009b05 	.word	0x08009b05
 8009aa0:	08009b05 	.word	0x08009b05
 8009aa4:	08009b05 	.word	0x08009b05
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b05 	.word	0x08009b05
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009b05 	.word	0x08009b05
 8009ab8:	08009b05 	.word	0x08009b05
 8009abc:	08009b05 	.word	0x08009b05
 8009ac0:	08009b05 	.word	0x08009b05
 8009ac4:	08009b05 	.word	0x08009b05
 8009ac8:	08009b05 	.word	0x08009b05
 8009acc:	08009b05 	.word	0x08009b05
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ada:	e0bc      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e0b8      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e0b4      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e0b0      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e0ac      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e0a8      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e0a4      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a90      	ldr	r2, [pc, #576]	; (8009d54 <UART_SetConfig+0x6a0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d130      	bne.n	8009b78 <UART_SetConfig+0x4c4>
 8009b16:	4b8e      	ldr	r3, [pc, #568]	; (8009d50 <UART_SetConfig+0x69c>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d826      	bhi.n	8009b70 <UART_SetConfig+0x4bc>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x474>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e086      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e082      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e07e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e07a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e076      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e072      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b70:	2380      	movs	r3, #128	; 0x80
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e06e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a76      	ldr	r2, [pc, #472]	; (8009d58 <UART_SetConfig+0x6a4>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d130      	bne.n	8009be4 <UART_SetConfig+0x530>
 8009b82:	4b73      	ldr	r3, [pc, #460]	; (8009d50 <UART_SetConfig+0x69c>)
 8009b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d826      	bhi.n	8009bdc <UART_SetConfig+0x528>
 8009b8e:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <UART_SetConfig+0x4e0>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bad 	.word	0x08009bad
 8009b98:	08009bb5 	.word	0x08009bb5
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb2:	e050      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e04c      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009bbc:	2308      	movs	r3, #8
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e048      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e044      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e040      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e03c      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009bdc:	2380      	movs	r3, #128	; 0x80
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e038      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a5c      	ldr	r2, [pc, #368]	; (8009d5c <UART_SetConfig+0x6a8>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d130      	bne.n	8009c50 <UART_SetConfig+0x59c>
 8009bee:	4b58      	ldr	r3, [pc, #352]	; (8009d50 <UART_SetConfig+0x69c>)
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d826      	bhi.n	8009c48 <UART_SetConfig+0x594>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <UART_SetConfig+0x54c>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c21 	.word	0x08009c21
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c39 	.word	0x08009c39
 8009c14:	08009c41 	.word	0x08009c41
 8009c18:	2302      	movs	r3, #2
 8009c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1e:	e01a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e016      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e012      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e00e      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e00a      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e006      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c48:	2380      	movs	r3, #128	; 0x80
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e002      	b.n	8009c56 <UART_SetConfig+0x5a2>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a40      	ldr	r2, [pc, #256]	; (8009d5c <UART_SetConfig+0x6a8>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	f040 80ef 	bne.w	8009e40 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	dc46      	bgt.n	8009cf8 <UART_SetConfig+0x644>
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	f2c0 8081 	blt.w	8009d72 <UART_SetConfig+0x6be>
 8009c70:	3b02      	subs	r3, #2
 8009c72:	2b1e      	cmp	r3, #30
 8009c74:	d87d      	bhi.n	8009d72 <UART_SetConfig+0x6be>
 8009c76:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <UART_SetConfig+0x5c8>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009cff 	.word	0x08009cff
 8009c80:	08009d73 	.word	0x08009d73
 8009c84:	08009d07 	.word	0x08009d07
 8009c88:	08009d73 	.word	0x08009d73
 8009c8c:	08009d73 	.word	0x08009d73
 8009c90:	08009d73 	.word	0x08009d73
 8009c94:	08009d17 	.word	0x08009d17
 8009c98:	08009d73 	.word	0x08009d73
 8009c9c:	08009d73 	.word	0x08009d73
 8009ca0:	08009d73 	.word	0x08009d73
 8009ca4:	08009d73 	.word	0x08009d73
 8009ca8:	08009d73 	.word	0x08009d73
 8009cac:	08009d73 	.word	0x08009d73
 8009cb0:	08009d73 	.word	0x08009d73
 8009cb4:	08009d27 	.word	0x08009d27
 8009cb8:	08009d73 	.word	0x08009d73
 8009cbc:	08009d73 	.word	0x08009d73
 8009cc0:	08009d73 	.word	0x08009d73
 8009cc4:	08009d73 	.word	0x08009d73
 8009cc8:	08009d73 	.word	0x08009d73
 8009ccc:	08009d73 	.word	0x08009d73
 8009cd0:	08009d73 	.word	0x08009d73
 8009cd4:	08009d73 	.word	0x08009d73
 8009cd8:	08009d73 	.word	0x08009d73
 8009cdc:	08009d73 	.word	0x08009d73
 8009ce0:	08009d73 	.word	0x08009d73
 8009ce4:	08009d73 	.word	0x08009d73
 8009ce8:	08009d73 	.word	0x08009d73
 8009cec:	08009d73 	.word	0x08009d73
 8009cf0:	08009d73 	.word	0x08009d73
 8009cf4:	08009d65 	.word	0x08009d65
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	d036      	beq.n	8009d6a <UART_SetConfig+0x6b6>
 8009cfc:	e039      	b.n	8009d72 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cfe:	f7fe f967 	bl	8007fd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d04:	e03b      	b.n	8009d7e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d06:	f107 0314 	add.w	r3, r7, #20
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe f976 	bl	8007ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d14:	e033      	b.n	8009d7e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe fac2 	bl	80082a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d24:	e02b      	b.n	8009d7e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <UART_SetConfig+0x69c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <UART_SetConfig+0x69c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a08      	ldr	r2, [pc, #32]	; (8009d60 <UART_SetConfig+0x6ac>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d44:	e01b      	b.n	8009d7e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009d46:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <UART_SetConfig+0x6ac>)
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d4a:	e018      	b.n	8009d7e <UART_SetConfig+0x6ca>
 8009d4c:	40011400 	.word	0x40011400
 8009d50:	58024400 	.word	0x58024400
 8009d54:	40007800 	.word	0x40007800
 8009d58:	40007c00 	.word	0x40007c00
 8009d5c:	58000c00 	.word	0x58000c00
 8009d60:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d64:	4bc4      	ldr	r3, [pc, #784]	; (800a078 <UART_SetConfig+0x9c4>)
 8009d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d68:	e009      	b.n	8009d7e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d70:	e005      	b.n	8009d7e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 81da 	beq.w	800a13a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8a:	4abc      	ldr	r2, [pc, #752]	; (800a07c <UART_SetConfig+0x9c8>)
 8009d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d98:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4413      	add	r3, r2
 8009da4:	6a3a      	ldr	r2, [r7, #32]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d305      	bcc.n	8009db6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d903      	bls.n	8009dbe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009dbc:	e1bd      	b.n	800a13a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f04f 0100 	mov.w	r1, #0
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	4aac      	ldr	r2, [pc, #688]	; (800a07c <UART_SetConfig+0x9c8>)
 8009dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	f7f6 fa83 	bl	80002e0 <__aeabi_uldivmod>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	f04f 0200 	mov.w	r2, #0
 8009de6:	f04f 0300 	mov.w	r3, #0
 8009dea:	020b      	lsls	r3, r1, #8
 8009dec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009df0:	0202      	lsls	r2, r0, #8
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	6849      	ldr	r1, [r1, #4]
 8009df6:	0849      	lsrs	r1, r1, #1
 8009df8:	4608      	mov	r0, r1
 8009dfa:	f04f 0100 	mov.w	r1, #0
 8009dfe:	1814      	adds	r4, r2, r0
 8009e00:	eb43 0501 	adc.w	r5, r3, r1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	4620      	mov	r0, r4
 8009e10:	4629      	mov	r1, r5
 8009e12:	f7f6 fa65 	bl	80002e0 <__aeabi_uldivmod>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e24:	d308      	bcc.n	8009e38 <UART_SetConfig+0x784>
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e2c:	d204      	bcs.n	8009e38 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e34:	60da      	str	r2, [r3, #12]
 8009e36:	e180      	b.n	800a13a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e3e:	e17c      	b.n	800a13a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e48:	f040 80bf 	bne.w	8009fca <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	dc49      	bgt.n	8009ee8 <UART_SetConfig+0x834>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db7c      	blt.n	8009f52 <UART_SetConfig+0x89e>
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d87a      	bhi.n	8009f52 <UART_SetConfig+0x89e>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <UART_SetConfig+0x7b0>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009eef 	.word	0x08009eef
 8009e68:	08009ef7 	.word	0x08009ef7
 8009e6c:	08009f53 	.word	0x08009f53
 8009e70:	08009f53 	.word	0x08009f53
 8009e74:	08009eff 	.word	0x08009eff
 8009e78:	08009f53 	.word	0x08009f53
 8009e7c:	08009f53 	.word	0x08009f53
 8009e80:	08009f53 	.word	0x08009f53
 8009e84:	08009f0f 	.word	0x08009f0f
 8009e88:	08009f53 	.word	0x08009f53
 8009e8c:	08009f53 	.word	0x08009f53
 8009e90:	08009f53 	.word	0x08009f53
 8009e94:	08009f53 	.word	0x08009f53
 8009e98:	08009f53 	.word	0x08009f53
 8009e9c:	08009f53 	.word	0x08009f53
 8009ea0:	08009f53 	.word	0x08009f53
 8009ea4:	08009f1f 	.word	0x08009f1f
 8009ea8:	08009f53 	.word	0x08009f53
 8009eac:	08009f53 	.word	0x08009f53
 8009eb0:	08009f53 	.word	0x08009f53
 8009eb4:	08009f53 	.word	0x08009f53
 8009eb8:	08009f53 	.word	0x08009f53
 8009ebc:	08009f53 	.word	0x08009f53
 8009ec0:	08009f53 	.word	0x08009f53
 8009ec4:	08009f53 	.word	0x08009f53
 8009ec8:	08009f53 	.word	0x08009f53
 8009ecc:	08009f53 	.word	0x08009f53
 8009ed0:	08009f53 	.word	0x08009f53
 8009ed4:	08009f53 	.word	0x08009f53
 8009ed8:	08009f53 	.word	0x08009f53
 8009edc:	08009f53 	.word	0x08009f53
 8009ee0:	08009f53 	.word	0x08009f53
 8009ee4:	08009f45 	.word	0x08009f45
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	d02e      	beq.n	8009f4a <UART_SetConfig+0x896>
 8009eec:	e031      	b.n	8009f52 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eee:	f7fd f8c1 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 8009ef2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef4:	e033      	b.n	8009f5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ef6:	f7fd f8d3 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 8009efa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009efc:	e02f      	b.n	8009f5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efe:	f107 0314 	add.w	r3, r7, #20
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe f87a 	bl	8007ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f0c:	e027      	b.n	8009f5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe f9c6 	bl	80082a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f1c:	e01f      	b.n	8009f5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1e:	4b58      	ldr	r3, [pc, #352]	; (800a080 <UART_SetConfig+0x9cc>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f2a:	4b55      	ldr	r3, [pc, #340]	; (800a080 <UART_SetConfig+0x9cc>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	4a53      	ldr	r2, [pc, #332]	; (800a084 <UART_SetConfig+0x9d0>)
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f3c:	e00f      	b.n	8009f5e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009f3e:	4b51      	ldr	r3, [pc, #324]	; (800a084 <UART_SetConfig+0x9d0>)
 8009f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f42:	e00c      	b.n	8009f5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f44:	4b4c      	ldr	r3, [pc, #304]	; (800a078 <UART_SetConfig+0x9c4>)
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f48:	e009      	b.n	8009f5e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f50:	e005      	b.n	8009f5e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80ea 	beq.w	800a13a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	4a44      	ldr	r2, [pc, #272]	; (800a07c <UART_SetConfig+0x9c8>)
 8009f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f78:	005a      	lsls	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	441a      	add	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	2b0f      	cmp	r3, #15
 8009f92:	d916      	bls.n	8009fc2 <UART_SetConfig+0x90e>
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f9a:	d212      	bcs.n	8009fc2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f023 030f 	bic.w	r3, r3, #15
 8009fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fbe:	60da      	str	r2, [r3, #12]
 8009fc0:	e0bb      	b.n	800a13a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fc8:	e0b7      	b.n	800a13a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	dc4a      	bgt.n	800a068 <UART_SetConfig+0x9b4>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f2c0 8086 	blt.w	800a0e4 <UART_SetConfig+0xa30>
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	f200 8083 	bhi.w	800a0e4 <UART_SetConfig+0xa30>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <UART_SetConfig+0x930>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a06f 	.word	0x0800a06f
 8009fe8:	0800a089 	.word	0x0800a089
 8009fec:	0800a0e5 	.word	0x0800a0e5
 8009ff0:	0800a0e5 	.word	0x0800a0e5
 8009ff4:	0800a091 	.word	0x0800a091
 8009ff8:	0800a0e5 	.word	0x0800a0e5
 8009ffc:	0800a0e5 	.word	0x0800a0e5
 800a000:	0800a0e5 	.word	0x0800a0e5
 800a004:	0800a0a1 	.word	0x0800a0a1
 800a008:	0800a0e5 	.word	0x0800a0e5
 800a00c:	0800a0e5 	.word	0x0800a0e5
 800a010:	0800a0e5 	.word	0x0800a0e5
 800a014:	0800a0e5 	.word	0x0800a0e5
 800a018:	0800a0e5 	.word	0x0800a0e5
 800a01c:	0800a0e5 	.word	0x0800a0e5
 800a020:	0800a0e5 	.word	0x0800a0e5
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0e5 	.word	0x0800a0e5
 800a02c:	0800a0e5 	.word	0x0800a0e5
 800a030:	0800a0e5 	.word	0x0800a0e5
 800a034:	0800a0e5 	.word	0x0800a0e5
 800a038:	0800a0e5 	.word	0x0800a0e5
 800a03c:	0800a0e5 	.word	0x0800a0e5
 800a040:	0800a0e5 	.word	0x0800a0e5
 800a044:	0800a0e5 	.word	0x0800a0e5
 800a048:	0800a0e5 	.word	0x0800a0e5
 800a04c:	0800a0e5 	.word	0x0800a0e5
 800a050:	0800a0e5 	.word	0x0800a0e5
 800a054:	0800a0e5 	.word	0x0800a0e5
 800a058:	0800a0e5 	.word	0x0800a0e5
 800a05c:	0800a0e5 	.word	0x0800a0e5
 800a060:	0800a0e5 	.word	0x0800a0e5
 800a064:	0800a0d7 	.word	0x0800a0d7
 800a068:	2b40      	cmp	r3, #64	; 0x40
 800a06a:	d037      	beq.n	800a0dc <UART_SetConfig+0xa28>
 800a06c:	e03a      	b.n	800a0e4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a06e:	f7fd f801 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800a072:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a074:	e03c      	b.n	800a0f0 <UART_SetConfig+0xa3c>
 800a076:	bf00      	nop
 800a078:	003d0900 	.word	0x003d0900
 800a07c:	0800c260 	.word	0x0800c260
 800a080:	58024400 	.word	0x58024400
 800a084:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a088:	f7fd f80a 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800a08c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a08e:	e02f      	b.n	800a0f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a090:	f107 0314 	add.w	r3, r7, #20
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd ffb1 	bl	8007ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09e:	e027      	b.n	800a0f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a0:	f107 0308 	add.w	r3, r7, #8
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe f8fd 	bl	80082a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ae:	e01f      	b.n	800a0f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b0:	4b2c      	ldr	r3, [pc, #176]	; (800a164 <UART_SetConfig+0xab0>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0320 	and.w	r3, r3, #32
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d009      	beq.n	800a0d0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0bc:	4b29      	ldr	r3, [pc, #164]	; (800a164 <UART_SetConfig+0xab0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	08db      	lsrs	r3, r3, #3
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	4a28      	ldr	r2, [pc, #160]	; (800a168 <UART_SetConfig+0xab4>)
 800a0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ce:	e00f      	b.n	800a0f0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a0d0:	4b25      	ldr	r3, [pc, #148]	; (800a168 <UART_SetConfig+0xab4>)
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d4:	e00c      	b.n	800a0f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0d6:	4b25      	ldr	r3, [pc, #148]	; (800a16c <UART_SetConfig+0xab8>)
 800a0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0da:	e009      	b.n	800a0f0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0e2:	e005      	b.n	800a0f0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d021      	beq.n	800a13a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	4a1d      	ldr	r2, [pc, #116]	; (800a170 <UART_SetConfig+0xabc>)
 800a0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a100:	461a      	mov	r2, r3
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	fbb3 f2f2 	udiv	r2, r3, r2
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	085b      	lsrs	r3, r3, #1
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	fbb2 f3f3 	udiv	r3, r2, r3
 800a118:	b29b      	uxth	r3, r3
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	2b0f      	cmp	r3, #15
 800a120:	d908      	bls.n	800a134 <UART_SetConfig+0xa80>
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a128:	d204      	bcs.n	800a134 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a130:	60da      	str	r2, [r3, #12]
 800a132:	e002      	b.n	800a13a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a156:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3738      	adds	r7, #56	; 0x38
 800a15e:	46bd      	mov	sp, r7
 800a160:	bdb0      	pop	{r4, r5, r7, pc}
 800a162:	bf00      	nop
 800a164:	58024400 	.word	0x58024400
 800a168:	03d09000 	.word	0x03d09000
 800a16c:	003d0900 	.word	0x003d0900
 800a170:	0800c260 	.word	0x0800c260

0800a174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00a      	beq.n	800a1e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	f003 0308 	and.w	r3, r3, #8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00a      	beq.n	800a204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00a      	beq.n	800a226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01a      	beq.n	800a28a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a272:	d10a      	bne.n	800a28a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	605a      	str	r2, [r3, #4]
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2c8:	f7f8 fdac 	bl	8002e24 <HAL_GetTick>
 800a2cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0308 	and.w	r3, r3, #8
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	d10e      	bne.n	800a2fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f82f 	bl	800a34e <UART_WaitOnFlagUntilTimeout>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e025      	b.n	800a346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b04      	cmp	r3, #4
 800a306:	d10e      	bne.n	800a326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f819 	bl	800a34e <UART_WaitOnFlagUntilTimeout>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e00f      	b.n	800a346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	603b      	str	r3, [r7, #0]
 800a35a:	4613      	mov	r3, r2
 800a35c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35e:	e062      	b.n	800a426 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	d05e      	beq.n	800a426 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a368:	f7f8 fd5c 	bl	8002e24 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	429a      	cmp	r2, r3
 800a376:	d302      	bcc.n	800a37e <UART_WaitOnFlagUntilTimeout+0x30>
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d11d      	bne.n	800a3ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a38c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0201 	bic.w	r2, r2, #1
 800a39c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e045      	b.n	800a446 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d02e      	beq.n	800a426 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3d6:	d126      	bne.n	800a426 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0201 	bic.w	r2, r2, #1
 800a400:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2220      	movs	r2, #32
 800a406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2220      	movs	r2, #32
 800a416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e00f      	b.n	800a446 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69da      	ldr	r2, [r3, #28]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4013      	ands	r3, r2
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	429a      	cmp	r2, r3
 800a434:	bf0c      	ite	eq
 800a436:	2301      	moveq	r3, #1
 800a438:	2300      	movne	r3, #0
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	429a      	cmp	r2, r3
 800a442:	d08d      	beq.n	800a360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	88fa      	ldrh	r2, [r7, #6]
 800a468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2222      	movs	r2, #34	; 0x22
 800a478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d02c      	beq.n	800a4de <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a488:	4a25      	ldr	r2, [pc, #148]	; (800a520 <UART_Start_Receive_DMA+0xd0>)
 800a48a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a490:	4a24      	ldr	r2, [pc, #144]	; (800a524 <UART_Start_Receive_DMA+0xd4>)
 800a492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a498:	4a23      	ldr	r2, [pc, #140]	; (800a528 <UART_Start_Receive_DMA+0xd8>)
 800a49a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3324      	adds	r3, #36	; 0x24
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	f7f9 f908 	bl	80036cc <HAL_DMA_Start_IT>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00d      	beq.n	800a4de <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2210      	movs	r2, #16
 800a4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e01c      	b.n	800a518 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f042 0201 	orr.w	r2, r2, #1
 800a504:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a514:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	0800a639 	.word	0x0800a639
 800a524:	0800a6cf 	.word	0x0800a6cf
 800a528:	0800a707 	.word	0x0800a707

0800a52c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a542:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a552:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a57e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6899      	ldr	r1, [r3, #8]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <UART_EndRxTransfer+0x60>)
 800a58c:	400b      	ands	r3, r1
 800a58e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a594:	2b01      	cmp	r3, #1
 800a596:	d107      	bne.n	800a5a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0210 	bic.w	r2, r2, #16
 800a5a6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	effffffe 	.word	0xeffffffe

0800a5cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e2:	d014      	beq.n	800a60e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5fa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a60a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a60c:	e002      	b.n	800a614 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f7ff f812 	bl	8009638 <HAL_UART_TxCpltCallback>
}
 800a614:	bf00      	nop
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff f80e 	bl	800964c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64e:	d02b      	beq.n	800a6a8 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a666:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689a      	ldr	r2, [r3, #8]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0201 	bic.w	r2, r2, #1
 800a676:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a686:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a694:	2b01      	cmp	r3, #1
 800a696:	d107      	bne.n	800a6a8 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0210 	bic.w	r2, r2, #16
 800a6a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d107      	bne.n	800a6c0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f7fe ffef 	bl	800969c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6be:	e002      	b.n	800a6c6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f7fe ffcd 	bl	8009660 <HAL_UART_RxCpltCallback>
}
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d109      	bne.n	800a6f8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6ea:	085b      	lsrs	r3, r3, #1
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fe ffd3 	bl	800969c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6f6:	e002      	b.n	800a6fe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7fe ffbb 	bl	8009674 <HAL_UART_RxHalfCpltCallback>
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b086      	sub	sp, #24
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a712:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a71a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a722:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a72e:	2b80      	cmp	r3, #128	; 0x80
 800a730:	d109      	bne.n	800a746 <UART_DMAError+0x40>
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	2b21      	cmp	r3, #33	; 0x21
 800a736:	d106      	bne.n	800a746 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a740:	6978      	ldr	r0, [r7, #20]
 800a742:	f7ff fef3 	bl	800a52c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b40      	cmp	r3, #64	; 0x40
 800a752:	d109      	bne.n	800a768 <UART_DMAError+0x62>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b22      	cmp	r3, #34	; 0x22
 800a758:	d106      	bne.n	800a768 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a762:	6978      	ldr	r0, [r7, #20]
 800a764:	f7ff ff00 	bl	800a568 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a76e:	f043 0210 	orr.w	r2, r3, #16
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a778:	6978      	ldr	r0, [r7, #20]
 800a77a:	f7fe ff85 	bl	8009688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a77e:	bf00      	nop
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fe ff6f 	bl	8009688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7aa:	bf00      	nop
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7c8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7fe ff2d 	bl	8009638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7de:	bf00      	nop
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a822:	b480      	push	{r7}
 800a824:	b085      	sub	sp, #20
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a830:	2b01      	cmp	r3, #1
 800a832:	d101      	bne.n	800a838 <HAL_UARTEx_DisableFifoMode+0x16>
 800a834:	2302      	movs	r3, #2
 800a836:	e027      	b.n	800a888 <HAL_UARTEx_DisableFifoMode+0x66>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2224      	movs	r2, #36	; 0x24
 800a844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f022 0201 	bic.w	r2, r2, #1
 800a85e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a866:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e02d      	b.n	800a908 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2224      	movs	r2, #36	; 0x24
 800a8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0201 	bic.w	r2, r2, #1
 800a8d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	430a      	orrs	r2, r1
 800a8e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f84f 	bl	800a98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a924:	2302      	movs	r3, #2
 800a926:	e02d      	b.n	800a984 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2224      	movs	r2, #36	; 0x24
 800a934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0201 	bic.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f811 	bl	800a98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9ac:	e031      	b.n	800aa12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	0e5b      	lsrs	r3, r3, #25
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	0f5b      	lsrs	r3, r3, #29
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	7b3a      	ldrb	r2, [r7, #12]
 800a9da:	4911      	ldr	r1, [pc, #68]	; (800aa20 <UARTEx_SetNbDataToProcess+0x94>)
 800a9dc:	5c8a      	ldrb	r2, [r1, r2]
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e2:	7b3a      	ldrb	r2, [r7, #12]
 800a9e4:	490f      	ldr	r1, [pc, #60]	; (800aa24 <UARTEx_SetNbDataToProcess+0x98>)
 800a9e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	7b7a      	ldrb	r2, [r7, #13]
 800a9f8:	4909      	ldr	r1, [pc, #36]	; (800aa20 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fa:	5c8a      	ldrb	r2, [r1, r2]
 800a9fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa00:	7b7a      	ldrb	r2, [r7, #13]
 800aa02:	4908      	ldr	r1, [pc, #32]	; (800aa24 <UARTEx_SetNbDataToProcess+0x98>)
 800aa04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa06:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	0800c278 	.word	0x0800c278
 800aa24:	0800c280 	.word	0x0800c280

0800aa28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800aa36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa3a:	2b84      	cmp	r3, #132	; 0x84
 800aa3c:	d005      	beq.n	800aa4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	3303      	adds	r3, #3
 800aa48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aa5c:	f000 fc00 	bl	800b260 <vTaskStartScheduler>
  
  return osOK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa68:	b089      	sub	sp, #36	; 0x24
 800aa6a:	af04      	add	r7, sp, #16
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d020      	beq.n	800aaba <osThreadCreate+0x54>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01c      	beq.n	800aaba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685c      	ldr	r4, [r3, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681d      	ldr	r5, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691e      	ldr	r6, [r3, #16]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff ffc8 	bl	800aa28 <makeFreeRtosPriority>
 800aa98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aaa2:	9202      	str	r2, [sp, #8]
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	9100      	str	r1, [sp, #0]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	4632      	mov	r2, r6
 800aaac:	4629      	mov	r1, r5
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f8ed 	bl	800ac8e <xTaskCreateStatic>
 800aab4:	4603      	mov	r3, r0
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	e01c      	b.n	800aaf4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685c      	ldr	r4, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aac6:	b29e      	uxth	r6, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff ffaa 	bl	800aa28 <makeFreeRtosPriority>
 800aad4:	4602      	mov	r2, r0
 800aad6:	f107 030c 	add.w	r3, r7, #12
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	9200      	str	r2, [sp, #0]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	4632      	mov	r2, r6
 800aae2:	4629      	mov	r1, r5
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 f92f 	bl	800ad48 <xTaskCreate>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d001      	beq.n	800aaf4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e000      	b.n	800aaf6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aafe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <osDelay+0x16>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	e000      	b.n	800ab16 <osDelay+0x18>
 800ab14:	2301      	movs	r3, #1
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fa4c 	bl	800afb4 <vTaskDelay>
  
  return osOK;
 800ab1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f103 0208 	add.w	r2, r3, #8
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f103 0208 	add.w	r2, r3, #8
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f103 0208 	add.w	r2, r3, #8
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab5a:	bf00      	nop
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	689a      	ldr	r2, [r3, #8]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	601a      	str	r2, [r3, #0]
}
 800abbc:	bf00      	nop
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d103      	bne.n	800abe8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	e00c      	b.n	800ac02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3308      	adds	r3, #8
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	e002      	b.n	800abf6 <vListInsert+0x2e>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d2f6      	bcs.n	800abf0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	683a      	ldr	r2, [r7, #0]
 800ac10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	601a      	str	r2, [r3, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6892      	ldr	r2, [r2, #8]
 800ac50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	6852      	ldr	r2, [r2, #4]
 800ac5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d103      	bne.n	800ac6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	1e5a      	subs	r2, r3, #1
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b08e      	sub	sp, #56	; 0x38
 800ac92:	af04      	add	r7, sp, #16
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]
 800ac9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800acb4:	bf00      	nop
 800acb6:	e7fe      	b.n	800acb6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <xTaskCreateStatic+0x46>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61fb      	str	r3, [r7, #28]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acd4:	2354      	movs	r3, #84	; 0x54
 800acd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2b54      	cmp	r3, #84	; 0x54
 800acdc:	d00a      	beq.n	800acf4 <xTaskCreateStatic+0x66>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	61bb      	str	r3, [r7, #24]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01e      	beq.n	800ad3a <xTaskCreateStatic+0xac>
 800acfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d01b      	beq.n	800ad3a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	2202      	movs	r2, #2
 800ad10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad14:	2300      	movs	r3, #0
 800ad16:	9303      	str	r3, [sp, #12]
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	9302      	str	r3, [sp, #8]
 800ad1c:	f107 0314 	add.w	r3, r7, #20
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 f850 	bl	800add2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad34:	f000 f8d4 	bl	800aee0 <prvAddNewTaskToReadyList>
 800ad38:	e001      	b.n	800ad3e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad3e:	697b      	ldr	r3, [r7, #20]
	}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3728      	adds	r7, #40	; 0x28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08c      	sub	sp, #48	; 0x30
 800ad4c:	af04      	add	r7, sp, #16
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	603b      	str	r3, [r7, #0]
 800ad54:	4613      	mov	r3, r2
 800ad56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad58:	88fb      	ldrh	r3, [r7, #6]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 ffeb 	bl	800bd38 <pvPortMalloc>
 800ad62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00e      	beq.n	800ad88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad6a:	2054      	movs	r0, #84	; 0x54
 800ad6c:	f000 ffe4 	bl	800bd38 <pvPortMalloc>
 800ad70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	631a      	str	r2, [r3, #48]	; 0x30
 800ad7e:	e005      	b.n	800ad8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad80:	6978      	ldr	r0, [r7, #20]
 800ad82:	f001 f8a5 	bl	800bed0 <vPortFree>
 800ad86:	e001      	b.n	800ad8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d017      	beq.n	800adc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad9a:	88fa      	ldrh	r2, [r7, #6]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9303      	str	r3, [sp, #12]
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	9302      	str	r3, [sp, #8]
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f80e 	bl	800add2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adb6:	69f8      	ldr	r0, [r7, #28]
 800adb8:	f000 f892 	bl	800aee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adbc:	2301      	movs	r3, #1
 800adbe:	61bb      	str	r3, [r7, #24]
 800adc0:	e002      	b.n	800adc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adc2:	f04f 33ff 	mov.w	r3, #4294967295
 800adc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adc8:	69bb      	ldr	r3, [r7, #24]
	}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b088      	sub	sp, #32
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
 800adde:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade4:	6879      	ldr	r1, [r7, #4]
 800ade6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800adea:	440b      	add	r3, r1
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f023 0307 	bic.w	r3, r3, #7
 800adf8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <prvInitialiseNewTask+0x48>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	617b      	str	r3, [r7, #20]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d01f      	beq.n	800ae60 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae20:	2300      	movs	r3, #0
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	e012      	b.n	800ae4c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	7819      	ldrb	r1, [r3, #0]
 800ae2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	4413      	add	r3, r2
 800ae34:	3334      	adds	r3, #52	; 0x34
 800ae36:	460a      	mov	r2, r1
 800ae38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	4413      	add	r3, r2
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	61fb      	str	r3, [r7, #28]
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	d9e9      	bls.n	800ae26 <prvInitialiseNewTask+0x54>
 800ae52:	e000      	b.n	800ae56 <prvInitialiseNewTask+0x84>
			{
				break;
 800ae54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae5e:	e003      	b.n	800ae68 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	2b06      	cmp	r3, #6
 800ae6c:	d901      	bls.n	800ae72 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae6e:	2306      	movs	r3, #6
 800ae70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	2200      	movs	r2, #0
 800ae82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff fe6c 	bl	800ab66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	3318      	adds	r3, #24
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff fe67 	bl	800ab66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	f1c3 0207 	rsb	r2, r3, #7
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	68f9      	ldr	r1, [r7, #12]
 800aec0:	69b8      	ldr	r0, [r7, #24]
 800aec2:	f000 fd27 	bl	800b914 <pxPortInitialiseStack>
 800aec6:	4602      	mov	r2, r0
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed8:	bf00      	nop
 800aeda:	3720      	adds	r7, #32
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aee8:	f000 fe44 	bl	800bb74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeec:	4b2a      	ldr	r3, [pc, #168]	; (800af98 <prvAddNewTaskToReadyList+0xb8>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	4a29      	ldr	r2, [pc, #164]	; (800af98 <prvAddNewTaskToReadyList+0xb8>)
 800aef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aef6:	4b29      	ldr	r3, [pc, #164]	; (800af9c <prvAddNewTaskToReadyList+0xbc>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d109      	bne.n	800af12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aefe:	4a27      	ldr	r2, [pc, #156]	; (800af9c <prvAddNewTaskToReadyList+0xbc>)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af04:	4b24      	ldr	r3, [pc, #144]	; (800af98 <prvAddNewTaskToReadyList+0xb8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d110      	bne.n	800af2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af0c:	f000 fbde 	bl	800b6cc <prvInitialiseTaskLists>
 800af10:	e00d      	b.n	800af2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af12:	4b23      	ldr	r3, [pc, #140]	; (800afa0 <prvAddNewTaskToReadyList+0xc0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af1a:	4b20      	ldr	r3, [pc, #128]	; (800af9c <prvAddNewTaskToReadyList+0xbc>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	429a      	cmp	r2, r3
 800af26:	d802      	bhi.n	800af2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af28:	4a1c      	ldr	r2, [pc, #112]	; (800af9c <prvAddNewTaskToReadyList+0xbc>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af2e:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <prvAddNewTaskToReadyList+0xc4>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3301      	adds	r3, #1
 800af34:	4a1b      	ldr	r2, [pc, #108]	; (800afa4 <prvAddNewTaskToReadyList+0xc4>)
 800af36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	2201      	movs	r2, #1
 800af3e:	409a      	lsls	r2, r3
 800af40:	4b19      	ldr	r3, [pc, #100]	; (800afa8 <prvAddNewTaskToReadyList+0xc8>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4313      	orrs	r3, r2
 800af46:	4a18      	ldr	r2, [pc, #96]	; (800afa8 <prvAddNewTaskToReadyList+0xc8>)
 800af48:	6013      	str	r3, [r2, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4a15      	ldr	r2, [pc, #84]	; (800afac <prvAddNewTaskToReadyList+0xcc>)
 800af58:	441a      	add	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4619      	mov	r1, r3
 800af60:	4610      	mov	r0, r2
 800af62:	f7ff fe0d 	bl	800ab80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af66:	f000 fe35 	bl	800bbd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af6a:	4b0d      	ldr	r3, [pc, #52]	; (800afa0 <prvAddNewTaskToReadyList+0xc0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00e      	beq.n	800af90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af72:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <prvAddNewTaskToReadyList+0xbc>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d207      	bcs.n	800af90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <prvAddNewTaskToReadyList+0xd0>)
 800af82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	200004d0 	.word	0x200004d0
 800af9c:	200003d0 	.word	0x200003d0
 800afa0:	200004dc 	.word	0x200004dc
 800afa4:	200004ec 	.word	0x200004ec
 800afa8:	200004d8 	.word	0x200004d8
 800afac:	200003d4 	.word	0x200003d4
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d017      	beq.n	800aff6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afc6:	4b13      	ldr	r3, [pc, #76]	; (800b014 <vTaskDelay+0x60>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <vTaskDelay+0x30>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	60bb      	str	r3, [r7, #8]
}
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afe4:	f000 f99c 	bl	800b320 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afe8:	2100      	movs	r1, #0
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fc2c 	bl	800b848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aff0:	f000 f9a4 	bl	800b33c <xTaskResumeAll>
 800aff4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d107      	bne.n	800b00c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800affc:	4b06      	ldr	r3, [pc, #24]	; (800b018 <vTaskDelay+0x64>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	200004f8 	.word	0x200004f8
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b024:	f000 fda6 	bl	800bb74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d102      	bne.n	800b034 <vTaskSuspend+0x18>
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <vTaskSuspend+0x104>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	e000      	b.n	800b036 <vTaskSuspend+0x1a>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3304      	adds	r3, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff fdfc 	bl	800ac3a <uxListRemove>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d115      	bne.n	800b074 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04c:	4935      	ldr	r1, [pc, #212]	; (800b124 <vTaskSuspend+0x108>)
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <vTaskSuspend+0x58>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	2201      	movs	r2, #1
 800b064:	fa02 f303 	lsl.w	r3, r2, r3
 800b068:	43da      	mvns	r2, r3
 800b06a:	4b2f      	ldr	r3, [pc, #188]	; (800b128 <vTaskSuspend+0x10c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4013      	ands	r3, r2
 800b070:	4a2d      	ldr	r2, [pc, #180]	; (800b128 <vTaskSuspend+0x10c>)
 800b072:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	3318      	adds	r3, #24
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fdda 	bl	800ac3a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4827      	ldr	r0, [pc, #156]	; (800b12c <vTaskSuspend+0x110>)
 800b08e:	f7ff fd77 	bl	800ab80 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d103      	bne.n	800b0a6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b0a6:	f000 fd95 	bl	800bbd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b0aa:	4b21      	ldr	r3, [pc, #132]	; (800b130 <vTaskSuspend+0x114>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b0b2:	f000 fd5f 	bl	800bb74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b0b6:	f000 fba7 	bl	800b808 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b0ba:	f000 fd8b 	bl	800bbd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b0be:	4b18      	ldr	r3, [pc, #96]	; (800b120 <vTaskSuspend+0x104>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d127      	bne.n	800b118 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b0c8:	4b19      	ldr	r3, [pc, #100]	; (800b130 <vTaskSuspend+0x114>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d017      	beq.n	800b100 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b0d0:	4b18      	ldr	r3, [pc, #96]	; (800b134 <vTaskSuspend+0x118>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00a      	beq.n	800b0ee <vTaskSuspend+0xd2>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	60bb      	str	r3, [r7, #8]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b0ee:	4b12      	ldr	r3, [pc, #72]	; (800b138 <vTaskSuspend+0x11c>)
 800b0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0fe:	e00b      	b.n	800b118 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <vTaskSuspend+0x110>)
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <vTaskSuspend+0x120>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d103      	bne.n	800b114 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b10c:	4b04      	ldr	r3, [pc, #16]	; (800b120 <vTaskSuspend+0x104>)
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	}
 800b112:	e001      	b.n	800b118 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b114:	f000 fa66 	bl	800b5e4 <vTaskSwitchContext>
	}
 800b118:	bf00      	nop
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	200003d0 	.word	0x200003d0
 800b124:	200003d4 	.word	0x200003d4
 800b128:	200004d8 	.word	0x200004d8
 800b12c:	200004bc 	.word	0x200004bc
 800b130:	200004dc 	.word	0x200004dc
 800b134:	200004f8 	.word	0x200004f8
 800b138:	e000ed04 	.word	0xe000ed04
 800b13c:	200004d0 	.word	0x200004d0

0800b140 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b148:	2300      	movs	r3, #0
 800b14a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	60fb      	str	r3, [r7, #12]
}
 800b168:	bf00      	nop
 800b16a:	e7fe      	b.n	800b16a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	4a0a      	ldr	r2, [pc, #40]	; (800b19c <prvTaskIsTaskSuspended+0x5c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d10a      	bne.n	800b18c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17a:	4a09      	ldr	r2, [pc, #36]	; (800b1a0 <prvTaskIsTaskSuspended+0x60>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d005      	beq.n	800b18c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b18c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b18e:	4618      	mov	r0, r3
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	200004bc 	.word	0x200004bc
 800b1a0:	20000490 	.word	0x20000490

0800b1a4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <vTaskResume+0x28>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60bb      	str	r3, [r7, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b1cc:	4b20      	ldr	r3, [pc, #128]	; (800b250 <vTaskResume+0xac>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d037      	beq.n	800b246 <vTaskResume+0xa2>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d034      	beq.n	800b246 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800b1dc:	f000 fcca 	bl	800bb74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7ff ffad 	bl	800b140 <prvTaskIsTaskSuspended>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02a      	beq.n	800b242 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fd22 	bl	800ac3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	409a      	lsls	r2, r3
 800b1fe:	4b15      	ldr	r3, [pc, #84]	; (800b254 <vTaskResume+0xb0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4313      	orrs	r3, r2
 800b204:	4a13      	ldr	r2, [pc, #76]	; (800b254 <vTaskResume+0xb0>)
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4a10      	ldr	r2, [pc, #64]	; (800b258 <vTaskResume+0xb4>)
 800b216:	441a      	add	r2, r3
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7ff fcae 	bl	800ab80 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	4b09      	ldr	r3, [pc, #36]	; (800b250 <vTaskResume+0xac>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22e:	429a      	cmp	r2, r3
 800b230:	d307      	bcc.n	800b242 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b232:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <vTaskResume+0xb8>)
 800b234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b242:	f000 fcc7 	bl	800bbd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b246:	bf00      	nop
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	200003d0 	.word	0x200003d0
 800b254:	200004d8 	.word	0x200004d8
 800b258:	200003d4 	.word	0x200003d4
 800b25c:	e000ed04 	.word	0xe000ed04

0800b260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08a      	sub	sp, #40	; 0x28
 800b264:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b26e:	463a      	mov	r2, r7
 800b270:	1d39      	adds	r1, r7, #4
 800b272:	f107 0308 	add.w	r3, r7, #8
 800b276:	4618      	mov	r0, r3
 800b278:	f7f5 fe3c 	bl	8000ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	9202      	str	r2, [sp, #8]
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	2300      	movs	r3, #0
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	2300      	movs	r3, #0
 800b28c:	460a      	mov	r2, r1
 800b28e:	491e      	ldr	r1, [pc, #120]	; (800b308 <vTaskStartScheduler+0xa8>)
 800b290:	481e      	ldr	r0, [pc, #120]	; (800b30c <vTaskStartScheduler+0xac>)
 800b292:	f7ff fcfc 	bl	800ac8e <xTaskCreateStatic>
 800b296:	4603      	mov	r3, r0
 800b298:	4a1d      	ldr	r2, [pc, #116]	; (800b310 <vTaskStartScheduler+0xb0>)
 800b29a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b29c:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <vTaskStartScheduler+0xb0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	e001      	b.n	800b2ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d116      	bne.n	800b2e2 <vTaskStartScheduler+0x82>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	613b      	str	r3, [r7, #16]
}
 800b2c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2c8:	4b12      	ldr	r3, [pc, #72]	; (800b314 <vTaskStartScheduler+0xb4>)
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2d0:	4b11      	ldr	r3, [pc, #68]	; (800b318 <vTaskStartScheduler+0xb8>)
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2d6:	4b11      	ldr	r3, [pc, #68]	; (800b31c <vTaskStartScheduler+0xbc>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2dc:	f000 fba8 	bl	800ba30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2e0:	e00e      	b.n	800b300 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e8:	d10a      	bne.n	800b300 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	60fb      	str	r3, [r7, #12]
}
 800b2fc:	bf00      	nop
 800b2fe:	e7fe      	b.n	800b2fe <vTaskStartScheduler+0x9e>
}
 800b300:	bf00      	nop
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	0800c240 	.word	0x0800c240
 800b30c:	0800b69d 	.word	0x0800b69d
 800b310:	200004f4 	.word	0x200004f4
 800b314:	200004f0 	.word	0x200004f0
 800b318:	200004dc 	.word	0x200004dc
 800b31c:	200004d4 	.word	0x200004d4

0800b320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b324:	4b04      	ldr	r3, [pc, #16]	; (800b338 <vTaskSuspendAll+0x18>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3301      	adds	r3, #1
 800b32a:	4a03      	ldr	r2, [pc, #12]	; (800b338 <vTaskSuspendAll+0x18>)
 800b32c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b32e:	bf00      	nop
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	200004f8 	.word	0x200004f8

0800b33c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b346:	2300      	movs	r3, #0
 800b348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b34a:	4b41      	ldr	r3, [pc, #260]	; (800b450 <xTaskResumeAll+0x114>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10a      	bne.n	800b368 <xTaskResumeAll+0x2c>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	603b      	str	r3, [r7, #0]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b368:	f000 fc04 	bl	800bb74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b36c:	4b38      	ldr	r3, [pc, #224]	; (800b450 <xTaskResumeAll+0x114>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3b01      	subs	r3, #1
 800b372:	4a37      	ldr	r2, [pc, #220]	; (800b450 <xTaskResumeAll+0x114>)
 800b374:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b376:	4b36      	ldr	r3, [pc, #216]	; (800b450 <xTaskResumeAll+0x114>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d161      	bne.n	800b442 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b37e:	4b35      	ldr	r3, [pc, #212]	; (800b454 <xTaskResumeAll+0x118>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d05d      	beq.n	800b442 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b386:	e02e      	b.n	800b3e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b388:	4b33      	ldr	r3, [pc, #204]	; (800b458 <xTaskResumeAll+0x11c>)
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3318      	adds	r3, #24
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff fc50 	bl	800ac3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff fc4b 	bl	800ac3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	409a      	lsls	r2, r3
 800b3ac:	4b2b      	ldr	r3, [pc, #172]	; (800b45c <xTaskResumeAll+0x120>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	4a2a      	ldr	r2, [pc, #168]	; (800b45c <xTaskResumeAll+0x120>)
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4a27      	ldr	r2, [pc, #156]	; (800b460 <xTaskResumeAll+0x124>)
 800b3c4:	441a      	add	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f7ff fbd7 	bl	800ab80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d6:	4b23      	ldr	r3, [pc, #140]	; (800b464 <xTaskResumeAll+0x128>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d302      	bcc.n	800b3e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b3e0:	4b21      	ldr	r3, [pc, #132]	; (800b468 <xTaskResumeAll+0x12c>)
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3e6:	4b1c      	ldr	r3, [pc, #112]	; (800b458 <xTaskResumeAll+0x11c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1cc      	bne.n	800b388 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3f4:	f000 fa08 	bl	800b808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3f8:	4b1c      	ldr	r3, [pc, #112]	; (800b46c <xTaskResumeAll+0x130>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d010      	beq.n	800b426 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b404:	f000 f836 	bl	800b474 <xTaskIncrementTick>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b40e:	4b16      	ldr	r3, [pc, #88]	; (800b468 <xTaskResumeAll+0x12c>)
 800b410:	2201      	movs	r2, #1
 800b412:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3b01      	subs	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1f1      	bne.n	800b404 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b420:	4b12      	ldr	r3, [pc, #72]	; (800b46c <xTaskResumeAll+0x130>)
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b426:	4b10      	ldr	r3, [pc, #64]	; (800b468 <xTaskResumeAll+0x12c>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d009      	beq.n	800b442 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b432:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <xTaskResumeAll+0x134>)
 800b434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b442:	f000 fbc7 	bl	800bbd4 <vPortExitCritical>

	return xAlreadyYielded;
 800b446:	68bb      	ldr	r3, [r7, #8]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	200004f8 	.word	0x200004f8
 800b454:	200004d0 	.word	0x200004d0
 800b458:	20000490 	.word	0x20000490
 800b45c:	200004d8 	.word	0x200004d8
 800b460:	200003d4 	.word	0x200003d4
 800b464:	200003d0 	.word	0x200003d0
 800b468:	200004e4 	.word	0x200004e4
 800b46c:	200004e0 	.word	0x200004e0
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b47e:	4b4e      	ldr	r3, [pc, #312]	; (800b5b8 <xTaskIncrementTick+0x144>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f040 808e 	bne.w	800b5a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b488:	4b4c      	ldr	r3, [pc, #304]	; (800b5bc <xTaskIncrementTick+0x148>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3301      	adds	r3, #1
 800b48e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b490:	4a4a      	ldr	r2, [pc, #296]	; (800b5bc <xTaskIncrementTick+0x148>)
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d120      	bne.n	800b4de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b49c:	4b48      	ldr	r3, [pc, #288]	; (800b5c0 <xTaskIncrementTick+0x14c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00a      	beq.n	800b4bc <xTaskIncrementTick+0x48>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	603b      	str	r3, [r7, #0]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <xTaskIncrementTick+0x46>
 800b4bc:	4b40      	ldr	r3, [pc, #256]	; (800b5c0 <xTaskIncrementTick+0x14c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	4b40      	ldr	r3, [pc, #256]	; (800b5c4 <xTaskIncrementTick+0x150>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a3e      	ldr	r2, [pc, #248]	; (800b5c0 <xTaskIncrementTick+0x14c>)
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	4a3e      	ldr	r2, [pc, #248]	; (800b5c4 <xTaskIncrementTick+0x150>)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	4b3d      	ldr	r3, [pc, #244]	; (800b5c8 <xTaskIncrementTick+0x154>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	4a3c      	ldr	r2, [pc, #240]	; (800b5c8 <xTaskIncrementTick+0x154>)
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	f000 f995 	bl	800b808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4de:	4b3b      	ldr	r3, [pc, #236]	; (800b5cc <xTaskIncrementTick+0x158>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d348      	bcc.n	800b57a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e8:	4b35      	ldr	r3, [pc, #212]	; (800b5c0 <xTaskIncrementTick+0x14c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d104      	bne.n	800b4fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f2:	4b36      	ldr	r3, [pc, #216]	; (800b5cc <xTaskIncrementTick+0x158>)
 800b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f8:	601a      	str	r2, [r3, #0]
					break;
 800b4fa:	e03e      	b.n	800b57a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4fc:	4b30      	ldr	r3, [pc, #192]	; (800b5c0 <xTaskIncrementTick+0x14c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d203      	bcs.n	800b51c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b514:	4a2d      	ldr	r2, [pc, #180]	; (800b5cc <xTaskIncrementTick+0x158>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b51a:	e02e      	b.n	800b57a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3304      	adds	r3, #4
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff fb8a 	bl	800ac3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	3318      	adds	r3, #24
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff fb81 	bl	800ac3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	2201      	movs	r2, #1
 800b53e:	409a      	lsls	r2, r3
 800b540:	4b23      	ldr	r3, [pc, #140]	; (800b5d0 <xTaskIncrementTick+0x15c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4313      	orrs	r3, r2
 800b546:	4a22      	ldr	r2, [pc, #136]	; (800b5d0 <xTaskIncrementTick+0x15c>)
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54e:	4613      	mov	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4a1f      	ldr	r2, [pc, #124]	; (800b5d4 <xTaskIncrementTick+0x160>)
 800b558:	441a      	add	r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	3304      	adds	r3, #4
 800b55e:	4619      	mov	r1, r3
 800b560:	4610      	mov	r0, r2
 800b562:	f7ff fb0d 	bl	800ab80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56a:	4b1b      	ldr	r3, [pc, #108]	; (800b5d8 <xTaskIncrementTick+0x164>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	429a      	cmp	r2, r3
 800b572:	d3b9      	bcc.n	800b4e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b574:	2301      	movs	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b578:	e7b6      	b.n	800b4e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b57a:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <xTaskIncrementTick+0x164>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b580:	4914      	ldr	r1, [pc, #80]	; (800b5d4 <xTaskIncrementTick+0x160>)
 800b582:	4613      	mov	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	440b      	add	r3, r1
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d901      	bls.n	800b596 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b592:	2301      	movs	r3, #1
 800b594:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <xTaskIncrementTick+0x168>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d007      	beq.n	800b5ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e004      	b.n	800b5ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5a4:	4b0e      	ldr	r3, [pc, #56]	; (800b5e0 <xTaskIncrementTick+0x16c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	4a0d      	ldr	r2, [pc, #52]	; (800b5e0 <xTaskIncrementTick+0x16c>)
 800b5ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5ae:	697b      	ldr	r3, [r7, #20]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	200004f8 	.word	0x200004f8
 800b5bc:	200004d4 	.word	0x200004d4
 800b5c0:	20000488 	.word	0x20000488
 800b5c4:	2000048c 	.word	0x2000048c
 800b5c8:	200004e8 	.word	0x200004e8
 800b5cc:	200004f0 	.word	0x200004f0
 800b5d0:	200004d8 	.word	0x200004d8
 800b5d4:	200003d4 	.word	0x200003d4
 800b5d8:	200003d0 	.word	0x200003d0
 800b5dc:	200004e4 	.word	0x200004e4
 800b5e0:	200004e0 	.word	0x200004e0

0800b5e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5ea:	4b27      	ldr	r3, [pc, #156]	; (800b688 <vTaskSwitchContext+0xa4>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5f2:	4b26      	ldr	r3, [pc, #152]	; (800b68c <vTaskSwitchContext+0xa8>)
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5f8:	e03f      	b.n	800b67a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <vTaskSwitchContext+0xa8>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b600:	4b23      	ldr	r3, [pc, #140]	; (800b690 <vTaskSwitchContext+0xac>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	fab3 f383 	clz	r3, r3
 800b60c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b60e:	7afb      	ldrb	r3, [r7, #11]
 800b610:	f1c3 031f 	rsb	r3, r3, #31
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	491f      	ldr	r1, [pc, #124]	; (800b694 <vTaskSwitchContext+0xb0>)
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	440b      	add	r3, r1
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	607b      	str	r3, [r7, #4]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <vTaskSwitchContext+0x5a>
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4a12      	ldr	r2, [pc, #72]	; (800b694 <vTaskSwitchContext+0xb0>)
 800b64c:	4413      	add	r3, r2
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	3308      	adds	r3, #8
 800b662:	429a      	cmp	r2, r3
 800b664:	d104      	bne.n	800b670 <vTaskSwitchContext+0x8c>
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	605a      	str	r2, [r3, #4]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	4a08      	ldr	r2, [pc, #32]	; (800b698 <vTaskSwitchContext+0xb4>)
 800b678:	6013      	str	r3, [r2, #0]
}
 800b67a:	bf00      	nop
 800b67c:	371c      	adds	r7, #28
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	200004f8 	.word	0x200004f8
 800b68c:	200004e4 	.word	0x200004e4
 800b690:	200004d8 	.word	0x200004d8
 800b694:	200003d4 	.word	0x200003d4
 800b698:	200003d0 	.word	0x200003d0

0800b69c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6a4:	f000 f852 	bl	800b74c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6a8:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <prvIdleTask+0x28>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d9f9      	bls.n	800b6a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6b0:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <prvIdleTask+0x2c>)
 800b6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6c0:	e7f0      	b.n	800b6a4 <prvIdleTask+0x8>
 800b6c2:	bf00      	nop
 800b6c4:	200003d4 	.word	0x200003d4
 800b6c8:	e000ed04 	.word	0xe000ed04

0800b6cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	607b      	str	r3, [r7, #4]
 800b6d6:	e00c      	b.n	800b6f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4a12      	ldr	r2, [pc, #72]	; (800b72c <prvInitialiseTaskLists+0x60>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff fa1d 	bl	800ab26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	607b      	str	r3, [r7, #4]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b06      	cmp	r3, #6
 800b6f6:	d9ef      	bls.n	800b6d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6f8:	480d      	ldr	r0, [pc, #52]	; (800b730 <prvInitialiseTaskLists+0x64>)
 800b6fa:	f7ff fa14 	bl	800ab26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6fe:	480d      	ldr	r0, [pc, #52]	; (800b734 <prvInitialiseTaskLists+0x68>)
 800b700:	f7ff fa11 	bl	800ab26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b704:	480c      	ldr	r0, [pc, #48]	; (800b738 <prvInitialiseTaskLists+0x6c>)
 800b706:	f7ff fa0e 	bl	800ab26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b70a:	480c      	ldr	r0, [pc, #48]	; (800b73c <prvInitialiseTaskLists+0x70>)
 800b70c:	f7ff fa0b 	bl	800ab26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b710:	480b      	ldr	r0, [pc, #44]	; (800b740 <prvInitialiseTaskLists+0x74>)
 800b712:	f7ff fa08 	bl	800ab26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <prvInitialiseTaskLists+0x78>)
 800b718:	4a05      	ldr	r2, [pc, #20]	; (800b730 <prvInitialiseTaskLists+0x64>)
 800b71a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <prvInitialiseTaskLists+0x7c>)
 800b71e:	4a05      	ldr	r2, [pc, #20]	; (800b734 <prvInitialiseTaskLists+0x68>)
 800b720:	601a      	str	r2, [r3, #0]
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	200003d4 	.word	0x200003d4
 800b730:	20000460 	.word	0x20000460
 800b734:	20000474 	.word	0x20000474
 800b738:	20000490 	.word	0x20000490
 800b73c:	200004a4 	.word	0x200004a4
 800b740:	200004bc 	.word	0x200004bc
 800b744:	20000488 	.word	0x20000488
 800b748:	2000048c 	.word	0x2000048c

0800b74c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b752:	e019      	b.n	800b788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b754:	f000 fa0e 	bl	800bb74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b758:	4b10      	ldr	r3, [pc, #64]	; (800b79c <prvCheckTasksWaitingTermination+0x50>)
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3304      	adds	r3, #4
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff fa68 	bl	800ac3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b76a:	4b0d      	ldr	r3, [pc, #52]	; (800b7a0 <prvCheckTasksWaitingTermination+0x54>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3b01      	subs	r3, #1
 800b770:	4a0b      	ldr	r2, [pc, #44]	; (800b7a0 <prvCheckTasksWaitingTermination+0x54>)
 800b772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b774:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <prvCheckTasksWaitingTermination+0x58>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3b01      	subs	r3, #1
 800b77a:	4a0a      	ldr	r2, [pc, #40]	; (800b7a4 <prvCheckTasksWaitingTermination+0x58>)
 800b77c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b77e:	f000 fa29 	bl	800bbd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f810 	bl	800b7a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b788:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <prvCheckTasksWaitingTermination+0x58>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e1      	bne.n	800b754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	200004a4 	.word	0x200004a4
 800b7a0:	200004d0 	.word	0x200004d0
 800b7a4:	200004b8 	.word	0x200004b8

0800b7a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d108      	bne.n	800b7cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 fb86 	bl	800bed0 <vPortFree>
				vPortFree( pxTCB );
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fb83 	bl	800bed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7ca:	e018      	b.n	800b7fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d103      	bne.n	800b7de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fb7a 	bl	800bed0 <vPortFree>
	}
 800b7dc:	e00f      	b.n	800b7fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d00a      	beq.n	800b7fe <prvDeleteTCB+0x56>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	60fb      	str	r3, [r7, #12]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <prvDeleteTCB+0x54>
	}
 800b7fe:	bf00      	nop
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b80e:	4b0c      	ldr	r3, [pc, #48]	; (800b840 <prvResetNextTaskUnblockTime+0x38>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b818:	4b0a      	ldr	r3, [pc, #40]	; (800b844 <prvResetNextTaskUnblockTime+0x3c>)
 800b81a:	f04f 32ff 	mov.w	r2, #4294967295
 800b81e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b820:	e008      	b.n	800b834 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b822:	4b07      	ldr	r3, [pc, #28]	; (800b840 <prvResetNextTaskUnblockTime+0x38>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	4a04      	ldr	r2, [pc, #16]	; (800b844 <prvResetNextTaskUnblockTime+0x3c>)
 800b832:	6013      	str	r3, [r2, #0]
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	20000488 	.word	0x20000488
 800b844:	200004f0 	.word	0x200004f0

0800b848 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b852:	4b29      	ldr	r3, [pc, #164]	; (800b8f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b858:	4b28      	ldr	r3, [pc, #160]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3304      	adds	r3, #4
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff f9eb 	bl	800ac3a <uxListRemove>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10b      	bne.n	800b882 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b86a:	4b24      	ldr	r3, [pc, #144]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b870:	2201      	movs	r2, #1
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	43da      	mvns	r2, r3
 800b878:	4b21      	ldr	r3, [pc, #132]	; (800b900 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4013      	ands	r3, r2
 800b87e:	4a20      	ldr	r2, [pc, #128]	; (800b900 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b880:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b888:	d10a      	bne.n	800b8a0 <prvAddCurrentTaskToDelayedList+0x58>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d007      	beq.n	800b8a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b890:	4b1a      	ldr	r3, [pc, #104]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3304      	adds	r3, #4
 800b896:	4619      	mov	r1, r3
 800b898:	481a      	ldr	r0, [pc, #104]	; (800b904 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b89a:	f7ff f971 	bl	800ab80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b89e:	e026      	b.n	800b8ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8a8:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d209      	bcs.n	800b8cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8b8:	4b13      	ldr	r3, [pc, #76]	; (800b908 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f7ff f97f 	bl	800abc8 <vListInsert>
}
 800b8ca:	e010      	b.n	800b8ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f7ff f975 	bl	800abc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8de:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d202      	bcs.n	800b8ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b8e8:	4a09      	ldr	r2, [pc, #36]	; (800b910 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	6013      	str	r3, [r2, #0]
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200004d4 	.word	0x200004d4
 800b8fc:	200003d0 	.word	0x200003d0
 800b900:	200004d8 	.word	0x200004d8
 800b904:	200004bc 	.word	0x200004bc
 800b908:	2000048c 	.word	0x2000048c
 800b90c:	20000488 	.word	0x20000488
 800b910:	200004f0 	.word	0x200004f0

0800b914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3b04      	subs	r3, #4
 800b924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b92c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3b04      	subs	r3, #4
 800b932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f023 0201 	bic.w	r2, r3, #1
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b04      	subs	r3, #4
 800b942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b944:	4a0c      	ldr	r2, [pc, #48]	; (800b978 <pxPortInitialiseStack+0x64>)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3b14      	subs	r3, #20
 800b94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	3b04      	subs	r3, #4
 800b95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f06f 0202 	mvn.w	r2, #2
 800b962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	3b20      	subs	r3, #32
 800b968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b96a:	68fb      	ldr	r3, [r7, #12]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	0800b97d 	.word	0x0800b97d

0800b97c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <prvTaskExitError+0x54>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98e:	d00a      	beq.n	800b9a6 <prvTaskExitError+0x2a>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	60fb      	str	r3, [r7, #12]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <prvTaskExitError+0x28>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	60bb      	str	r3, [r7, #8]
}
 800b9b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9ba:	bf00      	nop
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0fc      	beq.n	800b9bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9c2:	bf00      	nop
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	20000010 	.word	0x20000010
	...

0800b9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <pxCurrentTCBConst2>)
 800b9e2:	6819      	ldr	r1, [r3, #0]
 800b9e4:	6808      	ldr	r0, [r1, #0]
 800b9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ea:	f380 8809 	msr	PSP, r0
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f04f 0000 	mov.w	r0, #0
 800b9f6:	f380 8811 	msr	BASEPRI, r0
 800b9fa:	4770      	bx	lr
 800b9fc:	f3af 8000 	nop.w

0800ba00 <pxCurrentTCBConst2>:
 800ba00:	200003d0 	.word	0x200003d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop

0800ba08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba08:	4808      	ldr	r0, [pc, #32]	; (800ba2c <prvPortStartFirstTask+0x24>)
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	6800      	ldr	r0, [r0, #0]
 800ba0e:	f380 8808 	msr	MSP, r0
 800ba12:	f04f 0000 	mov.w	r0, #0
 800ba16:	f380 8814 	msr	CONTROL, r0
 800ba1a:	b662      	cpsie	i
 800ba1c:	b661      	cpsie	f
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	df00      	svc	0
 800ba28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba2a:	bf00      	nop
 800ba2c:	e000ed08 	.word	0xe000ed08

0800ba30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba36:	4b46      	ldr	r3, [pc, #280]	; (800bb50 <xPortStartScheduler+0x120>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a46      	ldr	r2, [pc, #280]	; (800bb54 <xPortStartScheduler+0x124>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d10a      	bne.n	800ba56 <xPortStartScheduler+0x26>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	613b      	str	r3, [r7, #16]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba56:	4b3e      	ldr	r3, [pc, #248]	; (800bb50 <xPortStartScheduler+0x120>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a3f      	ldr	r2, [pc, #252]	; (800bb58 <xPortStartScheduler+0x128>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d10a      	bne.n	800ba76 <xPortStartScheduler+0x46>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba76:	4b39      	ldr	r3, [pc, #228]	; (800bb5c <xPortStartScheduler+0x12c>)
 800ba78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	22ff      	movs	r2, #255	; 0xff
 800ba86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <xPortStartScheduler+0x130>)
 800ba9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba9e:	4b31      	ldr	r3, [pc, #196]	; (800bb64 <xPortStartScheduler+0x134>)
 800baa0:	2207      	movs	r2, #7
 800baa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baa4:	e009      	b.n	800baba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800baa6:	4b2f      	ldr	r3, [pc, #188]	; (800bb64 <xPortStartScheduler+0x134>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3b01      	subs	r3, #1
 800baac:	4a2d      	ldr	r2, [pc, #180]	; (800bb64 <xPortStartScheduler+0x134>)
 800baae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac2:	2b80      	cmp	r3, #128	; 0x80
 800bac4:	d0ef      	beq.n	800baa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bac6:	4b27      	ldr	r3, [pc, #156]	; (800bb64 <xPortStartScheduler+0x134>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1c3 0307 	rsb	r3, r3, #7
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d00a      	beq.n	800bae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60bb      	str	r3, [r7, #8]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bae8:	4b1e      	ldr	r3, [pc, #120]	; (800bb64 <xPortStartScheduler+0x134>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	021b      	lsls	r3, r3, #8
 800baee:	4a1d      	ldr	r2, [pc, #116]	; (800bb64 <xPortStartScheduler+0x134>)
 800baf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <xPortStartScheduler+0x134>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bafa:	4a1a      	ldr	r2, [pc, #104]	; (800bb64 <xPortStartScheduler+0x134>)
 800bafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb06:	4b18      	ldr	r3, [pc, #96]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a14      	ldr	r2, [pc, #80]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb1e:	f000 f8dd 	bl	800bcdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb22:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <xPortStartScheduler+0x13c>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb28:	f000 f8fc 	bl	800bd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb2c:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <xPortStartScheduler+0x140>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a0f      	ldr	r2, [pc, #60]	; (800bb70 <xPortStartScheduler+0x140>)
 800bb32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb38:	f7ff ff66 	bl	800ba08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb3c:	f7ff fd52 	bl	800b5e4 <vTaskSwitchContext>
	prvTaskExitError();
 800bb40:	f7ff ff1c 	bl	800b97c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	e000ed00 	.word	0xe000ed00
 800bb54:	410fc271 	.word	0x410fc271
 800bb58:	410fc270 	.word	0x410fc270
 800bb5c:	e000e400 	.word	0xe000e400
 800bb60:	200004fc 	.word	0x200004fc
 800bb64:	20000500 	.word	0x20000500
 800bb68:	e000ed20 	.word	0xe000ed20
 800bb6c:	20000010 	.word	0x20000010
 800bb70:	e000ef34 	.word	0xe000ef34

0800bb74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	607b      	str	r3, [r7, #4]
}
 800bb8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	4a0d      	ldr	r2, [pc, #52]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d10f      	bne.n	800bbc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <vPortEnterCritical+0x5c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	603b      	str	r3, [r7, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <vPortEnterCritical+0x4a>
	}
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	20000010 	.word	0x20000010
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbda:	4b12      	ldr	r3, [pc, #72]	; (800bc24 <vPortExitCritical+0x50>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <vPortExitCritical+0x24>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <vPortExitCritical+0x50>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	4a09      	ldr	r2, [pc, #36]	; (800bc24 <vPortExitCritical+0x50>)
 800bc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc02:	4b08      	ldr	r3, [pc, #32]	; (800bc24 <vPortExitCritical+0x50>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d105      	bne.n	800bc16 <vPortExitCritical+0x42>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20000010 	.word	0x20000010
	...

0800bc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc30:	f3ef 8009 	mrs	r0, PSP
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <pxCurrentTCBConst>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f01e 0f10 	tst.w	lr, #16
 800bc40:	bf08      	it	eq
 800bc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	6010      	str	r0, [r2, #0]
 800bc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc54:	f380 8811 	msr	BASEPRI, r0
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f7ff fcc0 	bl	800b5e4 <vTaskSwitchContext>
 800bc64:	f04f 0000 	mov.w	r0, #0
 800bc68:	f380 8811 	msr	BASEPRI, r0
 800bc6c:	bc09      	pop	{r0, r3}
 800bc6e:	6819      	ldr	r1, [r3, #0]
 800bc70:	6808      	ldr	r0, [r1, #0]
 800bc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc76:	f01e 0f10 	tst.w	lr, #16
 800bc7a:	bf08      	it	eq
 800bc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc80:	f380 8809 	msr	PSP, r0
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst>:
 800bc90:	200003d0 	.word	0x200003d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	607b      	str	r3, [r7, #4]
}
 800bcb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcb2:	f7ff fbdf 	bl	800b474 <xTaskIncrementTick>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcbc:	4b06      	ldr	r3, [pc, #24]	; (800bcd8 <SysTick_Handler+0x40>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f383 8811 	msr	BASEPRI, r3
}
 800bcce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bce0:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <vPortSetupTimerInterrupt+0x34>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <vPortSetupTimerInterrupt+0x38>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <vPortSetupTimerInterrupt+0x3c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a0a      	ldr	r2, [pc, #40]	; (800bd1c <vPortSetupTimerInterrupt+0x40>)
 800bcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf6:	099b      	lsrs	r3, r3, #6
 800bcf8:	4a09      	ldr	r2, [pc, #36]	; (800bd20 <vPortSetupTimerInterrupt+0x44>)
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <vPortSetupTimerInterrupt+0x34>)
 800bd00:	2207      	movs	r2, #7
 800bd02:	601a      	str	r2, [r3, #0]
}
 800bd04:	bf00      	nop
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	e000e010 	.word	0xe000e010
 800bd14:	e000e018 	.word	0xe000e018
 800bd18:	20000000 	.word	0x20000000
 800bd1c:	10624dd3 	.word	0x10624dd3
 800bd20:	e000e014 	.word	0xe000e014

0800bd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd34 <vPortEnableVFP+0x10>
 800bd28:	6801      	ldr	r1, [r0, #0]
 800bd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd2e:	6001      	str	r1, [r0, #0]
 800bd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd32:	bf00      	nop
 800bd34:	e000ed88 	.word	0xe000ed88

0800bd38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	; 0x28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd44:	f7ff faec 	bl	800b320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd48:	4b5b      	ldr	r3, [pc, #364]	; (800beb8 <pvPortMalloc+0x180>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd50:	f000 f920 	bl	800bf94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd54:	4b59      	ldr	r3, [pc, #356]	; (800bebc <pvPortMalloc+0x184>)
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f040 8093 	bne.w	800be88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01d      	beq.n	800bda4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd68:	2208      	movs	r2, #8
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f003 0307 	and.w	r3, r3, #7
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d014      	beq.n	800bda4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f023 0307 	bic.w	r3, r3, #7
 800bd80:	3308      	adds	r3, #8
 800bd82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f003 0307 	and.w	r3, r3, #7
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <pvPortMalloc+0x6c>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	617b      	str	r3, [r7, #20]
}
 800bda0:	bf00      	nop
 800bda2:	e7fe      	b.n	800bda2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d06e      	beq.n	800be88 <pvPortMalloc+0x150>
 800bdaa:	4b45      	ldr	r3, [pc, #276]	; (800bec0 <pvPortMalloc+0x188>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d869      	bhi.n	800be88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdb4:	4b43      	ldr	r3, [pc, #268]	; (800bec4 <pvPortMalloc+0x18c>)
 800bdb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdb8:	4b42      	ldr	r3, [pc, #264]	; (800bec4 <pvPortMalloc+0x18c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdbe:	e004      	b.n	800bdca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d903      	bls.n	800bddc <pvPortMalloc+0xa4>
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1f1      	bne.n	800bdc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bddc:	4b36      	ldr	r3, [pc, #216]	; (800beb8 <pvPortMalloc+0x180>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d050      	beq.n	800be88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2208      	movs	r2, #8
 800bdec:	4413      	add	r3, r2
 800bdee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	6a3b      	ldr	r3, [r7, #32]
 800bdf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	1ad2      	subs	r2, r2, r3
 800be00:	2308      	movs	r3, #8
 800be02:	005b      	lsls	r3, r3, #1
 800be04:	429a      	cmp	r2, r3
 800be06:	d91f      	bls.n	800be48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4413      	add	r3, r2
 800be0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	f003 0307 	and.w	r3, r3, #7
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <pvPortMalloc+0xf8>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	613b      	str	r3, [r7, #16]
}
 800be2c:	bf00      	nop
 800be2e:	e7fe      	b.n	800be2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be42:	69b8      	ldr	r0, [r7, #24]
 800be44:	f000 f908 	bl	800c058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be48:	4b1d      	ldr	r3, [pc, #116]	; (800bec0 <pvPortMalloc+0x188>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	4a1b      	ldr	r2, [pc, #108]	; (800bec0 <pvPortMalloc+0x188>)
 800be54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be56:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <pvPortMalloc+0x188>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <pvPortMalloc+0x190>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d203      	bcs.n	800be6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be62:	4b17      	ldr	r3, [pc, #92]	; (800bec0 <pvPortMalloc+0x188>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a18      	ldr	r2, [pc, #96]	; (800bec8 <pvPortMalloc+0x190>)
 800be68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	4b13      	ldr	r3, [pc, #76]	; (800bebc <pvPortMalloc+0x184>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	431a      	orrs	r2, r3
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7a:	2200      	movs	r2, #0
 800be7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <pvPortMalloc+0x194>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	4a11      	ldr	r2, [pc, #68]	; (800becc <pvPortMalloc+0x194>)
 800be86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be88:	f7ff fa58 	bl	800b33c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <pvPortMalloc+0x174>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	60fb      	str	r3, [r7, #12]
}
 800bea8:	bf00      	nop
 800beaa:	e7fe      	b.n	800beaa <pvPortMalloc+0x172>
	return pvReturn;
 800beac:	69fb      	ldr	r3, [r7, #28]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3728      	adds	r7, #40	; 0x28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	2000410c 	.word	0x2000410c
 800bebc:	20004120 	.word	0x20004120
 800bec0:	20004110 	.word	0x20004110
 800bec4:	20004104 	.word	0x20004104
 800bec8:	20004114 	.word	0x20004114
 800becc:	20004118 	.word	0x20004118

0800bed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d04d      	beq.n	800bf7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bee2:	2308      	movs	r3, #8
 800bee4:	425b      	negs	r3, r3
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	4413      	add	r3, r2
 800beea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	4b24      	ldr	r3, [pc, #144]	; (800bf88 <vPortFree+0xb8>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4013      	ands	r3, r2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10a      	bne.n	800bf14 <vPortFree+0x44>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	60fb      	str	r3, [r7, #12]
}
 800bf10:	bf00      	nop
 800bf12:	e7fe      	b.n	800bf12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00a      	beq.n	800bf32 <vPortFree+0x62>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	60bb      	str	r3, [r7, #8]
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	4b14      	ldr	r3, [pc, #80]	; (800bf88 <vPortFree+0xb8>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01e      	beq.n	800bf7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d11a      	bne.n	800bf7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	685a      	ldr	r2, [r3, #4]
 800bf4c:	4b0e      	ldr	r3, [pc, #56]	; (800bf88 <vPortFree+0xb8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	43db      	mvns	r3, r3
 800bf52:	401a      	ands	r2, r3
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf58:	f7ff f9e2 	bl	800b320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	4b0a      	ldr	r3, [pc, #40]	; (800bf8c <vPortFree+0xbc>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4413      	add	r3, r2
 800bf66:	4a09      	ldr	r2, [pc, #36]	; (800bf8c <vPortFree+0xbc>)
 800bf68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf6a:	6938      	ldr	r0, [r7, #16]
 800bf6c:	f000 f874 	bl	800c058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf70:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <vPortFree+0xc0>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <vPortFree+0xc0>)
 800bf78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf7a:	f7ff f9df 	bl	800b33c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf7e:	bf00      	nop
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20004120 	.word	0x20004120
 800bf8c:	20004110 	.word	0x20004110
 800bf90:	2000411c 	.word	0x2000411c

0800bf94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfa0:	4b27      	ldr	r3, [pc, #156]	; (800c040 <prvHeapInit+0xac>)
 800bfa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00c      	beq.n	800bfc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3307      	adds	r3, #7
 800bfb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 0307 	bic.w	r3, r3, #7
 800bfba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	4a1f      	ldr	r2, [pc, #124]	; (800c040 <prvHeapInit+0xac>)
 800bfc4:	4413      	add	r3, r2
 800bfc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfcc:	4a1d      	ldr	r2, [pc, #116]	; (800c044 <prvHeapInit+0xb0>)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bfd2:	4b1c      	ldr	r3, [pc, #112]	; (800c044 <prvHeapInit+0xb0>)
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	4413      	add	r3, r2
 800bfde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bfe0:	2208      	movs	r2, #8
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	1a9b      	subs	r3, r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 0307 	bic.w	r3, r3, #7
 800bfee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4a15      	ldr	r2, [pc, #84]	; (800c048 <prvHeapInit+0xb4>)
 800bff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bff6:	4b14      	ldr	r3, [pc, #80]	; (800c048 <prvHeapInit+0xb4>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2200      	movs	r2, #0
 800bffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bffe:	4b12      	ldr	r3, [pc, #72]	; (800c048 <prvHeapInit+0xb4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c014:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <prvHeapInit+0xb4>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	4a0a      	ldr	r2, [pc, #40]	; (800c04c <prvHeapInit+0xb8>)
 800c022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	4a09      	ldr	r2, [pc, #36]	; (800c050 <prvHeapInit+0xbc>)
 800c02a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c02c:	4b09      	ldr	r3, [pc, #36]	; (800c054 <prvHeapInit+0xc0>)
 800c02e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c032:	601a      	str	r2, [r3, #0]
}
 800c034:	bf00      	nop
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	20000504 	.word	0x20000504
 800c044:	20004104 	.word	0x20004104
 800c048:	2000410c 	.word	0x2000410c
 800c04c:	20004114 	.word	0x20004114
 800c050:	20004110 	.word	0x20004110
 800c054:	20004120 	.word	0x20004120

0800c058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c060:	4b28      	ldr	r3, [pc, #160]	; (800c104 <prvInsertBlockIntoFreeList+0xac>)
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	e002      	b.n	800c06c <prvInsertBlockIntoFreeList+0x14>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	429a      	cmp	r2, r3
 800c074:	d8f7      	bhi.n	800c066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	4413      	add	r3, r2
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	429a      	cmp	r2, r3
 800c086:	d108      	bne.n	800c09a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	441a      	add	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	441a      	add	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d118      	bne.n	800c0e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	4b15      	ldr	r3, [pc, #84]	; (800c108 <prvInsertBlockIntoFreeList+0xb0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d00d      	beq.n	800c0d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685a      	ldr	r2, [r3, #4]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	441a      	add	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	e008      	b.n	800c0e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0d6:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <prvInsertBlockIntoFreeList+0xb0>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	e003      	b.n	800c0e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d002      	beq.n	800c0f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0f6:	bf00      	nop
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	20004104 	.word	0x20004104
 800c108:	2000410c 	.word	0x2000410c

0800c10c <__libc_init_array>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	4d0d      	ldr	r5, [pc, #52]	; (800c144 <__libc_init_array+0x38>)
 800c110:	4c0d      	ldr	r4, [pc, #52]	; (800c148 <__libc_init_array+0x3c>)
 800c112:	1b64      	subs	r4, r4, r5
 800c114:	10a4      	asrs	r4, r4, #2
 800c116:	2600      	movs	r6, #0
 800c118:	42a6      	cmp	r6, r4
 800c11a:	d109      	bne.n	800c130 <__libc_init_array+0x24>
 800c11c:	4d0b      	ldr	r5, [pc, #44]	; (800c14c <__libc_init_array+0x40>)
 800c11e:	4c0c      	ldr	r4, [pc, #48]	; (800c150 <__libc_init_array+0x44>)
 800c120:	f000 f820 	bl	800c164 <_init>
 800c124:	1b64      	subs	r4, r4, r5
 800c126:	10a4      	asrs	r4, r4, #2
 800c128:	2600      	movs	r6, #0
 800c12a:	42a6      	cmp	r6, r4
 800c12c:	d105      	bne.n	800c13a <__libc_init_array+0x2e>
 800c12e:	bd70      	pop	{r4, r5, r6, pc}
 800c130:	f855 3b04 	ldr.w	r3, [r5], #4
 800c134:	4798      	blx	r3
 800c136:	3601      	adds	r6, #1
 800c138:	e7ee      	b.n	800c118 <__libc_init_array+0xc>
 800c13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c13e:	4798      	blx	r3
 800c140:	3601      	adds	r6, #1
 800c142:	e7f2      	b.n	800c12a <__libc_init_array+0x1e>
 800c144:	0800c290 	.word	0x0800c290
 800c148:	0800c290 	.word	0x0800c290
 800c14c:	0800c290 	.word	0x0800c290
 800c150:	0800c294 	.word	0x0800c294

0800c154 <memset>:
 800c154:	4402      	add	r2, r0
 800c156:	4603      	mov	r3, r0
 800c158:	4293      	cmp	r3, r2
 800c15a:	d100      	bne.n	800c15e <memset+0xa>
 800c15c:	4770      	bx	lr
 800c15e:	f803 1b01 	strb.w	r1, [r3], #1
 800c162:	e7f9      	b.n	800c158 <memset+0x4>

0800c164 <_init>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	bf00      	nop
 800c168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16a:	bc08      	pop	{r3}
 800c16c:	469e      	mov	lr, r3
 800c16e:	4770      	bx	lr

0800c170 <_fini>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr
