
CtrlH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cab8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce48  0800ce48  0001ce48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce50  0800ce50  0001ce50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ce54  0800ce54  0001ce54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800ce58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D1       000000f0  20000014  0800ce6c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000047ec  20000104  0800cf5c  00020104  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200048f0  0800cf5c  000248f0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c731  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a88  00000000  00000000  0004c863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001770  00000000  00000000  000512f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000015f8  00000000  00000000  00052a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039a77  00000000  00000000  00054058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001da60  00000000  00000000  0008dacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cde9  00000000  00000000  000ab52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00218318  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000061b4  00000000  00000000  0021836c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000104 	.word	0x20000104
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cd40 	.word	0x0800cd40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000108 	.word	0x20000108
 80002dc:	0800cd40 	.word	0x0800cd40

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
__attribute__((section(".RAM_D1")))                                         u8 UpDataSend[Up_UART_TXLen] =
{ 0 };

//捕获上位向下位发送的数据
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	/* 原来是 <<，现在改成>> */
	DownDataDef CaptureData;

	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e0:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <CaptureDownData+0x140>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <CaptureDownData+0x140>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	81bb      	strh	r3, [r7, #12]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005f6:	4b48      	ldr	r3, [pc, #288]	; (8000718 <CaptureDownData+0x140>)
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	4b46      	ldr	r3, [pc, #280]	; (8000718 <CaptureDownData+0x140>)
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	81fb      	strh	r3, [r7, #14]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 800060c:	4b42      	ldr	r3, [pc, #264]	; (8000718 <CaptureDownData+0x140>)
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <CaptureDownData+0x140>)
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29b      	uxth	r3, r3
 8000620:	823b      	strh	r3, [r7, #16]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000622:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <CaptureDownData+0x140>)
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <CaptureDownData+0x140>)
 800062a:	7a12      	ldrb	r2, [r2, #8]
 800062c:	4313      	orrs	r3, r2
 800062e:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <CaptureDownData+0x140>)
 8000632:	7a5b      	ldrb	r3, [r3, #9]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	4a38      	ldr	r2, [pc, #224]	; (8000718 <CaptureDownData+0x140>)
 8000638:	7a92      	ldrb	r2, [r2, #10]
 800063a:	4313      	orrs	r3, r2
 800063c:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <CaptureDownData+0x140>)
 8000640:	7adb      	ldrb	r3, [r3, #11]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	4a34      	ldr	r2, [pc, #208]	; (8000718 <CaptureDownData+0x140>)
 8000646:	7b12      	ldrb	r2, [r2, #12]
 8000648:	4313      	orrs	r3, r2
 800064a:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <CaptureDownData+0x140>)
 800064e:	7b5b      	ldrb	r3, [r3, #13]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	4a31      	ldr	r2, [pc, #196]	; (8000718 <CaptureDownData+0x140>)
 8000654:	7b92      	ldrb	r2, [r2, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <CaptureDownData+0x140>)
 800065c:	7bdb      	ldrb	r3, [r3, #15]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	4a2d      	ldr	r2, [pc, #180]	; (8000718 <CaptureDownData+0x140>)
 8000662:	7c12      	ldrb	r2, [r2, #16]
 8000664:	4313      	orrs	r3, r2
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <CaptureDownData+0x140>)
 800066a:	7c5b      	ldrb	r3, [r3, #17]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <CaptureDownData+0x140>)
 8000670:	7c92      	ldrb	r2, [r2, #18]
 8000672:	4313      	orrs	r3, r2
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <CaptureDownData+0x140>)
 8000678:	7cdb      	ldrb	r3, [r3, #19]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	4a26      	ldr	r2, [pc, #152]	; (8000718 <CaptureDownData+0x140>)
 800067e:	7d12      	ldrb	r2, [r2, #20]
 8000680:	4313      	orrs	r3, r2
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <CaptureDownData+0x140>)
 8000686:	7d5b      	ldrb	r3, [r3, #21]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <CaptureDownData+0x140>)
 800068c:	7d92      	ldrb	r2, [r2, #22]
 800068e:	4313      	orrs	r3, r2
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <CaptureDownData+0x140>)
 8000694:	7ddb      	ldrb	r3, [r3, #23]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <CaptureDownData+0x140>)
 800069a:	7e12      	ldrb	r2, [r2, #24]
 800069c:	4313      	orrs	r3, r2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <CaptureDownData+0x140>)
 80006a2:	7e5b      	ldrb	r3, [r3, #25]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <CaptureDownData+0x140>)
 80006a8:	7e92      	ldrb	r2, [r2, #26]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
	CaptureData.Mode = DownDataReceive[27] & 0b0111;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <CaptureDownData+0x140>)
 80006b0:	7edb      	ldrb	r3, [r3, #27]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	//0b0100==4 定深模式；0b0010==2 定向模式；0b0001 侧推模式，在控制仓无用
	//0b1000 控制继电器，在控制仓无用
	CaptureData.Relay = (
			(DownDataReceive[27] & 0b1000) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <CaptureDownData+0x140>)
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	10db      	asrs	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
	CaptureData.Relay = (
 80006ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	CaptureData.IdTest = IdTest(DownDataReceive, 0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <CaptureDownData+0x140>)
 80006d2:	f000 f925 	bl	8000920 <IdTest>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <CaptureDownData+0x144>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <CaptureDownData+0x144>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f042 0210 	orr.w	r2, r2, #16
 80006ea:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
 80006ec:	221e      	movs	r2, #30
 80006ee:	490a      	ldr	r1, [pc, #40]	; (8000718 <CaptureDownData+0x140>)
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <CaptureDownData+0x144>)
 80006f2:	f008 fac3 	bl	8008c7c <HAL_UART_Receive_DMA>

	return CaptureData;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	461d      	mov	r5, r3
 80006fa:	f107 040c 	add.w	r4, r7, #12
 80006fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	602b      	str	r3, [r5, #0]
}
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bdb0      	pop	{r4, r5, r7, pc}
 8000716:	bf00      	nop
 8000718:	20000014 	.word	0x20000014
 800071c:	20004504 	.word	0x20004504

08000720 <CaptureUpData>:
	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
}

//捕获下位向上位发送的数据
UpDataDef CaptureUpData(void)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;
	CaptureData.CabinNum = ((UpDataReceive[1] & 0b0001) ? 1 : 0);
 8000728:	4b7a      	ldr	r3, [pc, #488]	; (8000914 <CaptureUpData+0x1f4>)
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0110); //0b0010控制仓进水；0b0100推进器PWM仓进水
 8000734:	4b77      	ldr	r3, [pc, #476]	; (8000914 <CaptureUpData+0x1f4>)
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	f003 0306 	and.w	r3, r3, #6
 800073c:	b2db      	uxtb	r3, r3
 800073e:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[2] << 8) | UpDataReceive[3]);
 8000740:	4b74      	ldr	r3, [pc, #464]	; (8000914 <CaptureUpData+0x1f4>)
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b72      	ldr	r3, [pc, #456]	; (8000914 <CaptureUpData+0x1f4>)
 800074a:	78db      	ldrb	r3, [r3, #3]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[4] << 24) | (UpDataReceive[5] << 16)
 8000756:	4b6f      	ldr	r3, [pc, #444]	; (8000914 <CaptureUpData+0x1f4>)
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	061a      	lsls	r2, r3, #24
 800075c:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <CaptureUpData+0x1f4>)
 800075e:	795b      	ldrb	r3, [r3, #5]
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	431a      	orrs	r2, r3
			| (UpDataReceive[6] << 8) | UpDataReceive[7]);
 8000764:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <CaptureUpData+0x1f4>)
 8000766:	799b      	ldrb	r3, [r3, #6]
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	4313      	orrs	r3, r2
 800076c:	4a69      	ldr	r2, [pc, #420]	; (8000914 <CaptureUpData+0x1f4>)
 800076e:	79d2      	ldrb	r2, [r2, #7]
 8000770:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[4] << 24) | (UpDataReceive[5] << 16)
 8000772:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[8] << 8) | UpDataReceive[9]);
 8000774:	4b67      	ldr	r3, [pc, #412]	; (8000914 <CaptureUpData+0x1f4>)
 8000776:	7a1b      	ldrb	r3, [r3, #8]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b21a      	sxth	r2, r3
 800077c:	4b65      	ldr	r3, [pc, #404]	; (8000914 <CaptureUpData+0x1f4>)
 800077e:	7a5b      	ldrb	r3, [r3, #9]
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21b      	sxth	r3, r3
 8000786:	b29b      	uxth	r3, r3
 8000788:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[10] << 8) | UpDataReceive[11]);
 800078a:	4b62      	ldr	r3, [pc, #392]	; (8000914 <CaptureUpData+0x1f4>)
 800078c:	7a9b      	ldrb	r3, [r3, #10]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	b21a      	sxth	r2, r3
 8000792:	4b60      	ldr	r3, [pc, #384]	; (8000914 <CaptureUpData+0x1f4>)
 8000794:	7adb      	ldrb	r3, [r3, #11]
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	b21b      	sxth	r3, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[12] << 8) | UpDataReceive[13]);
 80007a0:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <CaptureUpData+0x1f4>)
 80007a2:	7b1b      	ldrb	r3, [r3, #12]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21a      	sxth	r2, r3
 80007a8:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <CaptureUpData+0x1f4>)
 80007aa:	7b5b      	ldrb	r3, [r3, #13]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[14] << 8) | UpDataReceive[15]);
 80007b6:	4b57      	ldr	r3, [pc, #348]	; (8000914 <CaptureUpData+0x1f4>)
 80007b8:	7b9b      	ldrb	r3, [r3, #14]
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21a      	sxth	r2, r3
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <CaptureUpData+0x1f4>)
 80007c0:	7bdb      	ldrb	r3, [r3, #15]
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[16] << 8) | UpDataReceive[17]);
 80007cc:	4b51      	ldr	r3, [pc, #324]	; (8000914 <CaptureUpData+0x1f4>)
 80007ce:	7c1b      	ldrb	r3, [r3, #16]
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <CaptureUpData+0x1f4>)
 80007d6:	7c5b      	ldrb	r3, [r3, #17]
 80007d8:	b21b      	sxth	r3, r3
 80007da:	4313      	orrs	r3, r2
 80007dc:	b21b      	sxth	r3, r3
 80007de:	b29b      	uxth	r3, r3
 80007e0:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[18] << 8) | UpDataReceive[19]);
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <CaptureUpData+0x1f4>)
 80007e4:	7c9b      	ldrb	r3, [r3, #18]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <CaptureUpData+0x1f4>)
 80007ec:	7cdb      	ldrb	r3, [r3, #19]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[20] << 8) | UpDataReceive[21]);
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <CaptureUpData+0x1f4>)
 80007fa:	7d1b      	ldrb	r3, [r3, #20]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	4b44      	ldr	r3, [pc, #272]	; (8000914 <CaptureUpData+0x1f4>)
 8000802:	7d5b      	ldrb	r3, [r3, #21]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29b      	uxth	r3, r3
 800080c:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[22] << 8) | UpDataReceive[23]);
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <CaptureUpData+0x1f4>)
 8000810:	7d9b      	ldrb	r3, [r3, #22]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <CaptureUpData+0x1f4>)
 8000818:	7ddb      	ldrb	r3, [r3, #23]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	b29b      	uxth	r3, r3
 8000822:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[24] << 8) | UpDataReceive[25]);
 8000824:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <CaptureUpData+0x1f4>)
 8000826:	7e1b      	ldrb	r3, [r3, #24]
 8000828:	021b      	lsls	r3, r3, #8
 800082a:	b21a      	sxth	r2, r3
 800082c:	4b39      	ldr	r3, [pc, #228]	; (8000914 <CaptureUpData+0x1f4>)
 800082e:	7e5b      	ldrb	r3, [r3, #25]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b21b      	sxth	r3, r3
 8000836:	b29b      	uxth	r3, r3
 8000838:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[26] << 8) | UpDataReceive[27]);
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <CaptureUpData+0x1f4>)
 800083c:	7e9b      	ldrb	r3, [r3, #26]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <CaptureUpData+0x1f4>)
 8000844:	7edb      	ldrb	r3, [r3, #27]
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[28] << 8) | UpDataReceive[29]);
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <CaptureUpData+0x1f4>)
 8000852:	7f1b      	ldrb	r3, [r3, #28]
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	b21a      	sxth	r2, r3
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <CaptureUpData+0x1f4>)
 800085a:	7f5b      	ldrb	r3, [r3, #29]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21b      	sxth	r3, r3
 8000862:	b29b      	uxth	r3, r3
 8000864:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[30] << 8) | UpDataReceive[31]);
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <CaptureUpData+0x1f4>)
 8000868:	7f9b      	ldrb	r3, [r3, #30]
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b21a      	sxth	r2, r3
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <CaptureUpData+0x1f4>)
 8000870:	7fdb      	ldrb	r3, [r3, #31]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21b      	sxth	r3, r3
 8000878:	b29b      	uxth	r3, r3
 800087a:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[32] << 8) | UpDataReceive[33]);
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <CaptureUpData+0x1f4>)
 800087e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <CaptureUpData+0x1f4>)
 8000888:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21b      	sxth	r3, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.WaterTemperature =
			((UpDataReceive[34] << 8) | UpDataReceive[35]);
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <CaptureUpData+0x1f4>)
 8000898:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	b21a      	sxth	r2, r3
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <CaptureUpData+0x1f4>)
 80008a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 80008ae:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[36] << 8) | UpDataReceive[37]);
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <CaptureUpData+0x1f4>)
 80008b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <CaptureUpData+0x1f4>)
 80008bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1);
 80008ca:	2101      	movs	r1, #1
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <CaptureUpData+0x1f4>)
 80008ce:	f000 f827 	bl	8000920 <IdTest>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <CaptureUpData+0x1f8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <CaptureUpData+0x1f8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f042 0210 	orr.w	r2, r2, #16
 80008e6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Down_UART, DownDataReceive, Down_UART_RXLen);
 80008e8:	2229      	movs	r2, #41	; 0x29
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <CaptureUpData+0x1fc>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <CaptureUpData+0x1f8>)
 80008ee:	f008 f9c5 	bl	8008c7c <HAL_UART_Receive_DMA>
	return CaptureData;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	461d      	mov	r5, r3
 80008f6:	f107 0408 	add.w	r4, r7, #8
 80008fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000906:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bdb0      	pop	{r4, r5, r7, pc}
 8000912:	bf00      	nop
 8000914:	20000054 	.word	0x20000054
 8000918:	20004624 	.word	0x20004624
 800091c:	20000014 	.word	0x20000014

08000920 <IdTest>:

}

//异或运算位检查，其中Format上传格式为1下传格式为0，正确为1错误为0
static u8 IdTest(u8 *String, u8 Format)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
	if (Format) //上传数据格式
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00d      	beq.n	800094e <IdTest+0x2e>
	{
		if (*(String + 38) == XorCaculate(String, 38))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3326      	adds	r3, #38	; 0x26
 8000936:	781c      	ldrb	r4, [r3, #0]
 8000938:	2126      	movs	r1, #38	; 0x26
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f818 	bl	8000970 <XorCaculate>
 8000940:	4603      	mov	r3, r0
 8000942:	429c      	cmp	r4, r3
 8000944:	d101      	bne.n	800094a <IdTest+0x2a>
		{
			return 1;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <IdTest+0x48>
		}
		else
		{
			return 0;
 800094a:	2300      	movs	r3, #0
 800094c:	e00c      	b.n	8000968 <IdTest+0x48>
		}
	}
	else //下传指令格式
	{
		if (*(String + 28) == XorCaculate(String, 28))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	331c      	adds	r3, #28
 8000952:	781c      	ldrb	r4, [r3, #0]
 8000954:	211c      	movs	r1, #28
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f80a 	bl	8000970 <XorCaculate>
 800095c:	4603      	mov	r3, r0
 800095e:	429c      	cmp	r4, r3
 8000960:	d101      	bne.n	8000966 <IdTest+0x46>
		{
			return 1;
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <IdTest+0x48>
		}
		else
		{
			return 0;
 8000966:	2300      	movs	r3, #0
		}
	}
	return 1;
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <XorCaculate>:

//异或运算位计算
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
	u8 CacResult = CacString[0];
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000982:	2300      	movs	r3, #0
 8000984:	73bb      	strb	r3, [r7, #14]
 8000986:	e009      	b.n	800099c <XorCaculate+0x2c>
	{
		CacResult ^= CacString[i];
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	4053      	eors	r3, r2
 8000994:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	73bb      	strb	r3, [r7, #14]
 800099c:	7bba      	ldrb	r2, [r7, #14]
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3f1      	bcc.n	8000988 <XorCaculate+0x18>
	}
	return CacResult;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <InitGY39>:
{ 0 };
__attribute__((section(".RAM_D1")))  u8 DeepReceive[Deep_UART_RXLen] =
{ 0 };

void InitGY39(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <InitGY39+0x24>)
 80009ba:	22a5      	movs	r2, #165	; 0xa5
 80009bc:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <InitGY39+0x24>)
 80009c0:	2282      	movs	r2, #130	; 0x82
 80009c2:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <InitGY39+0x24>)
 80009c6:	2227      	movs	r2, #39	; 0x27
 80009c8:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 80009ca:	2203      	movs	r2, #3
 80009cc:	4902      	ldr	r1, [pc, #8]	; (80009d8 <InitGY39+0x24>)
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <InitGY39+0x28>)
 80009d0:	f008 f8d4 	bl	8008b7c <HAL_UART_Transmit_DMA>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000e8 	.word	0x200000e8
 80009dc:	20004758 	.word	0x20004758

080009e0 <ReceiveGY39>:

GY39Data ReceiveGY39(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;
	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <ReceiveGY39+0x84>)
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <ReceiveGY39+0x84>)
 80009f2:	789b      	ldrb	r3, [r3, #2]
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <ReceiveGY39+0x84>)
 8000a00:	79db      	ldrb	r3, [r3, #7]
 8000a02:	061a      	lsls	r2, r3, #24
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <ReceiveGY39+0x84>)
 8000a06:	799b      	ldrb	r3, [r3, #6]
 8000a08:	041b      	lsls	r3, r3, #16
 8000a0a:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <ReceiveGY39+0x84>)
 8000a0e:	795b      	ldrb	r3, [r3, #5]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <ReceiveGY39+0x84>)
 8000a16:	7912      	ldrb	r2, [r2, #4]
 8000a18:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000a1a:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <ReceiveGY39+0x84>)
 8000a1e:	7a5b      	ldrb	r3, [r3, #9]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <ReceiveGY39+0x84>)
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	82bb      	strh	r3, [r7, #20]
	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <ReceiveGY39+0x88>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <ReceiveGY39+0x88>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f042 0210 	orr.w	r2, r2, #16
 8000a40:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000a42:	2212      	movs	r2, #18
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <ReceiveGY39+0x84>)
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <ReceiveGY39+0x88>)
 8000a48:	f008 f918 	bl	8008c7c <HAL_UART_Receive_DMA>
	return RevGY39;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	461c      	mov	r4, r3
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	200000ec 	.word	0x200000ec
 8000a68:	20004758 	.word	0x20004758

08000a6c <ReceiveWT931>:

WT931Data ReceiveWT931(void)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;
	RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000a74:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <ReceiveWT931+0x158>)
 8000a76:	78db      	ldrb	r3, [r3, #3]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <ReceiveWT931+0x158>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	813b      	strh	r3, [r7, #8]
	RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 8000a8a:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <ReceiveWT931+0x158>)
 8000a8c:	795b      	ldrb	r3, [r3, #5]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <ReceiveWT931+0x158>)
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	817b      	strh	r3, [r7, #10]
	RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8000aa0:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <ReceiveWT931+0x158>)
 8000aa2:	79db      	ldrb	r3, [r3, #7]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <ReceiveWT931+0x158>)
 8000aaa:	799b      	ldrb	r3, [r3, #6]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	81bb      	strh	r3, [r7, #12]
	RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <ReceiveWT931+0x158>)
 8000ab8:	7b9b      	ldrb	r3, [r3, #14]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <ReceiveWT931+0x158>)
 8000ac0:	7b5b      	ldrb	r3, [r3, #13]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	81fb      	strh	r3, [r7, #14]
	RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8000acc:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <ReceiveWT931+0x158>)
 8000ace:	7c1b      	ldrb	r3, [r3, #16]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <ReceiveWT931+0x158>)
 8000ad6:	7bdb      	ldrb	r3, [r3, #15]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	823b      	strh	r3, [r7, #16]
	RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <ReceiveWT931+0x158>)
 8000ae4:	7c9b      	ldrb	r3, [r3, #18]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <ReceiveWT931+0x158>)
 8000aec:	7c5b      	ldrb	r3, [r3, #17]
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	827b      	strh	r3, [r7, #18]
	RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <ReceiveWT931+0x158>)
 8000afa:	7e5b      	ldrb	r3, [r3, #25]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b02:	7e1b      	ldrb	r3, [r3, #24]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	82bb      	strh	r3, [r7, #20]
	RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b10:	7edb      	ldrb	r3, [r3, #27]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b18:	7e9b      	ldrb	r3, [r3, #26]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	82fb      	strh	r3, [r7, #22]
	RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b26:	7f5b      	ldrb	r3, [r3, #29]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b2e:	7f1b      	ldrb	r3, [r3, #28]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	833b      	strh	r3, [r7, #24]
	RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b46:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	837b      	strh	r3, [r7, #26]
	RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b56:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	83bb      	strh	r3, [r7, #28]
	RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b7a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	83fb      	strh	r3, [r7, #30]
	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <ReceiveWT931+0x15c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <ReceiveWT931+0x15c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0210 	orr.w	r2, r2, #16
 8000b96:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 8000b98:	223c      	movs	r2, #60	; 0x3c
 8000b9a:	490a      	ldr	r1, [pc, #40]	; (8000bc4 <ReceiveWT931+0x158>)
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <ReceiveWT931+0x15c>)
 8000b9e:	f008 f86d 	bl	8008c7c <HAL_UART_Receive_DMA>
	return RevWT931;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	f107 0408 	add.w	r4, r7, #8
 8000baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bac:	6028      	str	r0, [r5, #0]
 8000bae:	6069      	str	r1, [r5, #4]
 8000bb0:	60aa      	str	r2, [r5, #8]
 8000bb2:	60eb      	str	r3, [r5, #12]
 8000bb4:	cc03      	ldmia	r4!, {r0, r1}
 8000bb6:	6128      	str	r0, [r5, #16]
 8000bb8:	6169      	str	r1, [r5, #20]
}
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000ac 	.word	0x200000ac
 8000bc8:	20004244 	.word	0x20004244

08000bcc <ReceiveDeep>:

DeepData ReceiveDeep(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	DeepData RevDeep;
	RevDeep.WaterDepth = ((WT931Receive[1] << 8) | WT931Receive[0]);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <ReceiveDeep+0x68>)
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <ReceiveDeep+0x68>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <ReceiveDeep+0x68>)
 8000bea:	78db      	ldrb	r3, [r3, #3]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <ReceiveDeep+0x68>)
 8000bf2:	789b      	ldrb	r3, [r3, #2]
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	803b      	strh	r3, [r7, #0]
	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <ReceiveDeep+0x6c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <ReceiveDeep+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f042 0210 	orr.w	r2, r2, #16
 8000c0c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 8000c0e:	2204      	movs	r2, #4
 8000c10:	490a      	ldr	r1, [pc, #40]	; (8000c3c <ReceiveDeep+0x70>)
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <ReceiveDeep+0x6c>)
 8000c14:	f008 f832 	bl	8008c7c <HAL_UART_Receive_DMA>
	return RevDeep;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	88ba      	ldrh	r2, [r7, #4]
 8000c20:	f362 030f 	bfi	r3, r2, #0, #16
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000ac 	.word	0x200000ac
 8000c38:	200046b8 	.word	0x200046b8
 8000c3c:	20000100 	.word	0x20000100

08000c40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000c50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <vApplicationGetIdleTaskMemory+0x30>)
 8000c56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000120 	.word	0x20000120
 8000c70:	20000174 	.word	0x20000174

08000c74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c74:	b5b0      	push	{r4, r5, r7, lr}
 8000c76:	b0b2      	sub	sp, #200	; 0xc8
 8000c78:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c7a:	4b95      	ldr	r3, [pc, #596]	; (8000ed0 <main+0x25c>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d11b      	bne.n	8000cbe <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c86:	f3bf 8f4f 	dsb	sy
}
 8000c8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c8c:	f3bf 8f6f 	isb	sy
}
 8000c90:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c92:	4b8f      	ldr	r3, [pc, #572]	; (8000ed0 <main+0x25c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9a:	f3bf 8f4f 	dsb	sy
}
 8000c9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca0:	f3bf 8f6f 	isb	sy
}
 8000ca4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ca6:	4b8a      	ldr	r3, [pc, #552]	; (8000ed0 <main+0x25c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a89      	ldr	r2, [pc, #548]	; (8000ed0 <main+0x25c>)
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb2:	f3bf 8f4f 	dsb	sy
}
 8000cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cb8:	f3bf 8f6f 	isb	sy
}
 8000cbc:	e000      	b.n	8000cc0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000cbe:	bf00      	nop
	SCB_EnableICache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cc0:	f001 fef2 	bl	8002aa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cc4:	f000 f92e 	bl	8000f24 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000cc8:	f000 f9b2 	bl	8001030 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ccc:	f000 fbe6 	bl	800149c <MX_GPIO_Init>
	MX_DMA_Init();
 8000cd0:	f000 fb74 	bl	80013bc <MX_DMA_Init>
	MX_IWDG1_Init();
 8000cd4:	f000 f9d8 	bl	8001088 <MX_IWDG1_Init>
	MX_UART4_Init();
 8000cd8:	f000 f9f4 	bl	80010c4 <MX_UART4_Init>
	MX_UART8_Init();
 8000cdc:	f000 fa3e 	bl	800115c <MX_UART8_Init>
	MX_USART1_UART_Init();
 8000ce0:	f000 fa88 	bl	80011f4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000ce4:	f000 fad2 	bl	800128c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000ce8:	f000 fb1c 	bl	8001324 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	//初始化下位机
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4878      	ldr	r0, [pc, #480]	; (8000ed4 <main+0x260>)
 8000cf2:	f005 f82f 	bl	8005d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4876      	ldr	r0, [pc, #472]	; (8000ed4 <main+0x260>)
 8000cfc:	f005 f82a 	bl	8005d54 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of DeepIO */
	osMutexDef(DeepIO);
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	DeepIOHandle = osMutexCreate(osMutex(DeepIO));
 8000d0c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f009 fd9a 	bl	800a84a <osMutexCreate>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a6f      	ldr	r2, [pc, #444]	; (8000ed8 <main+0x264>)
 8000d1a:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39IO */
	osMutexDef(GY39IO);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39IOHandle = osMutexCreate(osMutex(GY39IO));
 8000d28:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fd8c 	bl	800a84a <osMutexCreate>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a69      	ldr	r2, [pc, #420]	; (8000edc <main+0x268>)
 8000d36:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931IO */
	osMutexDef(WT931IO);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	WT931IOHandle = osMutexCreate(osMutex(WT931IO));
 8000d44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f009 fd7e 	bl	800a84a <osMutexCreate>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a63      	ldr	r2, [pc, #396]	; (8000ee0 <main+0x26c>)
 8000d52:	6013      	str	r3, [r2, #0]

	/* definition and creation of UpIO */
	osMutexDef(UpIO);
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	UpIOHandle = osMutexCreate(osMutex(UpIO));
 8000d60:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f009 fd70 	bl	800a84a <osMutexCreate>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a5d      	ldr	r2, [pc, #372]	; (8000ee4 <main+0x270>)
 8000d6e:	6013      	str	r3, [r2, #0]

	/* definition and creation of DownIO */
	osMutexDef(DownIO);
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	DownIOHandle = osMutexCreate(osMutex(DownIO));
 8000d7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f009 fd62 	bl	800a84a <osMutexCreate>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a57      	ldr	r2, [pc, #348]	; (8000ee8 <main+0x274>)
 8000d8a:	6013      	str	r3, [r2, #0]

	/* definition and creation of DownEn */
	osMutexDef(DownEn);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	DownEnHandle = osMutexCreate(osMutex(DownEn));
 8000d98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f009 fd54 	bl	800a84a <osMutexCreate>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <main+0x278>)
 8000da6:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UpSideFinish */
	osSemaphoreDef(UpSideFinish);
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	UpSideFinishHandle = osSemaphoreCreate(osSemaphore(UpSideFinish), 1);
 8000db4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000db8:	2101      	movs	r1, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f009 fd5d 	bl	800a87a <osSemaphoreCreate>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <main+0x27c>)
 8000dc4:	6013      	str	r3, [r2, #0]

	/* definition and creation of DownSideFinish */
	osSemaphoreDef(DownSideFinish);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	DownSideFinishHandle = osSemaphoreCreate(osSemaphore(DownSideFinish), 1);
 8000dd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f009 fd4e 	bl	800a87a <osSemaphoreCreate>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a44      	ldr	r2, [pc, #272]	; (8000ef4 <main+0x280>)
 8000de2:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepFinish */
	osSemaphoreDef(DeepFinish);
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	DeepFinishHandle = osSemaphoreCreate(osSemaphore(DeepFinish), 1);
 8000df0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f009 fd3f 	bl	800a87a <osSemaphoreCreate>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <main+0x284>)
 8000e00:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39Finish */
	osSemaphoreDef(GY39Finish);
 8000e02:	2300      	movs	r3, #0
 8000e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e06:	2300      	movs	r3, #0
 8000e08:	67fb      	str	r3, [r7, #124]	; 0x7c
	GY39FinishHandle = osSemaphoreCreate(osSemaphore(GY39Finish), 1);
 8000e0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f009 fd32 	bl	800a87a <osSemaphoreCreate>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a38      	ldr	r2, [pc, #224]	; (8000efc <main+0x288>)
 8000e1a:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931Finish */
	osSemaphoreDef(WT931Finish);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8000e20:	2300      	movs	r3, #0
 8000e22:	677b      	str	r3, [r7, #116]	; 0x74
	WT931FinishHandle = osSemaphoreCreate(osSemaphore(WT931Finish), 1);
 8000e24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f009 fd25 	bl	800a87a <osSemaphoreCreate>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a33      	ldr	r2, [pc, #204]	; (8000f00 <main+0x28c>)
 8000e34:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of EmptyTask */
	osThreadDef(EmptyTask, EmptyTaskFunction, osPriorityIdle, 0, 128);
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <main+0x290>)
 8000e38:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	EmptyTaskHandle = osThreadCreate(osThread(EmptyTask), NULL);
 8000e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f009 fc9a 	bl	800a78a <osThreadCreate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <main+0x294>)
 8000e5a:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskFunction, osPriorityNormal, 0, 128);
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <main+0x298>)
 8000e5e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e62:	461d      	mov	r5, r3
 8000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8000e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 fc87 	bl	800a78a <osThreadCreate>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <main+0x29c>)
 8000e80:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UptoBaseTaskFunction, osPriorityNormal, 0, 128);
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <main+0x2a0>)
 8000e84:	f107 041c 	add.w	r4, r7, #28
 8000e88:	461d      	mov	r5, r3
 8000e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f009 fc74 	bl	800a78a <osThreadCreate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <main+0x2a4>)
 8000ea6:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BasetoUpTaskFunction, osPriorityNormal, 0, 128);
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <main+0x2a8>)
 8000eaa:	463c      	mov	r4, r7
 8000eac:	461d      	mov	r5, r3
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f009 fc63 	bl	800a78a <osThreadCreate>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <main+0x2ac>)
 8000ec8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000eca:	f009 fc57 	bl	800a77c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ece:	e7fe      	b.n	8000ece <main+0x25a>
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	58021000 	.word	0x58021000
 8000ed8:	2000489c 	.word	0x2000489c
 8000edc:	20004594 	.word	0x20004594
 8000ee0:	20004398 	.word	0x20004398
 8000ee4:	200042dc 	.word	0x200042dc
 8000ee8:	2000474c 	.word	0x2000474c
 8000eec:	200047e8 	.word	0x200047e8
 8000ef0:	20004864 	.word	0x20004864
 8000ef4:	20004620 	.word	0x20004620
 8000ef8:	20004754 	.word	0x20004754
 8000efc:	2000461c 	.word	0x2000461c
 8000f00:	200042d8 	.word	0x200042d8
 8000f04:	0800cd90 	.word	0x0800cd90
 8000f08:	200042d4 	.word	0x200042d4
 8000f0c:	0800cdac 	.word	0x0800cdac
 8000f10:	200040c8 	.word	0x200040c8
 8000f14:	0800cdc8 	.word	0x0800cdc8
 8000f18:	20004748 	.word	0x20004748
 8000f1c:	0800cde4 	.word	0x0800cde4
 8000f20:	20004750 	.word	0x20004750

08000f24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09c      	sub	sp, #112	; 0x70
 8000f28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	224c      	movs	r2, #76	; 0x4c
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00b fefc 	bl	800cd30 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00b fef6 	bl	800cd30 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f004 ff7d 	bl	8005e44 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b35      	ldr	r3, [pc, #212]	; (8001024 <SystemClock_Config+0x100>)
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	4a34      	ldr	r2, [pc, #208]	; (8001024 <SystemClock_Config+0x100>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f5a:	4b32      	ldr	r3, [pc, #200]	; (8001024 <SystemClock_Config+0x100>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <SystemClock_Config+0x104>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <SystemClock_Config+0x104>)
 8000f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <SystemClock_Config+0x104>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000f7c:	bf00      	nop
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <SystemClock_Config+0x104>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f8a:	d1f8      	bne.n	8000f7e <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <SystemClock_Config+0x108>)
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	4a25      	ldr	r2, [pc, #148]	; (800102c <SystemClock_Config+0x108>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 ff6e 	bl	8005eb8 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000fe2:	f000 fd2f 	bl	8001a44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fe6:	233f      	movs	r3, #63	; 0x3f
 8000fe8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2303      	movs	r3, #3
 8000fec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ffa:	2340      	movs	r3, #64	; 0x40
 8000ffc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001004:	2340      	movs	r3, #64	; 0x40
 8001006:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2102      	movs	r1, #2
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fb63 	bl	80066d8 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8001018:	f000 fd14 	bl	8001a44 <Error_Handler>
	}
}
 800101c:	bf00      	nop
 800101e:	3770      	adds	r7, #112	; 0x70
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58000400 	.word	0x58000400
 8001028:	58024800 	.word	0x58024800
 800102c:	58024400 	.word	0x58024400

08001030 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0b0      	sub	sp, #192	; 0xc0
 8001034:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	22bc      	movs	r2, #188	; 0xbc
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00b fe77 	bl	800cd30 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8
 8001042:	2303      	movs	r3, #3
 8001044:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001046:	2319      	movs	r3, #25
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800104a:	23c0      	movs	r3, #192	; 0xc0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800105e:	2300      	movs	r3, #0
 8001060:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 8001066:	2302      	movs	r3, #2
 8001068:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800106a:	2310      	movs	r3, #16
 800106c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4618      	mov	r0, r3
 8001072:	f005 feff 	bl	8006e74 <HAL_RCCEx_PeriphCLKConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 800107c:	f000 fce2 	bl	8001a44 <Error_Handler>
	}
}
 8001080:	bf00      	nop
 8001082:	37c0      	adds	r7, #192	; 0xc0
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_IWDG1_Init+0x34>)
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <MX_IWDG1_Init+0x38>)
 8001090:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MX_IWDG1_Init+0x34>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 2047;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_IWDG1_Init+0x34>)
 800109a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800109e:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 2047;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_IWDG1_Init+0x34>)
 80010a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010a6:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_IWDG1_Init+0x34>)
 80010aa:	f004 fe6c 	bl	8005d86 <HAL_IWDG_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 80010b4:	f000 fcc6 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200041bc 	.word	0x200041bc
 80010c0:	58004800 	.word	0x58004800

080010c4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_UART4_Init+0x90>)
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_UART4_Init+0x94>)
 80010cc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_UART4_Init+0x90>)
 80010d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80010d4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_UART4_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_UART4_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_UART4_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_UART4_Init+0x90>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_UART4_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_UART4_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_UART4_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_UART4_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_UART4_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_UART4_Init+0x90>)
 800110e:	f007 fce5 	bl	8008adc <HAL_UART_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8001118:	f000 fc94 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_UART4_Init+0x90>)
 8001120:	f009 fa4a 	bl	800a5b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800112a:	f000 fc8b 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_UART4_Init+0x90>)
 8001132:	f009 fa7f 	bl	800a634 <HAL_UARTEx_SetRxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800113c:	f000 fc82 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_UART4_Init+0x90>)
 8001142:	f009 fa00 	bl	800a546 <HAL_UARTEx_DisableFifoMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800114c:	f000 fc7a 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200046b8 	.word	0x200046b8
 8001158:	40004c00 	.word	0x40004c00

0800115c <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_UART8_Init+0x90>)
 8001162:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <MX_UART8_Init+0x94>)
 8001164:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_UART8_Init+0x90>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_UART8_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_UART8_Init+0x90>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_UART8_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_UART8_Init+0x90>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_UART8_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_UART8_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_UART8_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_UART8_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_UART8_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_UART8_Init+0x90>)
 80011a6:	f007 fc99 	bl	8008adc <HAL_UART_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 80011b0:	f000 fc48 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 80011b4:	2100      	movs	r1, #0
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_UART8_Init+0x90>)
 80011b8:	f009 f9fe 	bl	800a5b8 <HAL_UARTEx_SetTxFifoThreshold>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80011c2:	f000 fc3f 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <MX_UART8_Init+0x90>)
 80011ca:	f009 fa33 	bl	800a634 <HAL_UARTEx_SetRxFifoThreshold>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80011d4:	f000 fc36 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_UART8_Init+0x90>)
 80011da:	f009 f9b4 	bl	800a546 <HAL_UARTEx_DisableFifoMode>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 80011e4:	f000 fc2e 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20004624 	.word	0x20004624
 80011f0:	40007c00 	.word	0x40007c00

080011f4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_USART1_UART_Init+0x90>)
 80011fa:	4a23      	ldr	r2, [pc, #140]	; (8001288 <MX_USART1_UART_Init+0x94>)
 80011fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001200:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001204:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_USART1_UART_Init+0x90>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_USART1_UART_Init+0x90>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_USART1_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800123c:	4811      	ldr	r0, [pc, #68]	; (8001284 <MX_USART1_UART_Init+0x90>)
 800123e:	f007 fc4d 	bl	8008adc <HAL_UART_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001248:	f000 fbfc 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800124c:	2100      	movs	r1, #0
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001250:	f009 f9b2 	bl	800a5b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800125a:	f000 fbf3 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800125e:	2100      	movs	r1, #0
 8001260:	4808      	ldr	r0, [pc, #32]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001262:	f009 f9e7 	bl	800a634 <HAL_UARTEx_SetRxFifoThreshold>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800126c:	f000 fbea 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_USART1_UART_Init+0x90>)
 8001272:	f009 f968 	bl	800a546 <HAL_UARTEx_DisableFifoMode>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 800127c:	f000 fbe2 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20004504 	.word	0x20004504
 8001288:	40011000 	.word	0x40011000

0800128c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_USART2_UART_Init+0x90>)
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <MX_USART2_UART_Init+0x94>)
 8001294:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_USART2_UART_Init+0x90>)
 8001298:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800129c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d4:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012d6:	f007 fc01 	bl	8008adc <HAL_UART_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80012e0:	f000 fbb0 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80012e4:	2100      	movs	r1, #0
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012e8:	f009 f966 	bl	800a5b8 <HAL_UARTEx_SetTxFifoThreshold>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80012f2:	f000 fba7 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <MX_USART2_UART_Init+0x90>)
 80012fa:	f009 f99b 	bl	800a634 <HAL_UARTEx_SetRxFifoThreshold>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001304:	f000 fb9e 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_USART2_UART_Init+0x90>)
 800130a:	f009 f91c 	bl	800a546 <HAL_UARTEx_DisableFifoMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001314:	f000 fb96 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20004758 	.word	0x20004758
 8001320:	40004400 	.word	0x40004400

08001324 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_USART3_UART_Init+0x94>)
 800132c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 800136e:	f007 fbb5 	bl	8008adc <HAL_UART_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001378:	f000 fb64 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 800137c:	2100      	movs	r1, #0
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001380:	f009 f91a 	bl	800a5b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800138a:	f000 fb5b 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800138e:	2100      	movs	r1, #0
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 8001392:	f009 f94f 	bl	800a634 <HAL_UARTEx_SetRxFifoThreshold>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800139c:	f000 fb52 	bl	8001a44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_USART3_UART_Init+0x90>)
 80013a2:	f009 f8d0 	bl	800a546 <HAL_UARTEx_DisableFifoMode>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 80013ac:	f000 fb4a 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20004244 	.word	0x20004244
 80013b8:	40004800 	.word	0x40004800

080013bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	4b35      	ldr	r3, [pc, #212]	; (8001498 <MX_DMA_Init+0xdc>)
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c8:	4a33      	ldr	r2, [pc, #204]	; (8001498 <MX_DMA_Init+0xdc>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_DMA_Init+0xdc>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <MX_DMA_Init+0xdc>)
 80013e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e6:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <MX_DMA_Init+0xdc>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_DMA_Init+0xdc>)
 80013f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	200b      	movs	r0, #11
 8001404:	f001 fc70 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001408:	200b      	movs	r0, #11
 800140a:	f001 fc87 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	200c      	movs	r0, #12
 8001414:	f001 fc68 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001418:	200c      	movs	r0, #12
 800141a:	f001 fc7f 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2105      	movs	r1, #5
 8001422:	200d      	movs	r0, #13
 8001424:	f001 fc60 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001428:	200d      	movs	r0, #13
 800142a:	f001 fc77 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2105      	movs	r1, #5
 8001432:	200e      	movs	r0, #14
 8001434:	f001 fc58 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001438:	200e      	movs	r0, #14
 800143a:	f001 fc6f 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2105      	movs	r1, #5
 8001442:	200f      	movs	r0, #15
 8001444:	f001 fc50 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001448:	200f      	movs	r0, #15
 800144a:	f001 fc67 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2105      	movs	r1, #5
 8001452:	2010      	movs	r0, #16
 8001454:	f001 fc48 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001458:	2010      	movs	r0, #16
 800145a:	f001 fc5f 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	2011      	movs	r0, #17
 8001464:	f001 fc40 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001468:	2011      	movs	r0, #17
 800146a:	f001 fc57 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	202f      	movs	r0, #47	; 0x2f
 8001474:	f001 fc38 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001478:	202f      	movs	r0, #47	; 0x2f
 800147a:	f001 fc4f 	bl	8002d1c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2038      	movs	r0, #56	; 0x38
 8001484:	f001 fc30 	bl	8002ce8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001488:	2038      	movs	r0, #56	; 0x38
 800148a:	f001 fc47 	bl	8002d1c <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58024400 	.word	0x58024400

0800149c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a35      	ldr	r2, [pc, #212]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <MX_GPIO_Init+0xf4>)
 80014f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MX_GPIO_Init+0xf4>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_GPIO_Init+0xf4>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <MX_GPIO_Init+0xf4>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_GPIO_Init+0xf4>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_GPIO_Init+0xf4>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4a17      	ldr	r2, [pc, #92]	; (8001590 <MX_GPIO_Init+0xf4>)
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_GPIO_Init+0xf4>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2110      	movs	r1, #16
 800154c:	4811      	ldr	r0, [pc, #68]	; (8001594 <MX_GPIO_Init+0xf8>)
 800154e:	f004 fc01 	bl	8005d54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001552:	2310      	movs	r3, #16
 8001554:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	480a      	ldr	r0, [pc, #40]	; (8001594 <MX_GPIO_Init+0xf8>)
 800156a:	f004 fa2b 	bl	80059c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_GPIO_Init+0xf8>)
 8001582:	f004 fa1f 	bl	80059c4 <HAL_GPIO_Init>

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	58024400 	.word	0x58024400
 8001594:	58021000 	.word	0x58021000

08001598 <EmptyTaskFunction>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_EmptyTaskFunction */
void EmptyTaskFunction(void const *argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		HAL_IWDG_Refresh(&hiwdg1);
 80015a0:	4801      	ldr	r0, [pc, #4]	; (80015a8 <EmptyTaskFunction+0x10>)
 80015a2:	f004 fc3f 	bl	8005e24 <HAL_IWDG_Refresh>
 80015a6:	e7fb      	b.n	80015a0 <EmptyTaskFunction+0x8>
 80015a8:	200041bc 	.word	0x200041bc

080015ac <SensorTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskFunction */
void SensorTaskFunction(void const *argument)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskFunction */
	//Finish:二进制信号量，串口传输结束位
	//IO:互斥信号量，读写保护�??
	InitGY39();
 80015b4:	f7ff f9fe 	bl	80009b4 <InitGY39>
	ReceiveDeep();
 80015b8:	f7ff fb08 	bl	8000bcc <ReceiveDeep>
	ReceiveGY39();
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa0d 	bl	80009e0 <ReceiveGY39>
	ReceiveWT931();
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fa4f 	bl	8000a6c <ReceiveWT931>
	osDelay(200);
 80015ce:	20c8      	movs	r0, #200	; 0xc8
 80015d0:	f009 f927 	bl	800a822 <osDelay>
	DeepSensorData = ReceiveDeep();
 80015d4:	f7ff fafa 	bl	8000bcc <ReceiveDeep>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <SensorTaskFunction+0x194>)
 80015dc:	4611      	mov	r1, r2
 80015de:	8019      	strh	r1, [r3, #0]
 80015e0:	f3c2 420f 	ubfx	r2, r2, #16, #16
 80015e4:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 80015e6:	4c57      	ldr	r4, [pc, #348]	; (8001744 <SensorTaskFunction+0x198>)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f9f8 	bl	80009e0 <ReceiveGY39>
 80015f0:	463b      	mov	r3, r7
 80015f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 80015fa:	4c53      	ldr	r4, [pc, #332]	; (8001748 <SensorTaskFunction+0x19c>)
 80015fc:	463b      	mov	r3, r7
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fa34 	bl	8000a6c <ReceiveWT931>
 8001604:	4622      	mov	r2, r4
 8001606:	463b      	mov	r3, r7
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	689d      	ldr	r5, [r3, #8]
 800160e:	68dc      	ldr	r4, [r3, #12]
 8001610:	6010      	str	r0, [r2, #0]
 8001612:	6051      	str	r1, [r2, #4]
 8001614:	6095      	str	r5, [r2, #8]
 8001616:	60d4      	str	r4, [r2, #12]
 8001618:	6918      	ldr	r0, [r3, #16]
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	6110      	str	r0, [r2, #16]
 800161e:	6151      	str	r1, [r2, #20]
	xSemaphoreGive(DeepIOHandle);
 8001620:	4b4a      	ldr	r3, [pc, #296]	; (800174c <SensorTaskFunction+0x1a0>)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	f009 fb93 	bl	800ad54 <xQueueGenericSend>
	xSemaphoreGive(GY39IOHandle);
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <SensorTaskFunction+0x1a4>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	f009 fb8c 	bl	800ad54 <xQueueGenericSend>
	xSemaphoreGive(WT931IOHandle);
 800163c:	4b45      	ldr	r3, [pc, #276]	; (8001754 <SensorTaskFunction+0x1a8>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	f009 fb85 	bl	800ad54 <xQueueGenericSend>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepFinishHandle,portMAX_DELAY) == pdTRUE)
 800164a:	4b43      	ldr	r3, [pc, #268]	; (8001758 <SensorTaskFunction+0x1ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	4618      	mov	r0, r3
 8001654:	f009 fd0a 	bl	800b06c <xQueueSemaphoreTake>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d119      	bne.n	8001692 <SensorTaskFunction+0xe6>
		{
			if (xSemaphoreTake(DeepIOHandle,portMAX_DELAY) == pdTRUE)
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <SensorTaskFunction+0x1a0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f04f 31ff 	mov.w	r1, #4294967295
 8001666:	4618      	mov	r0, r3
 8001668:	f009 fd00 	bl	800b06c <xQueueSemaphoreTake>
 800166c:	4603      	mov	r3, r0
 800166e:	2b01      	cmp	r3, #1
 8001670:	d10f      	bne.n	8001692 <SensorTaskFunction+0xe6>
			{
				DeepSensorData = ReceiveDeep();
 8001672:	f7ff faab 	bl	8000bcc <ReceiveDeep>
 8001676:	4602      	mov	r2, r0
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <SensorTaskFunction+0x194>)
 800167a:	4611      	mov	r1, r2
 800167c:	8019      	strh	r1, [r3, #0]
 800167e:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001682:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepIOHandle);
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <SensorTaskFunction+0x1a0>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	f009 fb61 	bl	800ad54 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931FinishHandle,portMAX_DELAY) == pdTRUE)
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <SensorTaskFunction+0x1b0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f04f 31ff 	mov.w	r1, #4294967295
 800169a:	4618      	mov	r0, r3
 800169c:	f009 fce6 	bl	800b06c <xQueueSemaphoreTake>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d123      	bne.n	80016ee <SensorTaskFunction+0x142>
		{
			if (xSemaphoreTake(WT931IOHandle,
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <SensorTaskFunction+0x1a8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f04f 31ff 	mov.w	r1, #4294967295
 80016ae:	4618      	mov	r0, r3
 80016b0:	f009 fcdc 	bl	800b06c <xQueueSemaphoreTake>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d119      	bne.n	80016ee <SensorTaskFunction+0x142>
					portMAX_DELAY) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 80016ba:	4c23      	ldr	r4, [pc, #140]	; (8001748 <SensorTaskFunction+0x19c>)
 80016bc:	463b      	mov	r3, r7
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f9d4 	bl	8000a6c <ReceiveWT931>
 80016c4:	4622      	mov	r2, r4
 80016c6:	463b      	mov	r3, r7
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	689d      	ldr	r5, [r3, #8]
 80016ce:	68dc      	ldr	r4, [r3, #12]
 80016d0:	6010      	str	r0, [r2, #0]
 80016d2:	6051      	str	r1, [r2, #4]
 80016d4:	6095      	str	r5, [r2, #8]
 80016d6:	60d4      	str	r4, [r2, #12]
 80016d8:	6918      	ldr	r0, [r3, #16]
 80016da:	6959      	ldr	r1, [r3, #20]
 80016dc:	6110      	str	r0, [r2, #16]
 80016de:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931IOHandle);
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <SensorTaskFunction+0x1a8>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	f009 fb33 	bl	800ad54 <xQueueGenericSend>
			}
		}
		//收取温湿度数据
		if (xSemaphoreTake(GY39FinishHandle,portMAX_DELAY) == pdTRUE)
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <SensorTaskFunction+0x1b4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 31ff 	mov.w	r1, #4294967295
 80016f6:	4618      	mov	r0, r3
 80016f8:	f009 fcb8 	bl	800b06c <xQueueSemaphoreTake>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d11a      	bne.n	8001738 <SensorTaskFunction+0x18c>
		{
			if (xSemaphoreTake(GY39IOHandle,
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <SensorTaskFunction+0x1a4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 31ff 	mov.w	r1, #4294967295
 800170a:	4618      	mov	r0, r3
 800170c:	f009 fcae 	bl	800b06c <xQueueSemaphoreTake>
 8001710:	4603      	mov	r3, r0
 8001712:	2b01      	cmp	r3, #1
 8001714:	d110      	bne.n	8001738 <SensorTaskFunction+0x18c>
					portMAX_DELAY) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001716:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <SensorTaskFunction+0x198>)
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f960 	bl	80009e0 <ReceiveGY39>
 8001720:	463b      	mov	r3, r7
 8001722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39IOHandle);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <SensorTaskFunction+0x1a4>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	f009 fb0e 	bl	800ad54 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <SensorTaskFunction+0x1b8>)
 800173a:	f004 fb73 	bl	8005e24 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepFinishHandle,portMAX_DELAY) == pdTRUE)
 800173e:	e784      	b.n	800164a <SensorTaskFunction+0x9e>
 8001740:	200046b4 	.word	0x200046b4
 8001744:	20004598 	.word	0x20004598
 8001748:	20004308 	.word	0x20004308
 800174c:	2000489c 	.word	0x2000489c
 8001750:	20004594 	.word	0x20004594
 8001754:	20004398 	.word	0x20004398
 8001758:	20004754 	.word	0x20004754
 800175c:	200042d8 	.word	0x200042d8
 8001760:	2000461c 	.word	0x2000461c
 8001764:	200041bc 	.word	0x200041bc

08001768 <UptoBaseTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UptoBaseTaskFunction */
void UptoBaseTaskFunction(void const *argument)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b092      	sub	sp, #72	; 0x48
 800176c:	af00      	add	r7, sp, #0
 800176e:	63f8      	str	r0, [r7, #60]	; 0x3c
	/* USER CODE BEGIN UptoBaseTaskFunction */
	//Finish:二进制信号量，串口传输结束位
	//IO:互斥信号量，读写保护�?
	u8 DIPFlag = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	u16 DIPStartNum = 0; //PID定向定深预期�?
 8001776:	2300      	movs	r3, #0
 8001778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	CaptureDownData();
 800177c:	463b      	mov	r3, r7
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff2a 	bl	80005d8 <CaptureDownData>
	osDelay(200);
 8001784:	20c8      	movs	r0, #200	; 0xc8
 8001786:	f009 f84c 	bl	800a822 <osDelay>
	//打开串口接收
	UptoBaseData = CaptureDownData();
 800178a:	4c0d      	ldr	r4, [pc, #52]	; (80017c0 <UptoBaseTaskFunction+0x58>)
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe ff22 	bl	80005d8 <CaptureDownData>
 8001794:	4625      	mov	r5, r4
 8001796:	463c      	mov	r4, r7
 8001798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	602b      	str	r3, [r5, #0]
	xSemaphoreGive(UpIOHandle);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <UptoBaseTaskFunction+0x5c>)
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	f009 facf 	bl	800ad54 <xQueueGenericSend>
//			{
//				SendDownData(UptoBaseData);
//				xSemaphoreGive(DownIOHandle);
//			}
//		}
		HAL_IWDG_Refresh(&hiwdg1);
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <UptoBaseTaskFunction+0x60>)
 80017b8:	f004 fb34 	bl	8005e24 <HAL_IWDG_Refresh>
 80017bc:	e7fb      	b.n	80017b6 <UptoBaseTaskFunction+0x4e>
 80017be:	bf00      	nop
 80017c0:	20004868 	.word	0x20004868
 80017c4:	200042dc 	.word	0x200042dc
 80017c8:	200041bc 	.word	0x200041bc

080017cc <BasetoUpTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BasetoUpTaskFunction */
void BasetoUpTaskFunction(void const *argument)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN BasetoUpTaskFunction */
	//用于指示当前传输数据是哪个仓位的标志
	//置为1的时候表示推进器控制�?
	//置为0的时候表示主控仓
	u8 SensorCarbin = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	CaptureUpData();
 80017da:	463b      	mov	r3, r7
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff9f 	bl	8000720 <CaptureUpData>
	osDelay(200);
 80017e2:	20c8      	movs	r0, #200	; 0xc8
 80017e4:	f009 f81d 	bl	800a822 <osDelay>
	//打开串口接收
	BasetoUpData = CaptureUpData();
 80017e8:	4c80      	ldr	r4, [pc, #512]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80017ea:	463b      	mov	r3, r7
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe ff97 	bl	8000720 <CaptureUpData>
 80017f2:	4625      	mov	r5, r4
 80017f4:	463c      	mov	r4, r7
 80017f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001802:	e885 0003 	stmia.w	r5, {r0, r1}
	xSemaphoreGive(DownIOHandle);
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <BasetoUpTaskFunction+0x224>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	f009 faa0 	bl	800ad54 <xQueueGenericSend>
	/* Infinite loop */
	for (;;)
	{
		//汇总传感器数据并上传到主控,循环发送不同的舱室数据
		if (SensorCarbin) //发送推进器控制仓数据
 8001814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001818:	2b00      	cmp	r3, #0
 800181a:	d02c      	beq.n	8001876 <BasetoUpTaskFunction+0xaa>
		{
			//收取下位仓上传数�?
			if (xSemaphoreTake(DownSideFinishHandle,portMAX_DELAY) == pdTRUE)
 800181c:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <BasetoUpTaskFunction+0x228>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	4618      	mov	r0, r3
 8001826:	f009 fc21 	bl	800b06c <xQueueSemaphoreTake>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 80a5 	bne.w	800197c <BasetoUpTaskFunction+0x1b0>
			{
				if (xSemaphoreTake(DownIOHandle,portMAX_DELAY) == pdTRUE)
 8001832:	4b6f      	ldr	r3, [pc, #444]	; (80019f0 <BasetoUpTaskFunction+0x224>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f04f 31ff 	mov.w	r1, #4294967295
 800183a:	4618      	mov	r0, r3
 800183c:	f009 fc16 	bl	800b06c <xQueueSemaphoreTake>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	f040 809a 	bne.w	800197c <BasetoUpTaskFunction+0x1b0>
				{
					BasetoUpData = CaptureUpData();
 8001848:	4c68      	ldr	r4, [pc, #416]	; (80019ec <BasetoUpTaskFunction+0x220>)
 800184a:	463b      	mov	r3, r7
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe ff67 	bl	8000720 <CaptureUpData>
 8001852:	4625      	mov	r5, r4
 8001854:	463c      	mov	r4, r7
 8001856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001862:	e885 0003 	stmia.w	r5, {r0, r1}
					xSemaphoreGive(DownIOHandle);
 8001866:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <BasetoUpTaskFunction+0x224>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	f009 fa70 	bl	800ad54 <xQueueGenericSend>
 8001874:	e082      	b.n	800197c <BasetoUpTaskFunction+0x1b0>
		}
		else //发送主控仓数据
		{
			//汇�?�本仓传感器数据
			//仓位数据
			BasetoUpData.CabinNum = 0;
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <BasetoUpTaskFunction+0x220>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
			//漏水�?�?
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6) << 2;
 800187c:	2140      	movs	r1, #64	; 0x40
 800187e:	485e      	ldr	r0, [pc, #376]	; (80019f8 <BasetoUpTaskFunction+0x22c>)
 8001880:	f004 fa50 	bl	8005d24 <HAL_GPIO_ReadPin>
 8001884:	4603      	mov	r3, r0
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <BasetoUpTaskFunction+0x220>)
 800188c:	705a      	strb	r2, [r3, #1]
			//九轴数据
			if (xSemaphoreTake(WT931IOHandle,
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <BasetoUpTaskFunction+0x230>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 31ff 	mov.w	r1, #4294967295
 8001896:	4618      	mov	r0, r3
 8001898:	f009 fbe8 	bl	800b06c <xQueueSemaphoreTake>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d136      	bne.n	8001910 <BasetoUpTaskFunction+0x144>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 80018a2:	4b57      	ldr	r3, [pc, #348]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018a4:	881a      	ldrh	r2, [r3, #0]
 80018a6:	4b51      	ldr	r3, [pc, #324]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018a8:	815a      	strh	r2, [r3, #10]
				BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 80018aa:	4b55      	ldr	r3, [pc, #340]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018ac:	885a      	ldrh	r2, [r3, #2]
 80018ae:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018b0:	819a      	strh	r2, [r3, #12]
				BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 80018b2:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018b4:	889a      	ldrh	r2, [r3, #4]
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018b8:	81da      	strh	r2, [r3, #14]
				BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018bc:	88da      	ldrh	r2, [r3, #6]
 80018be:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018c0:	821a      	strh	r2, [r3, #16]
				BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 80018c2:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018c4:	891a      	ldrh	r2, [r3, #8]
 80018c6:	4b49      	ldr	r3, [pc, #292]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018c8:	825a      	strh	r2, [r3, #18]
				BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 80018ca:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018cc:	895a      	ldrh	r2, [r3, #10]
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018d0:	829a      	strh	r2, [r3, #20]
				BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 80018d2:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018d4:	899a      	ldrh	r2, [r3, #12]
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018d8:	82da      	strh	r2, [r3, #22]
				BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018dc:	89da      	ldrh	r2, [r3, #14]
 80018de:	4b43      	ldr	r3, [pc, #268]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018e0:	831a      	strh	r2, [r3, #24]
				BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018e4:	8a1a      	ldrh	r2, [r3, #16]
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018e8:	835a      	strh	r2, [r3, #26]
				BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018ec:	8a5a      	ldrh	r2, [r3, #18]
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018f0:	839a      	strh	r2, [r3, #28]
				BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018f4:	8a9a      	ldrh	r2, [r3, #20]
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80018f8:	83da      	strh	r2, [r3, #30]
				BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <BasetoUpTaskFunction+0x234>)
 80018fc:	8ada      	ldrh	r2, [r3, #22]
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <BasetoUpTaskFunction+0x220>)
 8001900:	841a      	strh	r2, [r3, #32]
				xSemaphoreGive(WT931IOHandle);
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <BasetoUpTaskFunction+0x230>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	f009 fa22 	bl	800ad54 <xQueueGenericSend>
			}
			//温湿度大气压数据
			if (xSemaphoreTake(GY39IOHandle,
 8001910:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <BasetoUpTaskFunction+0x238>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	4618      	mov	r0, r3
 800191a:	f009 fba7 	bl	800b06c <xQueueSemaphoreTake>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d112      	bne.n	800194a <BasetoUpTaskFunction+0x17e>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.CabinBaro = GY39SensorData.Baro;
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <BasetoUpTaskFunction+0x23c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a30      	ldr	r2, [pc, #192]	; (80019ec <BasetoUpTaskFunction+0x220>)
 800192a:	6053      	str	r3, [r2, #4]
				BasetoUpData.CabinHum = GY39SensorData.Hum;
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <BasetoUpTaskFunction+0x23c>)
 800192e:	891a      	ldrh	r2, [r3, #8]
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <BasetoUpTaskFunction+0x220>)
 8001932:	811a      	strh	r2, [r3, #8]
				BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <BasetoUpTaskFunction+0x23c>)
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <BasetoUpTaskFunction+0x220>)
 800193a:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(GY39IOHandle);
 800193c:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <BasetoUpTaskFunction+0x238>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	f009 fa05 	bl	800ad54 <xQueueGenericSend>
			}
			//水深水温数据
			if (xSemaphoreTake(DeepIOHandle,
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <BasetoUpTaskFunction+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f04f 31ff 	mov.w	r1, #4294967295
 8001952:	4618      	mov	r0, r3
 8001954:	f009 fb8a 	bl	800b06c <xQueueSemaphoreTake>
 8001958:	4603      	mov	r3, r0
 800195a:	2b01      	cmp	r3, #1
 800195c:	d10e      	bne.n	800197c <BasetoUpTaskFunction+0x1b0>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <BasetoUpTaskFunction+0x244>)
 8001960:	885a      	ldrh	r2, [r3, #2]
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <BasetoUpTaskFunction+0x220>)
 8001964:	849a      	strh	r2, [r3, #36]	; 0x24
				BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <BasetoUpTaskFunction+0x244>)
 8001968:	881a      	ldrh	r2, [r3, #0]
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <BasetoUpTaskFunction+0x220>)
 800196c:	845a      	strh	r2, [r3, #34]	; 0x22
				xSemaphoreGive(DeepIOHandle);
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <BasetoUpTaskFunction+0x240>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	f009 f9ec 	bl	800ad54 <xQueueGenericSend>
			}
		}

		//轮换要发送的仓位数据
		SensorCarbin = !SensorCarbin;
 800197c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//上传数据
		if (xSemaphoreTake(UpSideFinishHandle,portMAX_DELAY) == pdTRUE)
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <BasetoUpTaskFunction+0x248>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f04f 31ff 	mov.w	r1, #4294967295
 8001996:	4618      	mov	r0, r3
 8001998:	f009 fb68 	bl	800b06c <xQueueSemaphoreTake>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d11f      	bne.n	80019e2 <BasetoUpTaskFunction+0x216>
		{
			if (xSemaphoreTake(UpIOHandle,portMAX_DELAY) == pdTRUE)
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <BasetoUpTaskFunction+0x24c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f04f 31ff 	mov.w	r1, #4294967295
 80019aa:	4618      	mov	r0, r3
 80019ac:	f009 fb5e 	bl	800b06c <xQueueSemaphoreTake>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d115      	bne.n	80019e2 <BasetoUpTaskFunction+0x216>
			{
				BasetoUpData = CaptureUpData();
 80019b6:	4c0d      	ldr	r4, [pc, #52]	; (80019ec <BasetoUpTaskFunction+0x220>)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe feb0 	bl	8000720 <CaptureUpData>
 80019c0:	4625      	mov	r5, r4
 80019c2:	463c      	mov	r4, r7
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019d0:	e885 0003 	stmia.w	r5, {r0, r1}
				xSemaphoreGive(UpIOHandle);
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <BasetoUpTaskFunction+0x24c>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	f009 f9b9 	bl	800ad54 <xQueueGenericSend>
			}
		}

		HAL_IWDG_Refresh(&hiwdg1);
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <BasetoUpTaskFunction+0x250>)
 80019e4:	f004 fa1e 	bl	8005e24 <HAL_IWDG_Refresh>
		if (SensorCarbin) //发送推进器控制仓数据
 80019e8:	e714      	b.n	8001814 <BasetoUpTaskFunction+0x48>
 80019ea:	bf00      	nop
 80019ec:	200042e0 	.word	0x200042e0
 80019f0:	2000474c 	.word	0x2000474c
 80019f4:	20004620 	.word	0x20004620
 80019f8:	58021000 	.word	0x58021000
 80019fc:	20004398 	.word	0x20004398
 8001a00:	20004308 	.word	0x20004308
 8001a04:	20004594 	.word	0x20004594
 8001a08:	20004598 	.word	0x20004598
 8001a0c:	2000489c 	.word	0x2000489c
 8001a10:	200046b4 	.word	0x200046b4
 8001a14:	20004864 	.word	0x20004864
 8001a18:	200042dc 	.word	0x200042dc
 8001a1c:	200041bc 	.word	0x200041bc

08001a20 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001a32:	f001 f875 	bl	8002b20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40001000 	.word	0x40001000

08001a44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_MspInit+0x38>)
 8001a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_MspInit+0x38>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_MspInit+0x38>)
 8001a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	210f      	movs	r1, #15
 8001a78:	f06f 0001 	mvn.w	r0, #1
 8001a7c:	f001 f934 	bl	8002ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58024400 	.word	0x58024400

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b092      	sub	sp, #72	; 0x48
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a95      	ldr	r2, [pc, #596]	; (8001d00 <HAL_UART_MspInit+0x274>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f040 8091 	bne.w	8001bd2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ab0:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001ab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab6:	4a93      	ldr	r2, [pc, #588]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001abc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ac0:	4b90      	ldr	r3, [pc, #576]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	4a8b      	ldr	r2, [pc, #556]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aec:	2303      	movs	r3, #3
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001afc:	2308      	movs	r3, #8
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b04:	4619      	mov	r1, r3
 8001b06:	4880      	ldr	r0, [pc, #512]	; (8001d08 <HAL_UART_MspInit+0x27c>)
 8001b08:	f003 ff5c 	bl	80059c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream4;
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b0e:	4a80      	ldr	r2, [pc, #512]	; (8001d10 <HAL_UART_MspInit+0x284>)
 8001b10:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b12:	4b7e      	ldr	r3, [pc, #504]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b14:	223f      	movs	r2, #63	; 0x3f
 8001b16:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b18:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1e:	4b7b      	ldr	r3, [pc, #492]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b24:	4b79      	ldr	r3, [pc, #484]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2c:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b38:	4b74      	ldr	r3, [pc, #464]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b44:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b4a:	4870      	ldr	r0, [pc, #448]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b4c:	f001 f8f4 	bl	8002d38 <HAL_DMA_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b56:	f7ff ff75 	bl	8001a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a6b      	ldr	r2, [pc, #428]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b5e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b60:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <HAL_UART_MspInit+0x280>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream5;
 8001b66:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b68:	4a6b      	ldr	r2, [pc, #428]	; (8001d18 <HAL_UART_MspInit+0x28c>)
 8001b6a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b6c:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b72:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b74:	2240      	movs	r2, #64	; 0x40
 8001b76:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b78:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b84:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001b92:	4b60      	ldr	r3, [pc, #384]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b9e:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001ba4:	485b      	ldr	r0, [pc, #364]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001ba6:	f001 f8c7 	bl	8002d38 <HAL_DMA_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001bb0:	f7ff ff48 	bl	8001a44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001bb8:	679a      	str	r2, [r3, #120]	; 0x78
 8001bba:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_UART_MspInit+0x288>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	2034      	movs	r0, #52	; 0x34
 8001bc6:	f001 f88f 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bca:	2034      	movs	r0, #52	; 0x34
 8001bcc:	f001 f8a6 	bl	8002d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bd0:	e263      	b.n	800209a <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==UART8)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_UART_MspInit+0x290>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f040 80ab 	bne.w	8001d34 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001be4:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bee:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bfc:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_UART_MspInit+0x278>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c32:	4619      	mov	r1, r3
 8001c34:	483a      	ldr	r0, [pc, #232]	; (8001d20 <HAL_UART_MspInit+0x294>)
 8001c36:	f003 fec5 	bl	80059c4 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c3c:	4a3a      	ldr	r2, [pc, #232]	; (8001d28 <HAL_UART_MspInit+0x29c>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c42:	2251      	movs	r2, #81	; 0x51
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001c78:	482a      	ldr	r0, [pc, #168]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c7a:	f001 f85d 	bl	8002d38 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001c84:	f7ff fede 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c8e:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <HAL_UART_MspInit+0x298>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream7;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001c96:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <HAL_UART_MspInit+0x2a4>)
 8001c98:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001c9c:	2252      	movs	r2, #82	; 0x52
 8001c9e:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb2:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001cd2:	4816      	ldr	r0, [pc, #88]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cd4:	f001 f830 	bl	8002d38 <HAL_DMA_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8001cde:	f7ff feb1 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001ce6:	679a      	str	r2, [r3, #120]	; 0x78
 8001ce8:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x2a0>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2053      	movs	r0, #83	; 0x53
 8001cf4:	f000 fff8 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001cf8:	2053      	movs	r0, #83	; 0x53
 8001cfa:	f001 f80f 	bl	8002d1c <HAL_NVIC_EnableIRQ>
}
 8001cfe:	e1cc      	b.n	800209a <HAL_UART_MspInit+0x60e>
 8001d00:	40004c00 	.word	0x40004c00
 8001d04:	58024400 	.word	0x58024400
 8001d08:	58020000 	.word	0x58020000
 8001d0c:	200040cc 	.word	0x200040cc
 8001d10:	40020070 	.word	0x40020070
 8001d14:	200047ec 	.word	0x200047ec
 8001d18:	40020088 	.word	0x40020088
 8001d1c:	40007c00 	.word	0x40007c00
 8001d20:	58021000 	.word	0x58021000
 8001d24:	2000448c 	.word	0x2000448c
 8001d28:	400200a0 	.word	0x400200a0
 8001d2c:	200045a4 	.word	0x200045a4
 8001d30:	400200b8 	.word	0x400200b8
  else if(huart->Instance==USART1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a96      	ldr	r2, [pc, #600]	; (8001f94 <HAL_UART_MspInit+0x508>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	f040 8092 	bne.w	8001e64 <HAL_UART_MspInit+0x3d8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d40:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d46:	4a94      	ldr	r2, [pc, #592]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d50:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d64:	4a8c      	ldr	r2, [pc, #560]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6e:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d96:	4619      	mov	r1, r3
 8001d98:	4880      	ldr	r0, [pc, #512]	; (8001f9c <HAL_UART_MspInit+0x510>)
 8001d9a:	f003 fe13 	bl	80059c4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001da0:	4a80      	ldr	r2, [pc, #512]	; (8001fa4 <HAL_UART_MspInit+0x518>)
 8001da2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001da6:	2229      	movs	r2, #41	; 0x29
 8001da8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db0:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dbe:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc4:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd0:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ddc:	4870      	ldr	r0, [pc, #448]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001dde:	f000 ffab 	bl	8002d38 <HAL_DMA_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_MspInit+0x360>
      Error_Handler();
 8001de8:	f7ff fe2c 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a6c      	ldr	r2, [pc, #432]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001df0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001df2:	4a6b      	ldr	r2, [pc, #428]	; (8001fa0 <HAL_UART_MspInit+0x514>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001df8:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001dfa:	4a6c      	ldr	r2, [pc, #432]	; (8001fac <HAL_UART_MspInit+0x520>)
 8001dfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e00:	222a      	movs	r2, #42	; 0x2a
 8001e02:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0a:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e10:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e18:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e24:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e30:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e36:	485c      	ldr	r0, [pc, #368]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e38:	f000 ff7e 	bl	8002d38 <HAL_DMA_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8001e42:	f7ff fdff 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e4a:	679a      	str	r2, [r3, #120]	; 0x78
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_UART_MspInit+0x51c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2105      	movs	r1, #5
 8001e56:	2025      	movs	r0, #37	; 0x25
 8001e58:	f000 ff46 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e5c:	2025      	movs	r0, #37	; 0x25
 8001e5e:	f000 ff5d 	bl	8002d1c <HAL_NVIC_EnableIRQ>
}
 8001e62:	e11a      	b.n	800209a <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==USART2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_UART_MspInit+0x524>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	f040 80ac 	bne.w	8001fc8 <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e70:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e76:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e80:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_UART_MspInit+0x50c>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eac:	230c      	movs	r3, #12
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	483b      	ldr	r0, [pc, #236]	; (8001fb4 <HAL_UART_MspInit+0x528>)
 8001ec8:	f003 fd7c 	bl	80059c4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001ece:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_UART_MspInit+0x530>)
 8001ed0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001ed4:	222b      	movs	r2, #43	; 0x2b
 8001ed6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed8:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ede:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f0a:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001f0c:	f000 ff14 	bl	8002d38 <HAL_DMA_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_MspInit+0x48e>
      Error_Handler();
 8001f16:	f7ff fd95 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001f1e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_UART_MspInit+0x52c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream0;
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_UART_MspInit+0x538>)
 8001f2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f2e:	222c      	movs	r2, #44	; 0x2c
 8001f30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f34:	2240      	movs	r2, #64	; 0x40
 8001f36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f66:	f000 fee7 	bl	8002d38 <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0x4e8>
      Error_Handler();
 8001f70:	f7ff fd68 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f78:	679a      	str	r2, [r3, #120]	; 0x78
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <HAL_UART_MspInit+0x534>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2105      	movs	r1, #5
 8001f84:	2026      	movs	r0, #38	; 0x26
 8001f86:	f000 feaf 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f8a:	2026      	movs	r0, #38	; 0x26
 8001f8c:	f000 fec6 	bl	8002d1c <HAL_NVIC_EnableIRQ>
}
 8001f90:	e083      	b.n	800209a <HAL_UART_MspInit+0x60e>
 8001f92:	bf00      	nop
 8001f94:	40011000 	.word	0x40011000
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	58020400 	.word	0x58020400
 8001fa0:	2000439c 	.word	0x2000439c
 8001fa4:	40020010 	.word	0x40020010
 8001fa8:	20004320 	.word	0x20004320
 8001fac:	40020028 	.word	0x40020028
 8001fb0:	40004400 	.word	0x40004400
 8001fb4:	58020000 	.word	0x58020000
 8001fb8:	20004144 	.word	0x20004144
 8001fbc:	40020040 	.word	0x40020040
 8001fc0:	20004414 	.word	0x20004414
 8001fc4:	40020410 	.word	0x40020410
  else if(huart->Instance==USART3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <HAL_UART_MspInit+0x618>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d163      	bne.n	800209a <HAL_UART_MspInit+0x60e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <HAL_UART_MspInit+0x61c>)
 8001fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <HAL_UART_MspInit+0x61c>)
 8001fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fe2:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_UART_MspInit+0x61c>)
 8001fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_UART_MspInit+0x61c>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <HAL_UART_MspInit+0x61c>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_UART_MspInit+0x61c>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800200e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002020:	2307      	movs	r3, #7
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002028:	4619      	mov	r1, r3
 800202a:	4820      	ldr	r0, [pc, #128]	; (80020ac <HAL_UART_MspInit+0x620>)
 800202c:	f003 fcca 	bl	80059c4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002032:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <HAL_UART_MspInit+0x628>)
 8002034:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002038:	222d      	movs	r2, #45	; 0x2d
 800203a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_UART_MspInit+0x624>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_UART_MspInit+0x624>)
 800204a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_UART_MspInit+0x624>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_UART_MspInit+0x624>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002070:	f000 fe62 	bl	8002d38 <HAL_DMA_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 800207a:	f7ff fce3 	bl	8001a44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002082:	67da      	str	r2, [r3, #124]	; 0x7c
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_UART_MspInit+0x624>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2105      	movs	r1, #5
 800208e:	2027      	movs	r0, #39	; 0x27
 8002090:	f000 fe2a 	bl	8002ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002094:	2027      	movs	r0, #39	; 0x27
 8002096:	f000 fe41 	bl	8002d1c <HAL_NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3748      	adds	r7, #72	; 0x48
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40004800 	.word	0x40004800
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58020400 	.word	0x58020400
 80020b0:	200041cc 	.word	0x200041cc
 80020b4:	40020058 	.word	0x40020058

080020b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b090      	sub	sp, #64	; 0x40
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	d827      	bhi.n	8002116 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80020c6:	2200      	movs	r2, #0
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	2036      	movs	r0, #54	; 0x36
 80020cc:	f000 fe0c 	bl	8002ce8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d0:	2036      	movs	r0, #54	; 0x36
 80020d2:	f000 fe23 	bl	8002d1c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80020d6:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_InitTick+0xc4>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020dc:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_InitTick+0xc8>)
 80020de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e2:	4a27      	ldr	r2, [pc, #156]	; (8002180 <HAL_InitTick+0xc8>)
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_InitTick+0xc8>)
 80020ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020fa:	f107 0210 	add.w	r2, r7, #16
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fe73 	bl	8006df0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <HAL_InitTick+0x6a>
 8002114:	e001      	b.n	800211a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e02b      	b.n	8002172 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800211a:	f004 fe3d 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 800211e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002120:	e004      	b.n	800212c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002122:	f004 fe39 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 8002126:	4603      	mov	r3, r0
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800212c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_InitTick+0xcc>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	3b01      	subs	r3, #1
 8002138:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_InitTick+0xd0>)
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_InitTick+0xd4>)
 800213e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_InitTick+0xd0>)
 8002142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002146:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_InitTick+0xd0>)
 800214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_InitTick+0xd0>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_InitTick+0xd0>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800215a:	480b      	ldr	r0, [pc, #44]	; (8002188 <HAL_InitTick+0xd0>)
 800215c:	f006 f9ec 	bl	8008538 <HAL_TIM_Base_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <HAL_InitTick+0xd0>)
 8002168:	f006 fa48 	bl	80085fc <HAL_TIM_Base_Start_IT>
 800216c:	4603      	mov	r3, r0
 800216e:	e000      	b.n	8002172 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	3740      	adds	r7, #64	; 0x40
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008
 8002180:	58024400 	.word	0x58024400
 8002184:	431bde83 	.word	0x431bde83
 8002188:	200048a0 	.word	0x200048a0
 800218c:	40001000 	.word	0x40001000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002194:	e7fe      	b.n	8002194 <NMI_Handler+0x4>

08002196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler+0x4>

080021a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <UsageFault_Handler+0x4>

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA1_Stream0_IRQHandler+0x10>)
 80021c2:	f002 f8e1 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000439c 	.word	0x2000439c

080021d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <DMA1_Stream1_IRQHandler+0x10>)
 80021d6:	f002 f8d7 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20004320 	.word	0x20004320

080021e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA1_Stream2_IRQHandler+0x10>)
 80021ea:	f002 f8cd 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20004144 	.word	0x20004144

080021f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA1_Stream3_IRQHandler+0x10>)
 80021fe:	f002 f8c3 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200041cc 	.word	0x200041cc

0800220c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Stream4_IRQHandler+0x10>)
 8002212:	f002 f8b9 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200040cc 	.word	0x200040cc

08002220 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <DMA1_Stream5_IRQHandler+0x10>)
 8002226:	f002 f8af 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200047ec 	.word	0x200047ec

08002234 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA1_Stream6_IRQHandler+0x10>)
 800223a:	f002 f8a5 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000448c 	.word	0x2000448c

08002248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <USART1_IRQHandler+0x10c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b10      	cmp	r3, #16
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d06b      	beq.n	8002346 <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <USART1_IRQHandler+0x10c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2210      	movs	r2, #16
 8002274:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002276:	4837      	ldr	r0, [pc, #220]	; (8002354 <USART1_IRQHandler+0x10c>)
 8002278:	f006 fd46 	bl	8008d08 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <USART1_IRQHandler+0x110>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a36      	ldr	r2, [pc, #216]	; (800235c <USART1_IRQHandler+0x114>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04a      	beq.n	800231c <USART1_IRQHandler+0xd4>
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <USART1_IRQHandler+0x110>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <USART1_IRQHandler+0x118>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d045      	beq.n	800231c <USART1_IRQHandler+0xd4>
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <USART1_IRQHandler+0x110>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a33      	ldr	r2, [pc, #204]	; (8002364 <USART1_IRQHandler+0x11c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d040      	beq.n	800231c <USART1_IRQHandler+0xd4>
 800229a:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <USART1_IRQHandler+0x110>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a32      	ldr	r2, [pc, #200]	; (8002368 <USART1_IRQHandler+0x120>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d03b      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <USART1_IRQHandler+0x110>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a30      	ldr	r2, [pc, #192]	; (800236c <USART1_IRQHandler+0x124>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d036      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <USART1_IRQHandler+0x110>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <USART1_IRQHandler+0x128>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d031      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <USART1_IRQHandler+0x110>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <USART1_IRQHandler+0x12c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02c      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <USART1_IRQHandler+0x110>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <USART1_IRQHandler+0x130>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d027      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <USART1_IRQHandler+0x110>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <USART1_IRQHandler+0x134>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <USART1_IRQHandler+0x110>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <USART1_IRQHandler+0x138>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d01d      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <USART1_IRQHandler+0x110>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <USART1_IRQHandler+0x13c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <USART1_IRQHandler+0x110>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <USART1_IRQHandler+0x140>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <USART1_IRQHandler+0x110>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a24      	ldr	r2, [pc, #144]	; (800238c <USART1_IRQHandler+0x144>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <USART1_IRQHandler+0xd4>
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <USART1_IRQHandler+0x110>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <USART1_IRQHandler+0x148>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <USART1_IRQHandler+0xd4>
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <USART1_IRQHandler+0x110>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a21      	ldr	r2, [pc, #132]	; (8002394 <USART1_IRQHandler+0x14c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <USART1_IRQHandler+0xd4>
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <USART1_IRQHandler+0x110>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a20      	ldr	r2, [pc, #128]	; (8002398 <USART1_IRQHandler+0x150>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <USART1_IRQHandler+0xdc>
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <USART1_IRQHandler+0x110>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	e002      	b.n	800232a <USART1_IRQHandler+0xe2>
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <USART1_IRQHandler+0x110>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <USART1_IRQHandler+0x10c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <USART1_IRQHandler+0x10c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0210 	bic.w	r2, r2, #16
 8002338:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UpSideFinishHandle, pdFALSE);
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <USART1_IRQHandler+0x154>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f008 fe05 	bl	800af50 <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <USART1_IRQHandler+0x10c>)
 8002348:	f006 fd4e 	bl	8008de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20004504 	.word	0x20004504
 8002358:	2000439c 	.word	0x2000439c
 800235c:	40020010 	.word	0x40020010
 8002360:	40020028 	.word	0x40020028
 8002364:	40020040 	.word	0x40020040
 8002368:	40020058 	.word	0x40020058
 800236c:	40020070 	.word	0x40020070
 8002370:	40020088 	.word	0x40020088
 8002374:	400200a0 	.word	0x400200a0
 8002378:	400200b8 	.word	0x400200b8
 800237c:	40020410 	.word	0x40020410
 8002380:	40020428 	.word	0x40020428
 8002384:	40020440 	.word	0x40020440
 8002388:	40020458 	.word	0x40020458
 800238c:	40020470 	.word	0x40020470
 8002390:	40020488 	.word	0x40020488
 8002394:	400204a0 	.word	0x400204a0
 8002398:	400204b8 	.word	0x400204b8
 800239c:	20004864 	.word	0x20004864

080023a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <USART2_IRQHandler+0x10c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06b      	beq.n	800249e <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <USART2_IRQHandler+0x10c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2210      	movs	r2, #16
 80023cc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 80023ce:	4837      	ldr	r0, [pc, #220]	; (80024ac <USART2_IRQHandler+0x10c>)
 80023d0:	f006 fc9a 	bl	8008d08 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <USART2_IRQHandler+0x110>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <USART2_IRQHandler+0x114>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d04a      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <USART2_IRQHandler+0x110>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <USART2_IRQHandler+0x118>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d045      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <USART2_IRQHandler+0x110>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a33      	ldr	r2, [pc, #204]	; (80024bc <USART2_IRQHandler+0x11c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d040      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 80023f2:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <USART2_IRQHandler+0x110>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <USART2_IRQHandler+0x120>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d03b      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <USART2_IRQHandler+0x110>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <USART2_IRQHandler+0x124>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d036      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <USART2_IRQHandler+0x128>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d031      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <USART2_IRQHandler+0x12c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02c      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 800241a:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <USART2_IRQHandler+0x110>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	; (80024d0 <USART2_IRQHandler+0x130>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d027      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <USART2_IRQHandler+0x134>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <USART2_IRQHandler+0x138>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d01d      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <USART2_IRQHandler+0x110>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a27      	ldr	r2, [pc, #156]	; (80024dc <USART2_IRQHandler+0x13c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <USART2_IRQHandler+0x140>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <USART2_IRQHandler+0x110>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <USART2_IRQHandler+0x144>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <USART2_IRQHandler+0x148>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <USART2_IRQHandler+0x14c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <USART2_IRQHandler+0xd4>
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <USART2_IRQHandler+0x110>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <USART2_IRQHandler+0x150>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <USART2_IRQHandler+0xdc>
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <USART2_IRQHandler+0x110>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	e002      	b.n	8002482 <USART2_IRQHandler+0xe2>
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <USART2_IRQHandler+0x110>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <USART2_IRQHandler+0x10c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <USART2_IRQHandler+0x10c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0210 	bic.w	r2, r2, #16
 8002490:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39FinishHandle, pdFALSE);
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <USART2_IRQHandler+0x154>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f008 fd59 	bl	800af50 <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800249e:	4803      	ldr	r0, [pc, #12]	; (80024ac <USART2_IRQHandler+0x10c>)
 80024a0:	f006 fca2 	bl	8008de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20004758 	.word	0x20004758
 80024b0:	20004144 	.word	0x20004144
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
 80024f4:	2000461c 	.word	0x2000461c

080024f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8002502:	4b40      	ldr	r3, [pc, #256]	; (8002604 <USART3_IRQHandler+0x10c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b10      	cmp	r3, #16
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d06b      	beq.n	80025f6 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <USART3_IRQHandler+0x10c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2210      	movs	r2, #16
 8002524:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8002526:	4837      	ldr	r0, [pc, #220]	; (8002604 <USART3_IRQHandler+0x10c>)
 8002528:	f006 fbee 	bl	8008d08 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <USART3_IRQHandler+0x110>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a36      	ldr	r2, [pc, #216]	; (800260c <USART3_IRQHandler+0x114>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04a      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002536:	4b34      	ldr	r3, [pc, #208]	; (8002608 <USART3_IRQHandler+0x110>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a35      	ldr	r2, [pc, #212]	; (8002610 <USART3_IRQHandler+0x118>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d045      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <USART3_IRQHandler+0x110>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a33      	ldr	r2, [pc, #204]	; (8002614 <USART3_IRQHandler+0x11c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d040      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <USART3_IRQHandler+0x110>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a32      	ldr	r2, [pc, #200]	; (8002618 <USART3_IRQHandler+0x120>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d03b      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <USART3_IRQHandler+0x110>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a30      	ldr	r2, [pc, #192]	; (800261c <USART3_IRQHandler+0x124>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d036      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <USART3_IRQHandler+0x110>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <USART3_IRQHandler+0x128>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d031      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <USART3_IRQHandler+0x110>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2d      	ldr	r2, [pc, #180]	; (8002624 <USART3_IRQHandler+0x12c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02c      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <USART3_IRQHandler+0x110>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <USART3_IRQHandler+0x130>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d027      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <USART3_IRQHandler+0x110>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2a      	ldr	r2, [pc, #168]	; (800262c <USART3_IRQHandler+0x134>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <USART3_IRQHandler+0x110>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <USART3_IRQHandler+0x138>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01d      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <USART3_IRQHandler+0x110>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <USART3_IRQHandler+0x13c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <USART3_IRQHandler+0x110>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a26      	ldr	r2, [pc, #152]	; (8002638 <USART3_IRQHandler+0x140>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <USART3_IRQHandler+0x110>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a24      	ldr	r2, [pc, #144]	; (800263c <USART3_IRQHandler+0x144>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <USART3_IRQHandler+0x110>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a23      	ldr	r2, [pc, #140]	; (8002640 <USART3_IRQHandler+0x148>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <USART3_IRQHandler+0x110>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <USART3_IRQHandler+0x14c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <USART3_IRQHandler+0xd4>
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <USART3_IRQHandler+0x110>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a20      	ldr	r2, [pc, #128]	; (8002648 <USART3_IRQHandler+0x150>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <USART3_IRQHandler+0xdc>
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <USART3_IRQHandler+0x110>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	e002      	b.n	80025da <USART3_IRQHandler+0xe2>
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <USART3_IRQHandler+0x110>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <USART3_IRQHandler+0x10c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <USART3_IRQHandler+0x10c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0210 	bic.w	r2, r2, #16
 80025e8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931FinishHandle, pdFALSE);
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <USART3_IRQHandler+0x154>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f008 fcad 	bl	800af50 <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025f6:	4803      	ldr	r0, [pc, #12]	; (8002604 <USART3_IRQHandler+0x10c>)
 80025f8:	f006 fbf6 	bl	8008de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20004244 	.word	0x20004244
 8002608:	200041cc 	.word	0x200041cc
 800260c:	40020010 	.word	0x40020010
 8002610:	40020028 	.word	0x40020028
 8002614:	40020040 	.word	0x40020040
 8002618:	40020058 	.word	0x40020058
 800261c:	40020070 	.word	0x40020070
 8002620:	40020088 	.word	0x40020088
 8002624:	400200a0 	.word	0x400200a0
 8002628:	400200b8 	.word	0x400200b8
 800262c:	40020410 	.word	0x40020410
 8002630:	40020428 	.word	0x40020428
 8002634:	40020440 	.word	0x40020440
 8002638:	40020458 	.word	0x40020458
 800263c:	40020470 	.word	0x40020470
 8002640:	40020488 	.word	0x40020488
 8002644:	400204a0 	.word	0x400204a0
 8002648:	400204b8 	.word	0x400204b8
 800264c:	200042d8 	.word	0x200042d8

08002650 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <DMA1_Stream7_IRQHandler+0x10>)
 8002656:	f001 fe97 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200045a4 	.word	0x200045a4

08002664 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800266e:	4b40      	ldr	r3, [pc, #256]	; (8002770 <UART4_IRQHandler+0x10c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b10      	cmp	r3, #16
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06b      	beq.n	8002762 <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <UART4_IRQHandler+0x10c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2210      	movs	r2, #16
 8002690:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8002692:	4837      	ldr	r0, [pc, #220]	; (8002770 <UART4_IRQHandler+0x10c>)
 8002694:	f006 fb38 	bl	8008d08 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <UART4_IRQHandler+0x110>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a36      	ldr	r2, [pc, #216]	; (8002778 <UART4_IRQHandler+0x114>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d04a      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026a2:	4b34      	ldr	r3, [pc, #208]	; (8002774 <UART4_IRQHandler+0x110>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a35      	ldr	r2, [pc, #212]	; (800277c <UART4_IRQHandler+0x118>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d045      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <UART4_IRQHandler+0x110>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a33      	ldr	r2, [pc, #204]	; (8002780 <UART4_IRQHandler+0x11c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d040      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <UART4_IRQHandler+0x110>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a32      	ldr	r2, [pc, #200]	; (8002784 <UART4_IRQHandler+0x120>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d03b      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <UART4_IRQHandler+0x110>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a30      	ldr	r2, [pc, #192]	; (8002788 <UART4_IRQHandler+0x124>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d036      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <UART4_IRQHandler+0x110>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2f      	ldr	r2, [pc, #188]	; (800278c <UART4_IRQHandler+0x128>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d031      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <UART4_IRQHandler+0x110>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <UART4_IRQHandler+0x12c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02c      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <UART4_IRQHandler+0x110>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <UART4_IRQHandler+0x130>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d027      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <UART4_IRQHandler+0x110>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2a      	ldr	r2, [pc, #168]	; (8002798 <UART4_IRQHandler+0x134>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d022      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <UART4_IRQHandler+0x110>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <UART4_IRQHandler+0x138>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d01d      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <UART4_IRQHandler+0x110>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <UART4_IRQHandler+0x13c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d018      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <UART4_IRQHandler+0x110>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <UART4_IRQHandler+0x140>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <UART4_IRQHandler+0x110>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <UART4_IRQHandler+0x144>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00e      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <UART4_IRQHandler+0x110>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a23      	ldr	r2, [pc, #140]	; (80027ac <UART4_IRQHandler+0x148>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d009      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <UART4_IRQHandler+0x110>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <UART4_IRQHandler+0x14c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d004      	beq.n	8002738 <UART4_IRQHandler+0xd4>
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <UART4_IRQHandler+0x110>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <UART4_IRQHandler+0x150>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d103      	bne.n	8002740 <UART4_IRQHandler+0xdc>
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <UART4_IRQHandler+0x110>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	e002      	b.n	8002746 <UART4_IRQHandler+0xe2>
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <UART4_IRQHandler+0x110>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <UART4_IRQHandler+0x10c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <UART4_IRQHandler+0x10c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0210 	bic.w	r2, r2, #16
 8002754:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepFinishHandle, pdFALSE);
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <UART4_IRQHandler+0x154>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f008 fbf7 	bl	800af50 <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002762:	4803      	ldr	r0, [pc, #12]	; (8002770 <UART4_IRQHandler+0x10c>)
 8002764:	f006 fb40 	bl	8008de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200046b8 	.word	0x200046b8
 8002774:	200040cc 	.word	0x200040cc
 8002778:	40020010 	.word	0x40020010
 800277c:	40020028 	.word	0x40020028
 8002780:	40020040 	.word	0x40020040
 8002784:	40020058 	.word	0x40020058
 8002788:	40020070 	.word	0x40020070
 800278c:	40020088 	.word	0x40020088
 8002790:	400200a0 	.word	0x400200a0
 8002794:	400200b8 	.word	0x400200b8
 8002798:	40020410 	.word	0x40020410
 800279c:	40020428 	.word	0x40020428
 80027a0:	40020440 	.word	0x40020440
 80027a4:	40020458 	.word	0x40020458
 80027a8:	40020470 	.word	0x40020470
 80027ac:	40020488 	.word	0x40020488
 80027b0:	400204a0 	.word	0x400204a0
 80027b4:	400204b8 	.word	0x400204b8
 80027b8:	20004754 	.word	0x20004754

080027bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <TIM6_DAC_IRQHandler+0x10>)
 80027c2:	f005 ff8b 	bl	80086dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200048a0 	.word	0x200048a0

080027d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <DMA2_Stream0_IRQHandler+0x10>)
 80027d6:	f001 fdd7 	bl	8004388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20004414 	.word	0x20004414

080027e4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 80027ee:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <UART8_IRQHandler+0x10c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06b      	beq.n	80028e2 <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <UART8_IRQHandler+0x10c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2210      	movs	r2, #16
 8002810:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8002812:	4837      	ldr	r0, [pc, #220]	; (80028f0 <UART8_IRQHandler+0x10c>)
 8002814:	f006 fa78 	bl	8008d08 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <UART8_IRQHandler+0x110>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a36      	ldr	r2, [pc, #216]	; (80028f8 <UART8_IRQHandler+0x114>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04a      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a35      	ldr	r2, [pc, #212]	; (80028fc <UART8_IRQHandler+0x118>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d045      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <UART8_IRQHandler+0x110>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a33      	ldr	r2, [pc, #204]	; (8002900 <UART8_IRQHandler+0x11c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d040      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a32      	ldr	r2, [pc, #200]	; (8002904 <UART8_IRQHandler+0x120>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d03b      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002840:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a30      	ldr	r2, [pc, #192]	; (8002908 <UART8_IRQHandler+0x124>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d036      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <UART8_IRQHandler+0x110>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2f      	ldr	r2, [pc, #188]	; (800290c <UART8_IRQHandler+0x128>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d031      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2d      	ldr	r2, [pc, #180]	; (8002910 <UART8_IRQHandler+0x12c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02c      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <UART8_IRQHandler+0x130>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d027      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <UART8_IRQHandler+0x110>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <UART8_IRQHandler+0x134>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a29      	ldr	r2, [pc, #164]	; (800291c <UART8_IRQHandler+0x138>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01d      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <UART8_IRQHandler+0x110>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <UART8_IRQHandler+0x13c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d018      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a26      	ldr	r2, [pc, #152]	; (8002924 <UART8_IRQHandler+0x140>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d013      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <UART8_IRQHandler+0x110>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a24      	ldr	r2, [pc, #144]	; (8002928 <UART8_IRQHandler+0x144>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <UART8_IRQHandler+0x110>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <UART8_IRQHandler+0x148>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d009      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <UART8_IRQHandler+0x110>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <UART8_IRQHandler+0x14c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <UART8_IRQHandler+0xd4>
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <UART8_IRQHandler+0x110>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <UART8_IRQHandler+0x150>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <UART8_IRQHandler+0xdc>
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <UART8_IRQHandler+0x110>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	e002      	b.n	80028c6 <UART8_IRQHandler+0xe2>
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <UART8_IRQHandler+0x110>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <UART8_IRQHandler+0x10c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <UART8_IRQHandler+0x10c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0210 	bic.w	r2, r2, #16
 80028d4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DownSideFinishHandle, pdFALSE);
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <UART8_IRQHandler+0x154>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f008 fb37 	bl	800af50 <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80028e2:	4803      	ldr	r0, [pc, #12]	; (80028f0 <UART8_IRQHandler+0x10c>)
 80028e4:	f006 fa80 	bl	8008de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20004624 	.word	0x20004624
 80028f4:	2000448c 	.word	0x2000448c
 80028f8:	40020010 	.word	0x40020010
 80028fc:	40020028 	.word	0x40020028
 8002900:	40020040 	.word	0x40020040
 8002904:	40020058 	.word	0x40020058
 8002908:	40020070 	.word	0x40020070
 800290c:	40020088 	.word	0x40020088
 8002910:	400200a0 	.word	0x400200a0
 8002914:	400200b8 	.word	0x400200b8
 8002918:	40020410 	.word	0x40020410
 800291c:	40020428 	.word	0x40020428
 8002920:	40020440 	.word	0x40020440
 8002924:	40020458 	.word	0x40020458
 8002928:	40020470 	.word	0x40020470
 800292c:	40020488 	.word	0x40020488
 8002930:	400204a0 	.word	0x400204a0
 8002934:	400204b8 	.word	0x400204b8
 8002938:	20004620 	.word	0x20004620

0800293c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <SystemInit+0xec>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	4a38      	ldr	r2, [pc, #224]	; (8002a28 <SystemInit+0xec>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <SystemInit+0xf0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	2b06      	cmp	r3, #6
 800295a:	d807      	bhi.n	800296c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800295c:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <SystemInit+0xf0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 030f 	bic.w	r3, r3, #15
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <SystemInit+0xf0>)
 8002966:	f043 0307 	orr.w	r3, r3, #7
 800296a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800296c:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <SystemInit+0xf4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <SystemInit+0xf4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <SystemInit+0xf4>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <SystemInit+0xf4>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	492b      	ldr	r1, [pc, #172]	; (8002a30 <SystemInit+0xf4>)
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <SystemInit+0xf8>)
 8002986:	4013      	ands	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <SystemInit+0xf0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <SystemInit+0xf0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 030f 	bic.w	r3, r3, #15
 800299e:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <SystemInit+0xf0>)
 80029a0:	f043 0307 	orr.w	r3, r3, #7
 80029a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <SystemInit+0xf4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <SystemInit+0xf4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <SystemInit+0xf4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <SystemInit+0xf4>)
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <SystemInit+0xfc>)
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <SystemInit+0xf4>)
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <SystemInit+0x100>)
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <SystemInit+0xf4>)
 80029c6:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <SystemInit+0x104>)
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <SystemInit+0xf4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <SystemInit+0xf4>)
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <SystemInit+0x104>)
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <SystemInit+0xf4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <SystemInit+0xf4>)
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <SystemInit+0x104>)
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <SystemInit+0xf4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <SystemInit+0xf4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <SystemInit+0xf4>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <SystemInit+0xf4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <SystemInit+0x108>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <SystemInit+0x10c>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a06:	d202      	bcs.n	8002a0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <SystemInit+0x110>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <SystemInit+0x114>)
 8002a10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a14:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <SystemInit+0xec>)
 8002a18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a1c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	52002000 	.word	0x52002000
 8002a30:	58024400 	.word	0x58024400
 8002a34:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a38:	02020200 	.word	0x02020200
 8002a3c:	01ff0000 	.word	0x01ff0000
 8002a40:	01010280 	.word	0x01010280
 8002a44:	5c001000 	.word	0x5c001000
 8002a48:	ffff0000 	.word	0xffff0000
 8002a4c:	51008108 	.word	0x51008108
 8002a50:	52004000 	.word	0x52004000

08002a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a58:	f7ff ff70 	bl	800293c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a5e:	490d      	ldr	r1, [pc, #52]	; (8002a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a64:	e002      	b.n	8002a6c <LoopCopyDataInit>

08002a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6a:	3304      	adds	r3, #4

08002a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a70:	d3f9      	bcc.n	8002a66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a78:	e001      	b.n	8002a7e <LoopFillZerobss>

08002a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a7c:	3204      	adds	r2, #4

08002a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a80:	d3fb      	bcc.n	8002a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a82:	f00a f923 	bl	800cccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a86:	f7fe f8f5 	bl	8000c74 <main>
  bx  lr
 8002a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002a98:	0800ce58 	.word	0x0800ce58
  ldr r2, =_sbss
 8002a9c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002aa0:	200048f0 	.word	0x200048f0

08002aa4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC3_IRQHandler>
	...

08002aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aae:	2003      	movs	r0, #3
 8002ab0:	f000 f90f 	bl	8002cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ab4:	f003 ffc6 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_Init+0x68>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	4913      	ldr	r1, [pc, #76]	; (8002b14 <HAL_Init+0x6c>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_Init+0x68>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_Init+0x6c>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <HAL_Init+0x70>)
 8002aea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aec:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_Init+0x74>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7ff fae0 	bl	80020b8 <HAL_InitTick>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e002      	b.n	8002b08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b02:	f7fe ffa5 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	58024400 	.word	0x58024400
 8002b14:	0800ce08 	.word	0x0800ce08
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	20000000 	.word	0x20000000

08002b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_IncTick+0x20>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_IncTick+0x24>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_IncTick+0x24>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	2000000c 	.word	0x2000000c
 8002b44:	200048ec 	.word	0x200048ec

08002b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	200048ec 	.word	0x200048ec

08002b60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_GetREVID+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0c1b      	lsrs	r3, r3, #16
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	5c001000 	.word	0x5c001000

08002b78 <__NVIC_SetPriorityGrouping>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	05fa0000 	.word	0x05fa0000

08002bc0 <__NVIC_GetPriorityGrouping>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <__NVIC_EnableIRQ+0x38>)
 8002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	; (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff4c 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf6:	f7ff ff63 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002cfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	6978      	ldr	r0, [r7, #20]
 8002d02:	f7ff ffb3 	bl	8002c6c <NVIC_EncodePriority>
 8002d06:	4602      	mov	r2, r0
 8002d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff82 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff56 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff ff02 	bl	8002b48 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e316      	b.n	800337e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_DMA_Init+0x1b8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_DMA_Init+0x1bc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a63      	ldr	r2, [pc, #396]	; (8002ef8 <HAL_DMA_Init+0x1c0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a62      	ldr	r2, [pc, #392]	; (8002efc <HAL_DMA_Init+0x1c4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <HAL_DMA_Init+0x1c8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a5f      	ldr	r2, [pc, #380]	; (8002f04 <HAL_DMA_Init+0x1cc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	; (8002f08 <HAL_DMA_Init+0x1d0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5c      	ldr	r2, [pc, #368]	; (8002f0c <HAL_DMA_Init+0x1d4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5a      	ldr	r2, [pc, #360]	; (8002f10 <HAL_DMA_Init+0x1d8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a59      	ldr	r2, [pc, #356]	; (8002f14 <HAL_DMA_Init+0x1dc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a57      	ldr	r2, [pc, #348]	; (8002f18 <HAL_DMA_Init+0x1e0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a56      	ldr	r2, [pc, #344]	; (8002f1c <HAL_DMA_Init+0x1e4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a54      	ldr	r2, [pc, #336]	; (8002f20 <HAL_DMA_Init+0x1e8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a53      	ldr	r2, [pc, #332]	; (8002f24 <HAL_DMA_Init+0x1ec>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <HAL_DMA_Init+0x1f0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_Init+0xb8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_DMA_Init+0x1f4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_DMA_Init+0xbc>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_DMA_Init+0xbe>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 813b 	beq.w	8003072 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a37      	ldr	r2, [pc, #220]	; (8002ef0 <HAL_DMA_Init+0x1b8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d04a      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a36      	ldr	r2, [pc, #216]	; (8002ef4 <HAL_DMA_Init+0x1bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d045      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_DMA_Init+0x1c0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d040      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a33      	ldr	r2, [pc, #204]	; (8002efc <HAL_DMA_Init+0x1c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d03b      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <HAL_DMA_Init+0x1c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d036      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a30      	ldr	r2, [pc, #192]	; (8002f04 <HAL_DMA_Init+0x1cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d031      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <HAL_DMA_Init+0x1d0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02c      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2d      	ldr	r2, [pc, #180]	; (8002f0c <HAL_DMA_Init+0x1d4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d027      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_DMA_Init+0x1d8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d022      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <HAL_DMA_Init+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01d      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_DMA_Init+0x1e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d018      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_DMA_Init+0x1e4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <HAL_DMA_Init+0x1e8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00e      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_DMA_Init+0x1ec>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <HAL_DMA_Init+0x1f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_Init+0x174>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <HAL_DMA_Init+0x1f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d108      	bne.n	8002ebe <HAL_DMA_Init+0x186>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e007      	b.n	8002ece <HAL_DMA_Init+0x196>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ece:	e02f      	b.n	8002f30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed0:	f7ff fe3a 	bl	8002b48 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d928      	bls.n	8002f30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e246      	b.n	800337e <HAL_DMA_Init+0x646>
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1c8      	bne.n	8002ed0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4b83      	ldr	r3, [pc, #524]	; (8003158 <HAL_DMA_Init+0x420>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f94:	4b71      	ldr	r3, [pc, #452]	; (800315c <HAL_DMA_Init+0x424>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b71      	ldr	r3, [pc, #452]	; (8003160 <HAL_DMA_Init+0x428>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa0:	d328      	bcc.n	8002ff4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b28      	cmp	r3, #40	; 0x28
 8002fa8:	d903      	bls.n	8002fb2 <HAL_DMA_Init+0x27a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b2e      	cmp	r3, #46	; 0x2e
 8002fb0:	d917      	bls.n	8002fe2 <HAL_DMA_Init+0x2aa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8002fb8:	d903      	bls.n	8002fc2 <HAL_DMA_Init+0x28a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b42      	cmp	r3, #66	; 0x42
 8002fc0:	d90f      	bls.n	8002fe2 <HAL_DMA_Init+0x2aa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b46      	cmp	r3, #70	; 0x46
 8002fc8:	d903      	bls.n	8002fd2 <HAL_DMA_Init+0x29a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b48      	cmp	r3, #72	; 0x48
 8002fd0:	d907      	bls.n	8002fe2 <HAL_DMA_Init+0x2aa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b4e      	cmp	r3, #78	; 0x4e
 8002fd8:	d905      	bls.n	8002fe6 <HAL_DMA_Init+0x2ae>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b52      	cmp	r3, #82	; 0x52
 8002fe0:	d801      	bhi.n	8002fe6 <HAL_DMA_Init+0x2ae>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_DMA_Init+0x2b0>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0307 	bic.w	r3, r3, #7
 800300a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b04      	cmp	r3, #4
 800301c:	d117      	bne.n	800304e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f002 fb3d 	bl	80056b0 <DMA_CheckFifoParam>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e197      	b.n	800337e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f002 fa78 	bl	800554c <DMA_CalcBaseAndBitshift>
 800305c:	4603      	mov	r3, r0
 800305e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	223f      	movs	r2, #63	; 0x3f
 800306a:	409a      	lsls	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e0cd      	b.n	800320e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <HAL_DMA_Init+0x42c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a39      	ldr	r2, [pc, #228]	; (8003168 <HAL_DMA_Init+0x430>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a38      	ldr	r2, [pc, #224]	; (800316c <HAL_DMA_Init+0x434>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a36      	ldr	r2, [pc, #216]	; (8003170 <HAL_DMA_Init+0x438>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a35      	ldr	r2, [pc, #212]	; (8003174 <HAL_DMA_Init+0x43c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a33      	ldr	r2, [pc, #204]	; (8003178 <HAL_DMA_Init+0x440>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a32      	ldr	r2, [pc, #200]	; (800317c <HAL_DMA_Init+0x444>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Init+0x38a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a30      	ldr	r2, [pc, #192]	; (8003180 <HAL_DMA_Init+0x448>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Init+0x38e>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_Init+0x390>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8097 	beq.w	80031fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_DMA_Init+0x42c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d021      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_DMA_Init+0x430>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01c      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	; (800316c <HAL_DMA_Init+0x434>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d017      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_DMA_Init+0x438>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d012      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <HAL_DMA_Init+0x43c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00d      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_DMA_Init+0x440>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d008      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_DMA_Init+0x444>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <HAL_DMA_Init+0x3e4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_DMA_Init+0x448>)
 800311a:	4293      	cmp	r3, r2
 800311c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_DMA_Init+0x44c>)
 800313a:	4013      	ands	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d020      	beq.n	8003188 <HAL_DMA_Init+0x450>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b80      	cmp	r3, #128	; 0x80
 800314c:	d102      	bne.n	8003154 <HAL_DMA_Init+0x41c>
 800314e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003152:	e01a      	b.n	800318a <HAL_DMA_Init+0x452>
 8003154:	2300      	movs	r3, #0
 8003156:	e018      	b.n	800318a <HAL_DMA_Init+0x452>
 8003158:	fe10803f 	.word	0xfe10803f
 800315c:	5c001000 	.word	0x5c001000
 8003160:	ffff0000 	.word	0xffff0000
 8003164:	58025408 	.word	0x58025408
 8003168:	5802541c 	.word	0x5802541c
 800316c:	58025430 	.word	0x58025430
 8003170:	58025444 	.word	0x58025444
 8003174:	58025458 	.word	0x58025458
 8003178:	5802546c 	.word	0x5802546c
 800317c:	58025480 	.word	0x58025480
 8003180:	58025494 	.word	0x58025494
 8003184:	fffe000f 	.word	0xfffe000f
 8003188:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <HAL_DMA_Init+0x650>)
 80031d0:	4413      	add	r3, r2
 80031d2:	4a6e      	ldr	r2, [pc, #440]	; (800338c <HAL_DMA_Init+0x654>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	009a      	lsls	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f002 f9b3 	bl	800554c <DMA_CalcBaseAndBitshift>
 80031e6:	4603      	mov	r3, r0
 80031e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e008      	b.n	800320e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2203      	movs	r2, #3
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0b7      	b.n	800337e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5f      	ldr	r2, [pc, #380]	; (8003390 <HAL_DMA_Init+0x658>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d072      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_DMA_Init+0x65c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d06d      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_DMA_Init+0x660>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d068      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a5a      	ldr	r2, [pc, #360]	; (800339c <HAL_DMA_Init+0x664>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d063      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a59      	ldr	r2, [pc, #356]	; (80033a0 <HAL_DMA_Init+0x668>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d05e      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a57      	ldr	r2, [pc, #348]	; (80033a4 <HAL_DMA_Init+0x66c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d059      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_DMA_Init+0x670>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d054      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a54      	ldr	r2, [pc, #336]	; (80033ac <HAL_DMA_Init+0x674>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04f      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a53      	ldr	r2, [pc, #332]	; (80033b0 <HAL_DMA_Init+0x678>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04a      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_DMA_Init+0x67c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d045      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <HAL_DMA_Init+0x680>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d040      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a4e      	ldr	r2, [pc, #312]	; (80033bc <HAL_DMA_Init+0x684>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d03b      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <HAL_DMA_Init+0x688>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d036      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_DMA_Init+0x68c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d031      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_DMA_Init+0x690>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d02c      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a48      	ldr	r2, [pc, #288]	; (80033cc <HAL_DMA_Init+0x694>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d027      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a47      	ldr	r2, [pc, #284]	; (80033d0 <HAL_DMA_Init+0x698>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <HAL_DMA_Init+0x69c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01d      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <HAL_DMA_Init+0x6a0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_DMA_Init+0x6a4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <HAL_DMA_Init+0x6a8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <HAL_DMA_Init+0x6ac>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3e      	ldr	r2, [pc, #248]	; (80033e8 <HAL_DMA_Init+0x6b0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_DMA_Init+0x5c6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3c      	ldr	r2, [pc, #240]	; (80033ec <HAL_DMA_Init+0x6b4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Init+0x5ca>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_DMA_Init+0x5cc>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d032      	beq.n	800336e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f002 fa4d 	bl	80057a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d102      	bne.n	800331c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003330:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_DMA_Init+0x624>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d80c      	bhi.n	800335c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f002 faca 	bl	80058dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e008      	b.n	800336e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	a7fdabf8 	.word	0xa7fdabf8
 800338c:	cccccccd 	.word	0xcccccccd
 8003390:	40020010 	.word	0x40020010
 8003394:	40020028 	.word	0x40020028
 8003398:	40020040 	.word	0x40020040
 800339c:	40020058 	.word	0x40020058
 80033a0:	40020070 	.word	0x40020070
 80033a4:	40020088 	.word	0x40020088
 80033a8:	400200a0 	.word	0x400200a0
 80033ac:	400200b8 	.word	0x400200b8
 80033b0:	40020410 	.word	0x40020410
 80033b4:	40020428 	.word	0x40020428
 80033b8:	40020440 	.word	0x40020440
 80033bc:	40020458 	.word	0x40020458
 80033c0:	40020470 	.word	0x40020470
 80033c4:	40020488 	.word	0x40020488
 80033c8:	400204a0 	.word	0x400204a0
 80033cc:	400204b8 	.word	0x400204b8
 80033d0:	58025408 	.word	0x58025408
 80033d4:	5802541c 	.word	0x5802541c
 80033d8:	58025430 	.word	0x58025430
 80033dc:	58025444 	.word	0x58025444
 80033e0:	58025458 	.word	0x58025458
 80033e4:	5802546c 	.word	0x5802546c
 80033e8:	58025480 	.word	0x58025480
 80033ec:	58025494 	.word	0x58025494

080033f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e226      	b.n	800385a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_DMA_Start_IT+0x2a>
 8003416:	2302      	movs	r3, #2
 8003418:	e21f      	b.n	800385a <HAL_DMA_Start_IT+0x46a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 820a 	bne.w	8003844 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a68      	ldr	r2, [pc, #416]	; (80035e4 <HAL_DMA_Start_IT+0x1f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a66      	ldr	r2, [pc, #408]	; (80035e8 <HAL_DMA_Start_IT+0x1f8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_DMA_Start_IT+0x1fc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a63      	ldr	r2, [pc, #396]	; (80035f0 <HAL_DMA_Start_IT+0x200>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a62      	ldr	r2, [pc, #392]	; (80035f4 <HAL_DMA_Start_IT+0x204>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <HAL_DMA_Start_IT+0x208>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5f      	ldr	r2, [pc, #380]	; (80035fc <HAL_DMA_Start_IT+0x20c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5d      	ldr	r2, [pc, #372]	; (8003600 <HAL_DMA_Start_IT+0x210>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5c      	ldr	r2, [pc, #368]	; (8003604 <HAL_DMA_Start_IT+0x214>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_DMA_Start_IT+0x218>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a59      	ldr	r2, [pc, #356]	; (800360c <HAL_DMA_Start_IT+0x21c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a57      	ldr	r2, [pc, #348]	; (8003610 <HAL_DMA_Start_IT+0x220>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a56      	ldr	r2, [pc, #344]	; (8003614 <HAL_DMA_Start_IT+0x224>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a54      	ldr	r2, [pc, #336]	; (8003618 <HAL_DMA_Start_IT+0x228>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a53      	ldr	r2, [pc, #332]	; (800361c <HAL_DMA_Start_IT+0x22c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_Start_IT+0xee>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_DMA_Start_IT+0x230>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <HAL_DMA_Start_IT+0x100>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e007      	b.n	8003500 <HAL_DMA_Start_IT+0x110>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f001 fe74 	bl	80051f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_DMA_Start_IT+0x1f4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04a      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <HAL_DMA_Start_IT+0x1f8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d045      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_DMA_Start_IT+0x1fc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d040      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a30      	ldr	r2, [pc, #192]	; (80035f0 <HAL_DMA_Start_IT+0x200>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d03b      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_DMA_Start_IT+0x204>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d036      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <HAL_DMA_Start_IT+0x208>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d031      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_Start_IT+0x20c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02c      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_DMA_Start_IT+0x210>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d027      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_Start_IT+0x214>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d022      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_DMA_Start_IT+0x218>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d01d      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_Start_IT+0x21c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a24      	ldr	r2, [pc, #144]	; (8003610 <HAL_DMA_Start_IT+0x220>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_Start_IT+0x224>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00e      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_DMA_Start_IT+0x228>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_DMA_Start_IT+0x22c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_DMA_Start_IT+0x1bc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_DMA_Start_IT+0x230>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Start_IT+0x1c0>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_DMA_Start_IT+0x1c2>
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 021e 	bic.w	r2, r3, #30
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0216 	orr.w	r2, r2, #22
 80035c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d03e      	beq.n	8003650 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0208 	orr.w	r2, r2, #8
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e035      	b.n	8003650 <HAL_DMA_Start_IT+0x260>
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 020e 	bic.w	r2, r3, #14
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 020a 	orr.w	r2, r2, #10
 8003636:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0204 	orr.w	r2, r2, #4
 800364e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a83      	ldr	r2, [pc, #524]	; (8003864 <HAL_DMA_Start_IT+0x474>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d072      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a82      	ldr	r2, [pc, #520]	; (8003868 <HAL_DMA_Start_IT+0x478>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d06d      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a80      	ldr	r2, [pc, #512]	; (800386c <HAL_DMA_Start_IT+0x47c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d068      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7f      	ldr	r2, [pc, #508]	; (8003870 <HAL_DMA_Start_IT+0x480>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d063      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7d      	ldr	r2, [pc, #500]	; (8003874 <HAL_DMA_Start_IT+0x484>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d05e      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_DMA_Start_IT+0x488>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d059      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a7a      	ldr	r2, [pc, #488]	; (800387c <HAL_DMA_Start_IT+0x48c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d054      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a79      	ldr	r2, [pc, #484]	; (8003880 <HAL_DMA_Start_IT+0x490>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04f      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a77      	ldr	r2, [pc, #476]	; (8003884 <HAL_DMA_Start_IT+0x494>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d04a      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a76      	ldr	r2, [pc, #472]	; (8003888 <HAL_DMA_Start_IT+0x498>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d045      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a74      	ldr	r2, [pc, #464]	; (800388c <HAL_DMA_Start_IT+0x49c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d040      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a73      	ldr	r2, [pc, #460]	; (8003890 <HAL_DMA_Start_IT+0x4a0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d03b      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a71      	ldr	r2, [pc, #452]	; (8003894 <HAL_DMA_Start_IT+0x4a4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d036      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a70      	ldr	r2, [pc, #448]	; (8003898 <HAL_DMA_Start_IT+0x4a8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d031      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6e      	ldr	r2, [pc, #440]	; (800389c <HAL_DMA_Start_IT+0x4ac>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02c      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6d      	ldr	r2, [pc, #436]	; (80038a0 <HAL_DMA_Start_IT+0x4b0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d027      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6b      	ldr	r2, [pc, #428]	; (80038a4 <HAL_DMA_Start_IT+0x4b4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d022      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6a      	ldr	r2, [pc, #424]	; (80038a8 <HAL_DMA_Start_IT+0x4b8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d01d      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a68      	ldr	r2, [pc, #416]	; (80038ac <HAL_DMA_Start_IT+0x4bc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a67      	ldr	r2, [pc, #412]	; (80038b0 <HAL_DMA_Start_IT+0x4c0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a65      	ldr	r2, [pc, #404]	; (80038b4 <HAL_DMA_Start_IT+0x4c4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a64      	ldr	r2, [pc, #400]	; (80038b8 <HAL_DMA_Start_IT+0x4c8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a62      	ldr	r2, [pc, #392]	; (80038bc <HAL_DMA_Start_IT+0x4cc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_DMA_Start_IT+0x350>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <HAL_DMA_Start_IT+0x4d0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_DMA_Start_IT+0x354>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_DMA_Start_IT+0x356>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01a      	beq.n	8003780 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003766:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800377e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a37      	ldr	r2, [pc, #220]	; (8003864 <HAL_DMA_Start_IT+0x474>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d04a      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_DMA_Start_IT+0x478>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d045      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a34      	ldr	r2, [pc, #208]	; (800386c <HAL_DMA_Start_IT+0x47c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d040      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a33      	ldr	r2, [pc, #204]	; (8003870 <HAL_DMA_Start_IT+0x480>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d03b      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a31      	ldr	r2, [pc, #196]	; (8003874 <HAL_DMA_Start_IT+0x484>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d036      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <HAL_DMA_Start_IT+0x488>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2e      	ldr	r2, [pc, #184]	; (800387c <HAL_DMA_Start_IT+0x48c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02c      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <HAL_DMA_Start_IT+0x490>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d027      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_DMA_Start_IT+0x494>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <HAL_DMA_Start_IT+0x498>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01d      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_DMA_Start_IT+0x49c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a27      	ldr	r2, [pc, #156]	; (8003890 <HAL_DMA_Start_IT+0x4a0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a25      	ldr	r2, [pc, #148]	; (8003894 <HAL_DMA_Start_IT+0x4a4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a24      	ldr	r2, [pc, #144]	; (8003898 <HAL_DMA_Start_IT+0x4a8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a22      	ldr	r2, [pc, #136]	; (800389c <HAL_DMA_Start_IT+0x4ac>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_DMA_Start_IT+0x430>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <HAL_DMA_Start_IT+0x4b0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <HAL_DMA_Start_IT+0x442>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e012      	b.n	8003858 <HAL_DMA_Start_IT+0x468>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e009      	b.n	8003858 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003858:	7dfb      	ldrb	r3, [r7, #23]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
 80038a4:	58025408 	.word	0x58025408
 80038a8:	5802541c 	.word	0x5802541c
 80038ac:	58025430 	.word	0x58025430
 80038b0:	58025444 	.word	0x58025444
 80038b4:	58025458 	.word	0x58025458
 80038b8:	5802546c 	.word	0x5802546c
 80038bc:	58025480 	.word	0x58025480
 80038c0:	58025494 	.word	0x58025494

080038c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80038cc:	f7ff f93c 	bl	8002b48 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e2dc      	b.n	8003e96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d008      	beq.n	80038fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e2cd      	b.n	8003e96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a76      	ldr	r2, [pc, #472]	; (8003ad8 <HAL_DMA_Abort+0x214>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a74      	ldr	r2, [pc, #464]	; (8003adc <HAL_DMA_Abort+0x218>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a73      	ldr	r2, [pc, #460]	; (8003ae0 <HAL_DMA_Abort+0x21c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a71      	ldr	r2, [pc, #452]	; (8003ae4 <HAL_DMA_Abort+0x220>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a70      	ldr	r2, [pc, #448]	; (8003ae8 <HAL_DMA_Abort+0x224>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <HAL_DMA_Abort+0x228>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6d      	ldr	r2, [pc, #436]	; (8003af0 <HAL_DMA_Abort+0x22c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6b      	ldr	r2, [pc, #428]	; (8003af4 <HAL_DMA_Abort+0x230>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_DMA_Abort+0x234>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_DMA_Abort+0x238>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a67      	ldr	r2, [pc, #412]	; (8003b00 <HAL_DMA_Abort+0x23c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_DMA_Abort+0x240>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a64      	ldr	r2, [pc, #400]	; (8003b08 <HAL_DMA_Abort+0x244>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a62      	ldr	r2, [pc, #392]	; (8003b0c <HAL_DMA_Abort+0x248>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a61      	ldr	r2, [pc, #388]	; (8003b10 <HAL_DMA_Abort+0x24c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort+0xd6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a5f      	ldr	r2, [pc, #380]	; (8003b14 <HAL_DMA_Abort+0x250>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_DMA_Abort+0xda>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_DMA_Abort+0xdc>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 021e 	bic.w	r2, r2, #30
 80039b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e00a      	b.n	80039e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 020e 	bic.w	r2, r2, #14
 80039da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <HAL_DMA_Abort+0x214>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d072      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3a      	ldr	r2, [pc, #232]	; (8003adc <HAL_DMA_Abort+0x218>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d06d      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <HAL_DMA_Abort+0x21c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d068      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <HAL_DMA_Abort+0x220>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d063      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <HAL_DMA_Abort+0x224>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d05e      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_DMA_Abort+0x228>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d059      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a33      	ldr	r2, [pc, #204]	; (8003af0 <HAL_DMA_Abort+0x22c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d054      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a31      	ldr	r2, [pc, #196]	; (8003af4 <HAL_DMA_Abort+0x230>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d04f      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <HAL_DMA_Abort+0x234>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <HAL_DMA_Abort+0x238>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2d      	ldr	r2, [pc, #180]	; (8003b00 <HAL_DMA_Abort+0x23c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <HAL_DMA_Abort+0x240>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_DMA_Abort+0x244>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <HAL_DMA_Abort+0x248>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <HAL_DMA_Abort+0x24c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <HAL_DMA_Abort+0x250>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <HAL_DMA_Abort+0x254>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <HAL_DMA_Abort+0x258>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_DMA_Abort+0x25c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_DMA_Abort+0x260>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_DMA_Abort+0x264>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_DMA_Abort+0x268>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_DMA_Abort+0x26c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_Abort+0x20e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_DMA_Abort+0x270>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d132      	bne.n	8003b38 <HAL_DMA_Abort+0x274>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e031      	b.n	8003b3a <HAL_DMA_Abort+0x276>
 8003ad6:	bf00      	nop
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
 8003b18:	58025408 	.word	0x58025408
 8003b1c:	5802541c 	.word	0x5802541c
 8003b20:	58025430 	.word	0x58025430
 8003b24:	58025444 	.word	0x58025444
 8003b28:	58025458 	.word	0x58025458
 8003b2c:	5802546c 	.word	0x5802546c
 8003b30:	58025480 	.word	0x58025480
 8003b34:	58025494 	.word	0x58025494
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6d      	ldr	r2, [pc, #436]	; (8003d08 <HAL_DMA_Abort+0x444>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6b      	ldr	r2, [pc, #428]	; (8003d0c <HAL_DMA_Abort+0x448>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6a      	ldr	r2, [pc, #424]	; (8003d10 <HAL_DMA_Abort+0x44c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a68      	ldr	r2, [pc, #416]	; (8003d14 <HAL_DMA_Abort+0x450>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a67      	ldr	r2, [pc, #412]	; (8003d18 <HAL_DMA_Abort+0x454>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a65      	ldr	r2, [pc, #404]	; (8003d1c <HAL_DMA_Abort+0x458>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a64      	ldr	r2, [pc, #400]	; (8003d20 <HAL_DMA_Abort+0x45c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a62      	ldr	r2, [pc, #392]	; (8003d24 <HAL_DMA_Abort+0x460>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a61      	ldr	r2, [pc, #388]	; (8003d28 <HAL_DMA_Abort+0x464>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a5f      	ldr	r2, [pc, #380]	; (8003d2c <HAL_DMA_Abort+0x468>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5e      	ldr	r2, [pc, #376]	; (8003d30 <HAL_DMA_Abort+0x46c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5c      	ldr	r2, [pc, #368]	; (8003d34 <HAL_DMA_Abort+0x470>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_DMA_Abort+0x474>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <HAL_DMA_Abort+0x478>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_DMA_Abort+0x47c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_Abort+0x32a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a56      	ldr	r2, [pc, #344]	; (8003d44 <HAL_DMA_Abort+0x480>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d108      	bne.n	8003c00 <HAL_DMA_Abort+0x33c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e007      	b.n	8003c10 <HAL_DMA_Abort+0x34c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c10:	e013      	b.n	8003c3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c12:	f7fe ff99 	bl	8002b48 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d90c      	bls.n	8003c3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2203      	movs	r2, #3
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e12d      	b.n	8003e96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <HAL_DMA_Abort+0x444>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d04a      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <HAL_DMA_Abort+0x448>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d045      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_DMA_Abort+0x44c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d040      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <HAL_DMA_Abort+0x450>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <HAL_DMA_Abort+0x454>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d036      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <HAL_DMA_Abort+0x458>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_DMA_Abort+0x45c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d02c      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a24      	ldr	r2, [pc, #144]	; (8003d24 <HAL_DMA_Abort+0x460>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d027      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_DMA_Abort+0x464>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_DMA_Abort+0x468>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <HAL_DMA_Abort+0x46c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_DMA_Abort+0x470>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_DMA_Abort+0x474>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_DMA_Abort+0x478>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <HAL_DMA_Abort+0x47c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_Abort+0x422>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <HAL_DMA_Abort+0x480>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_DMA_Abort+0x426>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_DMA_Abort+0x428>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02b      	beq.n	8003d48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	223f      	movs	r2, #63	; 0x3f
 8003d00:	409a      	lsls	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	e02a      	b.n	8003d5e <HAL_DMA_Abort+0x49a>
 8003d08:	40020010 	.word	0x40020010
 8003d0c:	40020028 	.word	0x40020028
 8003d10:	40020040 	.word	0x40020040
 8003d14:	40020058 	.word	0x40020058
 8003d18:	40020070 	.word	0x40020070
 8003d1c:	40020088 	.word	0x40020088
 8003d20:	400200a0 	.word	0x400200a0
 8003d24:	400200b8 	.word	0x400200b8
 8003d28:	40020410 	.word	0x40020410
 8003d2c:	40020428 	.word	0x40020428
 8003d30:	40020440 	.word	0x40020440
 8003d34:	40020458 	.word	0x40020458
 8003d38:	40020470 	.word	0x40020470
 8003d3c:	40020488 	.word	0x40020488
 8003d40:	400204a0 	.word	0x400204a0
 8003d44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2201      	movs	r2, #1
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4f      	ldr	r2, [pc, #316]	; (8003ea0 <HAL_DMA_Abort+0x5dc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d072      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ea4 <HAL_DMA_Abort+0x5e0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d06d      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4c      	ldr	r2, [pc, #304]	; (8003ea8 <HAL_DMA_Abort+0x5e4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d068      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a4a      	ldr	r2, [pc, #296]	; (8003eac <HAL_DMA_Abort+0x5e8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d063      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a49      	ldr	r2, [pc, #292]	; (8003eb0 <HAL_DMA_Abort+0x5ec>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d05e      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a47      	ldr	r2, [pc, #284]	; (8003eb4 <HAL_DMA_Abort+0x5f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d059      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a46      	ldr	r2, [pc, #280]	; (8003eb8 <HAL_DMA_Abort+0x5f4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d054      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a44      	ldr	r2, [pc, #272]	; (8003ebc <HAL_DMA_Abort+0x5f8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d04f      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a43      	ldr	r2, [pc, #268]	; (8003ec0 <HAL_DMA_Abort+0x5fc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d04a      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a41      	ldr	r2, [pc, #260]	; (8003ec4 <HAL_DMA_Abort+0x600>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d045      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <HAL_DMA_Abort+0x604>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d040      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a3e      	ldr	r2, [pc, #248]	; (8003ecc <HAL_DMA_Abort+0x608>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03b      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <HAL_DMA_Abort+0x60c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d036      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3b      	ldr	r2, [pc, #236]	; (8003ed4 <HAL_DMA_Abort+0x610>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d031      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3a      	ldr	r2, [pc, #232]	; (8003ed8 <HAL_DMA_Abort+0x614>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d02c      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a38      	ldr	r2, [pc, #224]	; (8003edc <HAL_DMA_Abort+0x618>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a37      	ldr	r2, [pc, #220]	; (8003ee0 <HAL_DMA_Abort+0x61c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a35      	ldr	r2, [pc, #212]	; (8003ee4 <HAL_DMA_Abort+0x620>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a34      	ldr	r2, [pc, #208]	; (8003ee8 <HAL_DMA_Abort+0x624>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a32      	ldr	r2, [pc, #200]	; (8003eec <HAL_DMA_Abort+0x628>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a31      	ldr	r2, [pc, #196]	; (8003ef0 <HAL_DMA_Abort+0x62c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <HAL_DMA_Abort+0x630>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <HAL_DMA_Abort+0x634>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_Abort+0x58a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <HAL_DMA_Abort+0x638>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA_Abort+0x58e>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_DMA_Abort+0x590>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40020010 	.word	0x40020010
 8003ea4:	40020028 	.word	0x40020028
 8003ea8:	40020040 	.word	0x40020040
 8003eac:	40020058 	.word	0x40020058
 8003eb0:	40020070 	.word	0x40020070
 8003eb4:	40020088 	.word	0x40020088
 8003eb8:	400200a0 	.word	0x400200a0
 8003ebc:	400200b8 	.word	0x400200b8
 8003ec0:	40020410 	.word	0x40020410
 8003ec4:	40020428 	.word	0x40020428
 8003ec8:	40020440 	.word	0x40020440
 8003ecc:	40020458 	.word	0x40020458
 8003ed0:	40020470 	.word	0x40020470
 8003ed4:	40020488 	.word	0x40020488
 8003ed8:	400204a0 	.word	0x400204a0
 8003edc:	400204b8 	.word	0x400204b8
 8003ee0:	58025408 	.word	0x58025408
 8003ee4:	5802541c 	.word	0x5802541c
 8003ee8:	58025430 	.word	0x58025430
 8003eec:	58025444 	.word	0x58025444
 8003ef0:	58025458 	.word	0x58025458
 8003ef4:	5802546c 	.word	0x5802546c
 8003ef8:	58025480 	.word	0x58025480
 8003efc:	58025494 	.word	0x58025494

08003f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e205      	b.n	800431e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d004      	beq.n	8003f28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e1fa      	b.n	800431e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a8c      	ldr	r2, [pc, #560]	; (8004160 <HAL_DMA_Abort_IT+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d04a      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a8b      	ldr	r2, [pc, #556]	; (8004164 <HAL_DMA_Abort_IT+0x264>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d045      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a89      	ldr	r2, [pc, #548]	; (8004168 <HAL_DMA_Abort_IT+0x268>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d040      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a88      	ldr	r2, [pc, #544]	; (800416c <HAL_DMA_Abort_IT+0x26c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d03b      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a86      	ldr	r2, [pc, #536]	; (8004170 <HAL_DMA_Abort_IT+0x270>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d036      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a85      	ldr	r2, [pc, #532]	; (8004174 <HAL_DMA_Abort_IT+0x274>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d031      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a83      	ldr	r2, [pc, #524]	; (8004178 <HAL_DMA_Abort_IT+0x278>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d02c      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a82      	ldr	r2, [pc, #520]	; (800417c <HAL_DMA_Abort_IT+0x27c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d027      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a80      	ldr	r2, [pc, #512]	; (8004180 <HAL_DMA_Abort_IT+0x280>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d022      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7f      	ldr	r2, [pc, #508]	; (8004184 <HAL_DMA_Abort_IT+0x284>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d01d      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7d      	ldr	r2, [pc, #500]	; (8004188 <HAL_DMA_Abort_IT+0x288>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d018      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7c      	ldr	r2, [pc, #496]	; (800418c <HAL_DMA_Abort_IT+0x28c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7a      	ldr	r2, [pc, #488]	; (8004190 <HAL_DMA_Abort_IT+0x290>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a79      	ldr	r2, [pc, #484]	; (8004194 <HAL_DMA_Abort_IT+0x294>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	; (8004198 <HAL_DMA_Abort_IT+0x298>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_DMA_Abort_IT+0xc8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a76      	ldr	r2, [pc, #472]	; (800419c <HAL_DMA_Abort_IT+0x29c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <HAL_DMA_Abort_IT+0xcc>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_DMA_Abort_IT+0xce>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d065      	beq.n	800409e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a60      	ldr	r2, [pc, #384]	; (8004160 <HAL_DMA_Abort_IT+0x260>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04a      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_DMA_Abort_IT+0x264>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_DMA_Abort_IT+0x268>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5b      	ldr	r2, [pc, #364]	; (800416c <HAL_DMA_Abort_IT+0x26c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d03b      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5a      	ldr	r2, [pc, #360]	; (8004170 <HAL_DMA_Abort_IT+0x270>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_DMA_Abort_IT+0x274>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_DMA_Abort_IT+0x278>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a55      	ldr	r2, [pc, #340]	; (800417c <HAL_DMA_Abort_IT+0x27c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d027      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a54      	ldr	r2, [pc, #336]	; (8004180 <HAL_DMA_Abort_IT+0x280>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_DMA_Abort_IT+0x284>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a51      	ldr	r2, [pc, #324]	; (8004188 <HAL_DMA_Abort_IT+0x288>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a4f      	ldr	r2, [pc, #316]	; (800418c <HAL_DMA_Abort_IT+0x28c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a4e      	ldr	r2, [pc, #312]	; (8004190 <HAL_DMA_Abort_IT+0x290>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4c      	ldr	r2, [pc, #304]	; (8004194 <HAL_DMA_Abort_IT+0x294>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a4b      	ldr	r2, [pc, #300]	; (8004198 <HAL_DMA_Abort_IT+0x298>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_DMA_Abort_IT+0x17a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a49      	ldr	r2, [pc, #292]	; (800419c <HAL_DMA_Abort_IT+0x29c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_DMA_Abort_IT+0x18c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e147      	b.n	800431c <HAL_DMA_Abort_IT+0x41c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e13e      	b.n	800431c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 020e 	bic.w	r2, r2, #14
 80040ac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2b      	ldr	r2, [pc, #172]	; (8004160 <HAL_DMA_Abort_IT+0x260>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <HAL_DMA_Abort_IT+0x264>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a28      	ldr	r2, [pc, #160]	; (8004168 <HAL_DMA_Abort_IT+0x268>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <HAL_DMA_Abort_IT+0x26c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a25      	ldr	r2, [pc, #148]	; (8004170 <HAL_DMA_Abort_IT+0x270>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a23      	ldr	r2, [pc, #140]	; (8004174 <HAL_DMA_Abort_IT+0x274>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a22      	ldr	r2, [pc, #136]	; (8004178 <HAL_DMA_Abort_IT+0x278>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a20      	ldr	r2, [pc, #128]	; (800417c <HAL_DMA_Abort_IT+0x27c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_DMA_Abort_IT+0x280>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_DMA_Abort_IT+0x284>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_DMA_Abort_IT+0x288>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1a      	ldr	r2, [pc, #104]	; (800418c <HAL_DMA_Abort_IT+0x28c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_DMA_Abort_IT+0x290>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_DMA_Abort_IT+0x294>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <HAL_DMA_Abort_IT+0x298>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_Abort_IT+0x24e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <HAL_DMA_Abort_IT+0x29c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d128      	bne.n	80041a0 <HAL_DMA_Abort_IT+0x2a0>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e027      	b.n	80041b0 <HAL_DMA_Abort_IT+0x2b0>
 8004160:	40020010 	.word	0x40020010
 8004164:	40020028 	.word	0x40020028
 8004168:	40020040 	.word	0x40020040
 800416c:	40020058 	.word	0x40020058
 8004170:	40020070 	.word	0x40020070
 8004174:	40020088 	.word	0x40020088
 8004178:	400200a0 	.word	0x400200a0
 800417c:	400200b8 	.word	0x400200b8
 8004180:	40020410 	.word	0x40020410
 8004184:	40020428 	.word	0x40020428
 8004188:	40020440 	.word	0x40020440
 800418c:	40020458 	.word	0x40020458
 8004190:	40020470 	.word	0x40020470
 8004194:	40020488 	.word	0x40020488
 8004198:	400204a0 	.word	0x400204a0
 800419c:	400204b8 	.word	0x400204b8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <HAL_DMA_Abort_IT+0x428>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d072      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5b      	ldr	r2, [pc, #364]	; (800432c <HAL_DMA_Abort_IT+0x42c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d06d      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a59      	ldr	r2, [pc, #356]	; (8004330 <HAL_DMA_Abort_IT+0x430>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d068      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_DMA_Abort_IT+0x434>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d063      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a56      	ldr	r2, [pc, #344]	; (8004338 <HAL_DMA_Abort_IT+0x438>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d05e      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a55      	ldr	r2, [pc, #340]	; (800433c <HAL_DMA_Abort_IT+0x43c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d059      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a53      	ldr	r2, [pc, #332]	; (8004340 <HAL_DMA_Abort_IT+0x440>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d054      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a52      	ldr	r2, [pc, #328]	; (8004344 <HAL_DMA_Abort_IT+0x444>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d04f      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a50      	ldr	r2, [pc, #320]	; (8004348 <HAL_DMA_Abort_IT+0x448>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a4f      	ldr	r2, [pc, #316]	; (800434c <HAL_DMA_Abort_IT+0x44c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a4d      	ldr	r2, [pc, #308]	; (8004350 <HAL_DMA_Abort_IT+0x450>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_DMA_Abort_IT+0x454>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <HAL_DMA_Abort_IT+0x458>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a49      	ldr	r2, [pc, #292]	; (800435c <HAL_DMA_Abort_IT+0x45c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a47      	ldr	r2, [pc, #284]	; (8004360 <HAL_DMA_Abort_IT+0x460>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a46      	ldr	r2, [pc, #280]	; (8004364 <HAL_DMA_Abort_IT+0x464>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a44      	ldr	r2, [pc, #272]	; (8004368 <HAL_DMA_Abort_IT+0x468>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a43      	ldr	r2, [pc, #268]	; (800436c <HAL_DMA_Abort_IT+0x46c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a41      	ldr	r2, [pc, #260]	; (8004370 <HAL_DMA_Abort_IT+0x470>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a40      	ldr	r2, [pc, #256]	; (8004374 <HAL_DMA_Abort_IT+0x474>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3e      	ldr	r2, [pc, #248]	; (8004378 <HAL_DMA_Abort_IT+0x478>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a3d      	ldr	r2, [pc, #244]	; (800437c <HAL_DMA_Abort_IT+0x47c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3b      	ldr	r2, [pc, #236]	; (8004380 <HAL_DMA_Abort_IT+0x480>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_DMA_Abort_IT+0x3a0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3a      	ldr	r2, [pc, #232]	; (8004384 <HAL_DMA_Abort_IT+0x484>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_DMA_Abort_IT+0x3a4>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_DMA_Abort_IT+0x3a6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d028      	beq.n	80042fc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40020010 	.word	0x40020010
 800432c:	40020028 	.word	0x40020028
 8004330:	40020040 	.word	0x40020040
 8004334:	40020058 	.word	0x40020058
 8004338:	40020070 	.word	0x40020070
 800433c:	40020088 	.word	0x40020088
 8004340:	400200a0 	.word	0x400200a0
 8004344:	400200b8 	.word	0x400200b8
 8004348:	40020410 	.word	0x40020410
 800434c:	40020428 	.word	0x40020428
 8004350:	40020440 	.word	0x40020440
 8004354:	40020458 	.word	0x40020458
 8004358:	40020470 	.word	0x40020470
 800435c:	40020488 	.word	0x40020488
 8004360:	400204a0 	.word	0x400204a0
 8004364:	400204b8 	.word	0x400204b8
 8004368:	58025408 	.word	0x58025408
 800436c:	5802541c 	.word	0x5802541c
 8004370:	58025430 	.word	0x58025430
 8004374:	58025444 	.word	0x58025444
 8004378:	58025458 	.word	0x58025458
 800437c:	5802546c 	.word	0x5802546c
 8004380:	58025480 	.word	0x58025480
 8004384:	58025494 	.word	0x58025494

08004388 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004394:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_DMA_IRQHandler+0x1ac>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a67      	ldr	r2, [pc, #412]	; (8004538 <HAL_DMA_IRQHandler+0x1b0>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0a9b      	lsrs	r3, r3, #10
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5f      	ldr	r2, [pc, #380]	; (800453c <HAL_DMA_IRQHandler+0x1b4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d04a      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_DMA_IRQHandler+0x1b8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d045      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5c      	ldr	r2, [pc, #368]	; (8004544 <HAL_DMA_IRQHandler+0x1bc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d040      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5a      	ldr	r2, [pc, #360]	; (8004548 <HAL_DMA_IRQHandler+0x1c0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d03b      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a59      	ldr	r2, [pc, #356]	; (800454c <HAL_DMA_IRQHandler+0x1c4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d036      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a57      	ldr	r2, [pc, #348]	; (8004550 <HAL_DMA_IRQHandler+0x1c8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d031      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a56      	ldr	r2, [pc, #344]	; (8004554 <HAL_DMA_IRQHandler+0x1cc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d02c      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a54      	ldr	r2, [pc, #336]	; (8004558 <HAL_DMA_IRQHandler+0x1d0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d027      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a53      	ldr	r2, [pc, #332]	; (800455c <HAL_DMA_IRQHandler+0x1d4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d022      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a51      	ldr	r2, [pc, #324]	; (8004560 <HAL_DMA_IRQHandler+0x1d8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01d      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a50      	ldr	r2, [pc, #320]	; (8004564 <HAL_DMA_IRQHandler+0x1dc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a4e      	ldr	r2, [pc, #312]	; (8004568 <HAL_DMA_IRQHandler+0x1e0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a4d      	ldr	r2, [pc, #308]	; (800456c <HAL_DMA_IRQHandler+0x1e4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a4b      	ldr	r2, [pc, #300]	; (8004570 <HAL_DMA_IRQHandler+0x1e8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4a      	ldr	r2, [pc, #296]	; (8004574 <HAL_DMA_IRQHandler+0x1ec>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_DMA_IRQHandler+0xd2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a48      	ldr	r2, [pc, #288]	; (8004578 <HAL_DMA_IRQHandler+0x1f0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <HAL_DMA_IRQHandler+0xd6>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_DMA_IRQHandler+0xd8>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 842b 	beq.w	8004cbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2208      	movs	r2, #8
 8004470:	409a      	lsls	r2, r3
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80a2 	beq.w	80045c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2e      	ldr	r2, [pc, #184]	; (800453c <HAL_DMA_IRQHandler+0x1b4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <HAL_DMA_IRQHandler+0x1b8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2b      	ldr	r2, [pc, #172]	; (8004544 <HAL_DMA_IRQHandler+0x1bc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <HAL_DMA_IRQHandler+0x1c0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a28      	ldr	r2, [pc, #160]	; (800454c <HAL_DMA_IRQHandler+0x1c4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <HAL_DMA_IRQHandler+0x1c8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a25      	ldr	r2, [pc, #148]	; (8004554 <HAL_DMA_IRQHandler+0x1cc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_DMA_IRQHandler+0x1d0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a22      	ldr	r2, [pc, #136]	; (800455c <HAL_DMA_IRQHandler+0x1d4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a21      	ldr	r2, [pc, #132]	; (8004560 <HAL_DMA_IRQHandler+0x1d8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_DMA_IRQHandler+0x1dc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_DMA_IRQHandler+0x1e0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_DMA_IRQHandler+0x1e4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_DMA_IRQHandler+0x1e8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_DMA_IRQHandler+0x1ec>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_DMA_IRQHandler+0x194>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_DMA_IRQHandler+0x1f0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d12f      	bne.n	800457c <HAL_DMA_IRQHandler+0x1f4>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	bf14      	ite	ne
 800452a:	2301      	movne	r3, #1
 800452c:	2300      	moveq	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	e02e      	b.n	8004590 <HAL_DMA_IRQHandler+0x208>
 8004532:	bf00      	nop
 8004534:	20000000 	.word	0x20000000
 8004538:	1b4e81b5 	.word	0x1b4e81b5
 800453c:	40020010 	.word	0x40020010
 8004540:	40020028 	.word	0x40020028
 8004544:	40020040 	.word	0x40020040
 8004548:	40020058 	.word	0x40020058
 800454c:	40020070 	.word	0x40020070
 8004550:	40020088 	.word	0x40020088
 8004554:	400200a0 	.word	0x400200a0
 8004558:	400200b8 	.word	0x400200b8
 800455c:	40020410 	.word	0x40020410
 8004560:	40020428 	.word	0x40020428
 8004564:	40020440 	.word	0x40020440
 8004568:	40020458 	.word	0x40020458
 800456c:	40020470 	.word	0x40020470
 8004570:	40020488 	.word	0x40020488
 8004574:	400204a0 	.word	0x400204a0
 8004578:	400204b8 	.word	0x400204b8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0204 	bic.w	r2, r2, #4
 80045a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2208      	movs	r2, #8
 80045ae:	409a      	lsls	r2, r3
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d06e      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a69      	ldr	r2, [pc, #420]	; (8004780 <HAL_DMA_IRQHandler+0x3f8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d04a      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a67      	ldr	r2, [pc, #412]	; (8004784 <HAL_DMA_IRQHandler+0x3fc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d045      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a66      	ldr	r2, [pc, #408]	; (8004788 <HAL_DMA_IRQHandler+0x400>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d040      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a64      	ldr	r2, [pc, #400]	; (800478c <HAL_DMA_IRQHandler+0x404>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d03b      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a63      	ldr	r2, [pc, #396]	; (8004790 <HAL_DMA_IRQHandler+0x408>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d036      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a61      	ldr	r2, [pc, #388]	; (8004794 <HAL_DMA_IRQHandler+0x40c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d031      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a60      	ldr	r2, [pc, #384]	; (8004798 <HAL_DMA_IRQHandler+0x410>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d02c      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5e      	ldr	r2, [pc, #376]	; (800479c <HAL_DMA_IRQHandler+0x414>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d027      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5d      	ldr	r2, [pc, #372]	; (80047a0 <HAL_DMA_IRQHandler+0x418>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5b      	ldr	r2, [pc, #364]	; (80047a4 <HAL_DMA_IRQHandler+0x41c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5a      	ldr	r2, [pc, #360]	; (80047a8 <HAL_DMA_IRQHandler+0x420>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a58      	ldr	r2, [pc, #352]	; (80047ac <HAL_DMA_IRQHandler+0x424>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a57      	ldr	r2, [pc, #348]	; (80047b0 <HAL_DMA_IRQHandler+0x428>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a55      	ldr	r2, [pc, #340]	; (80047b4 <HAL_DMA_IRQHandler+0x42c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a54      	ldr	r2, [pc, #336]	; (80047b8 <HAL_DMA_IRQHandler+0x430>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2ee>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a52      	ldr	r2, [pc, #328]	; (80047bc <HAL_DMA_IRQHandler+0x434>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10a      	bne.n	800468c <HAL_DMA_IRQHandler+0x304>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e003      	b.n	8004694 <HAL_DMA_IRQHandler+0x30c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2201      	movs	r2, #1
 80046a2:	409a      	lsls	r2, r3
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f043 0202 	orr.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2204      	movs	r2, #4
 80046be:	409a      	lsls	r2, r3
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 808f 	beq.w	80047e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <HAL_DMA_IRQHandler+0x3f8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d04a      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <HAL_DMA_IRQHandler+0x3fc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d045      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <HAL_DMA_IRQHandler+0x400>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d040      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a27      	ldr	r2, [pc, #156]	; (800478c <HAL_DMA_IRQHandler+0x404>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d03b      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a26      	ldr	r2, [pc, #152]	; (8004790 <HAL_DMA_IRQHandler+0x408>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d036      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a24      	ldr	r2, [pc, #144]	; (8004794 <HAL_DMA_IRQHandler+0x40c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d031      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a23      	ldr	r2, [pc, #140]	; (8004798 <HAL_DMA_IRQHandler+0x410>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d02c      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <HAL_DMA_IRQHandler+0x414>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d027      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <HAL_DMA_IRQHandler+0x418>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d022      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_DMA_IRQHandler+0x41c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01d      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_DMA_IRQHandler+0x420>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <HAL_DMA_IRQHandler+0x424>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_DMA_IRQHandler+0x428>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_DMA_IRQHandler+0x42c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <HAL_DMA_IRQHandler+0x430>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_DMA_IRQHandler+0x3e2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <HAL_DMA_IRQHandler+0x434>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d12a      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x438>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e023      	b.n	80047c8 <HAL_DMA_IRQHandler+0x440>
 8004780:	40020010 	.word	0x40020010
 8004784:	40020028 	.word	0x40020028
 8004788:	40020040 	.word	0x40020040
 800478c:	40020058 	.word	0x40020058
 8004790:	40020070 	.word	0x40020070
 8004794:	40020088 	.word	0x40020088
 8004798:	400200a0 	.word	0x400200a0
 800479c:	400200b8 	.word	0x400200b8
 80047a0:	40020410 	.word	0x40020410
 80047a4:	40020428 	.word	0x40020428
 80047a8:	40020440 	.word	0x40020440
 80047ac:	40020458 	.word	0x40020458
 80047b0:	40020470 	.word	0x40020470
 80047b4:	40020488 	.word	0x40020488
 80047b8:	400204a0 	.word	0x400204a0
 80047bc:	400204b8 	.word	0x400204b8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2300      	movs	r3, #0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	2204      	movs	r2, #4
 80047d6:	409a      	lsls	r2, r3
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	f043 0204 	orr.w	r2, r3, #4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2210      	movs	r2, #16
 80047f2:	409a      	lsls	r2, r3
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80a6 	beq.w	800494a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a85      	ldr	r2, [pc, #532]	; (8004a18 <HAL_DMA_IRQHandler+0x690>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d04a      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a83      	ldr	r2, [pc, #524]	; (8004a1c <HAL_DMA_IRQHandler+0x694>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d045      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a82      	ldr	r2, [pc, #520]	; (8004a20 <HAL_DMA_IRQHandler+0x698>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d040      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a80      	ldr	r2, [pc, #512]	; (8004a24 <HAL_DMA_IRQHandler+0x69c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d03b      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7f      	ldr	r2, [pc, #508]	; (8004a28 <HAL_DMA_IRQHandler+0x6a0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d036      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a7d      	ldr	r2, [pc, #500]	; (8004a2c <HAL_DMA_IRQHandler+0x6a4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d031      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7c      	ldr	r2, [pc, #496]	; (8004a30 <HAL_DMA_IRQHandler+0x6a8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d02c      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a7a      	ldr	r2, [pc, #488]	; (8004a34 <HAL_DMA_IRQHandler+0x6ac>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d027      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a79      	ldr	r2, [pc, #484]	; (8004a38 <HAL_DMA_IRQHandler+0x6b0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a77      	ldr	r2, [pc, #476]	; (8004a3c <HAL_DMA_IRQHandler+0x6b4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01d      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a76      	ldr	r2, [pc, #472]	; (8004a40 <HAL_DMA_IRQHandler+0x6b8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a74      	ldr	r2, [pc, #464]	; (8004a44 <HAL_DMA_IRQHandler+0x6bc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a73      	ldr	r2, [pc, #460]	; (8004a48 <HAL_DMA_IRQHandler+0x6c0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a71      	ldr	r2, [pc, #452]	; (8004a4c <HAL_DMA_IRQHandler+0x6c4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a70      	ldr	r2, [pc, #448]	; (8004a50 <HAL_DMA_IRQHandler+0x6c8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_DMA_IRQHandler+0x516>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_DMA_IRQHandler+0x6cc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10a      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x52c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e009      	b.n	80048c8 <HAL_DMA_IRQHandler+0x540>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d03e      	beq.n	800494a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2210      	movs	r2, #16
 80048d6:	409a      	lsls	r2, r3
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d024      	beq.n	800494a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
 8004908:	e01f      	b.n	800494a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01b      	beq.n	800494a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
 800491a:	e016      	b.n	800494a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0208 	bic.w	r2, r2, #8
 8004938:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2220      	movs	r2, #32
 8004954:	409a      	lsls	r2, r3
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8110 	beq.w	8004b80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <HAL_DMA_IRQHandler+0x690>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d04a      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_DMA_IRQHandler+0x694>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d045      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <HAL_DMA_IRQHandler+0x698>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d040      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_DMA_IRQHandler+0x69c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d03b      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <HAL_DMA_IRQHandler+0x6a0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d036      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <HAL_DMA_IRQHandler+0x6a4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d031      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <HAL_DMA_IRQHandler+0x6a8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d02c      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <HAL_DMA_IRQHandler+0x6ac>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d027      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a20      	ldr	r2, [pc, #128]	; (8004a38 <HAL_DMA_IRQHandler+0x6b0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d022      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <HAL_DMA_IRQHandler+0x6b4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d01d      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <HAL_DMA_IRQHandler+0x6b8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d018      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <HAL_DMA_IRQHandler+0x6bc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HAL_DMA_IRQHandler+0x6c0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <HAL_DMA_IRQHandler+0x6c4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <HAL_DMA_IRQHandler+0x6c8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x678>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <HAL_DMA_IRQHandler+0x6cc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d12b      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x6d0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e02a      	b.n	8004a6c <HAL_DMA_IRQHandler+0x6e4>
 8004a16:	bf00      	nop
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40020058 	.word	0x40020058
 8004a28:	40020070 	.word	0x40020070
 8004a2c:	40020088 	.word	0x40020088
 8004a30:	400200a0 	.word	0x400200a0
 8004a34:	400200b8 	.word	0x400200b8
 8004a38:	40020410 	.word	0x40020410
 8004a3c:	40020428 	.word	0x40020428
 8004a40:	40020440 	.word	0x40020440
 8004a44:	40020458 	.word	0x40020458
 8004a48:	40020470 	.word	0x40020470
 8004a4c:	40020488 	.word	0x40020488
 8004a50:	400204a0 	.word	0x400204a0
 8004a54:	400204b8 	.word	0x400204b8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8087 	beq.w	8004b80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d139      	bne.n	8004b02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0216 	bic.w	r2, r2, #22
 8004a9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_DMA_IRQHandler+0x736>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0208 	bic.w	r2, r2, #8
 8004acc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	223f      	movs	r2, #63	; 0x3f
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 834a 	beq.w	800518c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
          }
          return;
 8004b00:	e344      	b.n	800518c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d02c      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
 8004b2e:	e027      	b.n	8004b80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d023      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	e01e      	b.n	8004b80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10f      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0210 	bic.w	r2, r2, #16
 8004b5e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8306 	beq.w	8005196 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8088 	beq.w	8004ca8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a7a      	ldr	r2, [pc, #488]	; (8004d90 <HAL_DMA_IRQHandler+0xa08>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d04a      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a79      	ldr	r2, [pc, #484]	; (8004d94 <HAL_DMA_IRQHandler+0xa0c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d045      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a77      	ldr	r2, [pc, #476]	; (8004d98 <HAL_DMA_IRQHandler+0xa10>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d040      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a76      	ldr	r2, [pc, #472]	; (8004d9c <HAL_DMA_IRQHandler+0xa14>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d03b      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a74      	ldr	r2, [pc, #464]	; (8004da0 <HAL_DMA_IRQHandler+0xa18>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d036      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a73      	ldr	r2, [pc, #460]	; (8004da4 <HAL_DMA_IRQHandler+0xa1c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d031      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a71      	ldr	r2, [pc, #452]	; (8004da8 <HAL_DMA_IRQHandler+0xa20>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02c      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a70      	ldr	r2, [pc, #448]	; (8004dac <HAL_DMA_IRQHandler+0xa24>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d027      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6e      	ldr	r2, [pc, #440]	; (8004db0 <HAL_DMA_IRQHandler+0xa28>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d022      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6d      	ldr	r2, [pc, #436]	; (8004db4 <HAL_DMA_IRQHandler+0xa2c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d01d      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6b      	ldr	r2, [pc, #428]	; (8004db8 <HAL_DMA_IRQHandler+0xa30>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d018      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6a      	ldr	r2, [pc, #424]	; (8004dbc <HAL_DMA_IRQHandler+0xa34>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a68      	ldr	r2, [pc, #416]	; (8004dc0 <HAL_DMA_IRQHandler+0xa38>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a67      	ldr	r2, [pc, #412]	; (8004dc4 <HAL_DMA_IRQHandler+0xa3c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d009      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a65      	ldr	r2, [pc, #404]	; (8004dc8 <HAL_DMA_IRQHandler+0xa40>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x8b8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a64      	ldr	r2, [pc, #400]	; (8004dcc <HAL_DMA_IRQHandler+0xa44>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <HAL_DMA_IRQHandler+0x8ca>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e007      	b.n	8004c62 <HAL_DMA_IRQHandler+0x8da>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3301      	adds	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d307      	bcc.n	8004c7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f2      	bne.n	8004c62 <HAL_DMA_IRQHandler+0x8da>
 8004c7c:	e000      	b.n	8004c80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004c7e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c9e:	e003      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8272 	beq.w	8005196 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
 8004cba:	e26c      	b.n	8005196 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a43      	ldr	r2, [pc, #268]	; (8004dd0 <HAL_DMA_IRQHandler+0xa48>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <HAL_DMA_IRQHandler+0xa4c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a40      	ldr	r2, [pc, #256]	; (8004dd8 <HAL_DMA_IRQHandler+0xa50>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3f      	ldr	r2, [pc, #252]	; (8004ddc <HAL_DMA_IRQHandler+0xa54>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <HAL_DMA_IRQHandler+0xa58>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <HAL_DMA_IRQHandler+0xa5c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3a      	ldr	r2, [pc, #232]	; (8004de8 <HAL_DMA_IRQHandler+0xa60>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x984>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a39      	ldr	r2, [pc, #228]	; (8004dec <HAL_DMA_IRQHandler+0xa64>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x988>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_DMA_IRQHandler+0x98a>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 823f 	beq.w	8005196 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	2204      	movs	r2, #4
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80cd 	beq.w	8004ed0 <HAL_DMA_IRQHandler+0xb48>
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80c7 	beq.w	8004ed0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d049      	beq.n	8004df0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8210 	beq.w	8005190 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d78:	e20a      	b.n	8005190 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8206 	beq.w	8005190 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d8c:	e200      	b.n	8005190 <HAL_DMA_IRQHandler+0xe08>
 8004d8e:	bf00      	nop
 8004d90:	40020010 	.word	0x40020010
 8004d94:	40020028 	.word	0x40020028
 8004d98:	40020040 	.word	0x40020040
 8004d9c:	40020058 	.word	0x40020058
 8004da0:	40020070 	.word	0x40020070
 8004da4:	40020088 	.word	0x40020088
 8004da8:	400200a0 	.word	0x400200a0
 8004dac:	400200b8 	.word	0x400200b8
 8004db0:	40020410 	.word	0x40020410
 8004db4:	40020428 	.word	0x40020428
 8004db8:	40020440 	.word	0x40020440
 8004dbc:	40020458 	.word	0x40020458
 8004dc0:	40020470 	.word	0x40020470
 8004dc4:	40020488 	.word	0x40020488
 8004dc8:	400204a0 	.word	0x400204a0
 8004dcc:	400204b8 	.word	0x400204b8
 8004dd0:	58025408 	.word	0x58025408
 8004dd4:	5802541c 	.word	0x5802541c
 8004dd8:	58025430 	.word	0x58025430
 8004ddc:	58025444 	.word	0x58025444
 8004de0:	58025458 	.word	0x58025458
 8004de4:	5802546c 	.word	0x5802546c
 8004de8:	58025480 	.word	0x58025480
 8004dec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d160      	bne.n	8004ebc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a8c      	ldr	r2, [pc, #560]	; (8005030 <HAL_DMA_IRQHandler+0xca8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d04a      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a8a      	ldr	r2, [pc, #552]	; (8005034 <HAL_DMA_IRQHandler+0xcac>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d045      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a89      	ldr	r2, [pc, #548]	; (8005038 <HAL_DMA_IRQHandler+0xcb0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d040      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a87      	ldr	r2, [pc, #540]	; (800503c <HAL_DMA_IRQHandler+0xcb4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d03b      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a86      	ldr	r2, [pc, #536]	; (8005040 <HAL_DMA_IRQHandler+0xcb8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d036      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a84      	ldr	r2, [pc, #528]	; (8005044 <HAL_DMA_IRQHandler+0xcbc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d031      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a83      	ldr	r2, [pc, #524]	; (8005048 <HAL_DMA_IRQHandler+0xcc0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d02c      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a81      	ldr	r2, [pc, #516]	; (800504c <HAL_DMA_IRQHandler+0xcc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d027      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a80      	ldr	r2, [pc, #512]	; (8005050 <HAL_DMA_IRQHandler+0xcc8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d022      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7e      	ldr	r2, [pc, #504]	; (8005054 <HAL_DMA_IRQHandler+0xccc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01d      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7d      	ldr	r2, [pc, #500]	; (8005058 <HAL_DMA_IRQHandler+0xcd0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d018      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a7b      	ldr	r2, [pc, #492]	; (800505c <HAL_DMA_IRQHandler+0xcd4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a7a      	ldr	r2, [pc, #488]	; (8005060 <HAL_DMA_IRQHandler+0xcd8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00e      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a78      	ldr	r2, [pc, #480]	; (8005064 <HAL_DMA_IRQHandler+0xcdc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a77      	ldr	r2, [pc, #476]	; (8005068 <HAL_DMA_IRQHandler+0xce0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xb12>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a75      	ldr	r2, [pc, #468]	; (800506c <HAL_DMA_IRQHandler+0xce4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <HAL_DMA_IRQHandler+0xb24>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0208 	bic.w	r2, r2, #8
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e007      	b.n	8004ebc <HAL_DMA_IRQHandler+0xb34>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0204 	bic.w	r2, r2, #4
 8004eba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8165 	beq.w	8005190 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ece:	e15f      	b.n	8005190 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2202      	movs	r2, #2
 8004eda:	409a      	lsls	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80c5 	beq.w	8005070 <HAL_DMA_IRQHandler+0xce8>
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80bf 	beq.w	8005070 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2202      	movs	r2, #2
 8004efc:	409a      	lsls	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d018      	beq.n	8004f3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 813a 	beq.w	8005194 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f28:	e134      	b.n	8005194 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 8130 	beq.w	8005194 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f3c:	e12a      	b.n	8005194 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d168      	bne.n	800501a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a38      	ldr	r2, [pc, #224]	; (8005030 <HAL_DMA_IRQHandler+0xca8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <HAL_DMA_IRQHandler+0xcac>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a35      	ldr	r2, [pc, #212]	; (8005038 <HAL_DMA_IRQHandler+0xcb0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a34      	ldr	r2, [pc, #208]	; (800503c <HAL_DMA_IRQHandler+0xcb4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a32      	ldr	r2, [pc, #200]	; (8005040 <HAL_DMA_IRQHandler+0xcb8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a31      	ldr	r2, [pc, #196]	; (8005044 <HAL_DMA_IRQHandler+0xcbc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <HAL_DMA_IRQHandler+0xcc0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2e      	ldr	r2, [pc, #184]	; (800504c <HAL_DMA_IRQHandler+0xcc4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <HAL_DMA_IRQHandler+0xcc8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <HAL_DMA_IRQHandler+0xccc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a29      	ldr	r2, [pc, #164]	; (8005058 <HAL_DMA_IRQHandler+0xcd0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a28      	ldr	r2, [pc, #160]	; (800505c <HAL_DMA_IRQHandler+0xcd4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <HAL_DMA_IRQHandler+0xcd8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a25      	ldr	r2, [pc, #148]	; (8005064 <HAL_DMA_IRQHandler+0xcdc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a23      	ldr	r2, [pc, #140]	; (8005068 <HAL_DMA_IRQHandler+0xce0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0xc60>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a22      	ldr	r2, [pc, #136]	; (800506c <HAL_DMA_IRQHandler+0xce4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <HAL_DMA_IRQHandler+0xc72>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0214 	bic.w	r2, r2, #20
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e007      	b.n	800500a <HAL_DMA_IRQHandler+0xc82>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 020a 	bic.w	r2, r2, #10
 8005008:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80b8 	beq.w	8005194 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502c:	e0b2      	b.n	8005194 <HAL_DMA_IRQHandler+0xe0c>
 800502e:	bf00      	nop
 8005030:	40020010 	.word	0x40020010
 8005034:	40020028 	.word	0x40020028
 8005038:	40020040 	.word	0x40020040
 800503c:	40020058 	.word	0x40020058
 8005040:	40020070 	.word	0x40020070
 8005044:	40020088 	.word	0x40020088
 8005048:	400200a0 	.word	0x400200a0
 800504c:	400200b8 	.word	0x400200b8
 8005050:	40020410 	.word	0x40020410
 8005054:	40020428 	.word	0x40020428
 8005058:	40020440 	.word	0x40020440
 800505c:	40020458 	.word	0x40020458
 8005060:	40020470 	.word	0x40020470
 8005064:	40020488 	.word	0x40020488
 8005068:	400204a0 	.word	0x400204a0
 800506c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	2208      	movs	r2, #8
 800507a:	409a      	lsls	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8088 	beq.w	8005196 <HAL_DMA_IRQHandler+0xe0e>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8082 	beq.w	8005196 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a41      	ldr	r2, [pc, #260]	; (800519c <HAL_DMA_IRQHandler+0xe14>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d04a      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3f      	ldr	r2, [pc, #252]	; (80051a0 <HAL_DMA_IRQHandler+0xe18>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d045      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3e      	ldr	r2, [pc, #248]	; (80051a4 <HAL_DMA_IRQHandler+0xe1c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d040      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <HAL_DMA_IRQHandler+0xe20>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d03b      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <HAL_DMA_IRQHandler+0xe24>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d036      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <HAL_DMA_IRQHandler+0xe28>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d031      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a38      	ldr	r2, [pc, #224]	; (80051b4 <HAL_DMA_IRQHandler+0xe2c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d02c      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a36      	ldr	r2, [pc, #216]	; (80051b8 <HAL_DMA_IRQHandler+0xe30>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d027      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a35      	ldr	r2, [pc, #212]	; (80051bc <HAL_DMA_IRQHandler+0xe34>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d022      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <HAL_DMA_IRQHandler+0xe38>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01d      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <HAL_DMA_IRQHandler+0xe3c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d018      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <HAL_DMA_IRQHandler+0xe40>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <HAL_DMA_IRQHandler+0xe44>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <HAL_DMA_IRQHandler+0xe48>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <HAL_DMA_IRQHandler+0xe4c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_DMA_IRQHandler+0xdaa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <HAL_DMA_IRQHandler+0xe50>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d108      	bne.n	8005144 <HAL_DMA_IRQHandler+0xdbc>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 021c 	bic.w	r2, r2, #28
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e007      	b.n	8005154 <HAL_DMA_IRQHandler+0xdcc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 020e 	bic.w	r2, r2, #14
 8005152:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2201      	movs	r2, #1
 800515e:	409a      	lsls	r2, r3
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
 800518a:	e004      	b.n	8005196 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800518c:	bf00      	nop
 800518e:	e002      	b.n	8005196 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005190:	bf00      	nop
 8005192:	e000      	b.n	8005196 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005194:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40020010 	.word	0x40020010
 80051a0:	40020028 	.word	0x40020028
 80051a4:	40020040 	.word	0x40020040
 80051a8:	40020058 	.word	0x40020058
 80051ac:	40020070 	.word	0x40020070
 80051b0:	40020088 	.word	0x40020088
 80051b4:	400200a0 	.word	0x400200a0
 80051b8:	400200b8 	.word	0x400200b8
 80051bc:	40020410 	.word	0x40020410
 80051c0:	40020428 	.word	0x40020428
 80051c4:	40020440 	.word	0x40020440
 80051c8:	40020458 	.word	0x40020458
 80051cc:	40020470 	.word	0x40020470
 80051d0:	40020488 	.word	0x40020488
 80051d4:	400204a0 	.word	0x400204a0
 80051d8:	400204b8 	.word	0x400204b8

080051dc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a84      	ldr	r2, [pc, #528]	; (8005424 <DMA_SetConfig+0x230>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d072      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a82      	ldr	r2, [pc, #520]	; (8005428 <DMA_SetConfig+0x234>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d06d      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a81      	ldr	r2, [pc, #516]	; (800542c <DMA_SetConfig+0x238>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d068      	beq.n	80052fe <DMA_SetConfig+0x10a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a7f      	ldr	r2, [pc, #508]	; (8005430 <DMA_SetConfig+0x23c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d063      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a7e      	ldr	r2, [pc, #504]	; (8005434 <DMA_SetConfig+0x240>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d05e      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a7c      	ldr	r2, [pc, #496]	; (8005438 <DMA_SetConfig+0x244>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d059      	beq.n	80052fe <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a7b      	ldr	r2, [pc, #492]	; (800543c <DMA_SetConfig+0x248>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d054      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a79      	ldr	r2, [pc, #484]	; (8005440 <DMA_SetConfig+0x24c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04f      	beq.n	80052fe <DMA_SetConfig+0x10a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a78      	ldr	r2, [pc, #480]	; (8005444 <DMA_SetConfig+0x250>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a76      	ldr	r2, [pc, #472]	; (8005448 <DMA_SetConfig+0x254>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a75      	ldr	r2, [pc, #468]	; (800544c <DMA_SetConfig+0x258>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a73      	ldr	r2, [pc, #460]	; (8005450 <DMA_SetConfig+0x25c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a72      	ldr	r2, [pc, #456]	; (8005454 <DMA_SetConfig+0x260>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <DMA_SetConfig+0x10a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a70      	ldr	r2, [pc, #448]	; (8005458 <DMA_SetConfig+0x264>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <DMA_SetConfig+0x10a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6f      	ldr	r2, [pc, #444]	; (800545c <DMA_SetConfig+0x268>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a6d      	ldr	r2, [pc, #436]	; (8005460 <DMA_SetConfig+0x26c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6c      	ldr	r2, [pc, #432]	; (8005464 <DMA_SetConfig+0x270>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6a      	ldr	r2, [pc, #424]	; (8005468 <DMA_SetConfig+0x274>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a69      	ldr	r2, [pc, #420]	; (800546c <DMA_SetConfig+0x278>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a67      	ldr	r2, [pc, #412]	; (8005470 <DMA_SetConfig+0x27c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a66      	ldr	r2, [pc, #408]	; (8005474 <DMA_SetConfig+0x280>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a64      	ldr	r2, [pc, #400]	; (8005478 <DMA_SetConfig+0x284>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a63      	ldr	r2, [pc, #396]	; (800547c <DMA_SetConfig+0x288>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a61      	ldr	r2, [pc, #388]	; (8005480 <DMA_SetConfig+0x28c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <DMA_SetConfig+0x10e>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <DMA_SetConfig+0x110>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005310:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005322:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a3e      	ldr	r2, [pc, #248]	; (8005424 <DMA_SetConfig+0x230>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d04a      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3d      	ldr	r2, [pc, #244]	; (8005428 <DMA_SetConfig+0x234>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d045      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3b      	ldr	r2, [pc, #236]	; (800542c <DMA_SetConfig+0x238>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d040      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a3a      	ldr	r2, [pc, #232]	; (8005430 <DMA_SetConfig+0x23c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d03b      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a38      	ldr	r2, [pc, #224]	; (8005434 <DMA_SetConfig+0x240>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d036      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a37      	ldr	r2, [pc, #220]	; (8005438 <DMA_SetConfig+0x244>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d031      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a35      	ldr	r2, [pc, #212]	; (800543c <DMA_SetConfig+0x248>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d02c      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <DMA_SetConfig+0x24c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d027      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a32      	ldr	r2, [pc, #200]	; (8005444 <DMA_SetConfig+0x250>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a31      	ldr	r2, [pc, #196]	; (8005448 <DMA_SetConfig+0x254>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01d      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2f      	ldr	r2, [pc, #188]	; (800544c <DMA_SetConfig+0x258>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2e      	ldr	r2, [pc, #184]	; (8005450 <DMA_SetConfig+0x25c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	; (8005454 <DMA_SetConfig+0x260>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <DMA_SetConfig+0x264>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a29      	ldr	r2, [pc, #164]	; (800545c <DMA_SetConfig+0x268>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <DMA_SetConfig+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a28      	ldr	r2, [pc, #160]	; (8005460 <DMA_SetConfig+0x26c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <DMA_SetConfig+0x1d4>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <DMA_SetConfig+0x1d6>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d05a      	beq.n	8005484 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	223f      	movs	r2, #63	; 0x3f
 80053d8:	409a      	lsls	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d108      	bne.n	8005410 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800540e:	e087      	b.n	8005520 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]
}
 8005420:	e07e      	b.n	8005520 <DMA_SetConfig+0x32c>
 8005422:	bf00      	nop
 8005424:	40020010 	.word	0x40020010
 8005428:	40020028 	.word	0x40020028
 800542c:	40020040 	.word	0x40020040
 8005430:	40020058 	.word	0x40020058
 8005434:	40020070 	.word	0x40020070
 8005438:	40020088 	.word	0x40020088
 800543c:	400200a0 	.word	0x400200a0
 8005440:	400200b8 	.word	0x400200b8
 8005444:	40020410 	.word	0x40020410
 8005448:	40020428 	.word	0x40020428
 800544c:	40020440 	.word	0x40020440
 8005450:	40020458 	.word	0x40020458
 8005454:	40020470 	.word	0x40020470
 8005458:	40020488 	.word	0x40020488
 800545c:	400204a0 	.word	0x400204a0
 8005460:	400204b8 	.word	0x400204b8
 8005464:	58025408 	.word	0x58025408
 8005468:	5802541c 	.word	0x5802541c
 800546c:	58025430 	.word	0x58025430
 8005470:	58025444 	.word	0x58025444
 8005474:	58025458 	.word	0x58025458
 8005478:	5802546c 	.word	0x5802546c
 800547c:	58025480 	.word	0x58025480
 8005480:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a28      	ldr	r2, [pc, #160]	; (800552c <DMA_SetConfig+0x338>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d022      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a27      	ldr	r2, [pc, #156]	; (8005530 <DMA_SetConfig+0x33c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d01d      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <DMA_SetConfig+0x340>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d018      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a24      	ldr	r2, [pc, #144]	; (8005538 <DMA_SetConfig+0x344>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a22      	ldr	r2, [pc, #136]	; (800553c <DMA_SetConfig+0x348>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <DMA_SetConfig+0x34c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <DMA_SetConfig+0x350>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <DMA_SetConfig+0x2e0>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <DMA_SetConfig+0x354>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d101      	bne.n	80054d8 <DMA_SetConfig+0x2e4>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <DMA_SetConfig+0x2e6>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d020      	beq.n	8005520 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2201      	movs	r2, #1
 80054e8:	409a      	lsls	r2, r3
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d108      	bne.n	8005510 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	60da      	str	r2, [r3, #12]
}
 800550e:	e007      	b.n	8005520 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	58025408 	.word	0x58025408
 8005530:	5802541c 	.word	0x5802541c
 8005534:	58025430 	.word	0x58025430
 8005538:	58025444 	.word	0x58025444
 800553c:	58025458 	.word	0x58025458
 8005540:	5802546c 	.word	0x5802546c
 8005544:	58025480 	.word	0x58025480
 8005548:	58025494 	.word	0x58025494

0800554c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a42      	ldr	r2, [pc, #264]	; (8005664 <DMA_CalcBaseAndBitshift+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d04a      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a41      	ldr	r2, [pc, #260]	; (8005668 <DMA_CalcBaseAndBitshift+0x11c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d045      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a3f      	ldr	r2, [pc, #252]	; (800566c <DMA_CalcBaseAndBitshift+0x120>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d040      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3e      	ldr	r2, [pc, #248]	; (8005670 <DMA_CalcBaseAndBitshift+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d03b      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3c      	ldr	r2, [pc, #240]	; (8005674 <DMA_CalcBaseAndBitshift+0x128>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d036      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3b      	ldr	r2, [pc, #236]	; (8005678 <DMA_CalcBaseAndBitshift+0x12c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d031      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a39      	ldr	r2, [pc, #228]	; (800567c <DMA_CalcBaseAndBitshift+0x130>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d02c      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a38      	ldr	r2, [pc, #224]	; (8005680 <DMA_CalcBaseAndBitshift+0x134>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d027      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a36      	ldr	r2, [pc, #216]	; (8005684 <DMA_CalcBaseAndBitshift+0x138>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d022      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a35      	ldr	r2, [pc, #212]	; (8005688 <DMA_CalcBaseAndBitshift+0x13c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d01d      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a33      	ldr	r2, [pc, #204]	; (800568c <DMA_CalcBaseAndBitshift+0x140>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d018      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a32      	ldr	r2, [pc, #200]	; (8005690 <DMA_CalcBaseAndBitshift+0x144>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d013      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a30      	ldr	r2, [pc, #192]	; (8005694 <DMA_CalcBaseAndBitshift+0x148>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00e      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <DMA_CalcBaseAndBitshift+0x14c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2d      	ldr	r2, [pc, #180]	; (800569c <DMA_CalcBaseAndBitshift+0x150>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <DMA_CalcBaseAndBitshift+0xa8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <DMA_CalcBaseAndBitshift+0x154>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d101      	bne.n	80055f8 <DMA_CalcBaseAndBitshift+0xac>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <DMA_CalcBaseAndBitshift+0xae>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d024      	beq.n	8005648 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	3b10      	subs	r3, #16
 8005606:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <DMA_CalcBaseAndBitshift+0x158>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005618:	5cd3      	ldrb	r3, [r2, r3]
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d908      	bls.n	8005638 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	4b1f      	ldr	r3, [pc, #124]	; (80056ac <DMA_CalcBaseAndBitshift+0x160>)
 800562e:	4013      	ands	r3, r2
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	659a      	str	r2, [r3, #88]	; 0x58
 8005636:	e00d      	b.n	8005654 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <DMA_CalcBaseAndBitshift+0x160>)
 8005640:	4013      	ands	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6593      	str	r3, [r2, #88]	; 0x58
 8005646:	e005      	b.n	8005654 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40020010 	.word	0x40020010
 8005668:	40020028 	.word	0x40020028
 800566c:	40020040 	.word	0x40020040
 8005670:	40020058 	.word	0x40020058
 8005674:	40020070 	.word	0x40020070
 8005678:	40020088 	.word	0x40020088
 800567c:	400200a0 	.word	0x400200a0
 8005680:	400200b8 	.word	0x400200b8
 8005684:	40020410 	.word	0x40020410
 8005688:	40020428 	.word	0x40020428
 800568c:	40020440 	.word	0x40020440
 8005690:	40020458 	.word	0x40020458
 8005694:	40020470 	.word	0x40020470
 8005698:	40020488 	.word	0x40020488
 800569c:	400204a0 	.word	0x400204a0
 80056a0:	400204b8 	.word	0x400204b8
 80056a4:	aaaaaaab 	.word	0xaaaaaaab
 80056a8:	0800ce18 	.word	0x0800ce18
 80056ac:	fffffc00 	.word	0xfffffc00

080056b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d120      	bne.n	8005706 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d858      	bhi.n	800577e <DMA_CheckFifoParam+0xce>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <DMA_CheckFifoParam+0x24>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056f7 	.word	0x080056f7
 80056dc:	080056e5 	.word	0x080056e5
 80056e0:	0800577f 	.word	0x0800577f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d048      	beq.n	8005782 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056f4:	e045      	b.n	8005782 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056fe:	d142      	bne.n	8005786 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005704:	e03f      	b.n	8005786 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	d123      	bne.n	8005758 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	2b03      	cmp	r3, #3
 8005716:	d838      	bhi.n	800578a <DMA_CheckFifoParam+0xda>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <DMA_CheckFifoParam+0x70>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005731 	.word	0x08005731
 8005724:	08005737 	.word	0x08005737
 8005728:	08005731 	.word	0x08005731
 800572c:	08005749 	.word	0x08005749
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
        break;
 8005734:	e030      	b.n	8005798 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d025      	beq.n	800578e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005746:	e022      	b.n	800578e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005750:	d11f      	bne.n	8005792 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005756:	e01c      	b.n	8005792 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	2b02      	cmp	r3, #2
 800575e:	d902      	bls.n	8005766 <DMA_CheckFifoParam+0xb6>
 8005760:	2b03      	cmp	r3, #3
 8005762:	d003      	beq.n	800576c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005764:	e018      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
        break;
 800576a:	e015      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
    break;
 800577c:	e00b      	b.n	8005796 <DMA_CheckFifoParam+0xe6>
        break;
 800577e:	bf00      	nop
 8005780:	e00a      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        break;
 8005782:	bf00      	nop
 8005784:	e008      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        break;
 8005786:	bf00      	nop
 8005788:	e006      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        break;
 800578a:	bf00      	nop
 800578c:	e004      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        break;
 800578e:	bf00      	nop
 8005790:	e002      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
        break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <DMA_CheckFifoParam+0xe8>
    break;
 8005796:	bf00      	nop
    }
  }

  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop

080057a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a38      	ldr	r2, [pc, #224]	; (800589c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d022      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01d      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a32      	ldr	r2, [pc, #200]	; (80058ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2f      	ldr	r2, [pc, #188]	; (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d101      	bne.n	800580a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	3b08      	subs	r3, #8
 8005818:	4a28      	ldr	r2, [pc, #160]	; (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005834:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005844:	e024      	b.n	8005890 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	3b10      	subs	r3, #16
 800584e:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d806      	bhi.n	800586e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d902      	bls.n	800586e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3308      	adds	r3, #8
 800586c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4b18      	ldr	r3, [pc, #96]	; (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	461a      	mov	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005880:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	2201      	movs	r2, #1
 800588a:	409a      	lsls	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	58025408 	.word	0x58025408
 80058a0:	5802541c 	.word	0x5802541c
 80058a4:	58025430 	.word	0x58025430
 80058a8:	58025444 	.word	0x58025444
 80058ac:	58025458 	.word	0x58025458
 80058b0:	5802546c 	.word	0x5802546c
 80058b4:	58025480 	.word	0x58025480
 80058b8:	58025494 	.word	0x58025494
 80058bc:	cccccccd 	.word	0xcccccccd
 80058c0:	16009600 	.word	0x16009600
 80058c4:	58025880 	.word	0x58025880
 80058c8:	aaaaaaab 	.word	0xaaaaaaab
 80058cc:	400204b8 	.word	0x400204b8
 80058d0:	4002040f 	.word	0x4002040f
 80058d4:	10008200 	.word	0x10008200
 80058d8:	40020880 	.word	0x40020880

080058dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04a      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d847      	bhi.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a25      	ldr	r2, [pc, #148]	; (8005994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a24      	ldr	r2, [pc, #144]	; (8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d101      	bne.n	800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	461a      	mov	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005964:	671a      	str	r2, [r3, #112]	; 0x70
 8005966:	e009      	b.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a11      	ldr	r2, [pc, #68]	; (80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800597a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3b01      	subs	r3, #1
 8005980:	2201      	movs	r2, #1
 8005982:	409a      	lsls	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	58025408 	.word	0x58025408
 8005998:	5802541c 	.word	0x5802541c
 800599c:	58025430 	.word	0x58025430
 80059a0:	58025444 	.word	0x58025444
 80059a4:	58025458 	.word	0x58025458
 80059a8:	5802546c 	.word	0x5802546c
 80059ac:	58025480 	.word	0x58025480
 80059b0:	58025494 	.word	0x58025494
 80059b4:	1600963f 	.word	0x1600963f
 80059b8:	58025940 	.word	0x58025940
 80059bc:	1000823f 	.word	0x1000823f
 80059c0:	40020940 	.word	0x40020940

080059c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059d2:	4b89      	ldr	r3, [pc, #548]	; (8005bf8 <HAL_GPIO_Init+0x234>)
 80059d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059d6:	e194      	b.n	8005d02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	2101      	movs	r1, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa01 f303 	lsl.w	r3, r1, r3
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8186 	beq.w	8005cfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d00b      	beq.n	8005a10 <HAL_GPIO_Init+0x4c>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d007      	beq.n	8005a10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a04:	2b11      	cmp	r3, #17
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b12      	cmp	r3, #18
 8005a0e:	d130      	bne.n	8005a72 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a46:	2201      	movs	r2, #1
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	f003 0201 	and.w	r2, r3, #1
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d003      	beq.n	8005ab2 <HAL_GPIO_Init+0xee>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b12      	cmp	r3, #18
 8005ab0:	d123      	bne.n	8005afa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	08da      	lsrs	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3208      	adds	r2, #8
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	220f      	movs	r2, #15
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	08da      	lsrs	r2, r3, #3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3208      	adds	r2, #8
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	2203      	movs	r2, #3
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0203 	and.w	r2, r3, #3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80e0 	beq.w	8005cfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <HAL_GPIO_Init+0x238>)
 8005b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b42:	4a2e      	ldr	r2, [pc, #184]	; (8005bfc <HAL_GPIO_Init+0x238>)
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <HAL_GPIO_Init+0x238>)
 8005b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5a:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <HAL_GPIO_Init+0x23c>)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	3302      	adds	r3, #2
 8005b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	220f      	movs	r2, #15
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_GPIO_Init+0x240>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d052      	beq.n	8005c2c <HAL_GPIO_Init+0x268>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_GPIO_Init+0x244>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d031      	beq.n	8005bf2 <HAL_GPIO_Init+0x22e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_GPIO_Init+0x248>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02b      	beq.n	8005bee <HAL_GPIO_Init+0x22a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_GPIO_Init+0x24c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d025      	beq.n	8005bea <HAL_GPIO_Init+0x226>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_GPIO_Init+0x250>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <HAL_GPIO_Init+0x222>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <HAL_GPIO_Init+0x254>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x21e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <HAL_GPIO_Init+0x258>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x21a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_GPIO_Init+0x25c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x216>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_GPIO_Init+0x260>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x212>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <HAL_GPIO_Init+0x264>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x20e>
 8005bce:	2309      	movs	r3, #9
 8005bd0:	e02d      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	e02b      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	e029      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bda:	2307      	movs	r3, #7
 8005bdc:	e027      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bde:	2306      	movs	r3, #6
 8005be0:	e025      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005be2:	2305      	movs	r3, #5
 8005be4:	e023      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005be6:	2304      	movs	r3, #4
 8005be8:	e021      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bea:	2303      	movs	r3, #3
 8005bec:	e01f      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e01d      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e01b      	b.n	8005c2e <HAL_GPIO_Init+0x26a>
 8005bf6:	bf00      	nop
 8005bf8:	58000080 	.word	0x58000080
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	58000400 	.word	0x58000400
 8005c04:	58020000 	.word	0x58020000
 8005c08:	58020400 	.word	0x58020400
 8005c0c:	58020800 	.word	0x58020800
 8005c10:	58020c00 	.word	0x58020c00
 8005c14:	58021000 	.word	0x58021000
 8005c18:	58021400 	.word	0x58021400
 8005c1c:	58021800 	.word	0x58021800
 8005c20:	58021c00 	.word	0x58021c00
 8005c24:	58022000 	.word	0x58022000
 8005c28:	58022400 	.word	0x58022400
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	f002 0203 	and.w	r2, r2, #3
 8005c34:	0092      	lsls	r2, r2, #2
 8005c36:	4093      	lsls	r3, r2
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c3e:	4938      	ldr	r1, [pc, #224]	; (8005d20 <HAL_GPIO_Init+0x35c>)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	089b      	lsrs	r3, r3, #2
 8005c44:	3302      	adds	r3, #2
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f47f ae63 	bne.w	80059d8 <HAL_GPIO_Init+0x14>
  }
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3724      	adds	r7, #36	; 0x24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	58000400 	.word	0x58000400

08005d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	887b      	ldrh	r3, [r7, #2]
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e001      	b.n	8005d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d70:	e003      	b.n	8005d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e041      	b.n	8005e1c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005da0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f245 5255 	movw	r2, #21845	; 0x5555
 8005daa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6852      	ldr	r2, [r2, #4]
 8005db4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005dc0:	f7fc fec2 	bl	8002b48 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005dc6:	e00f      	b.n	8005de8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005dc8:	f7fc febe 	bl	8002b48 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b30      	cmp	r3, #48	; 0x30
 8005dd4:	d908      	bls.n	8005de8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e019      	b.n	8005e1c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e8      	bne.n	8005dc8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d005      	beq.n	8005e10 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	68d2      	ldr	r2, [r2, #12]
 8005e0c:	611a      	str	r2, [r3, #16]
 8005e0e:	e004      	b.n	8005e1a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005e34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d00a      	beq.n	8005e6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e58:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d001      	beq.n	8005e6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e01f      	b.n	8005eaa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e01d      	b.n	8005eaa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f023 0207 	bic.w	r2, r3, #7
 8005e76:	490f      	ldr	r1, [pc, #60]	; (8005eb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e7e:	f7fc fe63 	bl	8002b48 <HAL_GetTick>
 8005e82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e84:	e009      	b.n	8005e9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e86:	f7fc fe5f 	bl	8002b48 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e94:	d901      	bls.n	8005e9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e007      	b.n	8005eaa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <HAL_PWREx_ConfigSupply+0x70>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea6:	d1ee      	bne.n	8005e86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	58024800 	.word	0x58024800

08005eb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e3ff      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8087 	beq.w	8005fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed8:	4b99      	ldr	r3, [pc, #612]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ee2:	4b97      	ldr	r3, [pc, #604]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d007      	beq.n	8005efe <HAL_RCC_OscConfig+0x46>
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	2b18      	cmp	r3, #24
 8005ef2:	d110      	bne.n	8005f16 <HAL_RCC_OscConfig+0x5e>
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d10b      	bne.n	8005f16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005efe:	4b90      	ldr	r3, [pc, #576]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d06c      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x12c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d168      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e3d9      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCC_OscConfig+0x76>
 8005f20:	4b87      	ldr	r3, [pc, #540]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a86      	ldr	r2, [pc, #536]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e02e      	b.n	8005f8c <HAL_RCC_OscConfig+0xd4>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x98>
 8005f36:	4b82      	ldr	r3, [pc, #520]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a81      	ldr	r2, [pc, #516]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4b7f      	ldr	r3, [pc, #508]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a7e      	ldr	r2, [pc, #504]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	e01d      	b.n	8005f8c <HAL_RCC_OscConfig+0xd4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCC_OscConfig+0xbc>
 8005f5a:	4b79      	ldr	r3, [pc, #484]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a78      	ldr	r2, [pc, #480]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	4b76      	ldr	r3, [pc, #472]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a75      	ldr	r2, [pc, #468]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e00b      	b.n	8005f8c <HAL_RCC_OscConfig+0xd4>
 8005f74:	4b72      	ldr	r3, [pc, #456]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a71      	ldr	r2, [pc, #452]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4b6f      	ldr	r3, [pc, #444]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6e      	ldr	r2, [pc, #440]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d013      	beq.n	8005fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fc fdd8 	bl	8002b48 <HAL_GetTick>
 8005f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9c:	f7fc fdd4 	bl	8002b48 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b64      	cmp	r3, #100	; 0x64
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e38d      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fae:	4b64      	ldr	r3, [pc, #400]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0xe4>
 8005fba:	e014      	b.n	8005fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fc fdc4 	bl	8002b48 <HAL_GetTick>
 8005fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fc fdc0 	bl	8002b48 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	; 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e379      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fd6:	4b5a      	ldr	r3, [pc, #360]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x10c>
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80ae 	beq.w	8006150 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff4:	4b52      	ldr	r3, [pc, #328]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ffc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ffe:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_RCC_OscConfig+0x162>
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	2b18      	cmp	r3, #24
 800600e:	d13a      	bne.n	8006086 <HAL_RCC_OscConfig+0x1ce>
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d135      	bne.n	8006086 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800601a:	4b49      	ldr	r3, [pc, #292]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_RCC_OscConfig+0x17a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e34b      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006032:	f7fc fd95 	bl	8002b60 <HAL_GetREVID>
 8006036:	4603      	mov	r3, r0
 8006038:	f241 0203 	movw	r2, #4099	; 0x1003
 800603c:	4293      	cmp	r3, r2
 800603e:	d817      	bhi.n	8006070 <HAL_RCC_OscConfig+0x1b8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d108      	bne.n	800605a <HAL_RCC_OscConfig+0x1a2>
 8006048:	4b3d      	ldr	r3, [pc, #244]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006050:	4a3b      	ldr	r2, [pc, #236]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006056:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006058:	e07a      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605a:	4b39      	ldr	r3, [pc, #228]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	4935      	ldr	r1, [pc, #212]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800606e:	e06f      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006070:	4b33      	ldr	r3, [pc, #204]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	4930      	ldr	r1, [pc, #192]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006080:	4313      	orrs	r3, r2
 8006082:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006084:	e064      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d045      	beq.n	800611a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 0219 	bic.w	r2, r3, #25
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	4929      	ldr	r1, [pc, #164]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fc fd52 	bl	8002b48 <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a8:	f7fc fd4e 	bl	8002b48 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e307      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060ba:	4b21      	ldr	r3, [pc, #132]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	f7fc fd4b 	bl	8002b60 <HAL_GetREVID>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d817      	bhi.n	8006104 <HAL_RCC_OscConfig+0x24c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d108      	bne.n	80060ee <HAL_RCC_OscConfig+0x236>
 80060dc:	4b18      	ldr	r3, [pc, #96]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060e4:	4a16      	ldr	r2, [pc, #88]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ea:	6053      	str	r3, [r2, #4]
 80060ec:	e030      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
 80060ee:	4b14      	ldr	r3, [pc, #80]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	031b      	lsls	r3, r3, #12
 80060fc:	4910      	ldr	r1, [pc, #64]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	604b      	str	r3, [r1, #4]
 8006102:	e025      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	490b      	ldr	r1, [pc, #44]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006114:	4313      	orrs	r3, r2
 8006116:	604b      	str	r3, [r1, #4]
 8006118:	e01a      	b.n	8006150 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a08      	ldr	r2, [pc, #32]	; (8006140 <HAL_RCC_OscConfig+0x288>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006126:	f7fc fd0f 	bl	8002b48 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800612c:	e00a      	b.n	8006144 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800612e:	f7fc fd0b 	bl	8002b48 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d903      	bls.n	8006144 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e2c4      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
 8006140:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006144:	4ba4      	ldr	r3, [pc, #656]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ee      	bne.n	800612e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a9 	beq.w	80062b0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615e:	4b9e      	ldr	r3, [pc, #632]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006166:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006168:	4b9b      	ldr	r3, [pc, #620]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d007      	beq.n	8006184 <HAL_RCC_OscConfig+0x2cc>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b18      	cmp	r3, #24
 8006178:	d13a      	bne.n	80061f0 <HAL_RCC_OscConfig+0x338>
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d135      	bne.n	80061f0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006184:	4b94      	ldr	r3, [pc, #592]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_RCC_OscConfig+0x2e4>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d001      	beq.n	800619c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e296      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800619c:	f7fc fce0 	bl	8002b60 <HAL_GetREVID>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d817      	bhi.n	80061da <HAL_RCC_OscConfig+0x322>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d108      	bne.n	80061c4 <HAL_RCC_OscConfig+0x30c>
 80061b2:	4b89      	ldr	r3, [pc, #548]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061ba:	4a87      	ldr	r2, [pc, #540]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061c2:	e075      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061c4:	4b84      	ldr	r3, [pc, #528]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	069b      	lsls	r3, r3, #26
 80061d2:	4981      	ldr	r1, [pc, #516]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061d8:	e06a      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061da:	4b7f      	ldr	r3, [pc, #508]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	061b      	lsls	r3, r3, #24
 80061e8:	497b      	ldr	r1, [pc, #492]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061ee:	e05f      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d042      	beq.n	800627e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061f8:	4b77      	ldr	r3, [pc, #476]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a76      	ldr	r2, [pc, #472]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fc fca0 	bl	8002b48 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800620c:	f7fc fc9c 	bl	8002b48 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e255      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800621e:	4b6e      	ldr	r3, [pc, #440]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800622a:	f7fc fc99 	bl	8002b60 <HAL_GetREVID>
 800622e:	4603      	mov	r3, r0
 8006230:	f241 0203 	movw	r2, #4099	; 0x1003
 8006234:	4293      	cmp	r3, r2
 8006236:	d817      	bhi.n	8006268 <HAL_RCC_OscConfig+0x3b0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	2b20      	cmp	r3, #32
 800623e:	d108      	bne.n	8006252 <HAL_RCC_OscConfig+0x39a>
 8006240:	4b65      	ldr	r3, [pc, #404]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006248:	4a63      	ldr	r2, [pc, #396]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 800624a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800624e:	6053      	str	r3, [r2, #4]
 8006250:	e02e      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f8>
 8006252:	4b61      	ldr	r3, [pc, #388]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	069b      	lsls	r3, r3, #26
 8006260:	495d      	ldr	r1, [pc, #372]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]
 8006266:	e023      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f8>
 8006268:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	4958      	ldr	r1, [pc, #352]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006278:	4313      	orrs	r3, r2
 800627a:	60cb      	str	r3, [r1, #12]
 800627c:	e018      	b.n	80062b0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800627e:	4b56      	ldr	r3, [pc, #344]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a55      	ldr	r2, [pc, #340]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628a:	f7fc fc5d 	bl	8002b48 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006292:	f7fc fc59 	bl	8002b48 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e212      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062a4:	4b4c      	ldr	r3, [pc, #304]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d036      	beq.n	800632a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d019      	beq.n	80062f8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c4:	4b44      	ldr	r3, [pc, #272]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80062c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c8:	4a43      	ldr	r2, [pc, #268]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc fc3a 	bl	8002b48 <HAL_GetTick>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062d8:	f7fc fc36 	bl	8002b48 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e1ef      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062ea:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80062ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0x420>
 80062f6:	e018      	b.n	800632a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f8:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80062fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fc:	4a36      	ldr	r2, [pc, #216]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006304:	f7fc fc20 	bl	8002b48 <HAL_GetTick>
 8006308:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800630c:	f7fc fc1c 	bl	8002b48 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e1d5      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800631e:	4b2e      	ldr	r3, [pc, #184]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d036      	beq.n	80063a4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d019      	beq.n	8006372 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800633e:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a25      	ldr	r2, [pc, #148]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006348:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800634a:	f7fc fbfd 	bl	8002b48 <HAL_GetTick>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006352:	f7fc fbf9 	bl	8002b48 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e1b2      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006364:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x49a>
 8006370:	e018      	b.n	80063a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006372:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 8006378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800637e:	f7fc fbe3 	bl	8002b48 <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006386:	f7fc fbdf 	bl	8002b48 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e198      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <HAL_RCC_OscConfig+0x520>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8085 	beq.w	80064bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCC_OscConfig+0x524>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <HAL_RCC_OscConfig+0x524>)
 80063b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063be:	f7fc fbc3 	bl	8002b48 <HAL_GetTick>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c4:	e00c      	b.n	80063e0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063c6:	f7fc fbbf 	bl	8002b48 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b64      	cmp	r3, #100	; 0x64
 80063d2:	d905      	bls.n	80063e0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e178      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
 80063d8:	58024400 	.word	0x58024400
 80063dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e0:	4b96      	ldr	r3, [pc, #600]	; (800663c <HAL_RCC_OscConfig+0x784>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0ec      	beq.n	80063c6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d106      	bne.n	8006402 <HAL_RCC_OscConfig+0x54a>
 80063f4:	4b92      	ldr	r3, [pc, #584]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a91      	ldr	r2, [pc, #580]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006400:	e02d      	b.n	800645e <HAL_RCC_OscConfig+0x5a6>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0x56c>
 800640a:	4b8d      	ldr	r3, [pc, #564]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640e:	4a8c      	ldr	r2, [pc, #560]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6713      	str	r3, [r2, #112]	; 0x70
 8006416:	4b8a      	ldr	r3, [pc, #552]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	4a89      	ldr	r2, [pc, #548]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800641c:	f023 0304 	bic.w	r3, r3, #4
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
 8006422:	e01c      	b.n	800645e <HAL_RCC_OscConfig+0x5a6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b05      	cmp	r3, #5
 800642a:	d10c      	bne.n	8006446 <HAL_RCC_OscConfig+0x58e>
 800642c:	4b84      	ldr	r3, [pc, #528]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	4a83      	ldr	r2, [pc, #524]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006432:	f043 0304 	orr.w	r3, r3, #4
 8006436:	6713      	str	r3, [r2, #112]	; 0x70
 8006438:	4b81      	ldr	r3, [pc, #516]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	4a80      	ldr	r2, [pc, #512]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	6713      	str	r3, [r2, #112]	; 0x70
 8006444:	e00b      	b.n	800645e <HAL_RCC_OscConfig+0x5a6>
 8006446:	4b7e      	ldr	r3, [pc, #504]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	4a7d      	ldr	r2, [pc, #500]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	6713      	str	r3, [r2, #112]	; 0x70
 8006452:	4b7b      	ldr	r3, [pc, #492]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	4a7a      	ldr	r2, [pc, #488]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d015      	beq.n	8006492 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006466:	f7fc fb6f 	bl	8002b48 <HAL_GetTick>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fc fb6b 	bl	8002b48 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	; 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e122      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006484:	4b6e      	ldr	r3, [pc, #440]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ee      	beq.n	800646e <HAL_RCC_OscConfig+0x5b6>
 8006490:	e014      	b.n	80064bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006492:	f7fc fb59 	bl	8002b48 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f7fc fb55 	bl	8002b48 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e10c      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064b0:	4b63      	ldr	r3, [pc, #396]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ee      	bne.n	800649a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8101 	beq.w	80066c8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064c6:	4b5e      	ldr	r3, [pc, #376]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ce:	2b18      	cmp	r3, #24
 80064d0:	f000 80bc 	beq.w	800664c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	2b02      	cmp	r3, #2
 80064da:	f040 8095 	bne.w	8006608 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064de:	4b58      	ldr	r3, [pc, #352]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a57      	ldr	r2, [pc, #348]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80064e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fc fb2d 	bl	8002b48 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f2:	f7fc fb29 	bl	8002b48 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e0e2      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006504:	4b4e      	ldr	r3, [pc, #312]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006510:	4b4b      	ldr	r3, [pc, #300]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006514:	4b4b      	ldr	r3, [pc, #300]	; (8006644 <HAL_RCC_OscConfig+0x78c>)
 8006516:	4013      	ands	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006520:	0112      	lsls	r2, r2, #4
 8006522:	430a      	orrs	r2, r1
 8006524:	4946      	ldr	r1, [pc, #280]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006526:	4313      	orrs	r3, r2
 8006528:	628b      	str	r3, [r1, #40]	; 0x28
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	3b01      	subs	r3, #1
 8006530:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	3b01      	subs	r3, #1
 800653a:	025b      	lsls	r3, r3, #9
 800653c:	b29b      	uxth	r3, r3
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	3b01      	subs	r3, #1
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	3b01      	subs	r3, #1
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800655a:	4939      	ldr	r1, [pc, #228]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800655c:	4313      	orrs	r3, r2
 800655e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006560:	4b37      	ldr	r3, [pc, #220]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a36      	ldr	r2, [pc, #216]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800656c:	4b34      	ldr	r3, [pc, #208]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800656e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006570:	4b35      	ldr	r3, [pc, #212]	; (8006648 <HAL_RCC_OscConfig+0x790>)
 8006572:	4013      	ands	r3, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006578:	00d2      	lsls	r2, r2, #3
 800657a:	4931      	ldr	r1, [pc, #196]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800657c:	4313      	orrs	r3, r2
 800657e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006580:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	f023 020c 	bic.w	r2, r3, #12
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	492c      	ldr	r1, [pc, #176]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800658e:	4313      	orrs	r3, r2
 8006590:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006592:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	f023 0202 	bic.w	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	4928      	ldr	r1, [pc, #160]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065a4:	4b26      	ldr	r3, [pc, #152]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	4a25      	ldr	r2, [pc, #148]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b0:	4b23      	ldr	r3, [pc, #140]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	4a22      	ldr	r2, [pc, #136]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065bc:	4b20      	ldr	r3, [pc, #128]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80065c8:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a19      	ldr	r2, [pc, #100]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fc fab2 	bl	8002b48 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fc faae 	bl	8002b48 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e067      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x730>
 8006606:	e05f      	b.n	80066c8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fc fa98 	bl	8002b48 <HAL_GetTick>
 8006618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800661c:	f7fc fa94 	bl	8002b48 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e04d      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800662e:	4b04      	ldr	r3, [pc, #16]	; (8006640 <HAL_RCC_OscConfig+0x788>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x764>
 800663a:	e045      	b.n	80066c8 <HAL_RCC_OscConfig+0x810>
 800663c:	58024800 	.word	0x58024800
 8006640:	58024400 	.word	0x58024400
 8006644:	fffffc0c 	.word	0xfffffc0c
 8006648:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800664c:	4b21      	ldr	r3, [pc, #132]	; (80066d4 <HAL_RCC_OscConfig+0x81c>)
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006652:	4b20      	ldr	r3, [pc, #128]	; (80066d4 <HAL_RCC_OscConfig+0x81c>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b01      	cmp	r3, #1
 800665e:	d031      	beq.n	80066c4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f003 0203 	and.w	r2, r3, #3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d12a      	bne.n	80066c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d122      	bne.n	80066c4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d11a      	bne.n	80066c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	0a5b      	lsrs	r3, r3, #9
 8006692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d111      	bne.n	80066c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d108      	bne.n	80066c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	0e1b      	lsrs	r3, r3, #24
 80066b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3730      	adds	r7, #48	; 0x30
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	58024400 	.word	0x58024400

080066d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e19c      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b8a      	ldr	r3, [pc, #552]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d910      	bls.n	800671c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b87      	ldr	r3, [pc, #540]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	4985      	ldr	r1, [pc, #532]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b83      	ldr	r3, [pc, #524]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e184      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	4b7b      	ldr	r3, [pc, #492]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006738:	4b78      	ldr	r3, [pc, #480]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	4975      	ldr	r1, [pc, #468]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	4b70      	ldr	r3, [pc, #448]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006766:	4b6d      	ldr	r3, [pc, #436]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	496a      	ldr	r1, [pc, #424]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	4b64      	ldr	r3, [pc, #400]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006794:	4b61      	ldr	r3, [pc, #388]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	495e      	ldr	r1, [pc, #376]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	4b59      	ldr	r3, [pc, #356]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067be:	429a      	cmp	r2, r3
 80067c0:	d908      	bls.n	80067d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067c2:	4b56      	ldr	r3, [pc, #344]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4953      	ldr	r1, [pc, #332]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b4d      	ldr	r3, [pc, #308]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d908      	bls.n	8006802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	4b4a      	ldr	r3, [pc, #296]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f023 020f 	bic.w	r2, r3, #15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4947      	ldr	r1, [pc, #284]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d055      	beq.n	80068ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800680e:	4b43      	ldr	r3, [pc, #268]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4940      	ldr	r1, [pc, #256]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800681c:	4313      	orrs	r3, r2
 800681e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d107      	bne.n	8006838 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006828:	4b3c      	ldr	r3, [pc, #240]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d121      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0f6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d107      	bne.n	8006850 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006840:	4b36      	ldr	r3, [pc, #216]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0ea      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006858:	4b30      	ldr	r3, [pc, #192]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0de      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006868:	4b2c      	ldr	r3, [pc, #176]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0d6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f023 0207 	bic.w	r2, r3, #7
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4925      	ldr	r1, [pc, #148]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fc f95d 	bl	8002b48 <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006892:	f7fc f959 	bl	8002b48 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0be      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1eb      	bne.n	8006892 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d208      	bcs.n	80068e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f023 020f 	bic.w	r2, r3, #15
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	490e      	ldr	r1, [pc, #56]	; (800691c <HAL_RCC_ClockConfig+0x244>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d214      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 020f 	bic.w	r2, r3, #15
 80068fe:	4906      	ldr	r1, [pc, #24]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006906:	4b04      	ldr	r3, [pc, #16]	; (8006918 <HAL_RCC_ClockConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e086      	b.n	8006a26 <HAL_RCC_ClockConfig+0x34e>
 8006918:	52002000 	.word	0x52002000
 800691c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800693c:	4b3c      	ldr	r3, [pc, #240]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	4939      	ldr	r1, [pc, #228]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800696a:	4b31      	ldr	r3, [pc, #196]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	492e      	ldr	r1, [pc, #184]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006994:	429a      	cmp	r2, r3
 8006996:	d208      	bcs.n	80069aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	4922      	ldr	r1, [pc, #136]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d208      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069c6:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4917      	ldr	r1, [pc, #92]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069d8:	f000 f834 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	4912      	ldr	r1, [pc, #72]	; (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069f6:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <HAL_RCC_ClockConfig+0x358>)
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	4a0d      	ldr	r2, [pc, #52]	; (8006a34 <HAL_RCC_ClockConfig+0x35c>)
 8006a00:	5cd3      	ldrb	r3, [r2, r3]
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <HAL_RCC_ClockConfig+0x360>)
 8006a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <HAL_RCC_ClockConfig+0x364>)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <HAL_RCC_ClockConfig+0x368>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fb fb4c 	bl	80020b8 <HAL_InitTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	0800ce08 	.word	0x0800ce08
 8006a38:	20000004 	.word	0x20000004
 8006a3c:	20000000 	.word	0x20000000
 8006a40:	20000008 	.word	0x20000008

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a4a:	4bb3      	ldr	r3, [pc, #716]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	2b18      	cmp	r3, #24
 8006a54:	f200 8155 	bhi.w	8006d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006ac5 	.word	0x08006ac5
 8006a64:	08006d03 	.word	0x08006d03
 8006a68:	08006d03 	.word	0x08006d03
 8006a6c:	08006d03 	.word	0x08006d03
 8006a70:	08006d03 	.word	0x08006d03
 8006a74:	08006d03 	.word	0x08006d03
 8006a78:	08006d03 	.word	0x08006d03
 8006a7c:	08006d03 	.word	0x08006d03
 8006a80:	08006aeb 	.word	0x08006aeb
 8006a84:	08006d03 	.word	0x08006d03
 8006a88:	08006d03 	.word	0x08006d03
 8006a8c:	08006d03 	.word	0x08006d03
 8006a90:	08006d03 	.word	0x08006d03
 8006a94:	08006d03 	.word	0x08006d03
 8006a98:	08006d03 	.word	0x08006d03
 8006a9c:	08006d03 	.word	0x08006d03
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006d03 	.word	0x08006d03
 8006aa8:	08006d03 	.word	0x08006d03
 8006aac:	08006d03 	.word	0x08006d03
 8006ab0:	08006d03 	.word	0x08006d03
 8006ab4:	08006d03 	.word	0x08006d03
 8006ab8:	08006d03 	.word	0x08006d03
 8006abc:	08006d03 	.word	0x08006d03
 8006ac0:	08006af7 	.word	0x08006af7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac4:	4b94      	ldr	r3, [pc, #592]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d009      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ad0:	4b91      	ldr	r3, [pc, #580]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	4a90      	ldr	r2, [pc, #576]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006ae2:	e111      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ae4:	4b8d      	ldr	r3, [pc, #564]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae6:	61bb      	str	r3, [r7, #24]
    break;
 8006ae8:	e10e      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006aea:	4b8d      	ldr	r3, [pc, #564]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006aec:	61bb      	str	r3, [r7, #24]
    break;
 8006aee:	e10b      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006af0:	4b8c      	ldr	r3, [pc, #560]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006af2:	61bb      	str	r3, [r7, #24]
    break;
 8006af4:	e108      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006af6:	4b88      	ldr	r3, [pc, #544]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b00:	4b85      	ldr	r3, [pc, #532]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b0c:	4b82      	ldr	r3, [pc, #520]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b16:	4b80      	ldr	r3, [pc, #512]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1a:	08db      	lsrs	r3, r3, #3
 8006b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80e1 	beq.w	8006cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	f000 8083 	beq.w	8006c48 <HAL_RCC_GetSysClockFreq+0x204>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f200 80a1 	bhi.w	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x114>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d056      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b56:	e099      	b.n	8006c8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b58:	4b6f      	ldr	r3, [pc, #444]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02d      	beq.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b64:	4b6c      	ldr	r3, [pc, #432]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	4a6b      	ldr	r2, [pc, #428]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b62      	ldr	r3, [pc, #392]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006bbe:	e087      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b51      	ldr	r3, [pc, #324]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c02:	e065      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c46:	e043      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8a:	e021      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	0a5b      	lsrs	r3, r3, #9
 8006cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cda:	3301      	adds	r3, #1
 8006cdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf4:	ee17 3a90 	vmov	r3, s15
 8006cf8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006cfa:	e005      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
    break;
 8006d00:	e002      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d04:	61bb      	str	r3, [r7, #24]
    break;
 8006d06:	bf00      	nop
  }

  return sysclockfreq;
 8006d08:	69bb      	ldr	r3, [r7, #24]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3724      	adds	r7, #36	; 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	03d09000 	.word	0x03d09000
 8006d20:	003d0900 	.word	0x003d0900
 8006d24:	017d7840 	.word	0x017d7840
 8006d28:	46000000 	.word	0x46000000
 8006d2c:	4c742400 	.word	0x4c742400
 8006d30:	4a742400 	.word	0x4a742400
 8006d34:	4bbebc20 	.word	0x4bbebc20

08006d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d3e:	f7ff fe81 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490f      	ldr	r1, [pc, #60]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d7c:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	0800ce08 	.word	0x0800ce08
 8006d90:	20000004 	.word	0x20000004
 8006d94:	20000000 	.word	0x20000000

08006d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d9c:	f7ff ffcc 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	0800ce08 	.word	0x0800ce08

08006dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dc8:	f7ff ffb6 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	4904      	ldr	r1, [pc, #16]	; (8006dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dda:	5ccb      	ldrb	r3, [r1, r3]
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	58024400 	.word	0x58024400
 8006dec:	0800ce08 	.word	0x0800ce08

08006df0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	223f      	movs	r2, #63	; 0x3f
 8006dfe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e00:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0207 	and.w	r2, r3, #7
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006e0c:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006e30:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006e48:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <HAL_RCC_GetClockConfig+0x7c>)
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <HAL_RCC_GetClockConfig+0x80>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	601a      	str	r2, [r3, #0]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	52002000 	.word	0x52002000

08006e74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e80:	2300      	movs	r3, #0
 8006e82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d03f      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e98:	d02a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e9e:	d824      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea4:	d018      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eaa:	d81e      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb4:	d007      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006eb6:	e018      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb8:	4bab      	ldr	r3, [pc, #684]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4aaa      	ldr	r2, [pc, #680]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ec4:	e015      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f9cf 	bl	8008270 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ed6:	e00c      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3324      	adds	r3, #36	; 0x24
 8006edc:	2102      	movs	r1, #2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fa78 	bl	80083d4 <RCCEx_PLL3_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ee8:	e003      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	75fb      	strb	r3, [r7, #23]
      break;
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d109      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ef8:	4b9b      	ldr	r3, [pc, #620]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f04:	4998      	ldr	r1, [pc, #608]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	650b      	str	r3, [r1, #80]	; 0x50
 8006f0a:	e001      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d03d      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d826      	bhi.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f24:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f41 	.word	0x08006f41
 8006f30:	08006f4f 	.word	0x08006f4f
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	08006f79 	.word	0x08006f79
 8006f3c:	08006f79 	.word	0x08006f79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f40:	4b89      	ldr	r3, [pc, #548]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	4a88      	ldr	r2, [pc, #544]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f4c:	e015      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 f98b 	bl	8008270 <RCCEx_PLL2_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f5e:	e00c      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fa34 	bl	80083d4 <RCCEx_PLL3_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f70:	e003      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
      break;
 8006f76:	e000      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f80:	4b79      	ldr	r3, [pc, #484]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f84:	f023 0207 	bic.w	r2, r3, #7
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8c:	4976      	ldr	r1, [pc, #472]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	650b      	str	r3, [r1, #80]	; 0x50
 8006f92:	e001      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d042      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fac:	d02b      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb2:	d825      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fb4:	2bc0      	cmp	r3, #192	; 0xc0
 8006fb6:	d028      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8006fba:	d821      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fbc:	2b80      	cmp	r3, #128	; 0x80
 8006fbe:	d016      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d81d      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d007      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006fcc:	e018      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fce:	4b66      	ldr	r3, [pc, #408]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	4a65      	ldr	r2, [pc, #404]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fda:	e017      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f944 	bl	8008270 <RCCEx_PLL2_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fec:	e00e      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f9ed 	bl	80083d4 <RCCEx_PLL3_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ffe:	e005      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      break;
 8007004:	e002      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007006:	bf00      	nop
 8007008:	e000      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800700a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007012:	4b55      	ldr	r3, [pc, #340]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007016:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	4952      	ldr	r1, [pc, #328]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007020:	4313      	orrs	r3, r2
 8007022:	650b      	str	r3, [r1, #80]	; 0x50
 8007024:	e001      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007032:	2b00      	cmp	r3, #0
 8007034:	d049      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800703c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007040:	d030      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007046:	d82a      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007048:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800704c:	d02c      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800704e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007052:	d824      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007058:	d018      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800705a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800705e:	d81e      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007068:	d007      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800706a:	e018      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4b3e      	ldr	r3, [pc, #248]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a3d      	ldr	r2, [pc, #244]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007078:	e017      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f001 f8f5 	bl	8008270 <RCCEx_PLL2_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800708a:	e00e      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f001 f99e 	bl	80083d4 <RCCEx_PLL3_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800709c:	e005      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	75fb      	strb	r3, [r7, #23]
      break;
 80070a2:	e002      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80070a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070b0:	4b2d      	ldr	r3, [pc, #180]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070be:	492a      	ldr	r1, [pc, #168]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	658b      	str	r3, [r1, #88]	; 0x58
 80070c4:	e001      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d04c      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070e0:	d030      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80070e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070e6:	d82a      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070ec:	d02c      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80070ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070f2:	d824      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070f8:	d018      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80070fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fe:	d81e      	bhi.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007108:	d007      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800710a:	e018      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710c:	4b16      	ldr	r3, [pc, #88]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a15      	ldr	r2, [pc, #84]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007118:	e017      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3304      	adds	r3, #4
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f8a5 	bl	8008270 <RCCEx_PLL2_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800712a:	e00e      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3324      	adds	r3, #36	; 0x24
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f001 f94e 	bl	80083d4 <RCCEx_PLL3_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800713c:	e005      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	75fb      	strb	r3, [r7, #23]
      break;
 8007142:	e002      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800715e:	4902      	ldr	r1, [pc, #8]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	658b      	str	r3, [r1, #88]	; 0x58
 8007164:	e004      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007166:	bf00      	nop
 8007168:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d032      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007180:	2b30      	cmp	r3, #48	; 0x30
 8007182:	d01c      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d817      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007188:	2b20      	cmp	r3, #32
 800718a:	d00c      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d813      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d016      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007194:	2b10      	cmp	r3, #16
 8007196:	d10f      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007198:	4baf      	ldr	r3, [pc, #700]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4aae      	ldr	r2, [pc, #696]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800719e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80071a4:	e00e      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3304      	adds	r3, #4
 80071aa:	2102      	movs	r1, #2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f85f 	bl	8008270 <RCCEx_PLL2_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80071b6:	e005      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
      break;
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80071c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071ca:	4ba3      	ldr	r3, [pc, #652]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	49a0      	ldr	r1, [pc, #640]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071dc:	e001      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d047      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f6:	d030      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80071f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071fc:	d82a      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80071fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007202:	d02c      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007208:	d824      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800720a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720e:	d018      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007214:	d81e      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721e:	d007      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007220:	e018      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007222:	4b8d      	ldr	r3, [pc, #564]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	4a8c      	ldr	r2, [pc, #560]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800722c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800722e:	e017      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f001 f81a 	bl	8008270 <RCCEx_PLL2_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007240:	e00e      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3324      	adds	r3, #36	; 0x24
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f8c3 	bl	80083d4 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007252:	e005      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
      break;
 8007258:	e002      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800725a:	bf00      	nop
 800725c:	e000      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800725e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007266:	4b7c      	ldr	r3, [pc, #496]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007272:	4979      	ldr	r1, [pc, #484]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007274:	4313      	orrs	r3, r2
 8007276:	650b      	str	r3, [r1, #80]	; 0x50
 8007278:	e001      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d049      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007292:	d02e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007298:	d828      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 800729a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800729e:	d02a      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80072a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072a4:	d822      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072aa:	d026      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x486>
 80072ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072b0:	d81c      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072b6:	d010      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x466>
 80072b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072bc:	d816      	bhi.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01d      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80072c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c6:	d111      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	2101      	movs	r1, #1
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 ffce 	bl	8008270 <RCCEx_PLL2_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80072d8:	e012      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3324      	adds	r3, #36	; 0x24
 80072de:	2101      	movs	r1, #1
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 f877 	bl	80083d4 <RCCEx_PLL3_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80072ea:	e009      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
      break;
 80072f0:	e006      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072f2:	bf00      	nop
 80072f4:	e004      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072f6:	bf00      	nop
 80072f8:	e002      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007306:	4b54      	ldr	r3, [pc, #336]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007312:	4951      	ldr	r1, [pc, #324]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007314:	4313      	orrs	r3, r2
 8007316:	650b      	str	r3, [r1, #80]	; 0x50
 8007318:	e001      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d04b      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007334:	d02e      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800733a:	d828      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d02a      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007346:	d822      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800734c:	d026      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800734e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007352:	d81c      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007358:	d010      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800735a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735e:	d816      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01d      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007368:	d111      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3304      	adds	r3, #4
 800736e:	2101      	movs	r1, #1
 8007370:	4618      	mov	r0, r3
 8007372:	f000 ff7d 	bl	8008270 <RCCEx_PLL2_Config>
 8007376:	4603      	mov	r3, r0
 8007378:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800737a:	e012      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3324      	adds	r3, #36	; 0x24
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f001 f826 	bl	80083d4 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800738c:	e009      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
      break;
 8007392:	e006      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007394:	bf00      	nop
 8007396:	e004      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007398:	bf00      	nop
 800739a:	e002      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800739c:	bf00      	nop
 800739e:	e000      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80073a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073a8:	4b2b      	ldr	r3, [pc, #172]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073b6:	4928      	ldr	r1, [pc, #160]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	658b      	str	r3, [r1, #88]	; 0x58
 80073bc:	e001      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02f      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d6:	d00e      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80073d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073dc:	d814      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d015      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80073e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e6:	d10f      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80073f4:	e00c      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2101      	movs	r1, #1
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 ff37 	bl	8008270 <RCCEx_PLL2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
      break;
 800740c:	e000      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800740e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007416:	4b10      	ldr	r3, [pc, #64]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007422:	490d      	ldr	r1, [pc, #52]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007424:	4313      	orrs	r3, r2
 8007426:	650b      	str	r3, [r1, #80]	; 0x50
 8007428:	e001      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d033      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	2b03      	cmp	r3, #3
 8007440:	d81c      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007442:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	08007483 	.word	0x08007483
 800744c:	0800745d 	.word	0x0800745d
 8007450:	0800746b 	.word	0x0800746b
 8007454:	08007483 	.word	0x08007483
 8007458:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745c:	4bb8      	ldr	r3, [pc, #736]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4ab7      	ldr	r2, [pc, #732]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007468:	e00c      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3304      	adds	r3, #4
 800746e:	2102      	movs	r1, #2
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fefd 	bl	8008270 <RCCEx_PLL2_Config>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800747a:	e003      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
      break;
 8007480:	e000      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800748a:	4bad      	ldr	r3, [pc, #692]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	f023 0203 	bic.w	r2, r3, #3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	49aa      	ldr	r1, [pc, #680]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007498:	4313      	orrs	r3, r2
 800749a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800749c:	e001      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 8086 	beq.w	80075bc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074b0:	4ba4      	ldr	r3, [pc, #656]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4aa3      	ldr	r2, [pc, #652]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80074b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074bc:	f7fb fb44 	bl	8002b48 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c2:	e009      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c4:	f7fb fb40 	bl	8002b48 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b64      	cmp	r3, #100	; 0x64
 80074d0:	d902      	bls.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	75fb      	strb	r3, [r7, #23]
        break;
 80074d6:	e005      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074d8:	4b9a      	ldr	r3, [pc, #616]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ef      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d166      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074ea:	4b95      	ldr	r3, [pc, #596]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074f4:	4053      	eors	r3, r2
 80074f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d013      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074fe:	4b90      	ldr	r3, [pc, #576]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007508:	4b8d      	ldr	r3, [pc, #564]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750c:	4a8c      	ldr	r2, [pc, #560]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800750e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007512:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007514:	4b8a      	ldr	r3, [pc, #552]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007518:	4a89      	ldr	r2, [pc, #548]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800751a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007520:	4a87      	ldr	r2, [pc, #540]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800752c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007530:	d115      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007532:	f7fb fb09 	bl	8002b48 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007538:	e00b      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800753a:	f7fb fb05 	bl	8002b48 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	f241 3288 	movw	r2, #5000	; 0x1388
 8007548:	4293      	cmp	r3, r2
 800754a:	d902      	bls.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	75fb      	strb	r3, [r7, #23]
            break;
 8007550:	e005      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007552:	4b7b      	ldr	r3, [pc, #492]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0ed      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d126      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007572:	d10d      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007574:	4b72      	ldr	r3, [pc, #456]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007582:	0919      	lsrs	r1, r3, #4
 8007584:	4b70      	ldr	r3, [pc, #448]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007586:	400b      	ands	r3, r1
 8007588:	496d      	ldr	r1, [pc, #436]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758a:	4313      	orrs	r3, r2
 800758c:	610b      	str	r3, [r1, #16]
 800758e:	e005      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007590:	4b6b      	ldr	r3, [pc, #428]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	4a6a      	ldr	r2, [pc, #424]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007596:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800759a:	6113      	str	r3, [r2, #16]
 800759c:	4b68      	ldr	r3, [pc, #416]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800759e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075aa:	4965      	ldr	r1, [pc, #404]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	670b      	str	r3, [r1, #112]	; 0x70
 80075b0:	e004      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	75bb      	strb	r3, [r7, #22]
 80075b6:	e001      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d07e      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075cc:	2b28      	cmp	r3, #40	; 0x28
 80075ce:	d867      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	080076a7 	.word	0x080076a7
 80075dc:	080076a1 	.word	0x080076a1
 80075e0:	080076a1 	.word	0x080076a1
 80075e4:	080076a1 	.word	0x080076a1
 80075e8:	080076a1 	.word	0x080076a1
 80075ec:	080076a1 	.word	0x080076a1
 80075f0:	080076a1 	.word	0x080076a1
 80075f4:	080076a1 	.word	0x080076a1
 80075f8:	0800767d 	.word	0x0800767d
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	080076a1 	.word	0x080076a1
 8007604:	080076a1 	.word	0x080076a1
 8007608:	080076a1 	.word	0x080076a1
 800760c:	080076a1 	.word	0x080076a1
 8007610:	080076a1 	.word	0x080076a1
 8007614:	080076a1 	.word	0x080076a1
 8007618:	0800768f 	.word	0x0800768f
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080076a1 	.word	0x080076a1
 8007624:	080076a1 	.word	0x080076a1
 8007628:	080076a1 	.word	0x080076a1
 800762c:	080076a1 	.word	0x080076a1
 8007630:	080076a1 	.word	0x080076a1
 8007634:	080076a1 	.word	0x080076a1
 8007638:	080076a7 	.word	0x080076a7
 800763c:	080076a1 	.word	0x080076a1
 8007640:	080076a1 	.word	0x080076a1
 8007644:	080076a1 	.word	0x080076a1
 8007648:	080076a1 	.word	0x080076a1
 800764c:	080076a1 	.word	0x080076a1
 8007650:	080076a1 	.word	0x080076a1
 8007654:	080076a1 	.word	0x080076a1
 8007658:	080076a7 	.word	0x080076a7
 800765c:	080076a1 	.word	0x080076a1
 8007660:	080076a1 	.word	0x080076a1
 8007664:	080076a1 	.word	0x080076a1
 8007668:	080076a1 	.word	0x080076a1
 800766c:	080076a1 	.word	0x080076a1
 8007670:	080076a1 	.word	0x080076a1
 8007674:	080076a1 	.word	0x080076a1
 8007678:	080076a7 	.word	0x080076a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	2101      	movs	r1, #1
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fdf4 	bl	8008270 <RCCEx_PLL2_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800768c:	e00c      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3324      	adds	r3, #36	; 0x24
 8007692:	2101      	movs	r1, #1
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fe9d 	bl	80083d4 <RCCEx_PLL3_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800769e:	e003      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
      break;
 80076a4:	e000      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80076a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ba:	4921      	ldr	r1, [pc, #132]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	654b      	str	r3, [r1, #84]	; 0x54
 80076c0:	e001      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d03e      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d6:	2b05      	cmp	r3, #5
 80076d8:	d820      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007723 	.word	0x08007723
 80076e4:	080076f9 	.word	0x080076f9
 80076e8:	0800770b 	.word	0x0800770b
 80076ec:	08007723 	.word	0x08007723
 80076f0:	08007723 	.word	0x08007723
 80076f4:	08007723 	.word	0x08007723
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	2101      	movs	r1, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fdb6 	bl	8008270 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007708:	e00c      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3324      	adds	r3, #36	; 0x24
 800770e:	2101      	movs	r1, #1
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fe5f 	bl	80083d4 <RCCEx_PLL3_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800771a:	e003      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
      break;
 8007720:	e000      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d110      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f023 0207 	bic.w	r2, r3, #7
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	4902      	ldr	r1, [pc, #8]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007738:	4313      	orrs	r3, r2
 800773a:	654b      	str	r3, [r1, #84]	; 0x54
 800773c:	e008      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
 8007744:	58024800 	.word	0x58024800
 8007748:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d039      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	2b05      	cmp	r3, #5
 8007764:	d820      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007766:	a201      	add	r2, pc, #4	; (adr r2, 800776c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	080077af 	.word	0x080077af
 8007770:	08007785 	.word	0x08007785
 8007774:	08007797 	.word	0x08007797
 8007778:	080077af 	.word	0x080077af
 800777c:	080077af 	.word	0x080077af
 8007780:	080077af 	.word	0x080077af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	2101      	movs	r1, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fd70 	bl	8008270 <RCCEx_PLL2_Config>
 8007790:	4603      	mov	r3, r0
 8007792:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007794:	e00c      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3324      	adds	r3, #36	; 0x24
 800779a:	2101      	movs	r1, #1
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe19 	bl	80083d4 <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077a6:	e003      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	75fb      	strb	r3, [r7, #23]
      break;
 80077ac:	e000      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80077ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077b6:	4bb7      	ldr	r3, [pc, #732]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ba:	f023 0207 	bic.w	r2, r3, #7
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	49b3      	ldr	r1, [pc, #716]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	658b      	str	r3, [r1, #88]	; 0x58
 80077ca:	e001      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d04b      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077e6:	d02e      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80077e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077ec:	d828      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f2:	d02a      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80077f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f8:	d822      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80077fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077fe:	d026      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007804:	d81c      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780a:	d010      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800780c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007810:	d816      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01d      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800781a:	d111      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fd24 	bl	8008270 <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800782c:	e012      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3324      	adds	r3, #36	; 0x24
 8007832:	2102      	movs	r1, #2
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fdcd 	bl	80083d4 <RCCEx_PLL3_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800783e:	e009      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
      break;
 8007844:	e006      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007846:	bf00      	nop
 8007848:	e004      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800784a:	bf00      	nop
 800784c:	e002      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800785a:	4b8e      	ldr	r3, [pc, #568]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007868:	498a      	ldr	r1, [pc, #552]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800786a:	4313      	orrs	r3, r2
 800786c:	654b      	str	r3, [r1, #84]	; 0x54
 800786e:	e001      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d04b      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007886:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800788a:	d02e      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800788c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007890:	d828      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	d02a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789c:	d822      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800789e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078a2:	d026      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078a8:	d81c      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ae:	d010      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80078b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b4:	d816      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01d      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80078ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078be:	d111      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fcd2 	bl	8008270 <RCCEx_PLL2_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078d0:	e012      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3324      	adds	r3, #36	; 0x24
 80078d6:	2102      	movs	r1, #2
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fd7b 	bl	80083d4 <RCCEx_PLL3_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078e2:	e009      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	e006      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078ea:	bf00      	nop
 80078ec:	e004      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078ee:	bf00      	nop
 80078f0:	e002      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078f2:	bf00      	nop
 80078f4:	e000      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078fe:	4b65      	ldr	r3, [pc, #404]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007902:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800790c:	4961      	ldr	r1, [pc, #388]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800790e:	4313      	orrs	r3, r2
 8007910:	658b      	str	r3, [r1, #88]	; 0x58
 8007912:	e001      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007920:	2b00      	cmp	r3, #0
 8007922:	d04b      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800792a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800792e:	d02e      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007930:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007934:	d828      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800793a:	d02a      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800793c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007940:	d822      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007942:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007946:	d026      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007948:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800794c:	d81c      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800794e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007952:	d010      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007958:	d816      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01d      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007962:	d111      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fc80 	bl	8008270 <RCCEx_PLL2_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007974:	e012      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3324      	adds	r3, #36	; 0x24
 800797a:	2102      	movs	r1, #2
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fd29 	bl	80083d4 <RCCEx_PLL3_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007986:	e009      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	75fb      	strb	r3, [r7, #23]
      break;
 800798c:	e006      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800798e:	bf00      	nop
 8007990:	e004      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007992:	bf00      	nop
 8007994:	e002      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800799a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079a2:	4b3c      	ldr	r3, [pc, #240]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079b0:	4938      	ldr	r1, [pc, #224]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	658b      	str	r3, [r1, #88]	; 0x58
 80079b6:	e001      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d10a      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	2102      	movs	r1, #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fcfa 	bl	80083d4 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079ea:	4b2a      	ldr	r3, [pc, #168]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f8:	4926      	ldr	r1, [pc, #152]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d01a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a14:	d10a      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	2102      	movs	r1, #2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fcd9 	bl	80083d4 <RCCEx_PLL3_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a2c:	4b19      	ldr	r3, [pc, #100]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a3a:	4916      	ldr	r1, [pc, #88]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d036      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a56:	d01f      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5c:	d817      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a66:	d009      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007a68:	e011      	b.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fbfd 	bl	8008270 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a7a:	e00e      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	2102      	movs	r1, #2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fca6 	bl	80083d4 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a8c:	e005      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
      break;
 8007a92:	e002      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007a94:	58024400 	.word	0x58024400
      break;
 8007a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aa0:	4b93      	ldr	r3, [pc, #588]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aae:	4990      	ldr	r1, [pc, #576]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ab4:	e001      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d033      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ad0:	d01c      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007ad2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ad6:	d816      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007adc:	d003      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ae2:	d007      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007ae4:	e00f      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae6:	4b82      	ldr	r3, [pc, #520]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	4a81      	ldr	r2, [pc, #516]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007af2:	e00c      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fc6a 	bl	80083d4 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b04:	e003      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b14:	4b76      	ldr	r3, [pc, #472]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	4973      	ldr	r1, [pc, #460]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	654b      	str	r3, [r1, #84]	; 0x54
 8007b28:	e001      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d029      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b46:	d007      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4a:	4b69      	ldr	r3, [pc, #420]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	4a68      	ldr	r2, [pc, #416]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b56:	e00b      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fb86 	bl	8008270 <RCCEx_PLL2_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b68:	e002      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b76:	4b5e      	ldr	r3, [pc, #376]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b82:	495b      	ldr	r1, [pc, #364]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b88:	e001      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	2102      	movs	r1, #2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fc17 	bl	80083d4 <RCCEx_PLL3_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d030      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc4:	d017      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bca:	d811      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd0:	d013      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd6:	d80b      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d010      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be0:	d106      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be2:	4b43      	ldr	r3, [pc, #268]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	4a42      	ldr	r2, [pc, #264]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007bee:	e007      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf4:	e004      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007bf6:	bf00      	nop
 8007bf8:	e002      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c06:	4b3a      	ldr	r3, [pc, #232]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c12:	4937      	ldr	r1, [pc, #220]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	654b      	str	r3, [r1, #84]	; 0x54
 8007c18:	e001      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	492e      	ldr	r1, [pc, #184]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c48:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c56:	4926      	ldr	r1, [pc, #152]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d008      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c68:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	491e      	ldr	r1, [pc, #120]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00d      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c86:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c90:	6113      	str	r3, [r2, #16]
 8007c92:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c9c:	4914      	ldr	r1, [pc, #80]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	da08      	bge.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007caa:	4b11      	ldr	r3, [pc, #68]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	490e      	ldr	r1, [pc, #56]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cc8:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ccc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	4906      	ldr	r1, [pc, #24]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007cdc:	7dbb      	ldrb	r3, [r7, #22]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	58024400 	.word	0x58024400

08007cf4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007cf8:	f7ff f81e 	bl	8006d38 <HAL_RCC_GetHCLKFreq>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	091b      	lsrs	r3, r3, #4
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	4904      	ldr	r1, [pc, #16]	; (8007d1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d0a:	5ccb      	ldrb	r3, [r1, r3]
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	0800ce08 	.word	0x0800ce08

08007d20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d28:	4ba1      	ldr	r3, [pc, #644]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d32:	4b9f      	ldr	r3, [pc, #636]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	0b1b      	lsrs	r3, r3, #12
 8007d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d3e:	4b9c      	ldr	r3, [pc, #624]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	091b      	lsrs	r3, r3, #4
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d4a:	4b99      	ldr	r3, [pc, #612]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4e:	08db      	lsrs	r3, r3, #3
 8007d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	fb02 f303 	mul.w	r3, r2, r3
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8111 	beq.w	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f000 8083 	beq.w	8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	f200 80a1 	bhi.w	8007ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d056      	beq.n	8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007d8a:	e099      	b.n	8007ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d8c:	4b88      	ldr	r3, [pc, #544]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d02d      	beq.n	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d98:	4b85      	ldr	r3, [pc, #532]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	08db      	lsrs	r3, r3, #3
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	4a84      	ldr	r2, [pc, #528]	; (8007fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007da4:	fa22 f303 	lsr.w	r3, r2, r3
 8007da8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc2:	4b7b      	ldr	r3, [pc, #492]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007df2:	e087      	b.n	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007fbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e06:	4b6a      	ldr	r3, [pc, #424]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e36:	e065      	b.n	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e4a:	4b59      	ldr	r3, [pc, #356]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e7a:	e043      	b.n	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8e:	4b48      	ldr	r3, [pc, #288]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebe:	e021      	b.n	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed2:	4b37      	ldr	r3, [pc, #220]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f04:	4b2a      	ldr	r3, [pc, #168]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	0a5b      	lsrs	r3, r3, #9
 8007f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f2a:	ee17 2a90 	vmov	r2, s15
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f32:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f58:	ee17 2a90 	vmov	r2, s15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f60:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	0e1b      	lsrs	r3, r3, #24
 8007f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f86:	ee17 2a90 	vmov	r2, s15
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
}
 8007fa2:	bf00      	nop
 8007fa4:	3724      	adds	r7, #36	; 0x24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	58024400 	.word	0x58024400
 8007fb4:	03d09000 	.word	0x03d09000
 8007fb8:	46000000 	.word	0x46000000
 8007fbc:	4c742400 	.word	0x4c742400
 8007fc0:	4a742400 	.word	0x4a742400
 8007fc4:	4bbebc20 	.word	0x4bbebc20

08007fc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b089      	sub	sp, #36	; 0x24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fd0:	4ba1      	ldr	r3, [pc, #644]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007fda:	4b9f      	ldr	r3, [pc, #636]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	0d1b      	lsrs	r3, r3, #20
 8007fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fe4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007fe6:	4b9c      	ldr	r3, [pc, #624]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ff2:	4b99      	ldr	r3, [pc, #612]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff6:	08db      	lsrs	r3, r3, #3
 8007ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8111 	beq.w	8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b02      	cmp	r3, #2
 800801a:	f000 8083 	beq.w	8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b02      	cmp	r3, #2
 8008022:	f200 80a1 	bhi.w	8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d056      	beq.n	80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008032:	e099      	b.n	8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008034:	4b88      	ldr	r3, [pc, #544]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d02d      	beq.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008040:	4b85      	ldr	r3, [pc, #532]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	08db      	lsrs	r3, r3, #3
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	4a84      	ldr	r2, [pc, #528]	; (800825c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
 8008050:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	ee07 3a90 	vmov	s15, r3
 8008058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806a:	4b7b      	ldr	r3, [pc, #492]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807a:	ed97 6a03 	vldr	s12, [r7, #12]
 800807e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008096:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800809a:	e087      	b.n	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008264 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80080aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ae:	4b6a      	ldr	r3, [pc, #424]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080be:	ed97 6a03 	vldr	s12, [r7, #12]
 80080c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080de:	e065      	b.n	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008268 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f2:	4b59      	ldr	r3, [pc, #356]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008102:	ed97 6a03 	vldr	s12, [r7, #12]
 8008106:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800810a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800811a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008122:	e043      	b.n	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800826c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008136:	4b48      	ldr	r3, [pc, #288]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008146:	ed97 6a03 	vldr	s12, [r7, #12]
 800814a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800814e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800815a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008166:	e021      	b.n	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008172:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008268 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817a:	4b37      	ldr	r3, [pc, #220]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818a:	ed97 6a03 	vldr	s12, [r7, #12]
 800818e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008260 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800819e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80081ac:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	0a5b      	lsrs	r3, r3, #9
 80081b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081d2:	ee17 2a90 	vmov	r2, s15
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80081da:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	0c1b      	lsrs	r3, r3, #16
 80081e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e4:	ee07 3a90 	vmov	s15, r3
 80081e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008200:	ee17 2a90 	vmov	r2, s15
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008208:	4b13      	ldr	r3, [pc, #76]	; (8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	0e1b      	lsrs	r3, r3, #24
 800820e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800821e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008222:	edd7 6a07 	vldr	s13, [r7, #28]
 8008226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800822a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822e:	ee17 2a90 	vmov	r2, s15
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008236:	e008      	b.n	800824a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	609a      	str	r2, [r3, #8]
}
 800824a:	bf00      	nop
 800824c:	3724      	adds	r7, #36	; 0x24
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	58024400 	.word	0x58024400
 800825c:	03d09000 	.word	0x03d09000
 8008260:	46000000 	.word	0x46000000
 8008264:	4c742400 	.word	0x4c742400
 8008268:	4a742400 	.word	0x4a742400
 800826c:	4bbebc20 	.word	0x4bbebc20

08008270 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800827e:	4b53      	ldr	r3, [pc, #332]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d101      	bne.n	800828e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e099      	b.n	80083c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800828e:	4b4f      	ldr	r3, [pc, #316]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a4e      	ldr	r2, [pc, #312]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008294:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829a:	f7fa fc55 	bl	8002b48 <HAL_GetTick>
 800829e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082a0:	e008      	b.n	80082b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082a2:	f7fa fc51 	bl	8002b48 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e086      	b.n	80083c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082b4:	4b45      	ldr	r3, [pc, #276]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1f0      	bne.n	80082a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082c0:	4b42      	ldr	r3, [pc, #264]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	031b      	lsls	r3, r3, #12
 80082ce:	493f      	ldr	r1, [pc, #252]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	628b      	str	r3, [r1, #40]	; 0x28
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	3b01      	subs	r3, #1
 80082da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	025b      	lsls	r3, r3, #9
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	061b      	lsls	r3, r3, #24
 8008300:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008304:	4931      	ldr	r1, [pc, #196]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008306:	4313      	orrs	r3, r2
 8008308:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800830a:	4b30      	ldr	r3, [pc, #192]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	492d      	ldr	r1, [pc, #180]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008318:	4313      	orrs	r3, r2
 800831a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800831c:	4b2b      	ldr	r3, [pc, #172]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	f023 0220 	bic.w	r2, r3, #32
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	4928      	ldr	r1, [pc, #160]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800832e:	4b27      	ldr	r3, [pc, #156]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	4a26      	ldr	r2, [pc, #152]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008334:	f023 0310 	bic.w	r3, r3, #16
 8008338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800833a:	4b24      	ldr	r3, [pc, #144]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 800833c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833e:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <RCCEx_PLL2_Config+0x160>)
 8008340:	4013      	ands	r3, r2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	69d2      	ldr	r2, [r2, #28]
 8008346:	00d2      	lsls	r2, r2, #3
 8008348:	4920      	ldr	r1, [pc, #128]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 800834a:	4313      	orrs	r3, r2
 800834c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800834e:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008354:	f043 0310 	orr.w	r3, r3, #16
 8008358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008360:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a19      	ldr	r2, [pc, #100]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800836a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800836c:	e00f      	b.n	800838e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d106      	bne.n	8008382 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a14      	ldr	r2, [pc, #80]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 800837a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008380:	e005      	b.n	800838e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	4a11      	ldr	r2, [pc, #68]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800838c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 8008394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800839a:	f7fa fbd5 	bl	8002b48 <HAL_GetTick>
 800839e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083a0:	e008      	b.n	80083b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80083a2:	f7fa fbd1 	bl	8002b48 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e006      	b.n	80083c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <RCCEx_PLL2_Config+0x15c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	58024400 	.word	0x58024400
 80083d0:	ffff0007 	.word	0xffff0007

080083d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083e2:	4b53      	ldr	r3, [pc, #332]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d101      	bne.n	80083f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e099      	b.n	8008526 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083f2:	4b4f      	ldr	r3, [pc, #316]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a4e      	ldr	r2, [pc, #312]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80083f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083fe:	f7fa fba3 	bl	8002b48 <HAL_GetTick>
 8008402:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008404:	e008      	b.n	8008418 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008406:	f7fa fb9f 	bl	8002b48 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e086      	b.n	8008526 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008418:	4b45      	ldr	r3, [pc, #276]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1f0      	bne.n	8008406 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008424:	4b42      	ldr	r3, [pc, #264]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	051b      	lsls	r3, r3, #20
 8008432:	493f      	ldr	r1, [pc, #252]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 8008434:	4313      	orrs	r3, r2
 8008436:	628b      	str	r3, [r1, #40]	; 0x28
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	3b01      	subs	r3, #1
 800843e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	3b01      	subs	r3, #1
 8008448:	025b      	lsls	r3, r3, #9
 800844a:	b29b      	uxth	r3, r3
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	3b01      	subs	r3, #1
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	3b01      	subs	r3, #1
 8008462:	061b      	lsls	r3, r3, #24
 8008464:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008468:	4931      	ldr	r1, [pc, #196]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800846e:	4b30      	ldr	r3, [pc, #192]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	492d      	ldr	r1, [pc, #180]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 800847c:	4313      	orrs	r3, r2
 800847e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008480:	4b2b      	ldr	r3, [pc, #172]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	4928      	ldr	r1, [pc, #160]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 800848e:	4313      	orrs	r3, r2
 8008490:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008492:	4b27      	ldr	r3, [pc, #156]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	4a26      	ldr	r2, [pc, #152]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 8008498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800849e:	4b24      	ldr	r3, [pc, #144]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a2:	4b24      	ldr	r3, [pc, #144]	; (8008534 <RCCEx_PLL3_Config+0x160>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	69d2      	ldr	r2, [r2, #28]
 80084aa:	00d2      	lsls	r2, r2, #3
 80084ac:	4920      	ldr	r1, [pc, #128]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084b2:	4b1f      	ldr	r3, [pc, #124]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084c4:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a19      	ldr	r2, [pc, #100]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084d0:	e00f      	b.n	80084f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d106      	bne.n	80084e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084d8:	4b15      	ldr	r3, [pc, #84]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	4a14      	ldr	r2, [pc, #80]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084e4:	e005      	b.n	80084f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084e6:	4b12      	ldr	r3, [pc, #72]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	4a11      	ldr	r2, [pc, #68]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084f2:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 80084f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084fe:	f7fa fb23 	bl	8002b48 <HAL_GetTick>
 8008502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008504:	e008      	b.n	8008518 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008506:	f7fa fb1f 	bl	8002b48 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d901      	bls.n	8008518 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e006      	b.n	8008526 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <RCCEx_PLL3_Config+0x15c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0f0      	beq.n	8008506 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008524:	7bfb      	ldrb	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	58024400 	.word	0x58024400
 8008534:	ffff0007 	.word	0xffff0007

08008538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e049      	b.n	80085de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f841 	bl	80085e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f000 f9f8 	bl	800896c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	d001      	beq.n	8008614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e04f      	b.n	80086b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a23      	ldr	r2, [pc, #140]	; (80086c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01d      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x76>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863e:	d018      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x76>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1f      	ldr	r2, [pc, #124]	; (80086c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d013      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x76>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x76>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <HAL_TIM_Base_Start_IT+0xd0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d009      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x76>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <HAL_TIM_Base_Start_IT+0x76>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a19      	ldr	r2, [pc, #100]	; (80086d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d115      	bne.n	800869e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800867a:	4013      	ands	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b06      	cmp	r3, #6
 8008682:	d015      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0xb4>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868a:	d011      	beq.n	80086b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869c:	e008      	b.n	80086b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0201 	orr.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e000      	b.n	80086b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	40010400 	.word	0x40010400
 80086d4:	40001800 	.word	0x40001800
 80086d8:	00010007 	.word	0x00010007

080086dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d122      	bne.n	8008738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d11b      	bne.n	8008738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f06f 0202 	mvn.w	r2, #2
 8008708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f905 	bl	800892e <HAL_TIM_IC_CaptureCallback>
 8008724:	e005      	b.n	8008732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8f7 	bl	800891a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f908 	bl	8008942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b04      	cmp	r3, #4
 8008744:	d122      	bne.n	800878c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b04      	cmp	r3, #4
 8008752:	d11b      	bne.n	800878c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0204 	mvn.w	r2, #4
 800875c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2202      	movs	r2, #2
 8008762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f8db 	bl	800892e <HAL_TIM_IC_CaptureCallback>
 8008778:	e005      	b.n	8008786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8cd 	bl	800891a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8de 	bl	8008942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b08      	cmp	r3, #8
 8008798:	d122      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d11b      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0208 	mvn.w	r2, #8
 80087b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2204      	movs	r2, #4
 80087b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f8b1 	bl	800892e <HAL_TIM_IC_CaptureCallback>
 80087cc:	e005      	b.n	80087da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8a3 	bl	800891a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f8b4 	bl	8008942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	2b10      	cmp	r3, #16
 80087ec:	d122      	bne.n	8008834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b10      	cmp	r3, #16
 80087fa:	d11b      	bne.n	8008834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f06f 0210 	mvn.w	r2, #16
 8008804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2208      	movs	r2, #8
 800880a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f887 	bl	800892e <HAL_TIM_IC_CaptureCallback>
 8008820:	e005      	b.n	800882e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f879 	bl	800891a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f88a 	bl	8008942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b01      	cmp	r3, #1
 8008840:	d10e      	bne.n	8008860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b01      	cmp	r3, #1
 800884e:	d107      	bne.n	8008860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0201 	mvn.w	r2, #1
 8008858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7f9 f8e0 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886a:	2b80      	cmp	r3, #128	; 0x80
 800886c:	d10e      	bne.n	800888c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d107      	bne.n	800888c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f914 	bl	8008ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800889a:	d10e      	bne.n	80088ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a6:	2b80      	cmp	r3, #128	; 0x80
 80088a8:	d107      	bne.n	80088ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f907 	bl	8008ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d10e      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d107      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f838 	bl	8008956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d10e      	bne.n	8008912 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d107      	bne.n	8008912 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f06f 0220 	mvn.w	r2, #32
 800890a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8c7 	bl	8008aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
	...

0800896c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a40      	ldr	r2, [pc, #256]	; (8008a80 <TIM_Base_SetConfig+0x114>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <TIM_Base_SetConfig+0x40>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898a:	d00f      	beq.n	80089ac <TIM_Base_SetConfig+0x40>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a3d      	ldr	r2, [pc, #244]	; (8008a84 <TIM_Base_SetConfig+0x118>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00b      	beq.n	80089ac <TIM_Base_SetConfig+0x40>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a3c      	ldr	r2, [pc, #240]	; (8008a88 <TIM_Base_SetConfig+0x11c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_Base_SetConfig+0x40>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a3b      	ldr	r2, [pc, #236]	; (8008a8c <TIM_Base_SetConfig+0x120>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a3a      	ldr	r2, [pc, #232]	; (8008a90 <TIM_Base_SetConfig+0x124>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d108      	bne.n	80089be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2f      	ldr	r2, [pc, #188]	; (8008a80 <TIM_Base_SetConfig+0x114>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01f      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089cc:	d01b      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2c      	ldr	r2, [pc, #176]	; (8008a84 <TIM_Base_SetConfig+0x118>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d017      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2b      	ldr	r2, [pc, #172]	; (8008a88 <TIM_Base_SetConfig+0x11c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d013      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a2a      	ldr	r2, [pc, #168]	; (8008a8c <TIM_Base_SetConfig+0x120>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00f      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a29      	ldr	r2, [pc, #164]	; (8008a90 <TIM_Base_SetConfig+0x124>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00b      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a28      	ldr	r2, [pc, #160]	; (8008a94 <TIM_Base_SetConfig+0x128>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d007      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a27      	ldr	r2, [pc, #156]	; (8008a98 <TIM_Base_SetConfig+0x12c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_Base_SetConfig+0x9a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a26      	ldr	r2, [pc, #152]	; (8008a9c <TIM_Base_SetConfig+0x130>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d108      	bne.n	8008a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a10      	ldr	r2, [pc, #64]	; (8008a80 <TIM_Base_SetConfig+0x114>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00f      	beq.n	8008a64 <TIM_Base_SetConfig+0xf8>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a12      	ldr	r2, [pc, #72]	; (8008a90 <TIM_Base_SetConfig+0x124>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00b      	beq.n	8008a64 <TIM_Base_SetConfig+0xf8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a11      	ldr	r2, [pc, #68]	; (8008a94 <TIM_Base_SetConfig+0x128>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d007      	beq.n	8008a64 <TIM_Base_SetConfig+0xf8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <TIM_Base_SetConfig+0x12c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d003      	beq.n	8008a64 <TIM_Base_SetConfig+0xf8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a0f      	ldr	r2, [pc, #60]	; (8008a9c <TIM_Base_SetConfig+0x130>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d103      	bne.n	8008a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	615a      	str	r2, [r3, #20]
}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	40010000 	.word	0x40010000
 8008a84:	40000400 	.word	0x40000400
 8008a88:	40000800 	.word	0x40000800
 8008a8c:	40000c00 	.word	0x40000c00
 8008a90:	40010400 	.word	0x40010400
 8008a94:	40014000 	.word	0x40014000
 8008a98:	40014400 	.word	0x40014400
 8008a9c:	40014800 	.word	0x40014800

08008aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e042      	b.n	8008b74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d106      	bne.n	8008b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7f8 ffc3 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2224      	movs	r2, #36	; 0x24
 8008b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0201 	bic.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fc5a 	bl	80093d8 <UART_SetConfig>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d101      	bne.n	8008b2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e022      	b.n	8008b74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 f9ae 	bl	8009e98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0201 	orr.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fa35 	bl	8009fdc <UART_CheckIdleState>
 8008b72:	4603      	mov	r3, r0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d168      	bne.n	8008c66 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <HAL_UART_Transmit_DMA+0x24>
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e061      	b.n	8008c68 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Transmit_DMA+0x36>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e05a      	b.n	8008c68 <HAL_UART_Transmit_DMA+0xec>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2221      	movs	r2, #33	; 0x21
 8008bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d02c      	beq.n	8008c42 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bec:	4a20      	ldr	r2, [pc, #128]	; (8008c70 <HAL_UART_Transmit_DMA+0xf4>)
 8008bee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bf4:	4a1f      	ldr	r2, [pc, #124]	; (8008c74 <HAL_UART_Transmit_DMA+0xf8>)
 8008bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bfc:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <HAL_UART_Transmit_DMA+0xfc>)
 8008bfe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c04:	2200      	movs	r2, #0
 8008c06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c10:	4619      	mov	r1, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3328      	adds	r3, #40	; 0x28
 8008c18:	461a      	mov	r2, r3
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	f7fa fbe8 	bl	80033f0 <HAL_DMA_Start_IT>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00d      	beq.n	8008c42 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2210      	movs	r2, #16
 8008c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e012      	b.n	8008c68 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2240      	movs	r2, #64	; 0x40
 8008c48:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c60:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e000      	b.n	8008c68 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
  }
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	0800a2f1 	.word	0x0800a2f1
 8008c74:	0800a341 	.word	0x0800a341
 8008c78:	0800a42b 	.word	0x0800a42b

08008c7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c90:	2b20      	cmp	r3, #32
 8008c92:	d131      	bne.n	8008cf8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_UART_Receive_DMA+0x24>
 8008c9a:	88fb      	ldrh	r3, [r7, #6]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e02a      	b.n	8008cfa <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <HAL_UART_Receive_DMA+0x36>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e023      	b.n	8008cfa <HAL_UART_Receive_DMA+0x7e>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a0f      	ldr	r2, [pc, #60]	; (8008d04 <HAL_UART_Receive_DMA+0x88>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d007      	beq.n	8008ce8 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008ce6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	461a      	mov	r2, r3
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f001 fa40 	bl	800a174 <UART_Start_Receive_DMA>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	e000      	b.n	8008cfa <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008cf8:	2302      	movs	r3, #2
  }
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	58000c00 	.word	0x58000c00

08008d08 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d16:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d127      	bne.n	8008d7e <HAL_UART_DMAStop+0x76>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b21      	cmp	r3, #33	; 0x21
 8008d32:	d124      	bne.n	8008d7e <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d42:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d015      	beq.n	8008d78 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fa fdb7 	bl	80038c4 <HAL_DMA_Abort>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00d      	beq.n	8008d78 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fc fa3b 	bl	80051dc <HAL_DMA_GetError>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d105      	bne.n	8008d78 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2210      	movs	r2, #16
 8008d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e032      	b.n	8008dde <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fa69 	bl	800a250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d127      	bne.n	8008ddc <HAL_UART_DMAStop+0xd4>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b22      	cmp	r3, #34	; 0x22
 8008d90:	d124      	bne.n	8008ddc <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d015      	beq.n	8008dd6 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fa fd88 	bl	80038c4 <HAL_DMA_Abort>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fc fa0c 	bl	80051dc <HAL_DMA_GetError>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d105      	bne.n	8008dd6 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2210      	movs	r2, #16
 8008dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e003      	b.n	8008dde <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 fa58 	bl	800a28c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e0e:	4013      	ands	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d118      	bne.n	8008e4a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f003 0320 	and.w	r3, r3, #32
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d013      	beq.n	8008e4a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f003 0320 	and.w	r3, r3, #32
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 8282 	beq.w	8009344 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
      }
      return;
 8008e48:	e27c      	b.n	8009344 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 80ef 	beq.w	8009030 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4b73      	ldr	r3, [pc, #460]	; (8009024 <HAL_UART_IRQHandler+0x23c>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	4b72      	ldr	r3, [pc, #456]	; (8009028 <HAL_UART_IRQHandler+0x240>)
 8008e60:	4013      	ands	r3, r2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80e4 	beq.w	8009030 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_UART_IRQHandler+0xac>
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2201      	movs	r2, #1
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d010      	beq.n	8008ec0 <HAL_UART_IRQHandler+0xd8>
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00b      	beq.n	8008ec0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2202      	movs	r2, #2
 8008eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb6:	f043 0204 	orr.w	r2, r3, #4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <HAL_UART_IRQHandler+0x104>
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2204      	movs	r2, #4
 8008eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee2:	f043 0202 	orr.w	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d015      	beq.n	8008f22 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	4b48      	ldr	r3, [pc, #288]	; (8009024 <HAL_UART_IRQHandler+0x23c>)
 8008f04:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2208      	movs	r2, #8
 8008f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f18:	f043 0208 	orr.w	r2, r3, #8
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d011      	beq.n	8008f50 <HAL_UART_IRQHandler+0x168>
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00c      	beq.n	8008f50 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f46:	f043 0220 	orr.w	r2, r3, #32
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 81f6 	beq.w	8009348 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d011      	beq.n	8008f8a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d104      	bne.n	8008f7a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f90:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b40      	cmp	r3, #64	; 0x40
 8008f9e:	d004      	beq.n	8008faa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d031      	beq.n	800900e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 f96e 	bl	800a28c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d123      	bne.n	8009006 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fcc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d013      	beq.n	8008ffe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fda:	4a14      	ldr	r2, [pc, #80]	; (800902c <HAL_UART_IRQHandler+0x244>)
 8008fdc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fa ff8c 	bl	8003f00 <HAL_DMA_Abort_IT>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d017      	beq.n	800901e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ffc:	e00f      	b.n	800901e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9d4 	bl	80093ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009004:	e00b      	b.n	800901e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f9d0 	bl	80093ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	e007      	b.n	800901e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9cc 	bl	80093ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800901c:	e194      	b.n	8009348 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901e:	bf00      	nop
    return;
 8009020:	e192      	b.n	8009348 <HAL_UART_IRQHandler+0x560>
 8009022:	bf00      	nop
 8009024:	10000001 	.word	0x10000001
 8009028:	04000120 	.word	0x04000120
 800902c:	0800a4ab 	.word	0x0800a4ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009034:	2b01      	cmp	r3, #1
 8009036:	f040 810f 	bne.w	8009258 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8109 	beq.w	8009258 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 8103 	beq.w	8009258 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2210      	movs	r2, #16
 8009058:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	f040 80bb 	bne.w	80091e0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a96      	ldr	r2, [pc, #600]	; (80092cc <HAL_UART_IRQHandler+0x4e4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d059      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a94      	ldr	r2, [pc, #592]	; (80092d0 <HAL_UART_IRQHandler+0x4e8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d053      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a92      	ldr	r2, [pc, #584]	; (80092d4 <HAL_UART_IRQHandler+0x4ec>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d04d      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a90      	ldr	r2, [pc, #576]	; (80092d8 <HAL_UART_IRQHandler+0x4f0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d047      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a8e      	ldr	r2, [pc, #568]	; (80092dc <HAL_UART_IRQHandler+0x4f4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d041      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a8c      	ldr	r2, [pc, #560]	; (80092e0 <HAL_UART_IRQHandler+0x4f8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d03b      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a8a      	ldr	r2, [pc, #552]	; (80092e4 <HAL_UART_IRQHandler+0x4fc>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d035      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a88      	ldr	r2, [pc, #544]	; (80092e8 <HAL_UART_IRQHandler+0x500>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d02f      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a86      	ldr	r2, [pc, #536]	; (80092ec <HAL_UART_IRQHandler+0x504>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d029      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a84      	ldr	r2, [pc, #528]	; (80092f0 <HAL_UART_IRQHandler+0x508>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d023      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a82      	ldr	r2, [pc, #520]	; (80092f4 <HAL_UART_IRQHandler+0x50c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d01d      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a80      	ldr	r2, [pc, #512]	; (80092f8 <HAL_UART_IRQHandler+0x510>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d017      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a7e      	ldr	r2, [pc, #504]	; (80092fc <HAL_UART_IRQHandler+0x514>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d011      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a7c      	ldr	r2, [pc, #496]	; (8009300 <HAL_UART_IRQHandler+0x518>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00b      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a7a      	ldr	r2, [pc, #488]	; (8009304 <HAL_UART_IRQHandler+0x51c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d005      	beq.n	800912a <HAL_UART_IRQHandler+0x342>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a78      	ldr	r2, [pc, #480]	; (8009308 <HAL_UART_IRQHandler+0x520>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d105      	bne.n	8009136 <HAL_UART_IRQHandler+0x34e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	b29b      	uxth	r3, r3
 8009134:	e004      	b.n	8009140 <HAL_UART_IRQHandler+0x358>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b29b      	uxth	r3, r3
 8009140:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009142:	893b      	ldrh	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8101 	beq.w	800934c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009150:	893a      	ldrh	r2, [r7, #8]
 8009152:	429a      	cmp	r2, r3
 8009154:	f080 80fa 	bcs.w	800934c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	893a      	ldrh	r2, [r7, #8]
 800915c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916a:	d02b      	beq.n	80091c4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800917a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0201 	bic.w	r2, r2, #1
 800918a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800919a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0210 	bic.w	r2, r2, #16
 80091b8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fa fb80 	bl	80038c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f8f1 	bl	80093c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091de:	e0b5      	b.n	800934c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 80a8 	beq.w	8009350 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009200:	897b      	ldrh	r3, [r7, #10]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 80a4 	beq.w	8009350 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009216:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6899      	ldr	r1, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b3a      	ldr	r3, [pc, #232]	; (800930c <HAL_UART_IRQHandler+0x524>)
 8009224:	400b      	ands	r3, r1
 8009226:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0210 	bic.w	r2, r2, #16
 800924a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800924c:	897b      	ldrh	r3, [r7, #10]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f8b5 	bl	80093c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009256:	e07b      	b.n	8009350 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00d      	beq.n	800927e <HAL_UART_IRQHandler+0x496>
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f947 	bl	800a50a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800927c:	e06b      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009284:	2b00      	cmp	r3, #0
 8009286:	d012      	beq.n	80092ae <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d008      	beq.n	80092ae <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d057      	beq.n	8009354 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
    }
    return;
 80092ac:	e052      	b.n	8009354 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d02b      	beq.n	8009310 <HAL_UART_IRQHandler+0x528>
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d026      	beq.n	8009310 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 f907 	bl	800a4d6 <UART_EndTransmit_IT>
    return;
 80092c8:	e045      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
 80092ca:	bf00      	nop
 80092cc:	40020010 	.word	0x40020010
 80092d0:	40020028 	.word	0x40020028
 80092d4:	40020040 	.word	0x40020040
 80092d8:	40020058 	.word	0x40020058
 80092dc:	40020070 	.word	0x40020070
 80092e0:	40020088 	.word	0x40020088
 80092e4:	400200a0 	.word	0x400200a0
 80092e8:	400200b8 	.word	0x400200b8
 80092ec:	40020410 	.word	0x40020410
 80092f0:	40020428 	.word	0x40020428
 80092f4:	40020440 	.word	0x40020440
 80092f8:	40020458 	.word	0x40020458
 80092fc:	40020470 	.word	0x40020470
 8009300:	40020488 	.word	0x40020488
 8009304:	400204a0 	.word	0x400204a0
 8009308:	400204b8 	.word	0x400204b8
 800930c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d008      	beq.n	800932c <HAL_UART_IRQHandler+0x544>
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f904 	bl	800a532 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800932a:	e014      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00f      	beq.n	8009356 <HAL_UART_IRQHandler+0x56e>
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	da0c      	bge.n	8009356 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 f8ee 	bl	800a51e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009342:	e008      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
      return;
 8009344:	bf00      	nop
 8009346:	e006      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
    return;
 8009348:	bf00      	nop
 800934a:	e004      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
      return;
 800934c:	bf00      	nop
 800934e:	e002      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
      return;
 8009350:	bf00      	nop
 8009352:	e000      	b.n	8009356 <HAL_UART_IRQHandler+0x56e>
    return;
 8009354:	bf00      	nop
  }
}
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	b08e      	sub	sp, #56	; 0x38
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	431a      	orrs	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	4bbf      	ldr	r3, [pc, #764]	; (8009704 <UART_SetConfig+0x32c>)
 8009406:	4013      	ands	r3, r2
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800940e:	430b      	orrs	r3, r1
 8009410:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4ab5      	ldr	r2, [pc, #724]	; (8009708 <UART_SetConfig+0x330>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d004      	beq.n	8009442 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800943e:	4313      	orrs	r3, r2
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	4bb0      	ldr	r3, [pc, #704]	; (800970c <UART_SetConfig+0x334>)
 800944a:	4013      	ands	r3, r2
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009452:	430b      	orrs	r3, r1
 8009454:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	f023 010f 	bic.w	r1, r3, #15
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4aa7      	ldr	r2, [pc, #668]	; (8009710 <UART_SetConfig+0x338>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d176      	bne.n	8009564 <UART_SetConfig+0x18c>
 8009476:	4ba7      	ldr	r3, [pc, #668]	; (8009714 <UART_SetConfig+0x33c>)
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800947e:	2b28      	cmp	r3, #40	; 0x28
 8009480:	d86c      	bhi.n	800955c <UART_SetConfig+0x184>
 8009482:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <UART_SetConfig+0xb0>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	0800952d 	.word	0x0800952d
 800948c:	0800955d 	.word	0x0800955d
 8009490:	0800955d 	.word	0x0800955d
 8009494:	0800955d 	.word	0x0800955d
 8009498:	0800955d 	.word	0x0800955d
 800949c:	0800955d 	.word	0x0800955d
 80094a0:	0800955d 	.word	0x0800955d
 80094a4:	0800955d 	.word	0x0800955d
 80094a8:	08009535 	.word	0x08009535
 80094ac:	0800955d 	.word	0x0800955d
 80094b0:	0800955d 	.word	0x0800955d
 80094b4:	0800955d 	.word	0x0800955d
 80094b8:	0800955d 	.word	0x0800955d
 80094bc:	0800955d 	.word	0x0800955d
 80094c0:	0800955d 	.word	0x0800955d
 80094c4:	0800955d 	.word	0x0800955d
 80094c8:	0800953d 	.word	0x0800953d
 80094cc:	0800955d 	.word	0x0800955d
 80094d0:	0800955d 	.word	0x0800955d
 80094d4:	0800955d 	.word	0x0800955d
 80094d8:	0800955d 	.word	0x0800955d
 80094dc:	0800955d 	.word	0x0800955d
 80094e0:	0800955d 	.word	0x0800955d
 80094e4:	0800955d 	.word	0x0800955d
 80094e8:	08009545 	.word	0x08009545
 80094ec:	0800955d 	.word	0x0800955d
 80094f0:	0800955d 	.word	0x0800955d
 80094f4:	0800955d 	.word	0x0800955d
 80094f8:	0800955d 	.word	0x0800955d
 80094fc:	0800955d 	.word	0x0800955d
 8009500:	0800955d 	.word	0x0800955d
 8009504:	0800955d 	.word	0x0800955d
 8009508:	0800954d 	.word	0x0800954d
 800950c:	0800955d 	.word	0x0800955d
 8009510:	0800955d 	.word	0x0800955d
 8009514:	0800955d 	.word	0x0800955d
 8009518:	0800955d 	.word	0x0800955d
 800951c:	0800955d 	.word	0x0800955d
 8009520:	0800955d 	.word	0x0800955d
 8009524:	0800955d 	.word	0x0800955d
 8009528:	08009555 	.word	0x08009555
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009532:	e222      	b.n	800997a <UART_SetConfig+0x5a2>
 8009534:	2304      	movs	r3, #4
 8009536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953a:	e21e      	b.n	800997a <UART_SetConfig+0x5a2>
 800953c:	2308      	movs	r3, #8
 800953e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009542:	e21a      	b.n	800997a <UART_SetConfig+0x5a2>
 8009544:	2310      	movs	r3, #16
 8009546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954a:	e216      	b.n	800997a <UART_SetConfig+0x5a2>
 800954c:	2320      	movs	r3, #32
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e212      	b.n	800997a <UART_SetConfig+0x5a2>
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e20e      	b.n	800997a <UART_SetConfig+0x5a2>
 800955c:	2380      	movs	r3, #128	; 0x80
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e20a      	b.n	800997a <UART_SetConfig+0x5a2>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a6b      	ldr	r2, [pc, #428]	; (8009718 <UART_SetConfig+0x340>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d130      	bne.n	80095d0 <UART_SetConfig+0x1f8>
 800956e:	4b69      	ldr	r3, [pc, #420]	; (8009714 <UART_SetConfig+0x33c>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	2b05      	cmp	r3, #5
 8009578:	d826      	bhi.n	80095c8 <UART_SetConfig+0x1f0>
 800957a:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <UART_SetConfig+0x1a8>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	08009599 	.word	0x08009599
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095a9 	.word	0x080095a9
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b9 	.word	0x080095b9
 8009594:	080095c1 	.word	0x080095c1
 8009598:	2300      	movs	r3, #0
 800959a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959e:	e1ec      	b.n	800997a <UART_SetConfig+0x5a2>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a6:	e1e8      	b.n	800997a <UART_SetConfig+0x5a2>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e1e4      	b.n	800997a <UART_SetConfig+0x5a2>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e1e0      	b.n	800997a <UART_SetConfig+0x5a2>
 80095b8:	2320      	movs	r3, #32
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e1dc      	b.n	800997a <UART_SetConfig+0x5a2>
 80095c0:	2340      	movs	r3, #64	; 0x40
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e1d8      	b.n	800997a <UART_SetConfig+0x5a2>
 80095c8:	2380      	movs	r3, #128	; 0x80
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e1d4      	b.n	800997a <UART_SetConfig+0x5a2>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a51      	ldr	r2, [pc, #324]	; (800971c <UART_SetConfig+0x344>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d130      	bne.n	800963c <UART_SetConfig+0x264>
 80095da:	4b4e      	ldr	r3, [pc, #312]	; (8009714 <UART_SetConfig+0x33c>)
 80095dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	d826      	bhi.n	8009634 <UART_SetConfig+0x25c>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <UART_SetConfig+0x214>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	08009605 	.word	0x08009605
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	08009615 	.word	0x08009615
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	08009625 	.word	0x08009625
 8009600:	0800962d 	.word	0x0800962d
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e1b6      	b.n	800997a <UART_SetConfig+0x5a2>
 800960c:	2304      	movs	r3, #4
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e1b2      	b.n	800997a <UART_SetConfig+0x5a2>
 8009614:	2308      	movs	r3, #8
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e1ae      	b.n	800997a <UART_SetConfig+0x5a2>
 800961c:	2310      	movs	r3, #16
 800961e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009622:	e1aa      	b.n	800997a <UART_SetConfig+0x5a2>
 8009624:	2320      	movs	r3, #32
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	e1a6      	b.n	800997a <UART_SetConfig+0x5a2>
 800962c:	2340      	movs	r3, #64	; 0x40
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e1a2      	b.n	800997a <UART_SetConfig+0x5a2>
 8009634:	2380      	movs	r3, #128	; 0x80
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e19e      	b.n	800997a <UART_SetConfig+0x5a2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a37      	ldr	r2, [pc, #220]	; (8009720 <UART_SetConfig+0x348>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d130      	bne.n	80096a8 <UART_SetConfig+0x2d0>
 8009646:	4b33      	ldr	r3, [pc, #204]	; (8009714 <UART_SetConfig+0x33c>)
 8009648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	2b05      	cmp	r3, #5
 8009650:	d826      	bhi.n	80096a0 <UART_SetConfig+0x2c8>
 8009652:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x280>)
 8009654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009658:	08009671 	.word	0x08009671
 800965c:	08009679 	.word	0x08009679
 8009660:	08009681 	.word	0x08009681
 8009664:	08009689 	.word	0x08009689
 8009668:	08009691 	.word	0x08009691
 800966c:	08009699 	.word	0x08009699
 8009670:	2300      	movs	r3, #0
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	e180      	b.n	800997a <UART_SetConfig+0x5a2>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e17c      	b.n	800997a <UART_SetConfig+0x5a2>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009686:	e178      	b.n	800997a <UART_SetConfig+0x5a2>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e174      	b.n	800997a <UART_SetConfig+0x5a2>
 8009690:	2320      	movs	r3, #32
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e170      	b.n	800997a <UART_SetConfig+0x5a2>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e16c      	b.n	800997a <UART_SetConfig+0x5a2>
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e168      	b.n	800997a <UART_SetConfig+0x5a2>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <UART_SetConfig+0x34c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d142      	bne.n	8009738 <UART_SetConfig+0x360>
 80096b2:	4b18      	ldr	r3, [pc, #96]	; (8009714 <UART_SetConfig+0x33c>)
 80096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b05      	cmp	r3, #5
 80096bc:	d838      	bhi.n	8009730 <UART_SetConfig+0x358>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <UART_SetConfig+0x2ec>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096dd 	.word	0x080096dd
 80096c8:	080096e5 	.word	0x080096e5
 80096cc:	080096ed 	.word	0x080096ed
 80096d0:	080096f5 	.word	0x080096f5
 80096d4:	080096fd 	.word	0x080096fd
 80096d8:	08009729 	.word	0x08009729
 80096dc:	2300      	movs	r3, #0
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e14a      	b.n	800997a <UART_SetConfig+0x5a2>
 80096e4:	2304      	movs	r3, #4
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e146      	b.n	800997a <UART_SetConfig+0x5a2>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e142      	b.n	800997a <UART_SetConfig+0x5a2>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e13e      	b.n	800997a <UART_SetConfig+0x5a2>
 80096fc:	2320      	movs	r3, #32
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e13a      	b.n	800997a <UART_SetConfig+0x5a2>
 8009704:	cfff69f3 	.word	0xcfff69f3
 8009708:	58000c00 	.word	0x58000c00
 800970c:	11fff4ff 	.word	0x11fff4ff
 8009710:	40011000 	.word	0x40011000
 8009714:	58024400 	.word	0x58024400
 8009718:	40004400 	.word	0x40004400
 800971c:	40004800 	.word	0x40004800
 8009720:	40004c00 	.word	0x40004c00
 8009724:	40005000 	.word	0x40005000
 8009728:	2340      	movs	r3, #64	; 0x40
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e124      	b.n	800997a <UART_SetConfig+0x5a2>
 8009730:	2380      	movs	r3, #128	; 0x80
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e120      	b.n	800997a <UART_SetConfig+0x5a2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4acc      	ldr	r2, [pc, #816]	; (8009a70 <UART_SetConfig+0x698>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d176      	bne.n	8009830 <UART_SetConfig+0x458>
 8009742:	4bcc      	ldr	r3, [pc, #816]	; (8009a74 <UART_SetConfig+0x69c>)
 8009744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800974a:	2b28      	cmp	r3, #40	; 0x28
 800974c:	d86c      	bhi.n	8009828 <UART_SetConfig+0x450>
 800974e:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <UART_SetConfig+0x37c>)
 8009750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009754:	080097f9 	.word	0x080097f9
 8009758:	08009829 	.word	0x08009829
 800975c:	08009829 	.word	0x08009829
 8009760:	08009829 	.word	0x08009829
 8009764:	08009829 	.word	0x08009829
 8009768:	08009829 	.word	0x08009829
 800976c:	08009829 	.word	0x08009829
 8009770:	08009829 	.word	0x08009829
 8009774:	08009801 	.word	0x08009801
 8009778:	08009829 	.word	0x08009829
 800977c:	08009829 	.word	0x08009829
 8009780:	08009829 	.word	0x08009829
 8009784:	08009829 	.word	0x08009829
 8009788:	08009829 	.word	0x08009829
 800978c:	08009829 	.word	0x08009829
 8009790:	08009829 	.word	0x08009829
 8009794:	08009809 	.word	0x08009809
 8009798:	08009829 	.word	0x08009829
 800979c:	08009829 	.word	0x08009829
 80097a0:	08009829 	.word	0x08009829
 80097a4:	08009829 	.word	0x08009829
 80097a8:	08009829 	.word	0x08009829
 80097ac:	08009829 	.word	0x08009829
 80097b0:	08009829 	.word	0x08009829
 80097b4:	08009811 	.word	0x08009811
 80097b8:	08009829 	.word	0x08009829
 80097bc:	08009829 	.word	0x08009829
 80097c0:	08009829 	.word	0x08009829
 80097c4:	08009829 	.word	0x08009829
 80097c8:	08009829 	.word	0x08009829
 80097cc:	08009829 	.word	0x08009829
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009819 	.word	0x08009819
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009829 	.word	0x08009829
 80097e0:	08009829 	.word	0x08009829
 80097e4:	08009829 	.word	0x08009829
 80097e8:	08009829 	.word	0x08009829
 80097ec:	08009829 	.word	0x08009829
 80097f0:	08009829 	.word	0x08009829
 80097f4:	08009821 	.word	0x08009821
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fe:	e0bc      	b.n	800997a <UART_SetConfig+0x5a2>
 8009800:	2304      	movs	r3, #4
 8009802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009806:	e0b8      	b.n	800997a <UART_SetConfig+0x5a2>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e0b4      	b.n	800997a <UART_SetConfig+0x5a2>
 8009810:	2310      	movs	r3, #16
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e0b0      	b.n	800997a <UART_SetConfig+0x5a2>
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e0ac      	b.n	800997a <UART_SetConfig+0x5a2>
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e0a8      	b.n	800997a <UART_SetConfig+0x5a2>
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e0a4      	b.n	800997a <UART_SetConfig+0x5a2>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a90      	ldr	r2, [pc, #576]	; (8009a78 <UART_SetConfig+0x6a0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d130      	bne.n	800989c <UART_SetConfig+0x4c4>
 800983a:	4b8e      	ldr	r3, [pc, #568]	; (8009a74 <UART_SetConfig+0x69c>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b05      	cmp	r3, #5
 8009844:	d826      	bhi.n	8009894 <UART_SetConfig+0x4bc>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <UART_SetConfig+0x474>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	08009865 	.word	0x08009865
 8009850:	0800986d 	.word	0x0800986d
 8009854:	08009875 	.word	0x08009875
 8009858:	0800987d 	.word	0x0800987d
 800985c:	08009885 	.word	0x08009885
 8009860:	0800988d 	.word	0x0800988d
 8009864:	2300      	movs	r3, #0
 8009866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986a:	e086      	b.n	800997a <UART_SetConfig+0x5a2>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009872:	e082      	b.n	800997a <UART_SetConfig+0x5a2>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e07e      	b.n	800997a <UART_SetConfig+0x5a2>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e07a      	b.n	800997a <UART_SetConfig+0x5a2>
 8009884:	2320      	movs	r3, #32
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e076      	b.n	800997a <UART_SetConfig+0x5a2>
 800988c:	2340      	movs	r3, #64	; 0x40
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e072      	b.n	800997a <UART_SetConfig+0x5a2>
 8009894:	2380      	movs	r3, #128	; 0x80
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e06e      	b.n	800997a <UART_SetConfig+0x5a2>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a76      	ldr	r2, [pc, #472]	; (8009a7c <UART_SetConfig+0x6a4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d130      	bne.n	8009908 <UART_SetConfig+0x530>
 80098a6:	4b73      	ldr	r3, [pc, #460]	; (8009a74 <UART_SetConfig+0x69c>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d826      	bhi.n	8009900 <UART_SetConfig+0x528>
 80098b2:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <UART_SetConfig+0x4e0>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	080098d9 	.word	0x080098d9
 80098c0:	080098e1 	.word	0x080098e1
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e050      	b.n	800997a <UART_SetConfig+0x5a2>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e04c      	b.n	800997a <UART_SetConfig+0x5a2>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e048      	b.n	800997a <UART_SetConfig+0x5a2>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e044      	b.n	800997a <UART_SetConfig+0x5a2>
 80098f0:	2320      	movs	r3, #32
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e040      	b.n	800997a <UART_SetConfig+0x5a2>
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e03c      	b.n	800997a <UART_SetConfig+0x5a2>
 8009900:	2380      	movs	r3, #128	; 0x80
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e038      	b.n	800997a <UART_SetConfig+0x5a2>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a5c      	ldr	r2, [pc, #368]	; (8009a80 <UART_SetConfig+0x6a8>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d130      	bne.n	8009974 <UART_SetConfig+0x59c>
 8009912:	4b58      	ldr	r3, [pc, #352]	; (8009a74 <UART_SetConfig+0x69c>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b05      	cmp	r3, #5
 800991c:	d826      	bhi.n	800996c <UART_SetConfig+0x594>
 800991e:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <UART_SetConfig+0x54c>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	0800993d 	.word	0x0800993d
 8009928:	08009945 	.word	0x08009945
 800992c:	0800994d 	.word	0x0800994d
 8009930:	08009955 	.word	0x08009955
 8009934:	0800995d 	.word	0x0800995d
 8009938:	08009965 	.word	0x08009965
 800993c:	2302      	movs	r3, #2
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e01a      	b.n	800997a <UART_SetConfig+0x5a2>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	e016      	b.n	800997a <UART_SetConfig+0x5a2>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009952:	e012      	b.n	800997a <UART_SetConfig+0x5a2>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e00e      	b.n	800997a <UART_SetConfig+0x5a2>
 800995c:	2320      	movs	r3, #32
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e00a      	b.n	800997a <UART_SetConfig+0x5a2>
 8009964:	2340      	movs	r3, #64	; 0x40
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e006      	b.n	800997a <UART_SetConfig+0x5a2>
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e002      	b.n	800997a <UART_SetConfig+0x5a2>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a40      	ldr	r2, [pc, #256]	; (8009a80 <UART_SetConfig+0x6a8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	f040 80ef 	bne.w	8009b64 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800998a:	2b20      	cmp	r3, #32
 800998c:	dc46      	bgt.n	8009a1c <UART_SetConfig+0x644>
 800998e:	2b02      	cmp	r3, #2
 8009990:	f2c0 8081 	blt.w	8009a96 <UART_SetConfig+0x6be>
 8009994:	3b02      	subs	r3, #2
 8009996:	2b1e      	cmp	r3, #30
 8009998:	d87d      	bhi.n	8009a96 <UART_SetConfig+0x6be>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x5c8>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	08009a23 	.word	0x08009a23
 80099a4:	08009a97 	.word	0x08009a97
 80099a8:	08009a2b 	.word	0x08009a2b
 80099ac:	08009a97 	.word	0x08009a97
 80099b0:	08009a97 	.word	0x08009a97
 80099b4:	08009a97 	.word	0x08009a97
 80099b8:	08009a3b 	.word	0x08009a3b
 80099bc:	08009a97 	.word	0x08009a97
 80099c0:	08009a97 	.word	0x08009a97
 80099c4:	08009a97 	.word	0x08009a97
 80099c8:	08009a97 	.word	0x08009a97
 80099cc:	08009a97 	.word	0x08009a97
 80099d0:	08009a97 	.word	0x08009a97
 80099d4:	08009a97 	.word	0x08009a97
 80099d8:	08009a4b 	.word	0x08009a4b
 80099dc:	08009a97 	.word	0x08009a97
 80099e0:	08009a97 	.word	0x08009a97
 80099e4:	08009a97 	.word	0x08009a97
 80099e8:	08009a97 	.word	0x08009a97
 80099ec:	08009a97 	.word	0x08009a97
 80099f0:	08009a97 	.word	0x08009a97
 80099f4:	08009a97 	.word	0x08009a97
 80099f8:	08009a97 	.word	0x08009a97
 80099fc:	08009a97 	.word	0x08009a97
 8009a00:	08009a97 	.word	0x08009a97
 8009a04:	08009a97 	.word	0x08009a97
 8009a08:	08009a97 	.word	0x08009a97
 8009a0c:	08009a97 	.word	0x08009a97
 8009a10:	08009a97 	.word	0x08009a97
 8009a14:	08009a97 	.word	0x08009a97
 8009a18:	08009a89 	.word	0x08009a89
 8009a1c:	2b40      	cmp	r3, #64	; 0x40
 8009a1e:	d036      	beq.n	8009a8e <UART_SetConfig+0x6b6>
 8009a20:	e039      	b.n	8009a96 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a22:	f7fe f967 	bl	8007cf4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a28:	e03b      	b.n	8009aa2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2a:	f107 0314 	add.w	r3, r7, #20
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe f976 	bl	8007d20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a38:	e033      	b.n	8009aa2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3a:	f107 0308 	add.w	r3, r7, #8
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fac2 	bl	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a48:	e02b      	b.n	8009aa2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <UART_SetConfig+0x69c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <UART_SetConfig+0x69c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	08db      	lsrs	r3, r3, #3
 8009a5c:	f003 0303 	and.w	r3, r3, #3
 8009a60:	4a08      	ldr	r2, [pc, #32]	; (8009a84 <UART_SetConfig+0x6ac>)
 8009a62:	fa22 f303 	lsr.w	r3, r2, r3
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a68:	e01b      	b.n	8009aa2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009a6a:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <UART_SetConfig+0x6ac>)
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a6e:	e018      	b.n	8009aa2 <UART_SetConfig+0x6ca>
 8009a70:	40011400 	.word	0x40011400
 8009a74:	58024400 	.word	0x58024400
 8009a78:	40007800 	.word	0x40007800
 8009a7c:	40007c00 	.word	0x40007c00
 8009a80:	58000c00 	.word	0x58000c00
 8009a84:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a88:	4bc4      	ldr	r3, [pc, #784]	; (8009d9c <UART_SetConfig+0x9c4>)
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a8c:	e009      	b.n	8009aa2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a94:	e005      	b.n	8009aa2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 81da 	beq.w	8009e5e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	4abc      	ldr	r2, [pc, #752]	; (8009da0 <UART_SetConfig+0x9c8>)
 8009ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009abc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	6a3a      	ldr	r2, [r7, #32]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d305      	bcc.n	8009ada <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ad4:	6a3a      	ldr	r2, [r7, #32]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d903      	bls.n	8009ae2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ae0:	e1bd      	b.n	8009e5e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f04f 0100 	mov.w	r1, #0
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	4aac      	ldr	r2, [pc, #688]	; (8009da0 <UART_SetConfig+0x9c8>)
 8009af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	f04f 0300 	mov.w	r3, #0
 8009afa:	f7f6 fbf1 	bl	80002e0 <__aeabi_uldivmod>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4610      	mov	r0, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	020b      	lsls	r3, r1, #8
 8009b10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b14:	0202      	lsls	r2, r0, #8
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	6849      	ldr	r1, [r1, #4]
 8009b1a:	0849      	lsrs	r1, r1, #1
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	f04f 0100 	mov.w	r1, #0
 8009b22:	1814      	adds	r4, r2, r0
 8009b24:	eb43 0501 	adc.w	r5, r3, r1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	4620      	mov	r0, r4
 8009b34:	4629      	mov	r1, r5
 8009b36:	f7f6 fbd3 	bl	80002e0 <__aeabi_uldivmod>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4613      	mov	r3, r2
 8009b40:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b48:	d308      	bcc.n	8009b5c <UART_SetConfig+0x784>
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b50:	d204      	bcs.n	8009b5c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b58:	60da      	str	r2, [r3, #12]
 8009b5a:	e180      	b.n	8009e5e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b62:	e17c      	b.n	8009e5e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b6c:	f040 80bf 	bne.w	8009cee <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	dc49      	bgt.n	8009c0c <UART_SetConfig+0x834>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	db7c      	blt.n	8009c76 <UART_SetConfig+0x89e>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d87a      	bhi.n	8009c76 <UART_SetConfig+0x89e>
 8009b80:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <UART_SetConfig+0x7b0>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009c13 	.word	0x08009c13
 8009b8c:	08009c1b 	.word	0x08009c1b
 8009b90:	08009c77 	.word	0x08009c77
 8009b94:	08009c77 	.word	0x08009c77
 8009b98:	08009c23 	.word	0x08009c23
 8009b9c:	08009c77 	.word	0x08009c77
 8009ba0:	08009c77 	.word	0x08009c77
 8009ba4:	08009c77 	.word	0x08009c77
 8009ba8:	08009c33 	.word	0x08009c33
 8009bac:	08009c77 	.word	0x08009c77
 8009bb0:	08009c77 	.word	0x08009c77
 8009bb4:	08009c77 	.word	0x08009c77
 8009bb8:	08009c77 	.word	0x08009c77
 8009bbc:	08009c77 	.word	0x08009c77
 8009bc0:	08009c77 	.word	0x08009c77
 8009bc4:	08009c77 	.word	0x08009c77
 8009bc8:	08009c43 	.word	0x08009c43
 8009bcc:	08009c77 	.word	0x08009c77
 8009bd0:	08009c77 	.word	0x08009c77
 8009bd4:	08009c77 	.word	0x08009c77
 8009bd8:	08009c77 	.word	0x08009c77
 8009bdc:	08009c77 	.word	0x08009c77
 8009be0:	08009c77 	.word	0x08009c77
 8009be4:	08009c77 	.word	0x08009c77
 8009be8:	08009c77 	.word	0x08009c77
 8009bec:	08009c77 	.word	0x08009c77
 8009bf0:	08009c77 	.word	0x08009c77
 8009bf4:	08009c77 	.word	0x08009c77
 8009bf8:	08009c77 	.word	0x08009c77
 8009bfc:	08009c77 	.word	0x08009c77
 8009c00:	08009c77 	.word	0x08009c77
 8009c04:	08009c77 	.word	0x08009c77
 8009c08:	08009c69 	.word	0x08009c69
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	d02e      	beq.n	8009c6e <UART_SetConfig+0x896>
 8009c10:	e031      	b.n	8009c76 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c12:	f7fd f8c1 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 8009c16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c18:	e033      	b.n	8009c82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c1a:	f7fd f8d3 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8009c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c20:	e02f      	b.n	8009c82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c22:	f107 0314 	add.w	r3, r7, #20
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe f87a 	bl	8007d20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c30:	e027      	b.n	8009c82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe f9c6 	bl	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c40:	e01f      	b.n	8009c82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c42:	4b58      	ldr	r3, [pc, #352]	; (8009da4 <UART_SetConfig+0x9cc>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d009      	beq.n	8009c62 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c4e:	4b55      	ldr	r3, [pc, #340]	; (8009da4 <UART_SetConfig+0x9cc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	08db      	lsrs	r3, r3, #3
 8009c54:	f003 0303 	and.w	r3, r3, #3
 8009c58:	4a53      	ldr	r2, [pc, #332]	; (8009da8 <UART_SetConfig+0x9d0>)
 8009c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c60:	e00f      	b.n	8009c82 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009c62:	4b51      	ldr	r3, [pc, #324]	; (8009da8 <UART_SetConfig+0x9d0>)
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c66:	e00c      	b.n	8009c82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c68:	4b4c      	ldr	r3, [pc, #304]	; (8009d9c <UART_SetConfig+0x9c4>)
 8009c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c6c:	e009      	b.n	8009c82 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c74:	e005      	b.n	8009c82 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 80ea 	beq.w	8009e5e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	4a44      	ldr	r2, [pc, #272]	; (8009da0 <UART_SetConfig+0x9c8>)
 8009c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c9c:	005a      	lsls	r2, r3, #1
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	2b0f      	cmp	r3, #15
 8009cb6:	d916      	bls.n	8009ce6 <UART_SetConfig+0x90e>
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cbe:	d212      	bcs.n	8009ce6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	f023 030f 	bic.w	r3, r3, #15
 8009cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	085b      	lsrs	r3, r3, #1
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ce2:	60da      	str	r2, [r3, #12]
 8009ce4:	e0bb      	b.n	8009e5e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cec:	e0b7      	b.n	8009e5e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	dc4a      	bgt.n	8009d8c <UART_SetConfig+0x9b4>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f2c0 8086 	blt.w	8009e08 <UART_SetConfig+0xa30>
 8009cfc:	2b20      	cmp	r3, #32
 8009cfe:	f200 8083 	bhi.w	8009e08 <UART_SetConfig+0xa30>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x930>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d93 	.word	0x08009d93
 8009d0c:	08009dad 	.word	0x08009dad
 8009d10:	08009e09 	.word	0x08009e09
 8009d14:	08009e09 	.word	0x08009e09
 8009d18:	08009db5 	.word	0x08009db5
 8009d1c:	08009e09 	.word	0x08009e09
 8009d20:	08009e09 	.word	0x08009e09
 8009d24:	08009e09 	.word	0x08009e09
 8009d28:	08009dc5 	.word	0x08009dc5
 8009d2c:	08009e09 	.word	0x08009e09
 8009d30:	08009e09 	.word	0x08009e09
 8009d34:	08009e09 	.word	0x08009e09
 8009d38:	08009e09 	.word	0x08009e09
 8009d3c:	08009e09 	.word	0x08009e09
 8009d40:	08009e09 	.word	0x08009e09
 8009d44:	08009e09 	.word	0x08009e09
 8009d48:	08009dd5 	.word	0x08009dd5
 8009d4c:	08009e09 	.word	0x08009e09
 8009d50:	08009e09 	.word	0x08009e09
 8009d54:	08009e09 	.word	0x08009e09
 8009d58:	08009e09 	.word	0x08009e09
 8009d5c:	08009e09 	.word	0x08009e09
 8009d60:	08009e09 	.word	0x08009e09
 8009d64:	08009e09 	.word	0x08009e09
 8009d68:	08009e09 	.word	0x08009e09
 8009d6c:	08009e09 	.word	0x08009e09
 8009d70:	08009e09 	.word	0x08009e09
 8009d74:	08009e09 	.word	0x08009e09
 8009d78:	08009e09 	.word	0x08009e09
 8009d7c:	08009e09 	.word	0x08009e09
 8009d80:	08009e09 	.word	0x08009e09
 8009d84:	08009e09 	.word	0x08009e09
 8009d88:	08009dfb 	.word	0x08009dfb
 8009d8c:	2b40      	cmp	r3, #64	; 0x40
 8009d8e:	d037      	beq.n	8009e00 <UART_SetConfig+0xa28>
 8009d90:	e03a      	b.n	8009e08 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d92:	f7fd f801 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 8009d96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d98:	e03c      	b.n	8009e14 <UART_SetConfig+0xa3c>
 8009d9a:	bf00      	nop
 8009d9c:	003d0900 	.word	0x003d0900
 8009da0:	0800ce20 	.word	0x0800ce20
 8009da4:	58024400 	.word	0x58024400
 8009da8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dac:	f7fd f80a 	bl	8006dc4 <HAL_RCC_GetPCLK2Freq>
 8009db0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009db2:	e02f      	b.n	8009e14 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db4:	f107 0314 	add.w	r3, r7, #20
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd ffb1 	bl	8007d20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dc2:	e027      	b.n	8009e14 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc4:	f107 0308 	add.w	r3, r7, #8
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fe f8fd 	bl	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd2:	e01f      	b.n	8009e14 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd4:	4b2c      	ldr	r3, [pc, #176]	; (8009e88 <UART_SetConfig+0xab0>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d009      	beq.n	8009df4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009de0:	4b29      	ldr	r3, [pc, #164]	; (8009e88 <UART_SetConfig+0xab0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	08db      	lsrs	r3, r3, #3
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	4a28      	ldr	r2, [pc, #160]	; (8009e8c <UART_SetConfig+0xab4>)
 8009dec:	fa22 f303 	lsr.w	r3, r2, r3
 8009df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009df2:	e00f      	b.n	8009e14 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009df4:	4b25      	ldr	r3, [pc, #148]	; (8009e8c <UART_SetConfig+0xab4>)
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df8:	e00c      	b.n	8009e14 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dfa:	4b25      	ldr	r3, [pc, #148]	; (8009e90 <UART_SetConfig+0xab8>)
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dfe:	e009      	b.n	8009e14 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e06:	e005      	b.n	8009e14 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e12:	bf00      	nop
    }

    if (pclk != 0U)
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d021      	beq.n	8009e5e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	4a1d      	ldr	r2, [pc, #116]	; (8009e94 <UART_SetConfig+0xabc>)
 8009e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e24:	461a      	mov	r2, r3
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e28:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	441a      	add	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	2b0f      	cmp	r3, #15
 8009e44:	d908      	bls.n	8009e58 <UART_SetConfig+0xa80>
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4c:	d204      	bcs.n	8009e58 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e54:	60da      	str	r2, [r3, #12]
 8009e56:	e002      	b.n	8009e5e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009e7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3738      	adds	r7, #56	; 0x38
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bdb0      	pop	{r4, r5, r7, pc}
 8009e86:	bf00      	nop
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	03d09000 	.word	0x03d09000
 8009e90:	003d0900 	.word	0x003d0900
 8009e94:	0800ce20 	.word	0x0800ce20

08009e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00a      	beq.n	8009ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	f003 0308 	and.w	r3, r3, #8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d01a      	beq.n	8009fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f96:	d10a      	bne.n	8009fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	605a      	str	r2, [r3, #4]
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fec:	f7f8 fdac 	bl	8002b48 <HAL_GetTick>
 8009ff0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d10e      	bne.n	800a01e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f82f 	bl	800a072 <UART_WaitOnFlagUntilTimeout>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e025      	b.n	800a06a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b04      	cmp	r3, #4
 800a02a:	d10e      	bne.n	800a04a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a02c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f819 	bl	800a072 <UART_WaitOnFlagUntilTimeout>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e00f      	b.n	800a06a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	603b      	str	r3, [r7, #0]
 800a07e:	4613      	mov	r3, r2
 800a080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a082:	e062      	b.n	800a14a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08a:	d05e      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a08c:	f7f8 fd5c 	bl	8002b48 <HAL_GetTick>
 800a090:	4602      	mov	r2, r0
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11d      	bne.n	800a0de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e045      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d02e      	beq.n	800a14a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0fa:	d126      	bne.n	800a14a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a104:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a114:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0201 	bic.w	r2, r2, #1
 800a124:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2220      	movs	r2, #32
 800a12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e00f      	b.n	800a16a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69da      	ldr	r2, [r3, #28]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4013      	ands	r3, r2
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	bf0c      	ite	eq
 800a15a:	2301      	moveq	r3, #1
 800a15c:	2300      	movne	r3, #0
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	429a      	cmp	r2, r3
 800a166:	d08d      	beq.n	800a084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	4613      	mov	r3, r2
 800a180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	88fa      	ldrh	r2, [r7, #6]
 800a18c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2222      	movs	r2, #34	; 0x22
 800a19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d02c      	beq.n	800a202 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ac:	4a25      	ldr	r2, [pc, #148]	; (800a244 <UART_Start_Receive_DMA+0xd0>)
 800a1ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1b4:	4a24      	ldr	r2, [pc, #144]	; (800a248 <UART_Start_Receive_DMA+0xd4>)
 800a1b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1bc:	4a23      	ldr	r2, [pc, #140]	; (800a24c <UART_Start_Receive_DMA+0xd8>)
 800a1be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3324      	adds	r3, #36	; 0x24
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d8:	461a      	mov	r2, r3
 800a1da:	88fb      	ldrh	r3, [r7, #6]
 800a1dc:	f7f9 f908 	bl	80033f0 <HAL_DMA_Start_IT>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00d      	beq.n	800a202 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e01c      	b.n	800a23c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a218:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0201 	orr.w	r2, r2, #1
 800a228:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a238:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	0800a35d 	.word	0x0800a35d
 800a248:	0800a3f3 	.word	0x0800a3f3
 800a24c:	0800a42b 	.word	0x0800a42b

0800a250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a266:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a276:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6899      	ldr	r1, [r3, #8]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <UART_EndRxTransfer+0x60>)
 800a2b0:	400b      	ands	r3, r1
 800a2b2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d107      	bne.n	800a2cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0210 	bic.w	r2, r2, #16
 800a2ca:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	effffffe 	.word	0xeffffffe

0800a2f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a306:	d014      	beq.n	800a332 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a31e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a32e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a330:	e002      	b.n	800a338 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff f812 	bl	800935c <HAL_UART_TxCpltCallback>
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff f80e 	bl	8009370 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d02b      	beq.n	800a3cc <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a38a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0201 	bic.w	r2, r2, #1
 800a39a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689a      	ldr	r2, [r3, #8]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3aa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d107      	bne.n	800a3cc <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0210 	bic.w	r2, r2, #16
 800a3ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d107      	bne.n	800a3e4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fe ffef 	bl	80093c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3e2:	e002      	b.n	800a3ea <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7fe ffcd 	bl	8009384 <HAL_UART_RxCpltCallback>
}
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a404:	2b01      	cmp	r3, #1
 800a406:	d109      	bne.n	800a41c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a40e:	085b      	lsrs	r3, r3, #1
 800a410:	b29b      	uxth	r3, r3
 800a412:	4619      	mov	r1, r3
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7fe ffd3 	bl	80093c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a41a:	e002      	b.n	800a422 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7fe ffbb 	bl	8009398 <HAL_UART_RxHalfCpltCallback>
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a43e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a446:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b80      	cmp	r3, #128	; 0x80
 800a454:	d109      	bne.n	800a46a <UART_DMAError+0x40>
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b21      	cmp	r3, #33	; 0x21
 800a45a:	d106      	bne.n	800a46a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a464:	6978      	ldr	r0, [r7, #20]
 800a466:	f7ff fef3 	bl	800a250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a474:	2b40      	cmp	r3, #64	; 0x40
 800a476:	d109      	bne.n	800a48c <UART_DMAError+0x62>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b22      	cmp	r3, #34	; 0x22
 800a47c:	d106      	bne.n	800a48c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2200      	movs	r2, #0
 800a482:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a486:	6978      	ldr	r0, [r7, #20]
 800a488:	f7ff ff00 	bl	800a28c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a492:	f043 0210 	orr.w	r2, r3, #16
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a49c:	6978      	ldr	r0, [r7, #20]
 800a49e:	f7fe ff85 	bl	80093ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a2:	bf00      	nop
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7fe ff6f 	bl	80093ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ce:	bf00      	nop
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7fe ff2d 	bl	800935c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a532:	b480      	push	{r7}
 800a534:	b083      	sub	sp, #12
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a546:	b480      	push	{r7}
 800a548:	b085      	sub	sp, #20
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_UARTEx_DisableFifoMode+0x16>
 800a558:	2302      	movs	r3, #2
 800a55a:	e027      	b.n	800a5ac <HAL_UARTEx_DisableFifoMode+0x66>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2224      	movs	r2, #36	; 0x24
 800a568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0201 	bic.w	r2, r2, #1
 800a582:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a58a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e02d      	b.n	800a62c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2224      	movs	r2, #36	; 0x24
 800a5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0201 	bic.w	r2, r2, #1
 800a5f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f84f 	bl	800a6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a644:	2b01      	cmp	r3, #1
 800a646:	d101      	bne.n	800a64c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a648:	2302      	movs	r3, #2
 800a64a:	e02d      	b.n	800a6a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2224      	movs	r2, #36	; 0x24
 800a658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0201 	bic.w	r2, r2, #1
 800a672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f811 	bl	800a6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2220      	movs	r2, #32
 800a69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d108      	bne.n	800a6d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d0:	e031      	b.n	800a736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6d2:	2310      	movs	r3, #16
 800a6d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6d6:	2310      	movs	r3, #16
 800a6d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	0e5b      	lsrs	r3, r3, #25
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	0f5b      	lsrs	r3, r3, #29
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	7b3a      	ldrb	r2, [r7, #12]
 800a6fe:	4911      	ldr	r1, [pc, #68]	; (800a744 <UARTEx_SetNbDataToProcess+0x94>)
 800a700:	5c8a      	ldrb	r2, [r1, r2]
 800a702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a706:	7b3a      	ldrb	r2, [r7, #12]
 800a708:	490f      	ldr	r1, [pc, #60]	; (800a748 <UARTEx_SetNbDataToProcess+0x98>)
 800a70a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a70c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	7b7a      	ldrb	r2, [r7, #13]
 800a71c:	4909      	ldr	r1, [pc, #36]	; (800a744 <UARTEx_SetNbDataToProcess+0x94>)
 800a71e:	5c8a      	ldrb	r2, [r1, r2]
 800a720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a724:	7b7a      	ldrb	r2, [r7, #13]
 800a726:	4908      	ldr	r1, [pc, #32]	; (800a748 <UARTEx_SetNbDataToProcess+0x98>)
 800a728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a736:	bf00      	nop
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	0800ce38 	.word	0x0800ce38
 800a748:	0800ce40 	.word	0x0800ce40

0800a74c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a75a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a75e:	2b84      	cmp	r3, #132	; 0x84
 800a760:	d005      	beq.n	800a76e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	3303      	adds	r3, #3
 800a76c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a76e:	68fb      	ldr	r3, [r7, #12]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a780:	f001 f84a 	bl	800b818 <vTaskStartScheduler>
  
  return osOK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	bd80      	pop	{r7, pc}

0800a78a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78c:	b089      	sub	sp, #36	; 0x24
 800a78e:	af04      	add	r7, sp, #16
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d020      	beq.n	800a7de <osThreadCreate+0x54>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01c      	beq.n	800a7de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685c      	ldr	r4, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681d      	ldr	r5, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691e      	ldr	r6, [r3, #16]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff ffc8 	bl	800a74c <makeFreeRtosPriority>
 800a7bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7c6:	9202      	str	r2, [sp, #8]
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	9100      	str	r1, [sp, #0]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 fe58 	bl	800b488 <xTaskCreateStatic>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e01c      	b.n	800a818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685c      	ldr	r4, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a7ea:	b29e      	uxth	r6, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff ffaa 	bl	800a74c <makeFreeRtosPriority>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	f107 030c 	add.w	r3, r7, #12
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	9200      	str	r2, [sp, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	4632      	mov	r2, r6
 800a806:	4629      	mov	r1, r5
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 fe9a 	bl	800b542 <xTaskCreate>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b01      	cmp	r3, #1
 800a812:	d001      	beq.n	800a818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a814:	2300      	movs	r3, #0
 800a816:	e000      	b.n	800a81a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a818:	68fb      	ldr	r3, [r7, #12]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <osDelay+0x16>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	e000      	b.n	800a83a <osDelay+0x18>
 800a838:	2301      	movs	r3, #1
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 ffb8 	bl	800b7b0 <vTaskDelay>
  
  return osOK;
 800a840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d007      	beq.n	800a86a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	4619      	mov	r1, r3
 800a860:	2001      	movs	r0, #1
 800a862:	f000 fa5c 	bl	800ad1e <xQueueCreateMutexStatic>
 800a866:	4603      	mov	r3, r0
 800a868:	e003      	b.n	800a872 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a86a:	2001      	movs	r0, #1
 800a86c:	f000 fa3f 	bl	800acee <xQueueCreateMutex>
 800a870:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af02      	add	r7, sp, #8
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d10a      	bne.n	800a8a8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	2203      	movs	r2, #3
 800a898:	9200      	str	r2, [sp, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	2001      	movs	r0, #1
 800a8a0:	f000 f93a 	bl	800ab18 <xQueueGenericCreateStatic>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	e016      	b.n	800a8d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	e014      	b.n	800a8d6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d110      	bne.n	800a8d4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a8b2:	2203      	movs	r2, #3
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	f000 f9a6 	bl	800ac08 <xQueueGenericCreate>
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <osSemaphoreCreate+0x56>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 fa42 	bl	800ad54 <xQueueGenericSend>
      return sema;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	e000      	b.n	800a8d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a8d4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f103 0208 	add.w	r2, r3, #8
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0208 	add.w	r2, r3, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f103 0208 	add.w	r2, r3, #8
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d103      	bne.n	800a9a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	60fb      	str	r3, [r7, #12]
 800a99e:	e00c      	b.n	800a9ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	e002      	b.n	800a9ae <vListInsert+0x2e>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d2f6      	bcs.n	800a9a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	601a      	str	r2, [r3, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b085      	sub	sp, #20
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6892      	ldr	r2, [r2, #8]
 800aa08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6852      	ldr	r2, [r2, #4]
 800aa12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d103      	bne.n	800aa26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	1e5a      	subs	r2, r3, #1
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
	...

0800aa48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa72:	f001 fe1f 	bl	800c6b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa82:	fb01 f303 	mul.w	r3, r1, r3
 800aa86:	441a      	add	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	68f9      	ldr	r1, [r7, #12]
 800aaa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	441a      	add	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	22ff      	movs	r2, #255	; 0xff
 800aab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	22ff      	movs	r2, #255	; 0xff
 800aabe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d114      	bne.n	800aaf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d01a      	beq.n	800ab06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3310      	adds	r3, #16
 800aad4:	4618      	mov	r0, r3
 800aad6:	f001 f8e1 	bl	800bc9c <xTaskRemoveFromEventList>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d012      	beq.n	800ab06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aae0:	4b0c      	ldr	r3, [pc, #48]	; (800ab14 <xQueueGenericReset+0xcc>)
 800aae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	e009      	b.n	800ab06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3310      	adds	r3, #16
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fef1 	bl	800a8de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3324      	adds	r3, #36	; 0x24
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff feec 	bl	800a8de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab06:	f001 fe05 	bl	800c714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab0a:	2301      	movs	r3, #1
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08e      	sub	sp, #56	; 0x38
 800ab1c:	af02      	add	r7, sp, #8
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <xQueueGenericCreateStatic+0x52>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <xQueueGenericCreateStatic+0x56>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e000      	b.n	800ab70 <xQueueGenericCreateStatic+0x58>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	623b      	str	r3, [r7, #32]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d102      	bne.n	800ab96 <xQueueGenericCreateStatic+0x7e>
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <xQueueGenericCreateStatic+0x82>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e000      	b.n	800ab9c <xQueueGenericCreateStatic+0x84>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	61fb      	str	r3, [r7, #28]
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abb6:	2348      	movs	r3, #72	; 0x48
 800abb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2b48      	cmp	r3, #72	; 0x48
 800abbe:	d00a      	beq.n	800abd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	61bb      	str	r3, [r7, #24]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00d      	beq.n	800abfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	4613      	mov	r3, r2
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	68b9      	ldr	r1, [r7, #8]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 f83f 	bl	800ac7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3730      	adds	r7, #48	; 0x30
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	613b      	str	r3, [r7, #16]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	fb02 f303 	mul.w	r3, r2, r3
 800ac3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	3348      	adds	r3, #72	; 0x48
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 fe59 	bl	800c8f8 <pvPortMalloc>
 800ac46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d011      	beq.n	800ac72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	3348      	adds	r3, #72	; 0x48
 800ac56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac60:	79fa      	ldrb	r2, [r7, #7]
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	4613      	mov	r3, r2
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 f805 	bl	800ac7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac72:	69bb      	ldr	r3, [r7, #24]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d103      	bne.n	800ac98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	69ba      	ldr	r2, [r7, #24]
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e002      	b.n	800ac9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acaa:	2101      	movs	r1, #1
 800acac:	69b8      	ldr	r0, [r7, #24]
 800acae:	f7ff fecb 	bl	800aa48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acb2:	bf00      	nop
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b082      	sub	sp, #8
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00e      	beq.n	800ace6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800acda:	2300      	movs	r3, #0
 800acdc:	2200      	movs	r2, #0
 800acde:	2100      	movs	r1, #0
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f837 	bl	800ad54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b086      	sub	sp, #24
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	4603      	mov	r3, r0
 800acf6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	2300      	movs	r3, #0
 800acfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6939      	ldr	r1, [r7, #16]
 800ad06:	6978      	ldr	r0, [r7, #20]
 800ad08:	f7ff ff7e 	bl	800ac08 <xQueueGenericCreate>
 800ad0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff ffd3 	bl	800acba <prvInitialiseMutex>

		return xNewQueue;
 800ad14:	68fb      	ldr	r3, [r7, #12]
	}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b088      	sub	sp, #32
 800ad22:	af02      	add	r7, sp, #8
 800ad24:	4603      	mov	r3, r0
 800ad26:	6039      	str	r1, [r7, #0]
 800ad28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	6939      	ldr	r1, [r7, #16]
 800ad3c:	6978      	ldr	r0, [r7, #20]
 800ad3e:	f7ff feeb 	bl	800ab18 <xQueueGenericCreateStatic>
 800ad42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff ffb8 	bl	800acba <prvInitialiseMutex>

		return xNewQueue;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	; 0x38
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad62:	2300      	movs	r3, #0
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueGenericSend+0x32>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <xQueueGenericSend+0x40>
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueGenericSend+0x44>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueGenericSend+0x46>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d103      	bne.n	800adc2 <xQueueGenericSend+0x6e>
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <xQueueGenericSend+0x72>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xQueueGenericSend+0x74>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xQueueGenericSend+0x8e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ade2:	f001 f917 	bl	800c014 <xTaskGetSchedulerState>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <xQueueGenericSend+0x9e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <xQueueGenericSend+0xa2>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <xQueueGenericSend+0xa4>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xQueueGenericSend+0xbe>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	61fb      	str	r3, [r7, #28]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae12:	f001 fc4f 	bl	800c6b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d302      	bcc.n	800ae28 <xQueueGenericSend+0xd4>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d129      	bne.n	800ae7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2e:	f000 fa41 	bl	800b2b4 <prvCopyDataToQueue>
 800ae32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d010      	beq.n	800ae5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f000 ff2b 	bl	800bc9c <xTaskRemoveFromEventList>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d013      	beq.n	800ae74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae4c:	4b3f      	ldr	r3, [pc, #252]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	e00a      	b.n	800ae74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae64:	4b39      	ldr	r3, [pc, #228]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae74:	f001 fc4e 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e063      	b.n	800af44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d103      	bne.n	800ae8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae82:	f001 fc47 	bl	800c714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e05c      	b.n	800af44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d106      	bne.n	800ae9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 ff63 	bl	800bd60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae9e:	f001 fc39 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea2:	f000 fd19 	bl	800b8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aea6:	f001 fc05 	bl	800c6b4 <vPortEnterCritical>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d103      	bne.n	800aec0 <xQueueGenericSend+0x16c>
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d103      	bne.n	800aed6 <xQueueGenericSend+0x182>
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed6:	f001 fc1d 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeda:	1d3a      	adds	r2, r7, #4
 800aedc:	f107 0314 	add.w	r3, r7, #20
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 ff52 	bl	800bd8c <xTaskCheckForTimeOut>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d124      	bne.n	800af38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aeee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef0:	f000 fab2 	bl	800b458 <prvIsQueueFull>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	3310      	adds	r3, #16
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fea6 	bl	800bc54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0a:	f000 fa3d 	bl	800b388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af0e:	f000 fcf1 	bl	800b8f4 <xTaskResumeAll>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f af7c 	bne.w	800ae12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <xQueueGenericSend+0x1f8>)
 800af1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	e772      	b.n	800ae12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2e:	f000 fa2b 	bl	800b388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af32:	f000 fcdf 	bl	800b8f4 <xTaskResumeAll>
 800af36:	e76c      	b.n	800ae12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fa25 	bl	800b388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af3e:	f000 fcd9 	bl	800b8f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af44:	4618      	mov	r0, r3
 800af46:	3738      	adds	r7, #56	; 0x38
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	e000ed04 	.word	0xe000ed04

0800af50 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08e      	sub	sp, #56	; 0x38
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	623b      	str	r3, [r7, #32]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <xQueueGiveFromISR+0x48>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	61fb      	str	r3, [r7, #28]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d103      	bne.n	800afa8 <xQueueGiveFromISR+0x58>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <xQueueGiveFromISR+0x5c>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e000      	b.n	800afae <xQueueGiveFromISR+0x5e>
 800afac:	2300      	movs	r3, #0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	61bb      	str	r3, [r7, #24]
}
 800afc4:	bf00      	nop
 800afc6:	e7fe      	b.n	800afc6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afc8:	f001 fc56 	bl	800c878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afcc:	f3ef 8211 	mrs	r2, BASEPRI
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	617a      	str	r2, [r7, #20]
 800afe2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afe4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d22b      	bcs.n	800b050 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800affe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b00a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b012:	d112      	bne.n	800b03a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d016      	beq.n	800b04a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	3324      	adds	r3, #36	; 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fe3b 	bl	800bc9c <xTaskRemoveFromEventList>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00e      	beq.n	800b04a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2201      	movs	r2, #1
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	e007      	b.n	800b04a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b03e:	3301      	adds	r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	b25a      	sxtb	r2, r3
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b04a:	2301      	movs	r3, #1
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34
 800b04e:	e001      	b.n	800b054 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b050:	2300      	movs	r3, #0
 800b052:	637b      	str	r3, [r7, #52]	; 0x34
 800b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b056:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b05e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b062:	4618      	mov	r0, r3
 800b064:	3738      	adds	r7, #56	; 0x38
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08e      	sub	sp, #56	; 0x38
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b076:	2300      	movs	r3, #0
 800b078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b07e:	2300      	movs	r3, #0
 800b080:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	623b      	str	r3, [r7, #32]
}
 800b09a:	bf00      	nop
 800b09c:	e7fe      	b.n	800b09c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	61fb      	str	r3, [r7, #28]
}
 800b0b8:	bf00      	nop
 800b0ba:	e7fe      	b.n	800b0ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0bc:	f000 ffaa 	bl	800c014 <xTaskGetSchedulerState>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d102      	bne.n	800b0cc <xQueueSemaphoreTake+0x60>
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <xQueueSemaphoreTake+0x64>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e000      	b.n	800b0d2 <xQueueSemaphoreTake+0x66>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10a      	bne.n	800b0ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	61bb      	str	r3, [r7, #24]
}
 800b0e8:	bf00      	nop
 800b0ea:	e7fe      	b.n	800b0ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ec:	f001 fae2 	bl	800c6b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d024      	beq.n	800b146 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	1e5a      	subs	r2, r3, #1
 800b100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b102:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d104      	bne.n	800b116 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b10c:	f001 f92a 	bl	800c364 <pvTaskIncrementMutexHeldCount>
 800b110:	4602      	mov	r2, r0
 800b112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b114:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00f      	beq.n	800b13e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b120:	3310      	adds	r3, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fdba 	bl	800bc9c <xTaskRemoveFromEventList>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d007      	beq.n	800b13e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b12e:	4b54      	ldr	r3, [pc, #336]	; (800b280 <xQueueSemaphoreTake+0x214>)
 800b130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b13e:	f001 fae9 	bl	800c714 <vPortExitCritical>
				return pdPASS;
 800b142:	2301      	movs	r3, #1
 800b144:	e097      	b.n	800b276 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d111      	bne.n	800b170 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	617b      	str	r3, [r7, #20]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b168:	f001 fad4 	bl	800c714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e082      	b.n	800b276 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b176:	f107 030c 	add.w	r3, r7, #12
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fdf0 	bl	800bd60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b180:	2301      	movs	r3, #1
 800b182:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b184:	f001 fac6 	bl	800c714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b188:	f000 fba6 	bl	800b8d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b18c:	f001 fa92 	bl	800c6b4 <vPortEnterCritical>
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b196:	b25b      	sxtb	r3, r3
 800b198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19c:	d103      	bne.n	800b1a6 <xQueueSemaphoreTake+0x13a>
 800b19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1ac:	b25b      	sxtb	r3, r3
 800b1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b2:	d103      	bne.n	800b1bc <xQueueSemaphoreTake+0x150>
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1bc:	f001 faaa 	bl	800c714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	f107 030c 	add.w	r3, r7, #12
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 fddf 	bl	800bd8c <xTaskCheckForTimeOut>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d132      	bne.n	800b23a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1d6:	f000 f929 	bl	800b42c <prvIsQueueEmpty>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d026      	beq.n	800b22e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d109      	bne.n	800b1fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b1e8:	f001 fa64 	bl	800c6b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 ff2d 	bl	800c050 <xTaskPriorityInherit>
 800b1f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b1f8:	f001 fa8c 	bl	800c714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	3324      	adds	r3, #36	; 0x24
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fd25 	bl	800bc54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b20c:	f000 f8bc 	bl	800b388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b210:	f000 fb70 	bl	800b8f4 <xTaskResumeAll>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	f47f af68 	bne.w	800b0ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b21c:	4b18      	ldr	r3, [pc, #96]	; (800b280 <xQueueSemaphoreTake+0x214>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	e75e      	b.n	800b0ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b22e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b230:	f000 f8aa 	bl	800b388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b234:	f000 fb5e 	bl	800b8f4 <xTaskResumeAll>
 800b238:	e758      	b.n	800b0ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b23c:	f000 f8a4 	bl	800b388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b240:	f000 fb58 	bl	800b8f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b246:	f000 f8f1 	bl	800b42c <prvIsQueueEmpty>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f43f af4d 	beq.w	800b0ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00d      	beq.n	800b274 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b258:	f001 fa2c 	bl	800c6b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b25e:	f000 f811 	bl	800b284 <prvGetDisinheritPriorityAfterTimeout>
 800b262:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 ffec 	bl	800c248 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b270:	f001 fa50 	bl	800c714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b276:	4618      	mov	r0, r3
 800b278:	3738      	adds	r7, #56	; 0x38
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	e000ed04 	.word	0xe000ed04

0800b284 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f1c3 0307 	rsb	r3, r3, #7
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e001      	b.n	800b2a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
	}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10d      	bne.n	800b2ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d14d      	bne.n	800b376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 ff2c 	bl	800c13c <xTaskPriorityDisinherit>
 800b2e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	609a      	str	r2, [r3, #8]
 800b2ec:	e043      	b.n	800b376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d119      	bne.n	800b328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6858      	ldr	r0, [r3, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	f001 fd08 	bl	800cd14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	441a      	add	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d32b      	bcc.n	800b376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	605a      	str	r2, [r3, #4]
 800b326:	e026      	b.n	800b376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68d8      	ldr	r0, [r3, #12]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b330:	461a      	mov	r2, r3
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	f001 fcee 	bl	800cd14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	425b      	negs	r3, r3
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d207      	bcs.n	800b364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35c:	425b      	negs	r3, r3
 800b35e:	441a      	add	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d105      	bne.n	800b376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	3b01      	subs	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b37e:	697b      	ldr	r3, [r7, #20]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b390:	f001 f990 	bl	800c6b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b39a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b39c:	e011      	b.n	800b3c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d012      	beq.n	800b3cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3324      	adds	r3, #36	; 0x24
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 fc76 	bl	800bc9c <xTaskRemoveFromEventList>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3b6:	f000 fd4b 	bl	800be50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	dce9      	bgt.n	800b39e <prvUnlockQueue+0x16>
 800b3ca:	e000      	b.n	800b3ce <prvUnlockQueue+0x46>
					break;
 800b3cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	22ff      	movs	r2, #255	; 0xff
 800b3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3d6:	f001 f99d 	bl	800c714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3da:	f001 f96b 	bl	800c6b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3e6:	e011      	b.n	800b40c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d012      	beq.n	800b416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3310      	adds	r3, #16
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fc51 	bl	800bc9c <xTaskRemoveFromEventList>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b400:	f000 fd26 	bl	800be50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b404:	7bbb      	ldrb	r3, [r7, #14]
 800b406:	3b01      	subs	r3, #1
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b40c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b410:	2b00      	cmp	r3, #0
 800b412:	dce9      	bgt.n	800b3e8 <prvUnlockQueue+0x60>
 800b414:	e000      	b.n	800b418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	22ff      	movs	r2, #255	; 0xff
 800b41c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b420:	f001 f978 	bl	800c714 <vPortExitCritical>
}
 800b424:	bf00      	nop
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b434:	f001 f93e 	bl	800c6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b440:	2301      	movs	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e001      	b.n	800b44a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b446:	2300      	movs	r3, #0
 800b448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b44a:	f001 f963 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800b44e:	68fb      	ldr	r3, [r7, #12]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b460:	f001 f928 	bl	800c6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d102      	bne.n	800b476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	e001      	b.n	800b47a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b47a:	f001 f94b 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800b47e:	68fb      	ldr	r3, [r7, #12]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08e      	sub	sp, #56	; 0x38
 800b48c:	af04      	add	r7, sp, #16
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	623b      	str	r3, [r7, #32]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xTaskCreateStatic+0x46>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	61fb      	str	r3, [r7, #28]
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4ce:	2354      	movs	r3, #84	; 0x54
 800b4d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b54      	cmp	r3, #84	; 0x54
 800b4d6:	d00a      	beq.n	800b4ee <xTaskCreateStatic+0x66>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	61bb      	str	r3, [r7, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d01e      	beq.n	800b534 <xTaskCreateStatic+0xac>
 800b4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01b      	beq.n	800b534 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b504:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b50e:	2300      	movs	r3, #0
 800b510:	9303      	str	r3, [sp, #12]
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	9302      	str	r3, [sp, #8]
 800b516:	f107 0314 	add.w	r3, r7, #20
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 f850 	bl	800b5cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b52c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b52e:	f000 f8d5 	bl	800b6dc <prvAddNewTaskToReadyList>
 800b532:	e001      	b.n	800b538 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b538:	697b      	ldr	r3, [r7, #20]
	}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3728      	adds	r7, #40	; 0x28
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b542:	b580      	push	{r7, lr}
 800b544:	b08c      	sub	sp, #48	; 0x30
 800b546:	af04      	add	r7, sp, #16
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	4613      	mov	r3, r2
 800b550:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b552:	88fb      	ldrh	r3, [r7, #6]
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4618      	mov	r0, r3
 800b558:	f001 f9ce 	bl	800c8f8 <pvPortMalloc>
 800b55c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00e      	beq.n	800b582 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b564:	2054      	movs	r0, #84	; 0x54
 800b566:	f001 f9c7 	bl	800c8f8 <pvPortMalloc>
 800b56a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d003      	beq.n	800b57a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	631a      	str	r2, [r3, #48]	; 0x30
 800b578:	e005      	b.n	800b586 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b57a:	6978      	ldr	r0, [r7, #20]
 800b57c:	f001 fa88 	bl	800ca90 <vPortFree>
 800b580:	e001      	b.n	800b586 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d017      	beq.n	800b5bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b594:	88fa      	ldrh	r2, [r7, #6]
 800b596:	2300      	movs	r3, #0
 800b598:	9303      	str	r3, [sp, #12]
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 f80e 	bl	800b5cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5b0:	69f8      	ldr	r0, [r7, #28]
 800b5b2:	f000 f893 	bl	800b6dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	61bb      	str	r3, [r7, #24]
 800b5ba:	e002      	b.n	800b5c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
	}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3720      	adds	r7, #32
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b5e4:	440b      	add	r3, r1
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	f023 0307 	bic.w	r3, r3, #7
 800b5f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	617b      	str	r3, [r7, #20]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01f      	beq.n	800b65a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b61a:	2300      	movs	r3, #0
 800b61c:	61fb      	str	r3, [r7, #28]
 800b61e:	e012      	b.n	800b646 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	7819      	ldrb	r1, [r3, #0]
 800b628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	4413      	add	r3, r2
 800b62e:	3334      	adds	r3, #52	; 0x34
 800b630:	460a      	mov	r2, r1
 800b632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	4413      	add	r3, r2
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d006      	beq.n	800b64e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	3301      	adds	r3, #1
 800b644:	61fb      	str	r3, [r7, #28]
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	2b0f      	cmp	r3, #15
 800b64a:	d9e9      	bls.n	800b620 <prvInitialiseNewTask+0x54>
 800b64c:	e000      	b.n	800b650 <prvInitialiseNewTask+0x84>
			{
				break;
 800b64e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b658:	e003      	b.n	800b662 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	2b06      	cmp	r3, #6
 800b666:	d901      	bls.n	800b66c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b668:	2306      	movs	r3, #6
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b670:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b676:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	2200      	movs	r2, #0
 800b67c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	3304      	adds	r3, #4
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff f94b 	bl	800a91e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	3318      	adds	r3, #24
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7ff f946 	bl	800a91e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	f1c3 0207 	rsb	r2, r3, #7
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	68f9      	ldr	r1, [r7, #12]
 800b6ba:	69b8      	ldr	r0, [r7, #24]
 800b6bc:	f000 fecc 	bl	800c458 <pxPortInitialiseStack>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6d2:	bf00      	nop
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6e4:	f000 ffe6 	bl	800c6b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6e8:	4b2a      	ldr	r3, [pc, #168]	; (800b794 <prvAddNewTaskToReadyList+0xb8>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	4a29      	ldr	r2, [pc, #164]	; (800b794 <prvAddNewTaskToReadyList+0xb8>)
 800b6f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6f2:	4b29      	ldr	r3, [pc, #164]	; (800b798 <prvAddNewTaskToReadyList+0xbc>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6fa:	4a27      	ldr	r2, [pc, #156]	; (800b798 <prvAddNewTaskToReadyList+0xbc>)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b700:	4b24      	ldr	r3, [pc, #144]	; (800b794 <prvAddNewTaskToReadyList+0xb8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d110      	bne.n	800b72a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b708:	f000 fbc6 	bl	800be98 <prvInitialiseTaskLists>
 800b70c:	e00d      	b.n	800b72a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b70e:	4b23      	ldr	r3, [pc, #140]	; (800b79c <prvAddNewTaskToReadyList+0xc0>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d109      	bne.n	800b72a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b716:	4b20      	ldr	r3, [pc, #128]	; (800b798 <prvAddNewTaskToReadyList+0xbc>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	429a      	cmp	r2, r3
 800b722:	d802      	bhi.n	800b72a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b724:	4a1c      	ldr	r2, [pc, #112]	; (800b798 <prvAddNewTaskToReadyList+0xbc>)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b72a:	4b1d      	ldr	r3, [pc, #116]	; (800b7a0 <prvAddNewTaskToReadyList+0xc4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3301      	adds	r3, #1
 800b730:	4a1b      	ldr	r2, [pc, #108]	; (800b7a0 <prvAddNewTaskToReadyList+0xc4>)
 800b732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b738:	2201      	movs	r2, #1
 800b73a:	409a      	lsls	r2, r3
 800b73c:	4b19      	ldr	r3, [pc, #100]	; (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4313      	orrs	r3, r2
 800b742:	4a18      	ldr	r2, [pc, #96]	; (800b7a4 <prvAddNewTaskToReadyList+0xc8>)
 800b744:	6013      	str	r3, [r2, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4a15      	ldr	r2, [pc, #84]	; (800b7a8 <prvAddNewTaskToReadyList+0xcc>)
 800b754:	441a      	add	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3304      	adds	r3, #4
 800b75a:	4619      	mov	r1, r3
 800b75c:	4610      	mov	r0, r2
 800b75e:	f7ff f8eb 	bl	800a938 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b762:	f000 ffd7 	bl	800c714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b766:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <prvAddNewTaskToReadyList+0xc0>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00e      	beq.n	800b78c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b76e:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <prvAddNewTaskToReadyList+0xbc>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	429a      	cmp	r2, r3
 800b77a:	d207      	bcs.n	800b78c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b77c:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <prvAddNewTaskToReadyList+0xd0>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20000474 	.word	0x20000474
 800b798:	20000374 	.word	0x20000374
 800b79c:	20000480 	.word	0x20000480
 800b7a0:	20000490 	.word	0x20000490
 800b7a4:	2000047c 	.word	0x2000047c
 800b7a8:	20000378 	.word	0x20000378
 800b7ac:	e000ed04 	.word	0xe000ed04

0800b7b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d017      	beq.n	800b7f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7c2:	4b13      	ldr	r3, [pc, #76]	; (800b810 <vTaskDelay+0x60>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <vTaskDelay+0x30>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	60bb      	str	r3, [r7, #8]
}
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7e0:	f000 f87a 	bl	800b8d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fdd0 	bl	800c38c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7ec:	f000 f882 	bl	800b8f4 <xTaskResumeAll>
 800b7f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7f8:	4b06      	ldr	r3, [pc, #24]	; (800b814 <vTaskDelay+0x64>)
 800b7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	2000049c 	.word	0x2000049c
 800b814:	e000ed04 	.word	0xe000ed04

0800b818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b826:	463a      	mov	r2, r7
 800b828:	1d39      	adds	r1, r7, #4
 800b82a:	f107 0308 	add.w	r3, r7, #8
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f5 fa06 	bl	8000c40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	9202      	str	r2, [sp, #8]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	2300      	movs	r3, #0
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	2300      	movs	r3, #0
 800b844:	460a      	mov	r2, r1
 800b846:	491e      	ldr	r1, [pc, #120]	; (800b8c0 <vTaskStartScheduler+0xa8>)
 800b848:	481e      	ldr	r0, [pc, #120]	; (800b8c4 <vTaskStartScheduler+0xac>)
 800b84a:	f7ff fe1d 	bl	800b488 <xTaskCreateStatic>
 800b84e:	4603      	mov	r3, r0
 800b850:	4a1d      	ldr	r2, [pc, #116]	; (800b8c8 <vTaskStartScheduler+0xb0>)
 800b852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b854:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <vTaskStartScheduler+0xb0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b85c:	2301      	movs	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e001      	b.n	800b866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d116      	bne.n	800b89a <vTaskStartScheduler+0x82>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	613b      	str	r3, [r7, #16]
}
 800b87e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b880:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <vTaskStartScheduler+0xb4>)
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b888:	4b11      	ldr	r3, [pc, #68]	; (800b8d0 <vTaskStartScheduler+0xb8>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b88e:	4b11      	ldr	r3, [pc, #68]	; (800b8d4 <vTaskStartScheduler+0xbc>)
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b894:	f000 fe6c 	bl	800c570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b898:	e00e      	b.n	800b8b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a0:	d10a      	bne.n	800b8b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	60fb      	str	r3, [r7, #12]
}
 800b8b4:	bf00      	nop
 800b8b6:	e7fe      	b.n	800b8b6 <vTaskStartScheduler+0x9e>
}
 800b8b8:	bf00      	nop
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	0800ce00 	.word	0x0800ce00
 800b8c4:	0800be69 	.word	0x0800be69
 800b8c8:	20000498 	.word	0x20000498
 800b8cc:	20000494 	.word	0x20000494
 800b8d0:	20000480 	.word	0x20000480
 800b8d4:	20000478 	.word	0x20000478

0800b8d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8dc:	4b04      	ldr	r3, [pc, #16]	; (800b8f0 <vTaskSuspendAll+0x18>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	4a03      	ldr	r2, [pc, #12]	; (800b8f0 <vTaskSuspendAll+0x18>)
 800b8e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8e6:	bf00      	nop
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	2000049c 	.word	0x2000049c

0800b8f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b902:	4b41      	ldr	r3, [pc, #260]	; (800ba08 <xTaskResumeAll+0x114>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <xTaskResumeAll+0x2c>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	603b      	str	r3, [r7, #0]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b920:	f000 fec8 	bl	800c6b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b924:	4b38      	ldr	r3, [pc, #224]	; (800ba08 <xTaskResumeAll+0x114>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3b01      	subs	r3, #1
 800b92a:	4a37      	ldr	r2, [pc, #220]	; (800ba08 <xTaskResumeAll+0x114>)
 800b92c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b92e:	4b36      	ldr	r3, [pc, #216]	; (800ba08 <xTaskResumeAll+0x114>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d161      	bne.n	800b9fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b936:	4b35      	ldr	r3, [pc, #212]	; (800ba0c <xTaskResumeAll+0x118>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d05d      	beq.n	800b9fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b93e:	e02e      	b.n	800b99e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b940:	4b33      	ldr	r3, [pc, #204]	; (800ba10 <xTaskResumeAll+0x11c>)
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	3318      	adds	r3, #24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7ff f850 	bl	800a9f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3304      	adds	r3, #4
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff f84b 	bl	800a9f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	2201      	movs	r2, #1
 800b962:	409a      	lsls	r2, r3
 800b964:	4b2b      	ldr	r3, [pc, #172]	; (800ba14 <xTaskResumeAll+0x120>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4313      	orrs	r3, r2
 800b96a:	4a2a      	ldr	r2, [pc, #168]	; (800ba14 <xTaskResumeAll+0x120>)
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4a27      	ldr	r2, [pc, #156]	; (800ba18 <xTaskResumeAll+0x124>)
 800b97c:	441a      	add	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3304      	adds	r3, #4
 800b982:	4619      	mov	r1, r3
 800b984:	4610      	mov	r0, r2
 800b986:	f7fe ffd7 	bl	800a938 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98e:	4b23      	ldr	r3, [pc, #140]	; (800ba1c <xTaskResumeAll+0x128>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	429a      	cmp	r2, r3
 800b996:	d302      	bcc.n	800b99e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b998:	4b21      	ldr	r3, [pc, #132]	; (800ba20 <xTaskResumeAll+0x12c>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b99e:	4b1c      	ldr	r3, [pc, #112]	; (800ba10 <xTaskResumeAll+0x11c>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1cc      	bne.n	800b940 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9ac:	f000 fb12 	bl	800bfd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <xTaskResumeAll+0x130>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d010      	beq.n	800b9de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9bc:	f000 f836 	bl	800ba2c <xTaskIncrementTick>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b9c6:	4b16      	ldr	r3, [pc, #88]	; (800ba20 <xTaskResumeAll+0x12c>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1f1      	bne.n	800b9bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b9d8:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <xTaskResumeAll+0x130>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9de:	4b10      	ldr	r3, [pc, #64]	; (800ba20 <xTaskResumeAll+0x12c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d009      	beq.n	800b9fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ba28 <xTaskResumeAll+0x134>)
 800b9ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f0:	601a      	str	r2, [r3, #0]
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9fa:	f000 fe8b 	bl	800c714 <vPortExitCritical>

	return xAlreadyYielded;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	2000049c 	.word	0x2000049c
 800ba0c:	20000474 	.word	0x20000474
 800ba10:	20000434 	.word	0x20000434
 800ba14:	2000047c 	.word	0x2000047c
 800ba18:	20000378 	.word	0x20000378
 800ba1c:	20000374 	.word	0x20000374
 800ba20:	20000488 	.word	0x20000488
 800ba24:	20000484 	.word	0x20000484
 800ba28:	e000ed04 	.word	0xe000ed04

0800ba2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba36:	4b4e      	ldr	r3, [pc, #312]	; (800bb70 <xTaskIncrementTick+0x144>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 808e 	bne.w	800bb5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba40:	4b4c      	ldr	r3, [pc, #304]	; (800bb74 <xTaskIncrementTick+0x148>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3301      	adds	r3, #1
 800ba46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba48:	4a4a      	ldr	r2, [pc, #296]	; (800bb74 <xTaskIncrementTick+0x148>)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d120      	bne.n	800ba96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba54:	4b48      	ldr	r3, [pc, #288]	; (800bb78 <xTaskIncrementTick+0x14c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	603b      	str	r3, [r7, #0]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <xTaskIncrementTick+0x46>
 800ba74:	4b40      	ldr	r3, [pc, #256]	; (800bb78 <xTaskIncrementTick+0x14c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	4b40      	ldr	r3, [pc, #256]	; (800bb7c <xTaskIncrementTick+0x150>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a3e      	ldr	r2, [pc, #248]	; (800bb78 <xTaskIncrementTick+0x14c>)
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	4a3e      	ldr	r2, [pc, #248]	; (800bb7c <xTaskIncrementTick+0x150>)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	4b3d      	ldr	r3, [pc, #244]	; (800bb80 <xTaskIncrementTick+0x154>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	4a3c      	ldr	r2, [pc, #240]	; (800bb80 <xTaskIncrementTick+0x154>)
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	f000 fa9f 	bl	800bfd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba96:	4b3b      	ldr	r3, [pc, #236]	; (800bb84 <xTaskIncrementTick+0x158>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d348      	bcc.n	800bb32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baa0:	4b35      	ldr	r3, [pc, #212]	; (800bb78 <xTaskIncrementTick+0x14c>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d104      	bne.n	800bab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baaa:	4b36      	ldr	r3, [pc, #216]	; (800bb84 <xTaskIncrementTick+0x158>)
 800baac:	f04f 32ff 	mov.w	r2, #4294967295
 800bab0:	601a      	str	r2, [r3, #0]
					break;
 800bab2:	e03e      	b.n	800bb32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab4:	4b30      	ldr	r3, [pc, #192]	; (800bb78 <xTaskIncrementTick+0x14c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d203      	bcs.n	800bad4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bacc:	4a2d      	ldr	r2, [pc, #180]	; (800bb84 <xTaskIncrementTick+0x158>)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bad2:	e02e      	b.n	800bb32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fe ff8a 	bl	800a9f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d004      	beq.n	800baf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	3318      	adds	r3, #24
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe ff81 	bl	800a9f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	2201      	movs	r2, #1
 800baf6:	409a      	lsls	r2, r3
 800baf8:	4b23      	ldr	r3, [pc, #140]	; (800bb88 <xTaskIncrementTick+0x15c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	4a22      	ldr	r2, [pc, #136]	; (800bb88 <xTaskIncrementTick+0x15c>)
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4a1f      	ldr	r2, [pc, #124]	; (800bb8c <xTaskIncrementTick+0x160>)
 800bb10:	441a      	add	r2, r3
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	3304      	adds	r3, #4
 800bb16:	4619      	mov	r1, r3
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f7fe ff0d 	bl	800a938 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb22:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <xTaskIncrementTick+0x164>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d3b9      	bcc.n	800baa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb30:	e7b6      	b.n	800baa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb32:	4b17      	ldr	r3, [pc, #92]	; (800bb90 <xTaskIncrementTick+0x164>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb38:	4914      	ldr	r1, [pc, #80]	; (800bb8c <xTaskIncrementTick+0x160>)
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	440b      	add	r3, r1
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d901      	bls.n	800bb4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb4e:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <xTaskIncrementTick+0x168>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d007      	beq.n	800bb66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bb56:	2301      	movs	r3, #1
 800bb58:	617b      	str	r3, [r7, #20]
 800bb5a:	e004      	b.n	800bb66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb5c:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <xTaskIncrementTick+0x16c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3301      	adds	r3, #1
 800bb62:	4a0d      	ldr	r2, [pc, #52]	; (800bb98 <xTaskIncrementTick+0x16c>)
 800bb64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb66:	697b      	ldr	r3, [r7, #20]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	2000049c 	.word	0x2000049c
 800bb74:	20000478 	.word	0x20000478
 800bb78:	2000042c 	.word	0x2000042c
 800bb7c:	20000430 	.word	0x20000430
 800bb80:	2000048c 	.word	0x2000048c
 800bb84:	20000494 	.word	0x20000494
 800bb88:	2000047c 	.word	0x2000047c
 800bb8c:	20000378 	.word	0x20000378
 800bb90:	20000374 	.word	0x20000374
 800bb94:	20000488 	.word	0x20000488
 800bb98:	20000484 	.word	0x20000484

0800bb9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bba2:	4b27      	ldr	r3, [pc, #156]	; (800bc40 <vTaskSwitchContext+0xa4>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbaa:	4b26      	ldr	r3, [pc, #152]	; (800bc44 <vTaskSwitchContext+0xa8>)
 800bbac:	2201      	movs	r2, #1
 800bbae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbb0:	e03f      	b.n	800bc32 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bbb2:	4b24      	ldr	r3, [pc, #144]	; (800bc44 <vTaskSwitchContext+0xa8>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb8:	4b23      	ldr	r3, [pc, #140]	; (800bc48 <vTaskSwitchContext+0xac>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	fab3 f383 	clz	r3, r3
 800bbc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	f1c3 031f 	rsb	r3, r3, #31
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	491f      	ldr	r1, [pc, #124]	; (800bc4c <vTaskSwitchContext+0xb0>)
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	440b      	add	r3, r1
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <vTaskSwitchContext+0x5a>
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4a12      	ldr	r2, [pc, #72]	; (800bc4c <vTaskSwitchContext+0xb0>)
 800bc04:	4413      	add	r3, r2
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	605a      	str	r2, [r3, #4]
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	3308      	adds	r3, #8
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d104      	bne.n	800bc28 <vTaskSwitchContext+0x8c>
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	605a      	str	r2, [r3, #4]
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	4a08      	ldr	r2, [pc, #32]	; (800bc50 <vTaskSwitchContext+0xb4>)
 800bc30:	6013      	str	r3, [r2, #0]
}
 800bc32:	bf00      	nop
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	2000049c 	.word	0x2000049c
 800bc44:	20000488 	.word	0x20000488
 800bc48:	2000047c 	.word	0x2000047c
 800bc4c:	20000378 	.word	0x20000378
 800bc50:	20000374 	.word	0x20000374

0800bc54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60fb      	str	r3, [r7, #12]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc7a:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <vTaskPlaceOnEventList+0x44>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3318      	adds	r3, #24
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7fe fe7c 	bl	800a980 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc88:	2101      	movs	r1, #1
 800bc8a:	6838      	ldr	r0, [r7, #0]
 800bc8c:	f000 fb7e 	bl	800c38c <prvAddCurrentTaskToDelayedList>
}
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	20000374 	.word	0x20000374

0800bc9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10a      	bne.n	800bcc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	60fb      	str	r3, [r7, #12]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	3318      	adds	r3, #24
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fe90 	bl	800a9f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcd2:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <xTaskRemoveFromEventList+0xac>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d11c      	bne.n	800bd14 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fe87 	bl	800a9f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	2201      	movs	r2, #1
 800bcea:	409a      	lsls	r2, r3
 800bcec:	4b17      	ldr	r3, [pc, #92]	; (800bd4c <xTaskRemoveFromEventList+0xb0>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	4a16      	ldr	r2, [pc, #88]	; (800bd4c <xTaskRemoveFromEventList+0xb0>)
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4a13      	ldr	r2, [pc, #76]	; (800bd50 <xTaskRemoveFromEventList+0xb4>)
 800bd04:	441a      	add	r2, r3
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	f7fe fe13 	bl	800a938 <vListInsertEnd>
 800bd12:	e005      	b.n	800bd20 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	3318      	adds	r3, #24
 800bd18:	4619      	mov	r1, r3
 800bd1a:	480e      	ldr	r0, [pc, #56]	; (800bd54 <xTaskRemoveFromEventList+0xb8>)
 800bd1c:	f7fe fe0c 	bl	800a938 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd24:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <xTaskRemoveFromEventList+0xbc>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d905      	bls.n	800bd3a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd32:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <xTaskRemoveFromEventList+0xc0>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	e001      	b.n	800bd3e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd3e:	697b      	ldr	r3, [r7, #20]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	2000049c 	.word	0x2000049c
 800bd4c:	2000047c 	.word	0x2000047c
 800bd50:	20000378 	.word	0x20000378
 800bd54:	20000434 	.word	0x20000434
 800bd58:	20000374 	.word	0x20000374
 800bd5c:	20000488 	.word	0x20000488

0800bd60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <vTaskInternalSetTimeOutState+0x24>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <vTaskInternalSetTimeOutState+0x28>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	605a      	str	r2, [r3, #4]
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	2000048c 	.word	0x2000048c
 800bd88:	20000478 	.word	0x20000478

0800bd8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	613b      	str	r3, [r7, #16]
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10a      	bne.n	800bdce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60fb      	str	r3, [r7, #12]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdce:	f000 fc71 	bl	800c6b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdd2:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <xTaskCheckForTimeOut+0xbc>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdea:	d102      	bne.n	800bdf2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdec:	2300      	movs	r3, #0
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	e023      	b.n	800be3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <xTaskCheckForTimeOut+0xc0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d007      	beq.n	800be0e <xTaskCheckForTimeOut+0x82>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	69ba      	ldr	r2, [r7, #24]
 800be04:	429a      	cmp	r2, r3
 800be06:	d302      	bcc.n	800be0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	61fb      	str	r3, [r7, #28]
 800be0c:	e015      	b.n	800be3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	429a      	cmp	r2, r3
 800be16:	d20b      	bcs.n	800be30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff ff9b 	bl	800bd60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	e004      	b.n	800be3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be36:	2301      	movs	r3, #1
 800be38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be3a:	f000 fc6b 	bl	800c714 <vPortExitCritical>

	return xReturn;
 800be3e:	69fb      	ldr	r3, [r7, #28]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20000478 	.word	0x20000478
 800be4c:	2000048c 	.word	0x2000048c

0800be50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be50:	b480      	push	{r7}
 800be52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be54:	4b03      	ldr	r3, [pc, #12]	; (800be64 <vTaskMissedYield+0x14>)
 800be56:	2201      	movs	r2, #1
 800be58:	601a      	str	r2, [r3, #0]
}
 800be5a:	bf00      	nop
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	20000488 	.word	0x20000488

0800be68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be70:	f000 f852 	bl	800bf18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be74:	4b06      	ldr	r3, [pc, #24]	; (800be90 <prvIdleTask+0x28>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d9f9      	bls.n	800be70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be7c:	4b05      	ldr	r3, [pc, #20]	; (800be94 <prvIdleTask+0x2c>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be8c:	e7f0      	b.n	800be70 <prvIdleTask+0x8>
 800be8e:	bf00      	nop
 800be90:	20000378 	.word	0x20000378
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be9e:	2300      	movs	r3, #0
 800bea0:	607b      	str	r3, [r7, #4]
 800bea2:	e00c      	b.n	800bebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4a12      	ldr	r2, [pc, #72]	; (800bef8 <prvInitialiseTaskLists+0x60>)
 800beb0:	4413      	add	r3, r2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe fd13 	bl	800a8de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3301      	adds	r3, #1
 800bebc:	607b      	str	r3, [r7, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b06      	cmp	r3, #6
 800bec2:	d9ef      	bls.n	800bea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bec4:	480d      	ldr	r0, [pc, #52]	; (800befc <prvInitialiseTaskLists+0x64>)
 800bec6:	f7fe fd0a 	bl	800a8de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800beca:	480d      	ldr	r0, [pc, #52]	; (800bf00 <prvInitialiseTaskLists+0x68>)
 800becc:	f7fe fd07 	bl	800a8de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bed0:	480c      	ldr	r0, [pc, #48]	; (800bf04 <prvInitialiseTaskLists+0x6c>)
 800bed2:	f7fe fd04 	bl	800a8de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bed6:	480c      	ldr	r0, [pc, #48]	; (800bf08 <prvInitialiseTaskLists+0x70>)
 800bed8:	f7fe fd01 	bl	800a8de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bedc:	480b      	ldr	r0, [pc, #44]	; (800bf0c <prvInitialiseTaskLists+0x74>)
 800bede:	f7fe fcfe 	bl	800a8de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bee2:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <prvInitialiseTaskLists+0x78>)
 800bee4:	4a05      	ldr	r2, [pc, #20]	; (800befc <prvInitialiseTaskLists+0x64>)
 800bee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bee8:	4b0a      	ldr	r3, [pc, #40]	; (800bf14 <prvInitialiseTaskLists+0x7c>)
 800beea:	4a05      	ldr	r2, [pc, #20]	; (800bf00 <prvInitialiseTaskLists+0x68>)
 800beec:	601a      	str	r2, [r3, #0]
}
 800beee:	bf00      	nop
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20000378 	.word	0x20000378
 800befc:	20000404 	.word	0x20000404
 800bf00:	20000418 	.word	0x20000418
 800bf04:	20000434 	.word	0x20000434
 800bf08:	20000448 	.word	0x20000448
 800bf0c:	20000460 	.word	0x20000460
 800bf10:	2000042c 	.word	0x2000042c
 800bf14:	20000430 	.word	0x20000430

0800bf18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf1e:	e019      	b.n	800bf54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf20:	f000 fbc8 	bl	800c6b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf24:	4b10      	ldr	r3, [pc, #64]	; (800bf68 <prvCheckTasksWaitingTermination+0x50>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fe fd5e 	bl	800a9f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf36:	4b0d      	ldr	r3, [pc, #52]	; (800bf6c <prvCheckTasksWaitingTermination+0x54>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	4a0b      	ldr	r2, [pc, #44]	; (800bf6c <prvCheckTasksWaitingTermination+0x54>)
 800bf3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf40:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <prvCheckTasksWaitingTermination+0x58>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	4a0a      	ldr	r2, [pc, #40]	; (800bf70 <prvCheckTasksWaitingTermination+0x58>)
 800bf48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf4a:	f000 fbe3 	bl	800c714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f810 	bl	800bf74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf54:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <prvCheckTasksWaitingTermination+0x58>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e1      	bne.n	800bf20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20000448 	.word	0x20000448
 800bf6c:	20000474 	.word	0x20000474
 800bf70:	2000045c 	.word	0x2000045c

0800bf74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d108      	bne.n	800bf98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f000 fd80 	bl	800ca90 <vPortFree>
				vPortFree( pxTCB );
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fd7d 	bl	800ca90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf96:	e018      	b.n	800bfca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d103      	bne.n	800bfaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fd74 	bl	800ca90 <vPortFree>
	}
 800bfa8:	e00f      	b.n	800bfca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d00a      	beq.n	800bfca <prvDeleteTCB+0x56>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	60fb      	str	r3, [r7, #12]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <prvDeleteTCB+0x54>
	}
 800bfca:	bf00      	nop
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfda:	4b0c      	ldr	r3, [pc, #48]	; (800c00c <prvResetNextTaskUnblockTime+0x38>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d104      	bne.n	800bfee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfe4:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <prvResetNextTaskUnblockTime+0x3c>)
 800bfe6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfec:	e008      	b.n	800c000 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfee:	4b07      	ldr	r3, [pc, #28]	; (800c00c <prvResetNextTaskUnblockTime+0x38>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4a04      	ldr	r2, [pc, #16]	; (800c010 <prvResetNextTaskUnblockTime+0x3c>)
 800bffe:	6013      	str	r3, [r2, #0]
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	2000042c 	.word	0x2000042c
 800c010:	20000494 	.word	0x20000494

0800c014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c01a:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <xTaskGetSchedulerState+0x34>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c022:	2301      	movs	r3, #1
 800c024:	607b      	str	r3, [r7, #4]
 800c026:	e008      	b.n	800c03a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <xTaskGetSchedulerState+0x38>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c030:	2302      	movs	r3, #2
 800c032:	607b      	str	r3, [r7, #4]
 800c034:	e001      	b.n	800c03a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c036:	2300      	movs	r3, #0
 800c038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c03a:	687b      	ldr	r3, [r7, #4]
	}
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	20000480 	.word	0x20000480
 800c04c:	2000049c 	.word	0x2000049c

0800c050 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d05e      	beq.n	800c124 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06a:	4b31      	ldr	r3, [pc, #196]	; (800c130 <xTaskPriorityInherit+0xe0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	429a      	cmp	r2, r3
 800c072:	d24e      	bcs.n	800c112 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	db06      	blt.n	800c08a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c07c:	4b2c      	ldr	r3, [pc, #176]	; (800c130 <xTaskPriorityInherit+0xe0>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	f1c3 0207 	rsb	r2, r3, #7
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6959      	ldr	r1, [r3, #20]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c092:	4613      	mov	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4413      	add	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4a26      	ldr	r2, [pc, #152]	; (800c134 <xTaskPriorityInherit+0xe4>)
 800c09c:	4413      	add	r3, r2
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	d12f      	bne.n	800c102 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fe fca3 	bl	800a9f2 <uxListRemove>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10a      	bne.n	800c0c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0bc:	43da      	mvns	r2, r3
 800c0be:	4b1e      	ldr	r3, [pc, #120]	; (800c138 <xTaskPriorityInherit+0xe8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	4a1c      	ldr	r2, [pc, #112]	; (800c138 <xTaskPriorityInherit+0xe8>)
 800c0c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0c8:	4b19      	ldr	r3, [pc, #100]	; (800c130 <xTaskPriorityInherit+0xe0>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	409a      	lsls	r2, r3
 800c0da:	4b17      	ldr	r3, [pc, #92]	; (800c138 <xTaskPriorityInherit+0xe8>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	4a15      	ldr	r2, [pc, #84]	; (800c138 <xTaskPriorityInherit+0xe8>)
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4a10      	ldr	r2, [pc, #64]	; (800c134 <xTaskPriorityInherit+0xe4>)
 800c0f2:	441a      	add	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7fe fc1c 	bl	800a938 <vListInsertEnd>
 800c100:	e004      	b.n	800c10c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c102:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <xTaskPriorityInherit+0xe0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c10c:	2301      	movs	r3, #1
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	e008      	b.n	800c124 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c116:	4b06      	ldr	r3, [pc, #24]	; (800c130 <xTaskPriorityInherit+0xe0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d201      	bcs.n	800c124 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c120:	2301      	movs	r3, #1
 800c122:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c124:	68fb      	ldr	r3, [r7, #12]
	}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20000374 	.word	0x20000374
 800c134:	20000378 	.word	0x20000378
 800c138:	2000047c 	.word	0x2000047c

0800c13c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c148:	2300      	movs	r3, #0
 800c14a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d06e      	beq.n	800c230 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c152:	4b3a      	ldr	r3, [pc, #232]	; (800c23c <xTaskPriorityDisinherit+0x100>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d00a      	beq.n	800c172 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	f383 8811 	msr	BASEPRI, r3
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	60fb      	str	r3, [r7, #12]
}
 800c16e:	bf00      	nop
 800c170:	e7fe      	b.n	800c170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	60bb      	str	r3, [r7, #8]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c194:	1e5a      	subs	r2, r3, #1
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d044      	beq.n	800c230 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d140      	bne.n	800c230 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fc1d 	bl	800a9f2 <uxListRemove>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d115      	bne.n	800c1ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c2:	491f      	ldr	r1, [pc, #124]	; (800c240 <xTaskPriorityDisinherit+0x104>)
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	440b      	add	r3, r1
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10a      	bne.n	800c1ea <xTaskPriorityDisinherit+0xae>
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	2201      	movs	r2, #1
 800c1da:	fa02 f303 	lsl.w	r3, r2, r3
 800c1de:	43da      	mvns	r2, r3
 800c1e0:	4b18      	ldr	r3, [pc, #96]	; (800c244 <xTaskPriorityDisinherit+0x108>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	4a17      	ldr	r2, [pc, #92]	; (800c244 <xTaskPriorityDisinherit+0x108>)
 800c1e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f6:	f1c3 0207 	rsb	r2, r3, #7
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c202:	2201      	movs	r2, #1
 800c204:	409a      	lsls	r2, r3
 800c206:	4b0f      	ldr	r3, [pc, #60]	; (800c244 <xTaskPriorityDisinherit+0x108>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	4a0d      	ldr	r2, [pc, #52]	; (800c244 <xTaskPriorityDisinherit+0x108>)
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a08      	ldr	r2, [pc, #32]	; (800c240 <xTaskPriorityDisinherit+0x104>)
 800c21e:	441a      	add	r2, r3
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7fe fb86 	bl	800a938 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c22c:	2301      	movs	r3, #1
 800c22e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c230:	697b      	ldr	r3, [r7, #20]
	}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000374 	.word	0x20000374
 800c240:	20000378 	.word	0x20000378
 800c244:	2000047c 	.word	0x2000047c

0800c248 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c256:	2301      	movs	r3, #1
 800c258:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d077      	beq.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10a      	bne.n	800c27e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26c:	f383 8811 	msr	BASEPRI, r3
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	60fb      	str	r3, [r7, #12]
}
 800c27a:	bf00      	nop
 800c27c:	e7fe      	b.n	800c27c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	429a      	cmp	r2, r3
 800c286:	d902      	bls.n	800c28e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	61fb      	str	r3, [r7, #28]
 800c28c:	e002      	b.n	800c294 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c292:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d058      	beq.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d153      	bne.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c2a8:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d10a      	bne.n	800c2c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	60bb      	str	r3, [r7, #8]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	69fa      	ldr	r2, [r7, #28]
 800c2d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	db04      	blt.n	800c2e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f1c3 0207 	rsb	r2, r3, #7
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	6959      	ldr	r1, [r3, #20]
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4a19      	ldr	r2, [pc, #100]	; (800c35c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c2f6:	4413      	add	r3, r2
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	d129      	bne.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe fb76 	bl	800a9f2 <uxListRemove>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c310:	2201      	movs	r2, #1
 800c312:	fa02 f303 	lsl.w	r3, r2, r3
 800c316:	43da      	mvns	r2, r3
 800c318:	4b11      	ldr	r3, [pc, #68]	; (800c360 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4013      	ands	r3, r2
 800c31e:	4a10      	ldr	r2, [pc, #64]	; (800c360 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c320:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c326:	2201      	movs	r2, #1
 800c328:	409a      	lsls	r2, r3
 800c32a:	4b0d      	ldr	r3, [pc, #52]	; (800c360 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4313      	orrs	r3, r2
 800c330:	4a0b      	ldr	r2, [pc, #44]	; (800c360 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c338:	4613      	mov	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4a06      	ldr	r2, [pc, #24]	; (800c35c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c342:	441a      	add	r2, r3
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	3304      	adds	r3, #4
 800c348:	4619      	mov	r1, r3
 800c34a:	4610      	mov	r0, r2
 800c34c:	f7fe faf4 	bl	800a938 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c350:	bf00      	nop
 800c352:	3720      	adds	r7, #32
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	20000374 	.word	0x20000374
 800c35c:	20000378 	.word	0x20000378
 800c360:	2000047c 	.word	0x2000047c

0800c364 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c364:	b480      	push	{r7}
 800c366:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <pvTaskIncrementMutexHeldCount+0x24>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d004      	beq.n	800c37a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c370:	4b05      	ldr	r3, [pc, #20]	; (800c388 <pvTaskIncrementMutexHeldCount+0x24>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c376:	3201      	adds	r2, #1
 800c378:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c37a:	4b03      	ldr	r3, [pc, #12]	; (800c388 <pvTaskIncrementMutexHeldCount+0x24>)
 800c37c:	681b      	ldr	r3, [r3, #0]
	}
 800c37e:	4618      	mov	r0, r3
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	20000374 	.word	0x20000374

0800c38c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c396:	4b29      	ldr	r3, [pc, #164]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c39c:	4b28      	ldr	r3, [pc, #160]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fe fb25 	bl	800a9f2 <uxListRemove>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c3ae:	4b24      	ldr	r3, [pc, #144]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ba:	43da      	mvns	r2, r3
 800c3bc:	4b21      	ldr	r3, [pc, #132]	; (800c444 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	4a20      	ldr	r2, [pc, #128]	; (800c444 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c3c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3cc:	d10a      	bne.n	800c3e4 <prvAddCurrentTaskToDelayedList+0x58>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d007      	beq.n	800c3e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d4:	4b1a      	ldr	r3, [pc, #104]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	481a      	ldr	r0, [pc, #104]	; (800c448 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c3de:	f7fe faab 	bl	800a938 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3e2:	e026      	b.n	800c432 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3ec:	4b14      	ldr	r3, [pc, #80]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d209      	bcs.n	800c410 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3fc:	4b13      	ldr	r3, [pc, #76]	; (800c44c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	4b0f      	ldr	r3, [pc, #60]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3304      	adds	r3, #4
 800c406:	4619      	mov	r1, r3
 800c408:	4610      	mov	r0, r2
 800c40a:	f7fe fab9 	bl	800a980 <vListInsert>
}
 800c40e:	e010      	b.n	800c432 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c410:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	4b0a      	ldr	r3, [pc, #40]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3304      	adds	r3, #4
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f7fe faaf 	bl	800a980 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c422:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d202      	bcs.n	800c432 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c42c:	4a09      	ldr	r2, [pc, #36]	; (800c454 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6013      	str	r3, [r2, #0]
}
 800c432:	bf00      	nop
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20000478 	.word	0x20000478
 800c440:	20000374 	.word	0x20000374
 800c444:	2000047c 	.word	0x2000047c
 800c448:	20000460 	.word	0x20000460
 800c44c:	20000430 	.word	0x20000430
 800c450:	2000042c 	.word	0x2000042c
 800c454:	20000494 	.word	0x20000494

0800c458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3b04      	subs	r3, #4
 800c468:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3b04      	subs	r3, #4
 800c476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f023 0201 	bic.w	r2, r3, #1
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3b04      	subs	r3, #4
 800c486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c488:	4a0c      	ldr	r2, [pc, #48]	; (800c4bc <pxPortInitialiseStack+0x64>)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3b14      	subs	r3, #20
 800c492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3b04      	subs	r3, #4
 800c49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f06f 0202 	mvn.w	r2, #2
 800c4a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b20      	subs	r3, #32
 800c4ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	0800c4c1 	.word	0x0800c4c1

0800c4c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4ca:	4b12      	ldr	r3, [pc, #72]	; (800c514 <prvTaskExitError+0x54>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d2:	d00a      	beq.n	800c4ea <prvTaskExitError+0x2a>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <prvTaskExitError+0x28>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	60bb      	str	r3, [r7, #8]
}
 800c4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4fe:	bf00      	nop
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0fc      	beq.n	800c500 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c506:	bf00      	nop
 800c508:	bf00      	nop
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20000010 	.word	0x20000010
	...

0800c520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <pxCurrentTCBConst2>)
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	6808      	ldr	r0, [r1, #0]
 800c526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	f380 8809 	msr	PSP, r0
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f04f 0000 	mov.w	r0, #0
 800c536:	f380 8811 	msr	BASEPRI, r0
 800c53a:	4770      	bx	lr
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst2>:
 800c540:	20000374 	.word	0x20000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <prvPortStartFirstTask+0x24>)
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f380 8808 	msr	MSP, r0
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	f380 8814 	msr	CONTROL, r0
 800c55a:	b662      	cpsie	i
 800c55c:	b661      	cpsie	f
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	df00      	svc	0
 800c568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c56a:	bf00      	nop
 800c56c:	e000ed08 	.word	0xe000ed08

0800c570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c576:	4b46      	ldr	r3, [pc, #280]	; (800c690 <xPortStartScheduler+0x120>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a46      	ldr	r2, [pc, #280]	; (800c694 <xPortStartScheduler+0x124>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10a      	bne.n	800c596 <xPortStartScheduler+0x26>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	613b      	str	r3, [r7, #16]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c596:	4b3e      	ldr	r3, [pc, #248]	; (800c690 <xPortStartScheduler+0x120>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a3f      	ldr	r2, [pc, #252]	; (800c698 <xPortStartScheduler+0x128>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d10a      	bne.n	800c5b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60fb      	str	r3, [r7, #12]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5b6:	4b39      	ldr	r3, [pc, #228]	; (800c69c <xPortStartScheduler+0x12c>)
 800c5b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	22ff      	movs	r2, #255	; 0xff
 800c5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <xPortStartScheduler+0x130>)
 800c5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5de:	4b31      	ldr	r3, [pc, #196]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5e0:	2207      	movs	r2, #7
 800c5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5e4:	e009      	b.n	800c5fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c5e6:	4b2f      	ldr	r3, [pc, #188]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4a2d      	ldr	r2, [pc, #180]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5fa:	78fb      	ldrb	r3, [r7, #3]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c602:	2b80      	cmp	r3, #128	; 0x80
 800c604:	d0ef      	beq.n	800c5e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c606:	4b27      	ldr	r3, [pc, #156]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1c3 0307 	rsb	r3, r3, #7
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d00a      	beq.n	800c628 <xPortStartScheduler+0xb8>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60bb      	str	r3, [r7, #8]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c628:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	021b      	lsls	r3, r3, #8
 800c62e:	4a1d      	ldr	r2, [pc, #116]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c63a:	4a1a      	ldr	r2, [pc, #104]	; (800c6a4 <xPortStartScheduler+0x134>)
 800c63c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	b2da      	uxtb	r2, r3
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c646:	4b18      	ldr	r3, [pc, #96]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a17      	ldr	r2, [pc, #92]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c64c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a14      	ldr	r2, [pc, #80]	; (800c6a8 <xPortStartScheduler+0x138>)
 800c658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c65c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c65e:	f000 f8dd 	bl	800c81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c662:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <xPortStartScheduler+0x13c>)
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c668:	f000 f8fc 	bl	800c864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c66c:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <xPortStartScheduler+0x140>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a0f      	ldr	r2, [pc, #60]	; (800c6b0 <xPortStartScheduler+0x140>)
 800c672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c678:	f7ff ff66 	bl	800c548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c67c:	f7ff fa8e 	bl	800bb9c <vTaskSwitchContext>
	prvTaskExitError();
 800c680:	f7ff ff1e 	bl	800c4c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	e000ed00 	.word	0xe000ed00
 800c694:	410fc271 	.word	0x410fc271
 800c698:	410fc270 	.word	0x410fc270
 800c69c:	e000e400 	.word	0xe000e400
 800c6a0:	200004a0 	.word	0x200004a0
 800c6a4:	200004a4 	.word	0x200004a4
 800c6a8:	e000ed20 	.word	0xe000ed20
 800c6ac:	20000010 	.word	0x20000010
 800c6b0:	e000ef34 	.word	0xe000ef34

0800c6b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	607b      	str	r3, [r7, #4]
}
 800c6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	; (800c70c <vPortEnterCritical+0x58>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	4a0d      	ldr	r2, [pc, #52]	; (800c70c <vPortEnterCritical+0x58>)
 800c6d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <vPortEnterCritical+0x58>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d10f      	bne.n	800c700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6e0:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <vPortEnterCritical+0x5c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	603b      	str	r3, [r7, #0]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <vPortEnterCritical+0x4a>
	}
}
 800c700:	bf00      	nop
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	20000010 	.word	0x20000010
 800c710:	e000ed04 	.word	0xe000ed04

0800c714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c71a:	4b12      	ldr	r3, [pc, #72]	; (800c764 <vPortExitCritical+0x50>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <vPortExitCritical+0x24>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	607b      	str	r3, [r7, #4]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <vPortExitCritical+0x50>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a09      	ldr	r2, [pc, #36]	; (800c764 <vPortExitCritical+0x50>)
 800c740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c742:	4b08      	ldr	r3, [pc, #32]	; (800c764 <vPortExitCritical+0x50>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d105      	bne.n	800c756 <vPortExitCritical+0x42>
 800c74a:	2300      	movs	r3, #0
 800c74c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	f383 8811 	msr	BASEPRI, r3
}
 800c754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20000010 	.word	0x20000010
	...

0800c770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c770:	f3ef 8009 	mrs	r0, PSP
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <pxCurrentTCBConst>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	f01e 0f10 	tst.w	lr, #16
 800c780:	bf08      	it	eq
 800c782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78a:	6010      	str	r0, [r2, #0]
 800c78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c794:	f380 8811 	msr	BASEPRI, r0
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f7ff f9fc 	bl	800bb9c <vTaskSwitchContext>
 800c7a4:	f04f 0000 	mov.w	r0, #0
 800c7a8:	f380 8811 	msr	BASEPRI, r0
 800c7ac:	bc09      	pop	{r0, r3}
 800c7ae:	6819      	ldr	r1, [r3, #0]
 800c7b0:	6808      	ldr	r0, [r1, #0]
 800c7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b6:	f01e 0f10 	tst.w	lr, #16
 800c7ba:	bf08      	it	eq
 800c7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7c0:	f380 8809 	msr	PSP, r0
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w

0800c7d0 <pxCurrentTCBConst>:
 800c7d0:	20000374 	.word	0x20000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop

0800c7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7f2:	f7ff f91b 	bl	800ba2c <xTaskIncrementTick>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7fc:	4b06      	ldr	r3, [pc, #24]	; (800c818 <SysTick_Handler+0x40>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	2300      	movs	r3, #0
 800c806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	f383 8811 	msr	BASEPRI, r3
}
 800c80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	e000ed04 	.word	0xe000ed04

0800c81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <vPortSetupTimerInterrupt+0x38>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c82c:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <vPortSetupTimerInterrupt+0x3c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0a      	ldr	r2, [pc, #40]	; (800c85c <vPortSetupTimerInterrupt+0x40>)
 800c832:	fba2 2303 	umull	r2, r3, r2, r3
 800c836:	099b      	lsrs	r3, r3, #6
 800c838:	4a09      	ldr	r2, [pc, #36]	; (800c860 <vPortSetupTimerInterrupt+0x44>)
 800c83a:	3b01      	subs	r3, #1
 800c83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c83e:	4b04      	ldr	r3, [pc, #16]	; (800c850 <vPortSetupTimerInterrupt+0x34>)
 800c840:	2207      	movs	r2, #7
 800c842:	601a      	str	r2, [r3, #0]
}
 800c844:	bf00      	nop
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e010 	.word	0xe000e010
 800c854:	e000e018 	.word	0xe000e018
 800c858:	20000000 	.word	0x20000000
 800c85c:	10624dd3 	.word	0x10624dd3
 800c860:	e000e014 	.word	0xe000e014

0800c864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c874 <vPortEnableVFP+0x10>
 800c868:	6801      	ldr	r1, [r0, #0]
 800c86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c86e:	6001      	str	r1, [r0, #0]
 800c870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c872:	bf00      	nop
 800c874:	e000ed88 	.word	0xe000ed88

0800c878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c87e:	f3ef 8305 	mrs	r3, IPSR
 800c882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b0f      	cmp	r3, #15
 800c888:	d914      	bls.n	800c8b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c88a:	4a17      	ldr	r2, [pc, #92]	; (800c8e8 <vPortValidateInterruptPriority+0x70>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c894:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <vPortValidateInterruptPriority+0x74>)
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	7afa      	ldrb	r2, [r7, #11]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d20a      	bcs.n	800c8b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	607b      	str	r3, [r7, #4]
}
 800c8b0:	bf00      	nop
 800c8b2:	e7fe      	b.n	800c8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	; (800c8f0 <vPortValidateInterruptPriority+0x78>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	; (800c8f4 <vPortValidateInterruptPriority+0x7c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d90a      	bls.n	800c8da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	603b      	str	r3, [r7, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <vPortValidateInterruptPriority+0x60>
	}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	e000e3f0 	.word	0xe000e3f0
 800c8ec:	200004a0 	.word	0x200004a0
 800c8f0:	e000ed0c 	.word	0xe000ed0c
 800c8f4:	200004a4 	.word	0x200004a4

0800c8f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	; 0x28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c904:	f7fe ffe8 	bl	800b8d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c908:	4b5b      	ldr	r3, [pc, #364]	; (800ca78 <pvPortMalloc+0x180>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c910:	f000 f920 	bl	800cb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c914:	4b59      	ldr	r3, [pc, #356]	; (800ca7c <pvPortMalloc+0x184>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4013      	ands	r3, r2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f040 8093 	bne.w	800ca48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01d      	beq.n	800c964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c928:	2208      	movs	r2, #8
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	2b00      	cmp	r3, #0
 800c938:	d014      	beq.n	800c964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <pvPortMalloc+0x6c>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	617b      	str	r3, [r7, #20]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d06e      	beq.n	800ca48 <pvPortMalloc+0x150>
 800c96a:	4b45      	ldr	r3, [pc, #276]	; (800ca80 <pvPortMalloc+0x188>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	429a      	cmp	r2, r3
 800c972:	d869      	bhi.n	800ca48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c974:	4b43      	ldr	r3, [pc, #268]	; (800ca84 <pvPortMalloc+0x18c>)
 800c976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c978:	4b42      	ldr	r3, [pc, #264]	; (800ca84 <pvPortMalloc+0x18c>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c97e:	e004      	b.n	800c98a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	429a      	cmp	r2, r3
 800c992:	d903      	bls.n	800c99c <pvPortMalloc+0xa4>
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1f1      	bne.n	800c980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <pvPortMalloc+0x180>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d050      	beq.n	800ca48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9a6:	6a3b      	ldr	r3, [r7, #32]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2208      	movs	r2, #8
 800c9ac:	4413      	add	r3, r2
 800c9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	2308      	movs	r3, #8
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d91f      	bls.n	800ca08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	613b      	str	r3, [r7, #16]
}
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	1ad2      	subs	r2, r2, r3
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca02:	69b8      	ldr	r0, [r7, #24]
 800ca04:	f000 f908 	bl	800cc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca08:	4b1d      	ldr	r3, [pc, #116]	; (800ca80 <pvPortMalloc+0x188>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	4a1b      	ldr	r2, [pc, #108]	; (800ca80 <pvPortMalloc+0x188>)
 800ca14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca16:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <pvPortMalloc+0x188>)
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <pvPortMalloc+0x190>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d203      	bcs.n	800ca2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <pvPortMalloc+0x188>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a18      	ldr	r2, [pc, #96]	; (800ca88 <pvPortMalloc+0x190>)
 800ca28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <pvPortMalloc+0x184>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	431a      	orrs	r2, r3
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <pvPortMalloc+0x194>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	3301      	adds	r3, #1
 800ca44:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <pvPortMalloc+0x194>)
 800ca46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca48:	f7fe ff54 	bl	800b8f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f003 0307 	and.w	r3, r3, #7
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00a      	beq.n	800ca6c <pvPortMalloc+0x174>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	60fb      	str	r3, [r7, #12]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <pvPortMalloc+0x172>
	return pvReturn;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3728      	adds	r7, #40	; 0x28
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	200040b0 	.word	0x200040b0
 800ca7c:	200040c4 	.word	0x200040c4
 800ca80:	200040b4 	.word	0x200040b4
 800ca84:	200040a8 	.word	0x200040a8
 800ca88:	200040b8 	.word	0x200040b8
 800ca8c:	200040bc 	.word	0x200040bc

0800ca90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d04d      	beq.n	800cb3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800caa2:	2308      	movs	r3, #8
 800caa4:	425b      	negs	r3, r3
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	4413      	add	r3, r2
 800caaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	4b24      	ldr	r3, [pc, #144]	; (800cb48 <vPortFree+0xb8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4013      	ands	r3, r2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <vPortFree+0x44>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	60fb      	str	r3, [r7, #12]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <vPortFree+0x62>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	60bb      	str	r3, [r7, #8]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <vPortFree+0xb8>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01e      	beq.n	800cb3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d11a      	bne.n	800cb3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <vPortFree+0xb8>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	43db      	mvns	r3, r3
 800cb12:	401a      	ands	r2, r3
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb18:	f7fe fede 	bl	800b8d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <vPortFree+0xbc>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4413      	add	r3, r2
 800cb26:	4a09      	ldr	r2, [pc, #36]	; (800cb4c <vPortFree+0xbc>)
 800cb28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f000 f874 	bl	800cc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <vPortFree+0xc0>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3301      	adds	r3, #1
 800cb36:	4a06      	ldr	r2, [pc, #24]	; (800cb50 <vPortFree+0xc0>)
 800cb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb3a:	f7fe fedb 	bl	800b8f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb3e:	bf00      	nop
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200040c4 	.word	0x200040c4
 800cb4c:	200040b4 	.word	0x200040b4
 800cb50:	200040c0 	.word	0x200040c0

0800cb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb60:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <prvHeapInit+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00c      	beq.n	800cb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	4a1f      	ldr	r2, [pc, #124]	; (800cc00 <prvHeapInit+0xac>)
 800cb84:	4413      	add	r3, r2
 800cb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <prvHeapInit+0xb0>)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb92:	4b1c      	ldr	r3, [pc, #112]	; (800cc04 <prvHeapInit+0xb0>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cba0:	2208      	movs	r2, #8
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <prvHeapInit+0xb4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	1ad2      	subs	r2, r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvHeapInit+0xb4>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <prvHeapInit+0xb8>)
 800cbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <prvHeapInit+0xbc>)
 800cbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <prvHeapInit+0xc0>)
 800cbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	200004a8 	.word	0x200004a8
 800cc04:	200040a8 	.word	0x200040a8
 800cc08:	200040b0 	.word	0x200040b0
 800cc0c:	200040b8 	.word	0x200040b8
 800cc10:	200040b4 	.word	0x200040b4
 800cc14:	200040c4 	.word	0x200040c4

0800cc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc20:	4b28      	ldr	r3, [pc, #160]	; (800ccc4 <prvInsertBlockIntoFreeList+0xac>)
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e002      	b.n	800cc2c <prvInsertBlockIntoFreeList+0x14>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d8f7      	bhi.n	800cc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	4413      	add	r3, r2
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d108      	bne.n	800cc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	441a      	add	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d118      	bne.n	800cca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d00d      	beq.n	800cc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	441a      	add	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e008      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc96:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e003      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d002      	beq.n	800ccb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	200040a8 	.word	0x200040a8
 800ccc8:	200040b0 	.word	0x200040b0

0800cccc <__libc_init_array>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	4d0d      	ldr	r5, [pc, #52]	; (800cd04 <__libc_init_array+0x38>)
 800ccd0:	4c0d      	ldr	r4, [pc, #52]	; (800cd08 <__libc_init_array+0x3c>)
 800ccd2:	1b64      	subs	r4, r4, r5
 800ccd4:	10a4      	asrs	r4, r4, #2
 800ccd6:	2600      	movs	r6, #0
 800ccd8:	42a6      	cmp	r6, r4
 800ccda:	d109      	bne.n	800ccf0 <__libc_init_array+0x24>
 800ccdc:	4d0b      	ldr	r5, [pc, #44]	; (800cd0c <__libc_init_array+0x40>)
 800ccde:	4c0c      	ldr	r4, [pc, #48]	; (800cd10 <__libc_init_array+0x44>)
 800cce0:	f000 f82e 	bl	800cd40 <_init>
 800cce4:	1b64      	subs	r4, r4, r5
 800cce6:	10a4      	asrs	r4, r4, #2
 800cce8:	2600      	movs	r6, #0
 800ccea:	42a6      	cmp	r6, r4
 800ccec:	d105      	bne.n	800ccfa <__libc_init_array+0x2e>
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccf4:	4798      	blx	r3
 800ccf6:	3601      	adds	r6, #1
 800ccf8:	e7ee      	b.n	800ccd8 <__libc_init_array+0xc>
 800ccfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccfe:	4798      	blx	r3
 800cd00:	3601      	adds	r6, #1
 800cd02:	e7f2      	b.n	800ccea <__libc_init_array+0x1e>
 800cd04:	0800ce50 	.word	0x0800ce50
 800cd08:	0800ce50 	.word	0x0800ce50
 800cd0c:	0800ce50 	.word	0x0800ce50
 800cd10:	0800ce54 	.word	0x0800ce54

0800cd14 <memcpy>:
 800cd14:	440a      	add	r2, r1
 800cd16:	4291      	cmp	r1, r2
 800cd18:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd1c:	d100      	bne.n	800cd20 <memcpy+0xc>
 800cd1e:	4770      	bx	lr
 800cd20:	b510      	push	{r4, lr}
 800cd22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd2a:	4291      	cmp	r1, r2
 800cd2c:	d1f9      	bne.n	800cd22 <memcpy+0xe>
 800cd2e:	bd10      	pop	{r4, pc}

0800cd30 <memset>:
 800cd30:	4402      	add	r2, r0
 800cd32:	4603      	mov	r3, r0
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d100      	bne.n	800cd3a <memset+0xa>
 800cd38:	4770      	bx	lr
 800cd3a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd3e:	e7f9      	b.n	800cd34 <memset+0x4>

0800cd40 <_init>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	bf00      	nop
 800cd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd46:	bc08      	pop	{r3}
 800cd48:	469e      	mov	lr, r3
 800cd4a:	4770      	bx	lr

0800cd4c <_fini>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	bf00      	nop
 800cd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd52:	bc08      	pop	{r3}
 800cd54:	469e      	mov	lr, r3
 800cd56:	4770      	bx	lr
