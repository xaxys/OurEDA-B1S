
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800dd08  0800dd08  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ddf8  0800ddf8  0001ddf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de00  0800de00  0001de00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800de04  0800de04  0001de04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800de08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004930  20000014  0800de1c  00020014  2**2
                  ALLOC
  8 .RAM_D1       00000118  24000000  0800de1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000604  20004944  20004944  00034944  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cac1  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a64  00000000  00000000  0005cc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a8  00000000  00000000  00061670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001630  00000000  00000000  00062e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000395ee  00000000  00000000  00064448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dc25  00000000  00000000  0009da36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c1ad  00000000  00000000  000bb65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00227808  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006290  00000000  00000000  0022785c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dcf0 	.word	0x0800dcf0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800dcf0 	.word	0x0800dcf0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
/**
 * @brief 捕获上位机向下位机发送的指令
 * @return DownDataDef 上位机向下位机发送的指令
 */
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.HeadOfData = (DownDataReceive[0]);
 80005e0:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <CaptureDownData+0x140>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	733b      	strb	r3, [r7, #12]
	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <CaptureDownData+0x140>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <CaptureDownData+0x140>)
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	81fb      	strh	r3, [r7, #14]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <CaptureDownData+0x140>)
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b44      	ldr	r3, [pc, #272]	; (8000718 <CaptureDownData+0x140>)
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	823b      	strh	r3, [r7, #16]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 8000612:	4b41      	ldr	r3, [pc, #260]	; (8000718 <CaptureDownData+0x140>)
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <CaptureDownData+0x140>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	b29b      	uxth	r3, r3
 8000626:	827b      	strh	r3, [r7, #18]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <CaptureDownData+0x140>)
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	4a3a      	ldr	r2, [pc, #232]	; (8000718 <CaptureDownData+0x140>)
 8000630:	7a12      	ldrb	r2, [r2, #8]
 8000632:	4313      	orrs	r3, r2
 8000634:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <CaptureDownData+0x140>)
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	4a36      	ldr	r2, [pc, #216]	; (8000718 <CaptureDownData+0x140>)
 800063e:	7a92      	ldrb	r2, [r2, #10]
 8000640:	4313      	orrs	r3, r2
 8000642:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <CaptureDownData+0x140>)
 8000646:	7adb      	ldrb	r3, [r3, #11]
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <CaptureDownData+0x140>)
 800064c:	7b12      	ldrb	r2, [r2, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <CaptureDownData+0x140>)
 8000654:	7b5b      	ldrb	r3, [r3, #13]
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <CaptureDownData+0x140>)
 800065a:	7b92      	ldrb	r2, [r2, #14]
 800065c:	4313      	orrs	r3, r2
 800065e:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <CaptureDownData+0x140>)
 8000662:	7bdb      	ldrb	r3, [r3, #15]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <CaptureDownData+0x140>)
 8000668:	7c12      	ldrb	r2, [r2, #16]
 800066a:	4313      	orrs	r3, r2
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <CaptureDownData+0x140>)
 8000670:	7c5b      	ldrb	r3, [r3, #17]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <CaptureDownData+0x140>)
 8000676:	7c92      	ldrb	r2, [r2, #18]
 8000678:	4313      	orrs	r3, r2
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <CaptureDownData+0x140>)
 800067e:	7cdb      	ldrb	r3, [r3, #19]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <CaptureDownData+0x140>)
 8000684:	7d12      	ldrb	r2, [r2, #20]
 8000686:	4313      	orrs	r3, r2
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <CaptureDownData+0x140>)
 800068c:	7d5b      	ldrb	r3, [r3, #21]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <CaptureDownData+0x140>)
 8000692:	7d92      	ldrb	r2, [r2, #22]
 8000694:	4313      	orrs	r3, r2
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <CaptureDownData+0x140>)
 800069a:	7ddb      	ldrb	r3, [r3, #23]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <CaptureDownData+0x140>)
 80006a0:	7e12      	ldrb	r2, [r2, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <CaptureDownData+0x140>)
 80006a8:	7e5b      	ldrb	r3, [r3, #25]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <CaptureDownData+0x140>)
 80006ae:	7e92      	ldrb	r2, [r2, #26]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CtrlSide
	CaptureData.Mode = (DownDataReceive[27]); //方便数据下传与中途获取
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <CaptureDownData+0x140>)
 80006b6:	7edb      	ldrb	r3, [r3, #27]
 80006b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27]);
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <CaptureDownData+0x140>)
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
#else
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
#endif
#endif
	CaptureData.IdTest = IdTest(DownDataReceive, 0, 44, 28);
 80006c4:	231c      	movs	r3, #28
 80006c6:	222c      	movs	r2, #44	; 0x2c
 80006c8:	2100      	movs	r1, #0
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <CaptureDownData+0x140>)
 80006cc:	f000 fbce 	bl	8000e6c <IdTest>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CaptureData.EndOfData = (DownDataReceive[29]);
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <CaptureDownData+0x140>)
 80006d8:	7f5b      	ldrb	r3, [r3, #29]
 80006da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <CaptureDownData+0x144>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <CaptureDownData+0x144>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f042 0210 	orr.w	r2, r2, #16
 80006ec:	601a      	str	r2, [r3, #0]
//	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, 31);
 80006ee:	221f      	movs	r2, #31
 80006f0:	4909      	ldr	r1, [pc, #36]	; (8000718 <CaptureDownData+0x140>)
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <CaptureDownData+0x144>)
 80006f4:	f009 f97c 	bl	80099f0 <HAL_UART_Receive_DMA>
	return CaptureData;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	461d      	mov	r5, r3
 80006fc:	f107 040c 	add.w	r4, r7, #12
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	602b      	str	r3, [r5, #0]
}
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	3740      	adds	r7, #64	; 0x40
 8000714:	46bd      	mov	sp, r7
 8000716:	bdb0      	pop	{r4, r5, r7, pc}
 8000718:	24000000 	.word	0x24000000
 800071c:	200044a0 	.word	0x200044a0

08000720 <SendUpData>:
/**
 * @brief 向上位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendUpData(UpDataDef SendData)
{
 8000720:	b084      	sub	sp, #16
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
 8000726:	f107 0c08 	add.w	ip, r7, #8
 800072a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 800072e:	4b80      	ldr	r3, [pc, #512]	; (8000930 <SendUpData+0x210>)
 8000730:	2225      	movs	r2, #37	; 0x25
 8000732:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = ((SendData.WaterDetect) | (SendData.CabinNum));
 8000734:	7a7a      	ldrb	r2, [r7, #9]
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	4313      	orrs	r3, r2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b7c      	ldr	r3, [pc, #496]	; (8000930 <SendUpData+0x210>)
 800073e:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature >> 8;
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b79      	ldr	r3, [pc, #484]	; (8000930 <SendUpData+0x210>)
 800074a:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature;
 800074c:	897b      	ldrh	r3, [r7, #10]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b77      	ldr	r3, [pc, #476]	; (8000930 <SendUpData+0x210>)
 8000752:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro >> 16;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <SendUpData+0x210>)
 800075c:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 24;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	0e1b      	lsrs	r3, r3, #24
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b72      	ldr	r3, [pc, #456]	; (8000930 <SendUpData+0x210>)
 8000766:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b70      	ldr	r3, [pc, #448]	; (8000930 <SendUpData+0x210>)
 800076e:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro >> 8;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b6e      	ldr	r3, [pc, #440]	; (8000930 <SendUpData+0x210>)
 8000778:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 800077a:	8a3b      	ldrh	r3, [r7, #16]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <SendUpData+0x210>)
 8000780:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000782:	8a3b      	ldrh	r3, [r7, #16]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b69      	ldr	r3, [pc, #420]	; (8000930 <SendUpData+0x210>)
 800078c:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0]; //DEBUG:数据位反转
 800078e:	8a7b      	ldrh	r3, [r7, #18]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b67      	ldr	r3, [pc, #412]	; (8000930 <SendUpData+0x210>)
 8000794:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0] >> 8;
 8000796:	8a7b      	ldrh	r3, [r7, #18]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	b29b      	uxth	r3, r3
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b64      	ldr	r3, [pc, #400]	; (8000930 <SendUpData+0x210>)
 80007a0:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1];
 80007a2:	8abb      	ldrh	r3, [r7, #20]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b62      	ldr	r3, [pc, #392]	; (8000930 <SendUpData+0x210>)
 80007a8:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1] >> 8;
 80007aa:	8abb      	ldrh	r3, [r7, #20]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b5f      	ldr	r3, [pc, #380]	; (8000930 <SendUpData+0x210>)
 80007b4:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2];
 80007b6:	8afb      	ldrh	r3, [r7, #22]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <SendUpData+0x210>)
 80007bc:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2] >> 8;
 80007be:	8afb      	ldrh	r3, [r7, #22]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <SendUpData+0x210>)
 80007c8:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0];
 80007ca:	8b3b      	ldrh	r3, [r7, #24]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b58      	ldr	r3, [pc, #352]	; (8000930 <SendUpData+0x210>)
 80007d0:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0] >> 8;
 80007d2:	8b3b      	ldrh	r3, [r7, #24]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b55      	ldr	r3, [pc, #340]	; (8000930 <SendUpData+0x210>)
 80007dc:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1];
 80007de:	8b7b      	ldrh	r3, [r7, #26]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b53      	ldr	r3, [pc, #332]	; (8000930 <SendUpData+0x210>)
 80007e4:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1] >> 8;
 80007e6:	8b7b      	ldrh	r3, [r7, #26]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <SendUpData+0x210>)
 80007f0:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2];
 80007f2:	8bbb      	ldrh	r3, [r7, #28]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <SendUpData+0x210>)
 80007f8:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2] >> 8;
 80007fa:	8bbb      	ldrh	r3, [r7, #28]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <SendUpData+0x210>)
 8000804:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0];
 8000806:	8bfb      	ldrh	r3, [r7, #30]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b49      	ldr	r3, [pc, #292]	; (8000930 <SendUpData+0x210>)
 800080c:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0] >> 8;
 800080e:	8bfb      	ldrh	r3, [r7, #30]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b46      	ldr	r3, [pc, #280]	; (8000930 <SendUpData+0x210>)
 8000818:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1];
 800081a:	8c3b      	ldrh	r3, [r7, #32]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <SendUpData+0x210>)
 8000820:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1] >> 8;
 8000822:	8c3b      	ldrh	r3, [r7, #32]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <SendUpData+0x210>)
 800082c:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2];
 800082e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <SendUpData+0x210>)
 8000834:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2] >> 8;
 8000836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <SendUpData+0x210>)
 8000840:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0];
 8000842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <SendUpData+0x210>)
 8000848:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0] >> 8;
 800084a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <SendUpData+0x210>)
 8000854:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1];
 8000856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <SendUpData+0x210>)
 800085c:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1] >> 8;
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <SendUpData+0x210>)
 8000868:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2];
 800086a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <SendUpData+0x210>)
 8000870:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2] >> 8;
 8000874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SendUpData+0x210>)
 800087e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.DepthToBottom >> 24;
 8000882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SendUpData+0x210>)
 800088a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.DepthToBottom >> 16;
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	0c1b      	lsrs	r3, r3, #16
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <SendUpData+0x210>)
 8000896:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.DepthToBottom >> 8;
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <SendUpData+0x210>)
 80008a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.DepthToBottom;
 80008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <SendUpData+0x210>)
 80008ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = SendData.Confidence >> 8;
 80008b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <SendUpData+0x210>)
 80008ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = SendData.Confidence;
 80008be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <SendUpData+0x210>)
 80008c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = SendData.WaterTemperature;
 80008c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <SendUpData+0x210>)
 80008ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	UpDataSend[41] = SendData.WaterTemperature >> 8;
 80008d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <SendUpData+0x210>)
 80008dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	UpDataSend[42] = SendData.WaterDepth; //BUG:E2 40
 80008e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <SendUpData+0x210>)
 80008e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	UpDataSend[43] = SendData.WaterDepth >> 8;
 80008ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <SendUpData+0x210>)
 80008f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	UpDataSend[44] = XorCaculate(UpDataSend, 38);
 80008f8:	2126      	movs	r1, #38	; 0x26
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <SendUpData+0x210>)
 80008fc:	f000 faca 	bl	8000e94 <XorCaculate>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <SendUpData+0x210>)
 8000906:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	UpDataSend[45] = 0xff;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <SendUpData+0x210>)
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	UpDataSend[46] = 0xff;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SendUpData+0x210>)
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 800091a:	222f      	movs	r2, #47	; 0x2f
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <SendUpData+0x210>)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <SendUpData+0x214>)
 8000920:	f008 ffe6 	bl	80098f0 <HAL_UART_Transmit_DMA>
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800092c:	b004      	add	sp, #16
 800092e:	4770      	bx	lr
 8000930:	24000070 	.word	0x24000070
 8000934:	200044a0 	.word	0x200044a0

08000938 <SendDownData>:
 * @brief 向下位机发送指令
 * @param  SendData         待发送的指令结构体
 * @note 已完成Debug
 */
void SendDownData(DownDataDef SendData)
{
 8000938:	b084      	sub	sp, #16
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
 800093e:	f107 0c08 	add.w	ip, r7, #8
 8000942:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	if ((SendData.HeadOfData == 0x25) && (SendData.EndOfData == 0x21))
//	{
	DownDataSend[0] = 0x25;
 8000946:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <SendDownData+0x138>)
 8000948:	2225      	movs	r2, #37	; 0x25
 800094a:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 800094c:	897b      	ldrh	r3, [r7, #10]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <SendDownData+0x138>)
 8000956:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 8000958:	897b      	ldrh	r3, [r7, #10]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <SendDownData+0x138>)
 800095e:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 8000960:	89bb      	ldrh	r3, [r7, #12]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <SendDownData+0x138>)
 800096a:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 800096c:	89bb      	ldrh	r3, [r7, #12]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <SendDownData+0x138>)
 8000972:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <SendDownData+0x138>)
 800097e:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <SendDownData+0x138>)
 8000986:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <SendDownData+0x138>)
 8000990:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <SendDownData+0x138>)
 8000998:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <SendDownData+0x138>)
 80009a2:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <SendDownData+0x138>)
 80009aa:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SendDownData+0x138>)
 80009b4:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <SendDownData+0x138>)
 80009bc:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <SendDownData+0x138>)
 80009c6:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SendDownData+0x138>)
 80009ce:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <SendDownData+0x138>)
 80009d8:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <SendDownData+0x138>)
 80009e0:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <SendDownData+0x138>)
 80009ea:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SendDownData+0x138>)
 80009f2:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <SendDownData+0x138>)
 80009fc:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <SendDownData+0x138>)
 8000a04:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <SendDownData+0x138>)
 8000a0e:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <SendDownData+0x138>)
 8000a16:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 8000a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1a:	0a1b      	lsrs	r3, r3, #8
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <SendDownData+0x138>)
 8000a20:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SendDownData+0x138>)
 8000a28:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SendDownData+0x138>)
 8000a32:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <SendDownData+0x138>)
 8000a3a:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = SendData.Relay; //直接下传数据
 8000a3c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <SendDownData+0x138>)
 8000a42:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000a44:	211c      	movs	r1, #28
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <SendDownData+0x138>)
 8000a48:	f000 fa24 	bl	8000e94 <XorCaculate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <SendDownData+0x138>)
 8000a52:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SendDownData+0x138>)
 8000a56:	2221      	movs	r2, #33	; 0x21
 8000a58:	775a      	strb	r2, [r3, #29]
//	}
	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 8000a5a:	221e      	movs	r2, #30
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <SendDownData+0x138>)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <SendDownData+0x13c>)
 8000a60:	f008 ff46 	bl	80098f0 <HAL_UART_Transmit_DMA>
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr
 8000a70:	24000020 	.word	0x24000020
 8000a74:	200045bc 	.word	0x200045bc

08000a78 <CaptureUpData>:
/**
 * @brief 捕获下位向上位发送的数据
 * @return UpDataDef 下位机上传的数据结构体
 */
UpDataDef CaptureUpData(void)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;

	CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0b0000控制仓，0b0001==1电源仓
 8000a80:	4b8b      	ldr	r3, [pc, #556]	; (8000cb0 <CaptureUpData+0x238>)
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0010); //0b0000正常，0b0010==2漏水
 8000a8c:	4b88      	ldr	r3, [pc, #544]	; (8000cb0 <CaptureUpData+0x238>)
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[3] << 8) | UpDataReceive[2]);
 8000a98:	4b85      	ldr	r3, [pc, #532]	; (8000cb0 <CaptureUpData+0x238>)
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b83      	ldr	r3, [pc, #524]	; (8000cb0 <CaptureUpData+0x238>)
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 8000aae:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <CaptureUpData+0x238>)
 8000ab0:	79db      	ldrb	r3, [r3, #7]
 8000ab2:	061a      	lsls	r2, r3, #24
 8000ab4:	4b7e      	ldr	r3, [pc, #504]	; (8000cb0 <CaptureUpData+0x238>)
 8000ab6:	799b      	ldrb	r3, [r3, #6]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	431a      	orrs	r2, r3
			| (UpDataReceive[5] << 8) | UpDataReceive[4]);
 8000abc:	4b7c      	ldr	r3, [pc, #496]	; (8000cb0 <CaptureUpData+0x238>)
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	4a7a      	ldr	r2, [pc, #488]	; (8000cb0 <CaptureUpData+0x238>)
 8000ac6:	7912      	ldrb	r2, [r2, #4]
 8000ac8:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 8000aca:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[9] << 8) | UpDataReceive[8]);
 8000acc:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <CaptureUpData+0x238>)
 8000ace:	7a5b      	ldrb	r3, [r3, #9]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	4b76      	ldr	r3, [pc, #472]	; (8000cb0 <CaptureUpData+0x238>)
 8000ad6:	7a1b      	ldrb	r3, [r3, #8]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 8000ae2:	4b73      	ldr	r3, [pc, #460]	; (8000cb0 <CaptureUpData+0x238>)
 8000ae4:	7adb      	ldrb	r3, [r3, #11]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	4b71      	ldr	r3, [pc, #452]	; (8000cb0 <CaptureUpData+0x238>)
 8000aec:	7a9b      	ldrb	r3, [r3, #10]
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 8000af8:	4b6d      	ldr	r3, [pc, #436]	; (8000cb0 <CaptureUpData+0x238>)
 8000afa:	7b5b      	ldrb	r3, [r3, #13]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b6b      	ldr	r3, [pc, #428]	; (8000cb0 <CaptureUpData+0x238>)
 8000b02:	7b1b      	ldrb	r3, [r3, #12]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 8000b0e:	4b68      	ldr	r3, [pc, #416]	; (8000cb0 <CaptureUpData+0x238>)
 8000b10:	7bdb      	ldrb	r3, [r3, #15]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	4b66      	ldr	r3, [pc, #408]	; (8000cb0 <CaptureUpData+0x238>)
 8000b18:	7b9b      	ldrb	r3, [r3, #14]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000b24:	4b62      	ldr	r3, [pc, #392]	; (8000cb0 <CaptureUpData+0x238>)
 8000b26:	7c5b      	ldrb	r3, [r3, #17]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	4b60      	ldr	r3, [pc, #384]	; (8000cb0 <CaptureUpData+0x238>)
 8000b2e:	7c1b      	ldrb	r3, [r3, #16]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 8000b3a:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <CaptureUpData+0x238>)
 8000b3c:	7cdb      	ldrb	r3, [r3, #19]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	4b5b      	ldr	r3, [pc, #364]	; (8000cb0 <CaptureUpData+0x238>)
 8000b44:	7c9b      	ldrb	r3, [r3, #18]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 8000b50:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <CaptureUpData+0x238>)
 8000b52:	7d5b      	ldrb	r3, [r3, #21]
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <CaptureUpData+0x238>)
 8000b5a:	7d1b      	ldrb	r3, [r3, #20]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000b66:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <CaptureUpData+0x238>)
 8000b68:	7ddb      	ldrb	r3, [r3, #23]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b50      	ldr	r3, [pc, #320]	; (8000cb0 <CaptureUpData+0x238>)
 8000b70:	7d9b      	ldrb	r3, [r3, #22]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 8000b7c:	4b4c      	ldr	r3, [pc, #304]	; (8000cb0 <CaptureUpData+0x238>)
 8000b7e:	7e5b      	ldrb	r3, [r3, #25]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <CaptureUpData+0x238>)
 8000b86:	7e1b      	ldrb	r3, [r3, #24]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <CaptureUpData+0x238>)
 8000b94:	7edb      	ldrb	r3, [r3, #27]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <CaptureUpData+0x238>)
 8000b9c:	7e9b      	ldrb	r3, [r3, #26]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000ba8:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <CaptureUpData+0x238>)
 8000baa:	7f5b      	ldrb	r3, [r3, #29]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <CaptureUpData+0x238>)
 8000bb2:	7f1b      	ldrb	r3, [r3, #28]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <CaptureUpData+0x238>)
 8000bc0:	7fdb      	ldrb	r3, [r3, #31]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <CaptureUpData+0x238>)
 8000bc8:	7f9b      	ldrb	r3, [r3, #30]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <CaptureUpData+0x238>)
 8000bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <CaptureUpData+0x238>)
 8000be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <CaptureUpData+0x238>)
 8000bf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bf4:	061a      	lsls	r2, r3, #24
			| (UpDataReceive[36] << 16) | (UpDataReceive[35] << 8)
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <CaptureUpData+0x238>)
 8000bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bfc:	041b      	lsls	r3, r3, #16
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <CaptureUpData+0x238>)
 8000c02:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	4313      	orrs	r3, r2
			| UpDataReceive[34]);
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <CaptureUpData+0x238>)
 8000c0c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000c10:	4313      	orrs	r3, r2
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.Confidence = ((UpDataReceive[39] << 8) | UpDataReceive[38]);
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <CaptureUpData+0x238>)
 8000c16:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <CaptureUpData+0x238>)
 8000c20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	CaptureData.WaterTemperature =
			((UpDataReceive[40] << 8) | UpDataReceive[41]);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <CaptureUpData+0x238>)
 8000c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <CaptureUpData+0x238>)
 8000c3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 8000c46:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[42] << 8) | UpDataReceive[43]);
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <CaptureUpData+0x238>)
 8000c4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <CaptureUpData+0x238>)
 8000c54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1, 44, 28);
 8000c62:	231c      	movs	r3, #28
 8000c64:	222c      	movs	r2, #44	; 0x2c
 8000c66:	2101      	movs	r1, #1
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <CaptureUpData+0x238>)
 8000c6a:	f000 f8ff 	bl	8000e6c <IdTest>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <CaptureUpData+0x23c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <CaptureUpData+0x23c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0210 	orr.w	r2, r2, #16
 8000c82:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Down_UART, UpDataReceive, Down_UART_RXLen);
 8000c84:	222f      	movs	r2, #47	; 0x2f
 8000c86:	490a      	ldr	r1, [pc, #40]	; (8000cb0 <CaptureUpData+0x238>)
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <CaptureUpData+0x23c>)
 8000c8a:	f008 feb1 	bl	80099f0 <HAL_UART_Receive_DMA>

	return CaptureData;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	461d      	mov	r5, r3
 8000c92:	f107 0408 	add.w	r4, r7, #8
 8000c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ca2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdb0      	pop	{r4, r5, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000040 	.word	0x24000040
 8000cb4:	200045bc 	.word	0x200045bc

08000cb8 <SpecialMovePID>:
 * @param  SetValue         目标值
 * @param  ActualValue      当前值
 * @return u16 位置PID数据
 */
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	80bb      	strh	r3, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	807b      	strh	r3, [r7, #2]
	//累计积分位置
	static float LocSum;
	//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4) //定深模式
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d151      	bne.n	8000d74 <SpecialMovePID+0xbc>
	{
		PIDData = 0;
 8000cd0:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <SpecialMovePID+0x190>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000cd6:	88ba      	ldrh	r2, [r7, #4]
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <SpecialMovePID+0x194>)
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000cea:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <SpecialMovePID+0x198>)
 8000cec:	ed93 7a00 	vldr	s14, [r3]
 8000cf0:	4b56      	ldr	r3, [pc, #344]	; (8000e4c <SpecialMovePID+0x194>)
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfa:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <SpecialMovePID+0x198>)
 8000cfc:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000d00:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <SpecialMovePID+0x194>)
 8000d02:	edd3 7a00 	vldr	s15, [r3]
 8000d06:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000e54 <SpecialMovePID+0x19c>
 8000d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d0e:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <SpecialMovePID+0x198>)
 8000d10:	edd3 7a00 	vldr	s15, [r3]
 8000d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d1c:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <SpecialMovePID+0x1a0>)
 8000d1e:	edd3 6a00 	vldr	s13, [r3]
 8000d22:	4b4a      	ldr	r3, [pc, #296]	; (8000e4c <SpecialMovePID+0x194>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d2c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000e5c <SpecialMovePID+0x1a4>
 8000d30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3c:	ee17 3a90 	vmov	r3, s15
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d44:	4b46      	ldr	r3, [pc, #280]	; (8000e60 <SpecialMovePID+0x1a8>)
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	4293      	cmp	r3, r2
 8000d52:	bfb8      	it	lt
 8000d54:	4613      	movlt	r3, r2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	4293      	cmp	r3, r2
 8000d64:	bfa8      	it	ge
 8000d66:	4613      	movge	r3, r2
				(u16) (1500
 8000d68:	b29b      	uxth	r3, r3
		PIDLoc =
 8000d6a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000d6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
								(int16_t)(PID_D_Kp * Ek + (PID_D_Ki * LocSum) + PID_D_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000d70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d72:	e062      	b.n	8000e3a <SpecialMovePID+0x182>
	}
	else if (ModeType == 2) //定向模式
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d14f      	bne.n	8000e1a <SpecialMovePID+0x162>
	{
		PIDData = 0;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <SpecialMovePID+0x190>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000d80:	88ba      	ldrh	r2, [r7, #4]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	ee07 3a90 	vmov	s15, r3
 8000d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <SpecialMovePID+0x194>)
 8000d90:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000d94:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <SpecialMovePID+0x198>)
 8000d96:	ed93 7a00 	vldr	s14, [r3]
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <SpecialMovePID+0x194>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <SpecialMovePID+0x198>)
 8000da6:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <SpecialMovePID+0x194>)
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e64 <SpecialMovePID+0x1ac>
 8000db4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000db8:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <SpecialMovePID+0x198>)
 8000dba:	edd3 7a00 	vldr	s15, [r3]
 8000dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc2:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <SpecialMovePID+0x1a0>)
 8000dc4:	edd3 6a00 	vldr	s13, [r3]
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <SpecialMovePID+0x194>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dd2:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000e68 <SpecialMovePID+0x1b0>
 8000dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de2:	ee17 3a90 	vmov	r3, s15
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	827b      	strh	r3, [r7, #18]
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <SpecialMovePID+0x1a8>)
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	bfb8      	it	lt
 8000dfa:	4613      	movlt	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	bfa8      	it	ge
 8000e0c:	4613      	movge	r3, r2
				(u16) (1500
 8000e0e:	b29b      	uxth	r3, r3
		PIDLoc =
 8000e10:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
								(int16_t)(PID_O_Kp * Ek + (PID_O_Ki * LocSum) + PID_O_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000e16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e18:	e00f      	b.n	8000e3a <SpecialMovePID+0x182>
	}
	else
	{
		if (!PIDData)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <SpecialMovePID+0x190>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10a      	bne.n	8000e38 <SpecialMovePID+0x180>
		{
			PIDData = 1;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <SpecialMovePID+0x190>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SpecialMovePID+0x194>)
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <SpecialMovePID+0x198>)
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000e38:	2300      	movs	r3, #0
	}
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3734      	adds	r7, #52	; 0x34
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000030 	.word	0x20000030
 8000e4c:	20000034 	.word	0x20000034
 8000e50:	20000038 	.word	0x20000038
 8000e54:	43480000 	.word	0x43480000
 8000e58:	2000003c 	.word	0x2000003c
 8000e5c:	43960000 	.word	0x43960000
 8000e60:	fffffc18 	.word	0xfffffc18
 8000e64:	42c80000 	.word	0x42c80000
 8000e68:	43160000 	.word	0x43160000

08000e6c <IdTest>:
 * @param  SendUpLength     上传数据长度
 * @param  SendDownLength   下传指令长度
 * @return u8 正确为1；错误为0，如果不开启奇偶校验默认为1
 */
static u8 IdTest(u8 *String, u8 Format, u8 SendUpLength, u8 SendDownLength)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	70fb      	strb	r3, [r7, #3]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70bb      	strb	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	707b      	strb	r3, [r7, #1]
			return 0;
		}
	}
	return 1;
#else
	return 1; //不开启奇偶校验时默认成功
 8000e86:	2301      	movs	r3, #1
#endif
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <XorCaculate>:
 * @param  CacString        待校验数据
 * @param  CacStringSize    待校验数据长度
 * @return u8 异或运算结果，如果不开启数据校验则默认返回0
 */
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]
	{
		CacResult ^= CacString[i];
	}
	return CacResult;
#else
	return 0;
 8000ea0:	2300      	movs	r3, #0
#endif
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <InitGY39>:

/**
 * @brief GY39温湿度大气压传感器初始化
 */
void InitGY39(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <InitGY39+0x24>)
 8000eb6:	22a5      	movs	r2, #165	; 0xa5
 8000eb8:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <InitGY39+0x24>)
 8000ebc:	2282      	movs	r2, #130	; 0x82
 8000ebe:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <InitGY39+0x24>)
 8000ec2:	2227      	movs	r2, #39	; 0x27
 8000ec4:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	4902      	ldr	r1, [pc, #8]	; (8000ed4 <InitGY39+0x24>)
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <InitGY39+0x28>)
 8000ecc:	f008 fd10 	bl	80098f0 <HAL_UART_Transmit_DMA>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	240000cc 	.word	0x240000cc
 8000ed8:	200046e8 	.word	0x200046e8

08000edc <ReceiveGY39>:
/**
 * @brief 接收GY39温湿度大气压传感器数据
 * @return GY39Data GY39传感器数据接收结构体
 */
GY39Data ReceiveGY39(void)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;

	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <ReceiveGY39+0x84>)
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <ReceiveGY39+0x84>)
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <ReceiveGY39+0x84>)
 8000efc:	79db      	ldrb	r3, [r3, #7]
 8000efe:	061a      	lsls	r2, r3, #24
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <ReceiveGY39+0x84>)
 8000f02:	799b      	ldrb	r3, [r3, #6]
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <ReceiveGY39+0x84>)
 8000f0a:	795b      	ldrb	r3, [r3, #5]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <ReceiveGY39+0x84>)
 8000f12:	7912      	ldrb	r2, [r2, #4]
 8000f14:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000f16:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <ReceiveGY39+0x84>)
 8000f1a:	7a5b      	ldrb	r3, [r3, #9]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <ReceiveGY39+0x84>)
 8000f22:	7a1b      	ldrb	r3, [r3, #8]
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	82bb      	strh	r3, [r7, #20]

	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <ReceiveGY39+0x88>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <ReceiveGY39+0x88>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0210 	orr.w	r2, r2, #16
 8000f3c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000f3e:	2212      	movs	r2, #18
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <ReceiveGY39+0x84>)
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <ReceiveGY39+0x88>)
 8000f44:	f008 fd54 	bl	80099f0 <HAL_UART_Receive_DMA>

	return RevGY39;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	461c      	mov	r4, r3
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	240000d0 	.word	0x240000d0
 8000f64:	200046e8 	.word	0x200046e8

08000f68 <ReceiveWT931>:
/**
 * @brief 接收WT931九轴传感器数据
 * @return WT931Data WT931九轴传感器数据结构体
 */
WT931Data ReceiveWT931(void)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;

	if ((WT931Receive[0] == 0x55) && (WT931Receive[1] == 0x51))
 8000f70:	4b64      	ldr	r3, [pc, #400]	; (8001104 <ReceiveWT931+0x19c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b55      	cmp	r3, #85	; 0x55
 8000f76:	d124      	bne.n	8000fc2 <ReceiveWT931+0x5a>
 8000f78:	4b62      	ldr	r3, [pc, #392]	; (8001104 <ReceiveWT931+0x19c>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b51      	cmp	r3, #81	; 0x51
 8000f7e:	d120      	bne.n	8000fc2 <ReceiveWT931+0x5a>
	{
		RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000f80:	4b60      	ldr	r3, [pc, #384]	; (8001104 <ReceiveWT931+0x19c>)
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <ReceiveWT931+0x19c>)
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	813b      	strh	r3, [r7, #8]
		RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 8000f96:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <ReceiveWT931+0x19c>)
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	4b59      	ldr	r3, [pc, #356]	; (8001104 <ReceiveWT931+0x19c>)
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	817b      	strh	r3, [r7, #10]
		RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <ReceiveWT931+0x19c>)
 8000fae:	79db      	ldrb	r3, [r3, #7]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <ReceiveWT931+0x19c>)
 8000fb6:	799b      	ldrb	r3, [r3, #6]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	81bb      	strh	r3, [r7, #12]
	}

	if ((WT931Receive[11] == 0x55) && (WT931Receive[12] == 0x52))
 8000fc2:	4b50      	ldr	r3, [pc, #320]	; (8001104 <ReceiveWT931+0x19c>)
 8000fc4:	7adb      	ldrb	r3, [r3, #11]
 8000fc6:	2b55      	cmp	r3, #85	; 0x55
 8000fc8:	d124      	bne.n	8001014 <ReceiveWT931+0xac>
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <ReceiveWT931+0x19c>)
 8000fcc:	7b1b      	ldrb	r3, [r3, #12]
 8000fce:	2b52      	cmp	r3, #82	; 0x52
 8000fd0:	d120      	bne.n	8001014 <ReceiveWT931+0xac>
	{
		RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <ReceiveWT931+0x19c>)
 8000fd4:	7b9b      	ldrb	r3, [r3, #14]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <ReceiveWT931+0x19c>)
 8000fdc:	7b5b      	ldrb	r3, [r3, #13]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	81fb      	strh	r3, [r7, #14]
		RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <ReceiveWT931+0x19c>)
 8000fea:	7c1b      	ldrb	r3, [r3, #16]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b44      	ldr	r3, [pc, #272]	; (8001104 <ReceiveWT931+0x19c>)
 8000ff2:	7bdb      	ldrb	r3, [r3, #15]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	823b      	strh	r3, [r7, #16]
		RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8000ffe:	4b41      	ldr	r3, [pc, #260]	; (8001104 <ReceiveWT931+0x19c>)
 8001000:	7c9b      	ldrb	r3, [r3, #18]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <ReceiveWT931+0x19c>)
 8001008:	7c5b      	ldrb	r3, [r3, #17]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	827b      	strh	r3, [r7, #18]
	}

	if ((WT931Receive[22] == 0x55) && (WT931Receive[23] == 0x53))
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <ReceiveWT931+0x19c>)
 8001016:	7d9b      	ldrb	r3, [r3, #22]
 8001018:	2b55      	cmp	r3, #85	; 0x55
 800101a:	d124      	bne.n	8001066 <ReceiveWT931+0xfe>
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <ReceiveWT931+0x19c>)
 800101e:	7ddb      	ldrb	r3, [r3, #23]
 8001020:	2b53      	cmp	r3, #83	; 0x53
 8001022:	d120      	bne.n	8001066 <ReceiveWT931+0xfe>
	{
		RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <ReceiveWT931+0x19c>)
 8001026:	7e5b      	ldrb	r3, [r3, #25]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <ReceiveWT931+0x19c>)
 800102e:	7e1b      	ldrb	r3, [r3, #24]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	82bb      	strh	r3, [r7, #20]
		RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 800103a:	4b32      	ldr	r3, [pc, #200]	; (8001104 <ReceiveWT931+0x19c>)
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <ReceiveWT931+0x19c>)
 8001044:	7e9b      	ldrb	r3, [r3, #26]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21b      	sxth	r3, r3
 800104c:	b29b      	uxth	r3, r3
 800104e:	82fb      	strh	r3, [r7, #22]
		RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <ReceiveWT931+0x19c>)
 8001052:	7f5b      	ldrb	r3, [r3, #29]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <ReceiveWT931+0x19c>)
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21b      	sxth	r3, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	833b      	strh	r3, [r7, #24]
	}

	if ((WT931Receive[33] == 0x55) && (WT931Receive[34] == 0x54))
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <ReceiveWT931+0x19c>)
 8001068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800106c:	2b55      	cmp	r3, #85	; 0x55
 800106e:	d12b      	bne.n	80010c8 <ReceiveWT931+0x160>
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <ReceiveWT931+0x19c>)
 8001072:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001076:	2b54      	cmp	r3, #84	; 0x54
 8001078:	d126      	bne.n	80010c8 <ReceiveWT931+0x160>
	{
		RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <ReceiveWT931+0x19c>)
 800107c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <ReceiveWT931+0x19c>)
 8001086:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	837b      	strh	r3, [r7, #26]
		RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <ReceiveWT931+0x19c>)
 8001096:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <ReceiveWT931+0x19c>)
 80010a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	83bb      	strh	r3, [r7, #28]
		RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <ReceiveWT931+0x19c>)
 80010b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <ReceiveWT931+0x19c>)
 80010ba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	83fb      	strh	r3, [r7, #30]
	}
	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <ReceiveWT931+0x1a0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <ReceiveWT931+0x1a0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0210 	orr.w	r2, r2, #16
 80010d6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 80010d8:	222c      	movs	r2, #44	; 0x2c
 80010da:	490a      	ldr	r1, [pc, #40]	; (8001104 <ReceiveWT931+0x19c>)
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <ReceiveWT931+0x1a0>)
 80010de:	f008 fc87 	bl	80099f0 <HAL_UART_Receive_DMA>

	return RevWT931;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	461d      	mov	r5, r3
 80010e6:	f107 0408 	add.w	r4, r7, #8
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	6028      	str	r0, [r5, #0]
 80010ee:	6069      	str	r1, [r5, #4]
 80010f0:	60aa      	str	r2, [r5, #8]
 80010f2:	60eb      	str	r3, [r5, #12]
 80010f4:	cc03      	ldmia	r4!, {r0, r1}
 80010f6:	6128      	str	r0, [r5, #16]
 80010f8:	6169      	str	r1, [r5, #20]
}
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bdb0      	pop	{r4, r5, r7, pc}
 8001102:	bf00      	nop
 8001104:	240000a0 	.word	0x240000a0
 8001108:	2000416c 	.word	0x2000416c

0800110c <ReceiveDeep>:
/**
 * @brief 接收水深水温传感器数据
 * @return DeepData 水深水温传感器数据结构体
 */
DeepData ReceiveDeep(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	DeepData RevDeep;

	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <ReceiveDeep+0x68>)
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <ReceiveDeep+0x68>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	b29b      	uxth	r3, r3
 8001126:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <ReceiveDeep+0x68>)
 800112a:	78db      	ldrb	r3, [r3, #3]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <ReceiveDeep+0x68>)
 8001132:	789b      	ldrb	r3, [r3, #2]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	b29b      	uxth	r3, r3
 800113c:	803b      	strh	r3, [r7, #0]

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <ReceiveDeep+0x6c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <ReceiveDeep+0x6c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0210 	orr.w	r2, r2, #16
 800114c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 800114e:	2204      	movs	r2, #4
 8001150:	4908      	ldr	r1, [pc, #32]	; (8001174 <ReceiveDeep+0x68>)
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <ReceiveDeep+0x6c>)
 8001154:	f008 fc4c 	bl	80099f0 <HAL_UART_Receive_DMA>
	return RevDeep;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	2300      	movs	r3, #0
 800115e:	88ba      	ldrh	r2, [r7, #4]
 8001160:	f362 030f 	bfi	r3, r2, #0, #16
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	f362 431f 	bfi	r3, r2, #16, #16
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	240000e4 	.word	0x240000e4
 8001178:	20004650 	.word	0x20004650

0800117c <InitP30>:

/**
 * @brief 声呐传感器初始化
 */
void InitP30(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	P30Send[0] = 0x42;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <InitP30+0x5c>)
 8001182:	2242      	movs	r2, #66	; 0x42
 8001184:	701a      	strb	r2, [r3, #0]
	P30Send[1] = 0x52;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <InitP30+0x5c>)
 8001188:	2252      	movs	r2, #82	; 0x52
 800118a:	705a      	strb	r2, [r3, #1]
	P30Send[2] = 0x02;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <InitP30+0x5c>)
 800118e:	2202      	movs	r2, #2
 8001190:	709a      	strb	r2, [r3, #2]
	P30Send[3] = 0x00;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <InitP30+0x5c>)
 8001194:	2200      	movs	r2, #0
 8001196:	70da      	strb	r2, [r3, #3]
	P30Send[4] = 0x05;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <InitP30+0x5c>)
 800119a:	2205      	movs	r2, #5
 800119c:	711a      	strb	r2, [r3, #4]
	P30Send[5] = 0x00;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <InitP30+0x5c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	715a      	strb	r2, [r3, #5]
	P30Send[6] = 0x00;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <InitP30+0x5c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	719a      	strb	r2, [r3, #6]
	P30Send[7] = 0x00;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <InitP30+0x5c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	71da      	strb	r2, [r3, #7]
	P30Send[8] = 0xBB;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <InitP30+0x5c>)
 80011b2:	22bb      	movs	r2, #187	; 0xbb
 80011b4:	721a      	strb	r2, [r3, #8]
	P30Send[9] = 0x04;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <InitP30+0x5c>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	725a      	strb	r2, [r3, #9]
	P30Send[10] = 0xD2;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <InitP30+0x5c>)
 80011be:	22d2      	movs	r2, #210	; 0xd2
 80011c0:	729a      	strb	r2, [r3, #10]
	P30Send[11] = 0x01;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <InitP30+0x5c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_DMA(&GP30_UART, P30Send, P30_UART_TXLen);
 80011c8:	220c      	movs	r2, #12
 80011ca:	4903      	ldr	r1, [pc, #12]	; (80011d8 <InitP30+0x5c>)
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <InitP30+0x60>)
 80011ce:	f008 fb8f 	bl	80098f0 <HAL_UART_Transmit_DMA>
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	240000e8 	.word	0x240000e8
 80011dc:	200042a4 	.word	0x200042a4

080011e0 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
P30Data ReceiveP30(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	P30Data RevP30;

	uint8_t FrameState = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	77fb      	strb	r3, [r7, #31]
	uint8_t Bytenum = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77bb      	strb	r3, [r7, #30]
	uint8_t CheckSum = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	777b      	strb	r3, [r7, #29]
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	773b      	strb	r3, [r7, #28]
 80011f8:	e069      	b.n	80012ce <ReceiveP30+0xee>
	{
		if (FrameState == 0)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d121      	bne.n	8001244 <ReceiveP30+0x64>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 8001200:	7f3b      	ldrb	r3, [r7, #28]
 8001202:	4a41      	ldr	r2, [pc, #260]	; (8001308 <ReceiveP30+0x128>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	2b42      	cmp	r3, #66	; 0x42
 8001208:	d109      	bne.n	800121e <ReceiveP30+0x3e>
 800120a:	7fbb      	ldrb	r3, [r7, #30]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d106      	bne.n	800121e <ReceiveP30+0x3e>
			{
				CheckSum = P30Receive[i];
 8001210:	7f3b      	ldrb	r3, [r7, #28]
 8001212:	4a3d      	ldr	r2, [pc, #244]	; (8001308 <ReceiveP30+0x128>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	777b      	strb	r3, [r7, #29]
				Bytenum = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	77bb      	strb	r3, [r7, #30]
				continue;
 800121c:	e054      	b.n	80012c8 <ReceiveP30+0xe8>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 800121e:	7f3b      	ldrb	r3, [r7, #28]
 8001220:	4a39      	ldr	r2, [pc, #228]	; (8001308 <ReceiveP30+0x128>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	2b52      	cmp	r3, #82	; 0x52
 8001226:	d14f      	bne.n	80012c8 <ReceiveP30+0xe8>
 8001228:	7fbb      	ldrb	r3, [r7, #30]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d14c      	bne.n	80012c8 <ReceiveP30+0xe8>
			{
				CheckSum += P30Receive[i];
 800122e:	7f3b      	ldrb	r3, [r7, #28]
 8001230:	4a35      	ldr	r2, [pc, #212]	; (8001308 <ReceiveP30+0x128>)
 8001232:	5cd2      	ldrb	r2, [r2, r3]
 8001234:	7f7b      	ldrb	r3, [r7, #29]
 8001236:	4413      	add	r3, r2
 8001238:	777b      	strb	r3, [r7, #29]
				Bytenum = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	77bb      	strb	r3, [r7, #30]
				FrameState = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	77fb      	strb	r3, [r7, #31]
				continue;
 8001242:	e041      	b.n	80012c8 <ReceiveP30+0xe8>
			}
		}
		else if (FrameState == 1)
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d13e      	bne.n	80012c8 <ReceiveP30+0xe8>
		{
			if (Bytenum < 13)
 800124a:	7fbb      	ldrb	r3, [r7, #30]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d813      	bhi.n	8001278 <ReceiveP30+0x98>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 8001250:	7f3a      	ldrb	r2, [r7, #28]
 8001252:	7fbb      	ldrb	r3, [r7, #30]
 8001254:	3b02      	subs	r3, #2
 8001256:	492c      	ldr	r1, [pc, #176]	; (8001308 <ReceiveP30+0x128>)
 8001258:	5c8a      	ldrb	r2, [r1, r2]
 800125a:	f107 0120 	add.w	r1, r7, #32
 800125e:	440b      	add	r3, r1
 8001260:	f803 2c18 	strb.w	r2, [r3, #-24]
				CheckSum += P30Receive[i];
 8001264:	7f3b      	ldrb	r3, [r7, #28]
 8001266:	4a28      	ldr	r2, [pc, #160]	; (8001308 <ReceiveP30+0x128>)
 8001268:	5cd2      	ldrb	r2, [r2, r3]
 800126a:	7f7b      	ldrb	r3, [r7, #29]
 800126c:	4413      	add	r3, r2
 800126e:	777b      	strb	r3, [r7, #29]
				Bytenum++;
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	3301      	adds	r3, #1
 8001274:	77bb      	strb	r3, [r7, #30]
 8001276:	e027      	b.n	80012c8 <ReceiveP30+0xe8>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 8001278:	7f3b      	ldrb	r3, [r7, #28]
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <ReceiveP30+0x128>)
 800127c:	5cd3      	ldrb	r3, [r2, r3]
 800127e:	7f7a      	ldrb	r2, [r7, #29]
 8001280:	429a      	cmp	r2, r3
 8001282:	d11b      	bne.n	80012bc <ReceiveP30+0xdc>
				{
					RevP30.Confidence = datahex[10];
 8001284:	7cbb      	ldrb	r3, [r7, #18]
 8001286:	b29b      	uxth	r3, r3
 8001288:	833b      	strh	r3, [r7, #24]
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 800128a:	7bba      	ldrb	r2, [r7, #14]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
							| datahex[8] | datahex[9]) / 1000);
 800128e:	4313      	orrs	r3, r2
 8001290:	b2da      	uxtb	r2, r3
 8001292:	7c3b      	ldrb	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	b2da      	uxtb	r2, r3
 8001298:	7c7b      	ldrb	r3, [r7, #17]
 800129a:	4313      	orrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <ReceiveP30+0x12c>)
 80012a0:	fb82 1203 	smull	r1, r2, r2, r3
 80012a4:	1192      	asrs	r2, r2, #6
 80012a6:	17db      	asrs	r3, r3, #31
 80012a8:	1ad3      	subs	r3, r2, r3
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b6:	ee17 3a90 	vmov	r3, s15
 80012ba:	617b      	str	r3, [r7, #20]
				}
				CheckSum = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	777b      	strb	r3, [r7, #29]
				Bytenum = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	77bb      	strb	r3, [r7, #30]
				FrameState = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 33; i++)
 80012c8:	7f3b      	ldrb	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	773b      	strb	r3, [r7, #28]
 80012ce:	7f3b      	ldrb	r3, [r7, #28]
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	d992      	bls.n	80011fa <ReceiveP30+0x1a>
			}
		}
	}

	__HAL_UART_ENABLE_IT(&GP30_UART, UART_IT_IDLE);
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <ReceiveP30+0x130>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <ReceiveP30+0x130>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0210 	orr.w	r2, r2, #16
 80012e2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GP30_UART, P30Receive, P30_UART_RXLen);
 80012e4:	2221      	movs	r2, #33	; 0x21
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <ReceiveP30+0x128>)
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <ReceiveP30+0x130>)
 80012ea:	f008 fb81 	bl	80099f0 <HAL_UART_Receive_DMA>

	return RevP30;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	461a      	mov	r2, r3
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	240000f4 	.word	0x240000f4
 800130c:	10624dd3 	.word	0x10624dd3
 8001310:	200042a4 	.word	0x200042a4

08001314 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <vApplicationGetIdleTaskMemory+0x2c>)
 8001324:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <vApplicationGetIdleTaskMemory+0x30>)
 800132a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000040 	.word	0x20000040
 8001344:	20000094 	.word	0x20000094

08001348 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b0b6      	sub	sp, #216	; 0xd8
 800134c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800134e:	f002 fa4b 	bl	80037e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001352:	f000 f96b 	bl	800162c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001356:	f000 f9ef 	bl	8001738 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800135a:	f000 fc7f 	bl	8001c5c <MX_GPIO_Init>
	MX_DMA_Init();
 800135e:	f000 fbfd 	bl	8001b5c <MX_DMA_Init>
	MX_IWDG1_Init();
 8001362:	f000 fa15 	bl	8001790 <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 8001366:	f000 fb15 	bl	8001994 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800136a:	f000 fb5f 	bl	8001a2c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800136e:	f000 fba9 	bl	8001ac4 <MX_USART3_UART_Init>
	MX_UART4_Init();
 8001372:	f000 fa2b 	bl	80017cc <MX_UART4_Init>
	MX_UART8_Init();
 8001376:	f000 fac1 	bl	80018fc <MX_UART8_Init>
	MX_UART5_Init();
 800137a:	f000 fa73 	bl	8001864 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 800137e:	4893      	ldr	r0, [pc, #588]	; (80015cc <main+0x284>)
 8001380:	f005 fc0a 	bl	8006b98 <HAL_IWDG_Refresh>

	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2110      	movs	r1, #16
 8001388:	4891      	ldr	r0, [pc, #580]	; (80015d0 <main+0x288>)
 800138a:	f005 fb83 	bl	8006a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	488f      	ldr	r0, [pc, #572]	; (80015d0 <main+0x288>)
 8001394:	f005 fb7e 	bl	8006a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2110      	movs	r1, #16
 800139c:	488c      	ldr	r0, [pc, #560]	; (80015d0 <main+0x288>)
 800139e:	f005 fb79 	bl	8006a94 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a8:	488a      	ldr	r0, [pc, #552]	; (80015d4 <main+0x28c>)
 80013aa:	f005 fb73 	bl	8006a94 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 80013ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00a f8fd 	bl	800b5be <osMutexCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a84      	ldr	r2, [pc, #528]	; (80015d8 <main+0x290>)
 80013c8:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 80013d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013da:	4618      	mov	r0, r3
 80013dc:	f00a f8ef 	bl	800b5be <osMutexCreate>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a7e      	ldr	r2, [pc, #504]	; (80015dc <main+0x294>)
 80013e4:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 80013f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00a f8e1 	bl	800b5be <osMutexCreate>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a78      	ldr	r2, [pc, #480]	; (80015e0 <main+0x298>)
 8001400:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 800140e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001412:	4618      	mov	r0, r3
 8001414:	f00a f8d3 	bl	800b5be <osMutexCreate>
 8001418:	4603      	mov	r3, r0
 800141a:	4a72      	ldr	r2, [pc, #456]	; (80015e4 <main+0x29c>)
 800141c:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 800142a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800142e:	4618      	mov	r0, r3
 8001430:	f00a f8c5 	bl	800b5be <osMutexCreate>
 8001434:	4603      	mov	r3, r0
 8001436:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <main+0x2a0>)
 8001438:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 8001446:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800144a:	4618      	mov	r0, r3
 800144c:	f00a f8b7 	bl	800b5be <osMutexCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a66      	ldr	r2, [pc, #408]	; (80015ec <main+0x2a4>)
 8001454:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30SensorDataRWFlag */
	osMutexDef(P30SensorDataRWFlag);
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	P30SensorDataRWFlagHandle = osMutexCreate(osMutex(P30SensorDataRWFlag));
 8001462:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001466:	4618      	mov	r0, r3
 8001468:	f00a f8a9 	bl	800b5be <osMutexCreate>
 800146c:	4603      	mov	r3, r0
 800146e:	4a60      	ldr	r2, [pc, #384]	; (80015f0 <main+0x2a8>)
 8001470:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 8001472:	4856      	ldr	r0, [pc, #344]	; (80015cc <main+0x284>)
 8001474:	f005 fb90 	bl	8006b98 <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 8001484:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f00a f8af 	bl	800b5ee <osSemaphoreCreate>
 8001490:	4603      	mov	r3, r0
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <main+0x2ac>)
 8001494:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 80014a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00a f8a0 	bl	800b5ee <osSemaphoreCreate>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a51      	ldr	r2, [pc, #324]	; (80015f8 <main+0x2b0>)
 80014b2:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 80014c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014c4:	2101      	movs	r1, #1
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00a f891 	bl	800b5ee <osSemaphoreCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <main+0x2b4>)
 80014d0:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 80014de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a f882 	bl	800b5ee <osSemaphoreCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a44      	ldr	r2, [pc, #272]	; (8001600 <main+0x2b8>)
 80014ee:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 80014f0:	2300      	movs	r3, #0
 80014f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80014f4:	2300      	movs	r3, #0
 80014f6:	67fb      	str	r3, [r7, #124]	; 0x7c
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80014f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f00a f875 	bl	800b5ee <osSemaphoreCreate>
 8001504:	4603      	mov	r3, r0
 8001506:	4a3f      	ldr	r2, [pc, #252]	; (8001604 <main+0x2bc>)
 8001508:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* definition and creation of P30TransFinish */
	osSemaphoreDef(P30TransFinish);
 800150a:	2300      	movs	r3, #0
 800150c:	673b      	str	r3, [r7, #112]	; 0x70
 800150e:	2300      	movs	r3, #0
 8001510:	677b      	str	r3, [r7, #116]	; 0x74
	P30TransFinishHandle = osSemaphoreCreate(osSemaphore(P30TransFinish), 1);
 8001512:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001516:	2101      	movs	r1, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f00a f868 	bl	800b5ee <osSemaphoreCreate>
 800151e:	4603      	mov	r3, r0
 8001520:	4a39      	ldr	r2, [pc, #228]	; (8001608 <main+0x2c0>)
 8001522:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 8001524:	4829      	ldr	r0, [pc, #164]	; (80015cc <main+0x284>)
 8001526:	f005 fb37 	bl	8006b98 <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <main+0x2c4>)
 800152c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800153a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 800153e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f009 ffda 	bl	800b4fe <osThreadCreate>
 800154a:	4603      	mov	r3, r0
 800154c:	4a30      	ldr	r2, [pc, #192]	; (8001610 <main+0x2c8>)
 800154e:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 8001550:	4b30      	ldr	r3, [pc, #192]	; (8001614 <main+0x2cc>)
 8001552:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001556:	461d      	mov	r5, r3
 8001558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 ffc7 	bl	800b4fe <osThreadCreate>
 8001570:	4603      	mov	r3, r0
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <main+0x2d0>)
 8001574:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <main+0x2d4>)
 8001578:	f107 041c 	add.w	r4, r7, #28
 800157c:	461d      	mov	r5, r3
 800157e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f009 ffb4 	bl	800b4fe <osThreadCreate>
 8001596:	4603      	mov	r3, r0
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <main+0x2d8>)
 800159a:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <main+0x2dc>)
 800159e:	463c      	mov	r4, r7
 80015a0:	461d      	mov	r5, r3
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 80015ae:	463b      	mov	r3, r7
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 ffa3 	bl	800b4fe <osThreadCreate>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <main+0x2e0>)
 80015bc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <main+0x284>)
 80015c0:	f005 faea 	bl	8006b98 <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80015c4:	f009 ff94 	bl	800b4f0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80015c8:	e7fe      	b.n	80015c8 <main+0x280>
 80015ca:	bf00      	nop
 80015cc:	200040e4 	.word	0x200040e4
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58020800 	.word	0x58020800
 80015d8:	20004530 	.word	0x20004530
 80015dc:	200047f8 	.word	0x200047f8
 80015e0:	20004334 	.word	0x20004334
 80015e4:	2000420c 	.word	0x2000420c
 80015e8:	20004200 	.word	0x20004200
 80015ec:	20004228 	.word	0x20004228
 80015f0:	200041fc 	.word	0x200041fc
 80015f4:	20003fec 	.word	0x20003fec
 80015f8:	200048f0 	.word	0x200048f0
 80015fc:	20004204 	.word	0x20004204
 8001600:	200045b8 	.word	0x200045b8
 8001604:	200047fc 	.word	0x200047fc
 8001608:	20003fe8 	.word	0x20003fe8
 800160c:	0800dd40 	.word	0x0800dd40
 8001610:	20004208 	.word	0x20004208
 8001614:	0800dd5c 	.word	0x0800dd5c
 8001618:	20003ff0 	.word	0x20003ff0
 800161c:	0800dd78 	.word	0x0800dd78
 8001620:	200046e0 	.word	0x200046e0
 8001624:	0800dd94 	.word	0x0800dd94
 8001628:	200046e4 	.word	0x200046e4

0800162c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b09c      	sub	sp, #112	; 0x70
 8001630:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	224c      	movs	r2, #76	; 0x4c
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f00c fb50 	bl	800dce0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2220      	movs	r2, #32
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f00c fb4a 	bl	800dce0 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800164c:	2002      	movs	r0, #2
 800164e:	f005 fab3 	bl	8006bb8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b35      	ldr	r3, [pc, #212]	; (800172c <SystemClock_Config+0x100>)
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	4a34      	ldr	r2, [pc, #208]	; (800172c <SystemClock_Config+0x100>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <SystemClock_Config+0x100>)
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <SystemClock_Config+0x104>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <SystemClock_Config+0x104>)
 8001672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <SystemClock_Config+0x104>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001684:	bf00      	nop
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <SystemClock_Config+0x104>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001692:	d1f8      	bne.n	8001686 <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <SystemClock_Config+0x108>)
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f023 0303 	bic.w	r3, r3, #3
 800169c:	4a25      	ldr	r2, [pc, #148]	; (8001734 <SystemClock_Config+0x108>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80016a4:	2309      	movs	r3, #9
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ae:	2301      	movs	r3, #1
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	2302      	movs	r3, #2
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80016ba:	2305      	movs	r3, #5
 80016bc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016ce:	2308      	movs	r3, #8
 80016d0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 faa4 	bl	8006c2c <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80016ea:	f000 fee7 	bl	80024bc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016ee:	233f      	movs	r3, #63	; 0x3f
 80016f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2303      	movs	r3, #3
 80016f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016fa:	2308      	movs	r3, #8
 80016fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016fe:	2340      	movs	r3, #64	; 0x40
 8001700:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2102      	movs	r1, #2
 8001714:	4618      	mov	r0, r3
 8001716:	f005 fe99 	bl	800744c <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8001720:	f000 fecc 	bl	80024bc <Error_Handler>
	}
}
 8001724:	bf00      	nop
 8001726:	3770      	adds	r7, #112	; 0x70
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	58000400 	.word	0x58000400
 8001730:	58024800 	.word	0x58024800
 8001734:	58024400 	.word	0x58024400

08001738 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0b0      	sub	sp, #192	; 0xc0
 800173c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	22bc      	movs	r2, #188	; 0xbc
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f00c facb 	bl	800dce0 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5
 800174a:	2303      	movs	r3, #3
 800174c:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_UART8 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 800174e:	2319      	movs	r3, #25
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001752:	23c0      	movs	r3, #192	; 0xc0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001756:	2302      	movs	r3, #2
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800175a:	2302      	movs	r3, #2
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 800175e:	2302      	movs	r3, #2
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001762:	2300      	movs	r3, #0
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001766:	2300      	movs	r3, #0
 8001768:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 800176e:	2302      	movs	r3, #2
 8001770:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8001772:	2310      	movs	r3, #16
 8001774:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f006 fa35 	bl	8007be8 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001784:	f000 fe9a 	bl	80024bc <Error_Handler>
	}
}
 8001788:	bf00      	nop
 800178a:	37c0      	adds	r7, #192	; 0xc0
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_IWDG1_Init+0x34>)
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <MX_IWDG1_Init+0x38>)
 8001798:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_IWDG1_Init+0x34>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_IWDG1_Init+0x34>)
 80017a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017a6:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_IWDG1_Init+0x34>)
 80017aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017ae:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_IWDG1_Init+0x34>)
 80017b2:	f005 f9a2 	bl	8006afa <HAL_IWDG_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 80017bc:	f000 fe7e 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200040e4 	.word	0x200040e4
 80017c8:	58004800 	.word	0x58004800

080017cc <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_UART4_Init+0x90>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <MX_UART4_Init+0x94>)
 80017d4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_UART4_Init+0x90>)
 80017d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017dc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_UART4_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_UART4_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_UART4_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_UART4_Init+0x90>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_UART4_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_UART4_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_UART4_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_UART4_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_UART4_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_UART4_Init+0x90>)
 8001816:	f008 f81b 	bl	8009850 <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 8001820:	f000 fe4c 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_UART4_Init+0x90>)
 8001828:	f009 fd80 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001832:	f000 fe43 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <MX_UART4_Init+0x90>)
 800183a:	f009 fdb5 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001844:	f000 fe3a 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_UART4_Init+0x90>)
 800184a:	f009 fd36 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8001854:	f000 fe32 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20004650 	.word	0x20004650
 8001860:	40004c00 	.word	0x40004c00

08001864 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <MX_UART5_Init+0x90>)
 800186a:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <MX_UART5_Init+0x94>)
 800186c:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_UART5_Init+0x90>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_UART5_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_UART5_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_UART5_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_UART5_Init+0x90>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_UART5_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_UART5_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_UART5_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_UART5_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <MX_UART5_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80018ac:	4811      	ldr	r0, [pc, #68]	; (80018f4 <MX_UART5_Init+0x90>)
 80018ae:	f007 ffcf 	bl	8009850 <HAL_UART_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_UART5_Init+0x58>
	{
		Error_Handler();
 80018b8:	f000 fe00 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 80018bc:	2100      	movs	r1, #0
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_UART5_Init+0x90>)
 80018c0:	f009 fd34 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_UART5_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80018ca:	f000 fdf7 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <MX_UART5_Init+0x90>)
 80018d2:	f009 fd69 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_UART5_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80018dc:	f000 fdee 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_UART5_Init+0x90>)
 80018e2:	f009 fcea 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80018ec:	f000 fde6 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200042a4 	.word	0x200042a4
 80018f8:	40005000 	.word	0x40005000

080018fc <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_UART8_Init+0x90>)
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <MX_UART8_Init+0x94>)
 8001904:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_UART8_Init+0x90>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_UART8_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_UART8_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_UART8_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_UART8_Init+0x90>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_UART8_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_UART8_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_UART8_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_UART8_Init+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_UART8_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <MX_UART8_Init+0x90>)
 8001946:	f007 ff83 	bl	8009850 <HAL_UART_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8001950:	f000 fdb4 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8001954:	2100      	movs	r1, #0
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_UART8_Init+0x90>)
 8001958:	f009 fce8 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001962:	f000 fdab 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8001966:	2100      	movs	r1, #0
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <MX_UART8_Init+0x90>)
 800196a:	f009 fd1d 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001974:	f000 fda2 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_UART8_Init+0x90>)
 800197a:	f009 fc9e 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 8001984:	f000 fd9a 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200045bc 	.word	0x200045bc
 8001990:	40007c00 	.word	0x40007c00

08001994 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 800199a:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <MX_USART1_UART_Init+0x94>)
 800199c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019dc:	4811      	ldr	r0, [pc, #68]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019de:	f007 ff37 	bl	8009850 <HAL_UART_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80019e8:	f000 fd68 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80019ec:	2100      	movs	r1, #0
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 80019f0:	f009 fc9c 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80019fa:	f000 fd5f 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80019fe:	2100      	movs	r1, #0
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 8001a02:	f009 fcd1 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001a0c:	f000 fd56 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_USART1_UART_Init+0x90>)
 8001a12:	f009 fc52 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001a1c:	f000 fd4e 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200044a0 	.word	0x200044a0
 8001a28:	40011000 	.word	0x40011000

08001a2c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_USART2_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a3c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a76:	f007 feeb 	bl	8009850 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001a80:	f000 fd1c 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a88:	f009 fc50 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001a92:	f000 fd13 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001a9a:	f009 fc85 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001aa4:	f000 fd0a 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_USART2_UART_Init+0x90>)
 8001aaa:	f009 fc06 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001ab4:	f000 fd02 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200046e8 	.word	0x200046e8
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001aca:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <MX_USART3_UART_Init+0x94>)
 8001acc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001ad0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001ad4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0c:	4811      	ldr	r0, [pc, #68]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001b0e:	f007 fe9f 	bl	8009850 <HAL_UART_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001b18:	f000 fcd0 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001b20:	f009 fc04 	bl	800b32c <HAL_UARTEx_SetTxFifoThreshold>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001b2a:	f000 fcc7 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001b32:	f009 fc39 	bl	800b3a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001b3c:	f000 fcbe 	bl	80024bc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_USART3_UART_Init+0x90>)
 8001b42:	f009 fbba 	bl	800b2ba <HAL_UARTEx_DisableFifoMode>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001b4c:	f000 fcb6 	bl	80024bc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000416c 	.word	0x2000416c
 8001b58:	40004800 	.word	0x40004800

08001b5c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <MX_DMA_Init+0xfc>)
 8001b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b68:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <MX_DMA_Init+0xfc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <MX_DMA_Init+0xfc>)
 8001b74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <MX_DMA_Init+0xfc>)
 8001b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b86:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <MX_DMA_Init+0xfc>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b90:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <MX_DMA_Init+0xfc>)
 8001b92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2105      	movs	r1, #5
 8001ba2:	200b      	movs	r0, #11
 8001ba4:	f001 ff40 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ba8:	200b      	movs	r0, #11
 8001baa:	f001 ff57 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	200c      	movs	r0, #12
 8001bb4:	f001 ff38 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bb8:	200c      	movs	r0, #12
 8001bba:	f001 ff4f 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	200d      	movs	r0, #13
 8001bc4:	f001 ff30 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bc8:	200d      	movs	r0, #13
 8001bca:	f001 ff47 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	200e      	movs	r0, #14
 8001bd4:	f001 ff28 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bd8:	200e      	movs	r0, #14
 8001bda:	f001 ff3f 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	200f      	movs	r0, #15
 8001be4:	f001 ff20 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001be8:	200f      	movs	r0, #15
 8001bea:	f001 ff37 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2010      	movs	r0, #16
 8001bf4:	f001 ff18 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bf8:	2010      	movs	r0, #16
 8001bfa:	f001 ff2f 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2105      	movs	r1, #5
 8001c02:	2011      	movs	r0, #17
 8001c04:	f001 ff10 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c08:	2011      	movs	r0, #17
 8001c0a:	f001 ff27 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	202f      	movs	r0, #47	; 0x2f
 8001c14:	f001 ff08 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001c18:	202f      	movs	r0, #47	; 0x2f
 8001c1a:	f001 ff1f 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2105      	movs	r1, #5
 8001c22:	2038      	movs	r0, #56	; 0x38
 8001c24:	f001 ff00 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c28:	2038      	movs	r0, #56	; 0x38
 8001c2a:	f001 ff17 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	2039      	movs	r0, #57	; 0x39
 8001c34:	f001 fef8 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001c38:	2039      	movs	r0, #57	; 0x39
 8001c3a:	f001 ff0f 	bl	8003a5c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2105      	movs	r1, #5
 8001c42:	203a      	movs	r0, #58	; 0x3a
 8001c44:	f001 fef0 	bl	8003a28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c48:	203a      	movs	r0, #58	; 0x3a
 8001c4a:	f001 ff07 	bl	8003a5c <HAL_NVIC_EnableIRQ>

}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	58024400 	.word	0x58024400

08001c5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca0:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	4a39      	ldr	r2, [pc, #228]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	4a32      	ldr	r2, [pc, #200]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <MX_GPIO_Init+0x140>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4824      	ldr	r0, [pc, #144]	; (8001da0 <MX_GPIO_Init+0x144>)
 8001d0e:	f004 fec1 	bl	8006a94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d18:	4822      	ldr	r0, [pc, #136]	; (8001da4 <MX_GPIO_Init+0x148>)
 8001d1a:	f004 febb 	bl	8006a94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d1e:	2310      	movs	r3, #16
 8001d20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	481a      	ldr	r0, [pc, #104]	; (8001da0 <MX_GPIO_Init+0x144>)
 8001d36:	f004 fce5 	bl	8006704 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4814      	ldr	r0, [pc, #80]	; (8001da0 <MX_GPIO_Init+0x144>)
 8001d4e:	f004 fcd9 	bl	8006704 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480e      	ldr	r0, [pc, #56]	; (8001da4 <MX_GPIO_Init+0x148>)
 8001d6c:	f004 fcca 	bl	8006704 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <MX_GPIO_Init+0x14c>)
 8001d8e:	f004 fcb9 	bl	8006704 <HAL_GPIO_Init>

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58021000 	.word	0x58021000
 8001da4:	58020800 	.word	0x58020800
 8001da8:	58020000 	.word	0x58020000

08001dac <OpenWrt_Delay>:
/* USER CODE BEGIN 4 */
/**
 * @brief  跳过OpenWrt开机启动信息(dmesg)
 */
void OpenWrt_Delay(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e014      	b.n	8001de2 <OpenWrt_Delay+0x36>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dbc:	480f      	ldr	r0, [pc, #60]	; (8001dfc <OpenWrt_Delay+0x50>)
 8001dbe:	f004 fe82 	bl	8006ac6 <HAL_GPIO_TogglePin>
		for (int j = 0; j < 1000; j++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	e005      	b.n	8001dd4 <OpenWrt_Delay+0x28>
		{
			osDelay(1);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f009 fbe4 	bl	800b596 <osDelay>
		for (int j = 0; j < 1000; j++)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	dbf5      	blt.n	8001dc8 <OpenWrt_Delay+0x1c>
	for (int i = 0; i < 60; i++)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3301      	adds	r3, #1
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b3b      	cmp	r3, #59	; 0x3b
 8001de6:	dde7      	ble.n	8001db8 <OpenWrt_Delay+0xc>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <OpenWrt_Delay+0x50>)
 8001df0:	f004 fe50 	bl	8006a94 <HAL_GPIO_WritePin>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	58020800 	.word	0x58020800

08001e00 <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		HAL_IWDG_Refresh(&hiwdg1);
 8001e08:	4801      	ldr	r0, [pc, #4]	; (8001e10 <CtrlTaskF+0x10>)
 8001e0a:	f004 fec5 	bl	8006b98 <HAL_IWDG_Refresh>
 8001e0e:	e7fb      	b.n	8001e08 <CtrlTaskF+0x8>
 8001e10:	200040e4 	.word	0x200040e4

08001e14 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001e1c:	f7ff f848 	bl	8000eb0 <InitGY39>
	InitP30();
 8001e20:	f7ff f9ac 	bl	800117c <InitP30>
	osDelay(100);
 8001e24:	2064      	movs	r0, #100	; 0x64
 8001e26:	f009 fbb6 	bl	800b596 <osDelay>
	ReceiveDeep();
 8001e2a:	f7ff f96f 	bl	800110c <ReceiveDeep>
	ReceiveGY39();
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f852 	bl	8000edc <ReceiveGY39>
	ReceiveWT931();
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f894 	bl	8000f68 <ReceiveWT931>
	ReceiveP30();
 8001e40:	463b      	mov	r3, r7
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f9cc 	bl	80011e0 <ReceiveP30>
	osDelay(100);
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	f009 fba4 	bl	800b596 <osDelay>
	DeepSensorData = ReceiveDeep();
 8001e4e:	f7ff f95d 	bl	800110c <ReceiveDeep>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <SensorTaskF+0x21c>)
 8001e56:	4611      	mov	r1, r2
 8001e58:	8019      	strh	r1, [r3, #0]
 8001e5a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001e5e:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001e60:	4c74      	ldr	r4, [pc, #464]	; (8002034 <SensorTaskF+0x220>)
 8001e62:	463b      	mov	r3, r7
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f839 	bl	8000edc <ReceiveGY39>
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001e74:	4c70      	ldr	r4, [pc, #448]	; (8002038 <SensorTaskF+0x224>)
 8001e76:	463b      	mov	r3, r7
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f875 	bl	8000f68 <ReceiveWT931>
 8001e7e:	4622      	mov	r2, r4
 8001e80:	463b      	mov	r3, r7
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	689d      	ldr	r5, [r3, #8]
 8001e88:	68dc      	ldr	r4, [r3, #12]
 8001e8a:	6010      	str	r0, [r2, #0]
 8001e8c:	6051      	str	r1, [r2, #4]
 8001e8e:	6095      	str	r5, [r2, #8]
 8001e90:	60d4      	str	r4, [r2, #12]
 8001e92:	6918      	ldr	r0, [r3, #16]
 8001e94:	6959      	ldr	r1, [r3, #20]
 8001e96:	6110      	str	r0, [r2, #16]
 8001e98:	6151      	str	r1, [r2, #20]
	P30SensorData = ReceiveP30();
 8001e9a:	4c68      	ldr	r4, [pc, #416]	; (800203c <SensorTaskF+0x228>)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f99e 	bl	80011e0 <ReceiveP30>
 8001ea4:	4622      	mov	r2, r4
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001eac:	e882 0003 	stmia.w	r2, {r0, r1}
	osDelay(100);
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	f009 fb70 	bl	800b596 <osDelay>
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001eb6:	4b62      	ldr	r3, [pc, #392]	; (8002040 <SensorTaskF+0x22c>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f009 fe02 	bl	800bac8 <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001ec4:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <SensorTaskF+0x230>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f009 fdfb 	bl	800bac8 <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <SensorTaskF+0x234>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	f009 fdf4 	bl	800bac8 <xQueueGenericSend>
	xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	; (800204c <SensorTaskF+0x238>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f009 fded 	bl	800bac8 <xQueueGenericSend>
	vTaskSuspend(SensorTaskHandle);
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <SensorTaskF+0x23c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00a fb4a 	bl	800c58c <vTaskSuspend>
	osDelay(1);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f009 fb4c 	bl	800b596 <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001efe:	4b55      	ldr	r3, [pc, #340]	; (8002054 <SensorTaskF+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f009 ff6b 	bl	800bde0 <xQueueSemaphoreTake>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d118      	bne.n	8001f42 <SensorTaskF+0x12e>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001f10:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <SensorTaskF+0x22c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2101      	movs	r1, #1
 8001f16:	4618      	mov	r0, r3
 8001f18:	f009 ff62 	bl	800bde0 <xQueueSemaphoreTake>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10f      	bne.n	8001f42 <SensorTaskF+0x12e>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001f22:	f7ff f8f3 	bl	800110c <ReceiveDeep>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <SensorTaskF+0x21c>)
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	8019      	strh	r1, [r3, #0]
 8001f2e:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001f32:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001f34:	4b42      	ldr	r3, [pc, #264]	; (8002040 <SensorTaskF+0x22c>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f009 fdc3 	bl	800bac8 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,
 8001f42:	4b45      	ldr	r3, [pc, #276]	; (8002058 <SensorTaskF+0x244>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f009 ff49 	bl	800bde0 <xQueueSemaphoreTake>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d122      	bne.n	8001f9a <SensorTaskF+0x186>
				0) == pdTRUE)
		{

			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <SensorTaskF+0x234>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f009 ff40 	bl	800bde0 <xQueueSemaphoreTake>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d119      	bne.n	8001f9a <SensorTaskF+0x186>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8001f66:	4c34      	ldr	r4, [pc, #208]	; (8002038 <SensorTaskF+0x224>)
 8001f68:	463b      	mov	r3, r7
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fffc 	bl	8000f68 <ReceiveWT931>
 8001f70:	4622      	mov	r2, r4
 8001f72:	463b      	mov	r3, r7
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	689d      	ldr	r5, [r3, #8]
 8001f7a:	68dc      	ldr	r4, [r3, #12]
 8001f7c:	6010      	str	r0, [r2, #0]
 8001f7e:	6051      	str	r1, [r2, #4]
 8001f80:	6095      	str	r5, [r2, #8]
 8001f82:	60d4      	str	r4, [r2, #12]
 8001f84:	6918      	ldr	r0, [r3, #16]
 8001f86:	6959      	ldr	r1, [r3, #20]
 8001f88:	6110      	str	r0, [r2, #16]
 8001f8a:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <SensorTaskF+0x234>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	f009 fd97 	bl	800bac8 <xQueueGenericSend>
			}
		}
		//收取温湿度数�??????
		if (xSemaphoreTake(GY39TransFinishHandle,
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <SensorTaskF+0x248>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f009 ff1d 	bl	800bde0 <xQueueSemaphoreTake>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d119      	bne.n	8001fe0 <SensorTaskF+0x1cc>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <SensorTaskF+0x230>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f009 ff14 	bl	800bde0 <xQueueSemaphoreTake>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d110      	bne.n	8001fe0 <SensorTaskF+0x1cc>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001fbe:	4c1d      	ldr	r4, [pc, #116]	; (8002034 <SensorTaskF+0x220>)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe ff8a 	bl	8000edc <ReceiveGY39>
 8001fc8:	463b      	mov	r3, r7
 8001fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <SensorTaskF+0x230>)
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	f009 fd74 	bl	800bac8 <xQueueGenericSend>
			}
		}
		//收取声呐数据
		if (xSemaphoreTake(P30TransFinishHandle,0) == pdTRUE)
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <SensorTaskF+0x24c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f009 fefa 	bl	800bde0 <xQueueSemaphoreTake>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d11a      	bne.n	8002028 <SensorTaskF+0x214>
		{
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <SensorTaskF+0x238>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 fef1 	bl	800bde0 <xQueueSemaphoreTake>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d111      	bne.n	8002028 <SensorTaskF+0x214>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				P30SensorData = ReceiveP30();
 8002004:	4c0d      	ldr	r4, [pc, #52]	; (800203c <SensorTaskF+0x228>)
 8002006:	463b      	mov	r3, r7
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f8e9 	bl	80011e0 <ReceiveP30>
 800200e:	4622      	mov	r2, r4
 8002010:	463b      	mov	r3, r7
 8002012:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002016:	e882 0003 	stmia.w	r2, {r0, r1}
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <SensorTaskF+0x238>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	f009 fd50 	bl	800bac8 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8002028:	480e      	ldr	r0, [pc, #56]	; (8002064 <SensorTaskF+0x250>)
 800202a:	f004 fdb5 	bl	8006b98 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 800202e:	e766      	b.n	8001efe <SensorTaskF+0xea>
 8002030:	2000464c 	.word	0x2000464c
 8002034:	20004534 	.word	0x20004534
 8002038:	20004210 	.word	0x20004210
 800203c:	200047f0 	.word	0x200047f0
 8002040:	20004200 	.word	0x20004200
 8002044:	2000420c 	.word	0x2000420c
 8002048:	20004334 	.word	0x20004334
 800204c:	200041fc 	.word	0x200041fc
 8002050:	20003ff0 	.word	0x20003ff0
 8002054:	200047fc 	.word	0x200047fc
 8002058:	200048f0 	.word	0x200048f0
 800205c:	20004204 	.word	0x20004204
 8002060:	20003fe8 	.word	0x20003fe8
 8002064:	200040e4 	.word	0x200040e4

08002068 <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b0b6      	sub	sp, #216	; 0xd8
 800206c:	af0a      	add	r7, sp, #40	; 0x28
 800206e:	63f8      	str	r0, [r7, #60]	; 0x3c
	/* USER CODE BEGIN UtBF */
	DownDataDef UptoBaseData =
 8002070:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002074:	2234      	movs	r2, #52	; 0x34
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00b fe31 	bl	800dce0 <memset>
	{ 0 };
	DownDataDef temp_UptoBaseData =
 800207e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002082:	2234      	movs	r2, #52	; 0x34
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f00b fe2a 	bl	800dce0 <memset>
	{ 0 };
	u8 DIPFlag = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	u16 DIPStartNum = 0; //PID定向定深预期�???????????
 8002092:	2300      	movs	r3, #0
 8002094:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

	OpenWrt_Delay(); //跳过openwrt�?机时�?
 8002098:	f7ff fe88 	bl	8001dac <OpenWrt_Delay>

	CaptureDownData();
 800209c:	463b      	mov	r3, r7
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa9a 	bl	80005d8 <CaptureDownData>
	osDelay(100);
 80020a4:	2064      	movs	r0, #100	; 0x64
 80020a6:	f009 fa76 	bl	800b596 <osDelay>
	//打开串口接收
	UptoBaseData = CaptureDownData();
 80020aa:	463b      	mov	r3, r7
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa93 	bl	80005d8 <CaptureDownData>
 80020b2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80020b6:	463d      	mov	r5, r7
 80020b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	6023      	str	r3, [r4, #0]
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80020c8:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <UtBF+0x190>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	f009 fcf9 	bl	800bac8 <xQueueGenericSend>
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <UtBF+0x194>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	f009 fcf2 	bl	800bac8 <xQueueGenericSend>
	vTaskResume(BasetoUpTaskHandle);
 80020e4:	4b46      	ldr	r3, [pc, #280]	; (8002200 <UtBF+0x198>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00a fb13 	bl	800c714 <vTaskResume>
	vTaskResume(SensorTaskHandle);
 80020ee:	4b45      	ldr	r3, [pc, #276]	; (8002204 <UtBF+0x19c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f00a fb0e 	bl	800c714 <vTaskResume>
	osDelay(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f009 fa4c 	bl	800b596 <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//收取上位机指�?????
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 80020fe:	4b42      	ldr	r3, [pc, #264]	; (8002208 <UtBF+0x1a0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f009 fe6b 	bl	800bde0 <xQueueSemaphoreTake>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d16e      	bne.n	80021ee <UtBF+0x186>
				0) == pdTRUE)
		{
//			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
//					portTICK_PERIOD_MS) == pdTRUE)
//			{
			UptoBaseData = CaptureDownData();
 8002110:	463b      	mov	r3, r7
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa60 	bl	80005d8 <CaptureDownData>
 8002118:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800211c:	463d      	mov	r5, r7
 800211e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212a:	682b      	ldr	r3, [r5, #0]
 800212c:	6023      	str	r3, [r4, #0]
//				xSemaphoreGive(UptoBaseDataRWFlagHandle);
//			}

			//根据控制位判断是否执行自主定向定�??????
			if (UptoBaseData.Mode & 0x02 == 0x02) //0b0010,使用定向模式
 800212e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <UtBF+0x100>
			{
				if (DIPFlag == 0)
 800213a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <UtBF+0xe8>
				{
					DIPFlag = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					DIPStartNum = WT931SensorData.EulNum[2];
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <UtBF+0x1a4>)
 800214a:	8a1b      	ldrh	r3, [r3, #16]
 800214c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
				}
				UptoBaseData.StraightNum = SpecialMovePID(2, DIPStartNum,
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <UtBF+0x1a4>)
 8002152:	8a1a      	ldrh	r2, [r3, #16]
 8002154:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002158:	4619      	mov	r1, r3
 800215a:	2002      	movs	r0, #2
 800215c:	f7fe fdac 	bl	8000cb8 <SpecialMovePID>
 8002160:	4603      	mov	r3, r0
 8002162:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002166:	e01f      	b.n	80021a8 <UtBF+0x140>
						WT931SensorData.EulNum[2]); //PID定向
			}
			else if (UptoBaseData.Mode & 0x04 == 0x04) //0b0100,使用定深模式
 8002168:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d016      	beq.n	80021a2 <UtBF+0x13a>
			{
				if (DIPFlag == 0)
 8002174:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <UtBF+0x122>
				{
					DIPFlag = 1;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					DIPStartNum = DeepSensorData.WaterDepth;
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <UtBF+0x1a8>)
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
				}
				UptoBaseData.VerticalNum = SpecialMovePID(4, DIPStartNum,
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <UtBF+0x1a8>)
 800218c:	885a      	ldrh	r2, [r3, #2]
 800218e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002192:	4619      	mov	r1, r3
 8002194:	2004      	movs	r0, #4
 8002196:	f7fe fd8f 	bl	8000cb8 <SpecialMovePID>
 800219a:	4603      	mov	r3, r0
 800219c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80021a0:	e002      	b.n	80021a8 <UtBF+0x140>
						DeepSensorData.WaterDepth); //PID定深
			}
			else
			{
				DIPFlag = 0; //不开启定向定�??
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			}

			//下传指令
			if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <UtBF+0x194>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f009 fe16 	bl	800bde0 <xQueueSemaphoreTake>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d119      	bne.n	80021ee <UtBF+0x186>
					portTICK_PERIOD_MS) == pdTRUE)
			{
//				temp_UptoBaseData = UptoBaseData;
//				SendDownData(temp_UptoBaseData);
				SendDownData(UptoBaseData);
 80021ba:	466d      	mov	r5, sp
 80021bc:	f107 0488 	add.w	r4, r7, #136	; 0x88
 80021c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	602b      	str	r3, [r5, #0]
 80021cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d2:	f7fe fbb1 	bl	8000938 <SendDownData>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021da:	480e      	ldr	r0, [pc, #56]	; (8002214 <UtBF+0x1ac>)
 80021dc:	f004 fc73 	bl	8006ac6 <HAL_GPIO_TogglePin>
				xSemaphoreGive(BasetoUpDataRWFlagHandle);
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <UtBF+0x194>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	f009 fc6d 	bl	800bac8 <xQueueGenericSend>
			}
		}

		HAL_IWDG_Refresh(&hiwdg1);
 80021ee:	480a      	ldr	r0, [pc, #40]	; (8002218 <UtBF+0x1b0>)
 80021f0:	f004 fcd2 	bl	8006b98 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 80021f4:	e783      	b.n	80020fe <UtBF+0x96>
 80021f6:	bf00      	nop
 80021f8:	20004530 	.word	0x20004530
 80021fc:	200047f8 	.word	0x200047f8
 8002200:	200046e4 	.word	0x200046e4
 8002204:	20003ff0 	.word	0x20003ff0
 8002208:	20003fec 	.word	0x20003fec
 800220c:	20004210 	.word	0x20004210
 8002210:	2000464c 	.word	0x2000464c
 8002214:	58020800 	.word	0x58020800
 8002218:	200040e4 	.word	0x200040e4

0800221c <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b0bc      	sub	sp, #240	; 0xf0
 8002220:	af08      	add	r7, sp, #32
 8002222:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN BtUF */
	//置为1的时候表示推进器控制�???????????
	//置为0的时候表示主控仓
	UpDataDef Power_BasetoUpData =
 8002224:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002228:	2230      	movs	r2, #48	; 0x30
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f00b fd57 	bl	800dce0 <memset>
	{ 0 };
	UpDataDef temp_Power_BasetoUpData =
 8002232:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002236:	2230      	movs	r2, #48	; 0x30
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f00b fd50 	bl	800dce0 <memset>
	{ 0 };
	UpDataDef BasetoUpData =
 8002240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002244:	2230      	movs	r2, #48	; 0x30
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f00b fd49 	bl	800dce0 <memset>
	{ 0 };
	u8 SensorCarbin = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	vTaskSuspend(BasetoUpTaskHandle);
 8002254:	4b83      	ldr	r3, [pc, #524]	; (8002464 <BtUF+0x248>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f00a f997 	bl	800c58c <vTaskSuspend>
	CaptureUpData();
 800225e:	463b      	mov	r3, r7
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fc09 	bl	8000a78 <CaptureUpData>
	osDelay(100);
 8002266:	2064      	movs	r0, #100	; 0x64
 8002268:	f009 f995 	bl	800b596 <osDelay>
	BasetoUpData = CaptureUpData();
 800226c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fc01 	bl	8000a78 <CaptureUpData>
	/* Infinite loop */
	for (;;)
	{
		if (SensorCarbin == 1) //发送电源仓数据
 8002276:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800227a:	2b01      	cmp	r3, #1
 800227c:	d133      	bne.n	80022e6 <BtUF+0xca>
		{
			//单独接收下位仓回传的数据
			if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 800227e:	4b7a      	ldr	r3, [pc, #488]	; (8002468 <BtUF+0x24c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f009 fdab 	bl	800bde0 <xQueueSemaphoreTake>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d126      	bne.n	80022de <BtUF+0xc2>
					0) == pdTRUE)
			{
//				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
//						portTICK_PERIOD_MS) == pdTRUE)
//				{
				Power_BasetoUpData = CaptureUpData();
 8002290:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fbef 	bl	8000a78 <CaptureUpData>
//					temp_Power_BasetoUpData = Power_BasetoUpData;
				//上传数据
//					if (temp_Power_BasetoUpData.CabinNum == 1)
//					{
				if (Power_BasetoUpData.CabinNum == 1)
 800229a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11d      	bne.n	80022de <BtUF+0xc2>
				{
					if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 80022a2:	4b72      	ldr	r3, [pc, #456]	; (800246c <BtUF+0x250>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f009 fd99 	bl	800bde0 <xQueueSemaphoreTake>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d114      	bne.n	80022de <BtUF+0xc2>
							portTICK_PERIOD_MS) == pdTRUE)
					{
//							SendUpData(temp_Power_BasetoUpData);
						SendUpData(Power_BasetoUpData);
 80022b4:	466d      	mov	r5, sp
 80022b6:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80022c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022cc:	f7fe fa28 	bl	8000720 <SendUpData>
						xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80022d0:	4b66      	ldr	r3, [pc, #408]	; (800246c <BtUF+0x250>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	f009 fbf5 	bl	800bac8 <xQueueGenericSend>
					}
				}
//					xSemaphoreGive(BasetoUpDataRWFlagHandle);
//				}
			}
			SensorCarbin = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80022e4:	e0ba      	b.n	800245c <BtUF+0x240>
		}
		else if (SensorCarbin == 0)	//发�?�主控仓数据
 80022e6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 80b6 	bne.w	800245c <BtUF+0x240>
		{
			//汇�?�本仓传感器数据
			//仓位数据
			BasetoUpData.CabinNum = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			//漏水�??????�??????
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	485d      	ldr	r0, [pc, #372]	; (8002470 <BtUF+0x254>)
 80022fa:	f004 fbb3 	bl	8006a64 <HAL_GPIO_ReadPin>
 80022fe:	4603      	mov	r3, r0
			GPIO_PIN_6) << 1;
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 8002304:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			//九轴数据

			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8002308:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <BtUF+0x258>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	4618      	mov	r0, r3
 8002310:	f009 fd66 	bl	800bde0 <xQueueSemaphoreTake>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d136      	bne.n	8002388 <BtUF+0x16c>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 800231a:	4b57      	ldr	r3, [pc, #348]	; (8002478 <BtUF+0x25c>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 8002322:	4b55      	ldr	r3, [pc, #340]	; (8002478 <BtUF+0x25c>)
 8002324:	885b      	ldrh	r3, [r3, #2]
 8002326:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 800232a:	4b53      	ldr	r3, [pc, #332]	; (8002478 <BtUF+0x25c>)
 800232c:	889b      	ldrh	r3, [r3, #4]
 800232e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <BtUF+0x25c>)
 8002334:	88db      	ldrh	r3, [r3, #6]
 8002336:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 800233a:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <BtUF+0x25c>)
 800233c:	891b      	ldrh	r3, [r3, #8]
 800233e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 8002342:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <BtUF+0x25c>)
 8002344:	895b      	ldrh	r3, [r3, #10]
 8002346:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 800234a:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <BtUF+0x25c>)
 800234c:	899b      	ldrh	r3, [r3, #12]
 800234e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <BtUF+0x25c>)
 8002354:	89db      	ldrh	r3, [r3, #14]
 8002356:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <BtUF+0x25c>)
 800235c:	8a1b      	ldrh	r3, [r3, #16]
 800235e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 8002362:	4b45      	ldr	r3, [pc, #276]	; (8002478 <BtUF+0x25c>)
 8002364:	8a5b      	ldrh	r3, [r3, #18]
 8002366:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <BtUF+0x25c>)
 800236c:	8a9b      	ldrh	r3, [r3, #20]
 800236e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <BtUF+0x25c>)
 8002374:	8adb      	ldrh	r3, [r3, #22]
 8002376:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <BtUF+0x258>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	f009 fba0 	bl	800bac8 <xQueueGenericSend>
			}
			//温湿度大气压数据
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <BtUF+0x260>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	4618      	mov	r0, r3
 8002390:	f009 fd26 	bl	800bde0 <xQueueSemaphoreTake>
 8002394:	4603      	mov	r3, r0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d110      	bne.n	80023bc <BtUF+0x1a0>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.CabinBaro = GY39SensorData.Baro;
 800239a:	4b39      	ldr	r3, [pc, #228]	; (8002480 <BtUF+0x264>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	643b      	str	r3, [r7, #64]	; 0x40
				BasetoUpData.CabinHum = GY39SensorData.Hum;
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <BtUF+0x264>)
 80023a2:	891b      	ldrh	r3, [r3, #8]
 80023a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <BtUF+0x264>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <BtUF+0x260>)
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	f009 fb86 	bl	800bac8 <xQueueGenericSend>
			}
			//水深水温数据
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <BtUF+0x268>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 fd0c 	bl	800bde0 <xQueueSemaphoreTake>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10e      	bne.n	80023ec <BtUF+0x1d0>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <BtUF+0x26c>)
 80023d0:	885b      	ldrh	r3, [r3, #2]
 80023d2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
				BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <BtUF+0x26c>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <BtUF+0x268>)
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	f009 fb6e 	bl	800bac8 <xQueueGenericSend>
			}
			//声呐数据
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <BtUF+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f009 fcf4 	bl	800bde0 <xQueueSemaphoreTake>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10d      	bne.n	800241a <BtUF+0x1fe>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.DepthToBottom = P30SensorData.DepthToBottom;
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <BtUF+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	667b      	str	r3, [r7, #100]	; 0x64
				BasetoUpData.Confidence = P30SensorData.Confidence;
 8002404:	4b22      	ldr	r3, [pc, #136]	; (8002490 <BtUF+0x274>)
 8002406:	889b      	ldrh	r3, [r3, #4]
 8002408:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <BtUF+0x270>)
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	f009 fb57 	bl	800bac8 <xQueueGenericSend>
			}
			//上传数据
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <BtUF+0x250>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f009 fcdd 	bl	800bde0 <xQueueSemaphoreTake>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d114      	bne.n	8002456 <BtUF+0x23a>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				SendUpData(BasetoUpData);
 800242c:	466d      	mov	r5, sp
 800242e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8002432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002436:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800243a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800243e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002444:	f7fe f96c 	bl	8000720 <SendUpData>
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <BtUF+0x250>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	f009 fb39 	bl	800bac8 <xQueueGenericSend>
			}
			SensorCarbin = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		HAL_IWDG_Refresh(&hiwdg1);
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <BtUF+0x278>)
 800245e:	f004 fb9b 	bl	8006b98 <HAL_IWDG_Refresh>
		if (SensorCarbin == 1) //发送电源仓数据
 8002462:	e708      	b.n	8002276 <BtUF+0x5a>
 8002464:	200046e4 	.word	0x200046e4
 8002468:	200045b8 	.word	0x200045b8
 800246c:	20004530 	.word	0x20004530
 8002470:	58021000 	.word	0x58021000
 8002474:	20004334 	.word	0x20004334
 8002478:	20004210 	.word	0x20004210
 800247c:	2000420c 	.word	0x2000420c
 8002480:	20004534 	.word	0x20004534
 8002484:	20004200 	.word	0x20004200
 8002488:	2000464c 	.word	0x2000464c
 800248c:	200041fc 	.word	0x200041fc
 8002490:	200047f0 	.word	0x200047f0
 8002494:	200040e4 	.word	0x200040e4

08002498 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80024aa:	f001 f9d9 	bl	8003860 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40001000 	.word	0x40001000

080024bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024c4:	e7fe      	b.n	80024c4 <Error_Handler+0x8>
	...

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_MspInit+0x38>)
 80024d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_MspInit+0x38>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_MspInit+0x38>)
 80024e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	210f      	movs	r1, #15
 80024f0:	f06f 0001 	mvn.w	r0, #1
 80024f4:	f001 fa98 	bl	8003a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	58024400 	.word	0x58024400

08002504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b094      	sub	sp, #80	; 0x50
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a96      	ldr	r2, [pc, #600]	; (800277c <HAL_UART_MspInit+0x278>)
 8002522:	4293      	cmp	r3, r2
 8002524:	f040 8091 	bne.w	800264a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002528:	4b95      	ldr	r3, [pc, #596]	; (8002780 <HAL_UART_MspInit+0x27c>)
 800252a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800252e:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002534:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002538:	4b91      	ldr	r3, [pc, #580]	; (8002780 <HAL_UART_MspInit+0x27c>)
 800253a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800253e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	4a8c      	ldr	r2, [pc, #560]	; (8002780 <HAL_UART_MspInit+0x27c>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002556:	4b8a      	ldr	r3, [pc, #552]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002564:	2303      	movs	r3, #3
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002574:	2308      	movs	r3, #8
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800257c:	4619      	mov	r1, r3
 800257e:	4881      	ldr	r0, [pc, #516]	; (8002784 <HAL_UART_MspInit+0x280>)
 8002580:	f004 f8c0 	bl	8006704 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002584:	4b80      	ldr	r3, [pc, #512]	; (8002788 <HAL_UART_MspInit+0x284>)
 8002586:	4a81      	ldr	r2, [pc, #516]	; (800278c <HAL_UART_MspInit+0x288>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_UART_MspInit+0x284>)
 800258c:	223f      	movs	r2, #63	; 0x3f
 800258e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002590:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <HAL_UART_MspInit+0x284>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002596:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_UART_MspInit+0x284>)
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800259c:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_UART_MspInit+0x284>)
 800259e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025a4:	4b78      	ldr	r3, [pc, #480]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025aa:	4b77      	ldr	r3, [pc, #476]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025b6:	4b74      	ldr	r3, [pc, #464]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025bc:	4b72      	ldr	r3, [pc, #456]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80025c2:	4871      	ldr	r0, [pc, #452]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025c4:	f001 fa58 	bl	8003a78 <HAL_DMA_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025ce:	f7ff ff75 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a6c      	ldr	r2, [pc, #432]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80025d8:	4a6b      	ldr	r2, [pc, #428]	; (8002788 <HAL_UART_MspInit+0x284>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 80025de:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_UART_MspInit+0x28c>)
 80025e0:	4a6c      	ldr	r2, [pc, #432]	; (8002794 <HAL_UART_MspInit+0x290>)
 80025e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_UART_MspInit+0x28c>)
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ea:	4b69      	ldr	r3, [pc, #420]	; (8002790 <HAL_UART_MspInit+0x28c>)
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f0:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_UART_MspInit+0x28c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_UART_MspInit+0x28c>)
 80025f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fe:	4b64      	ldr	r3, [pc, #400]	; (8002790 <HAL_UART_MspInit+0x28c>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002604:	4b62      	ldr	r3, [pc, #392]	; (8002790 <HAL_UART_MspInit+0x28c>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800260a:	4b61      	ldr	r3, [pc, #388]	; (8002790 <HAL_UART_MspInit+0x28c>)
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002610:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <HAL_UART_MspInit+0x28c>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002616:	4b5e      	ldr	r3, [pc, #376]	; (8002790 <HAL_UART_MspInit+0x28c>)
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800261c:	485c      	ldr	r0, [pc, #368]	; (8002790 <HAL_UART_MspInit+0x28c>)
 800261e:	f001 fa2b 	bl	8003a78 <HAL_DMA_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002628:	f7ff ff48 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_UART_MspInit+0x28c>)
 8002630:	679a      	str	r2, [r3, #120]	; 0x78
 8002632:	4a57      	ldr	r2, [pc, #348]	; (8002790 <HAL_UART_MspInit+0x28c>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2105      	movs	r1, #5
 800263c:	2034      	movs	r0, #52	; 0x34
 800263e:	f001 f9f3 	bl	8003a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002642:	2034      	movs	r0, #52	; 0x34
 8002644:	f001 fa0a 	bl	8003a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002648:	e2fc      	b.n	8002c44 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==UART5)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a52      	ldr	r2, [pc, #328]	; (8002798 <HAL_UART_MspInit+0x294>)
 8002650:	4293      	cmp	r3, r2
 8002652:	f040 80ad 	bne.w	80027b0 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800265c:	4a48      	ldr	r2, [pc, #288]	; (8002780 <HAL_UART_MspInit+0x27c>)
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800266c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	4a41      	ldr	r2, [pc, #260]	; (8002780 <HAL_UART_MspInit+0x27c>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002684:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_UART_MspInit+0x27c>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002692:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80026a4:	230e      	movs	r3, #14
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026ac:	4619      	mov	r1, r3
 80026ae:	483b      	ldr	r0, [pc, #236]	; (800279c <HAL_UART_MspInit+0x298>)
 80026b0:	f004 f828 	bl	8006704 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 80026b4:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_UART_MspInit+0x2a0>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026bc:	2241      	movs	r2, #65	; 0x41
 80026be:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c0:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026cc:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026da:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80026e0:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026e6:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80026f2:	482b      	ldr	r0, [pc, #172]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 80026f4:	f001 f9c0 	bl	8003a78 <HAL_DMA_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80026fe:	f7ff fedd 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 8002706:	67da      	str	r2, [r3, #124]	; 0x7c
 8002708:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <HAL_UART_MspInit+0x29c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_UART_MspInit+0x2a8>)
 8002712:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002716:	2242      	movs	r2, #66	; 0x42
 8002718:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 800271c:	2240      	movs	r2, #64	; 0x40
 800271e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002720:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 800273c:	2200      	movs	r2, #0
 800273e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002742:	2200      	movs	r2, #0
 8002744:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002748:	2200      	movs	r2, #0
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800274c:	4816      	ldr	r0, [pc, #88]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 800274e:	f001 f993 	bl	8003a78 <HAL_DMA_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002758:	f7ff feb0 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002760:	679a      	str	r2, [r3, #120]	; 0x78
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_UART_MspInit+0x2a4>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	2105      	movs	r1, #5
 800276c:	2035      	movs	r0, #53	; 0x35
 800276e:	f001 f95b 	bl	8003a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002772:	2035      	movs	r0, #53	; 0x35
 8002774:	f001 f972 	bl	8003a5c <HAL_NVIC_EnableIRQ>
}
 8002778:	e264      	b.n	8002c44 <HAL_UART_MspInit+0x740>
 800277a:	bf00      	nop
 800277c:	40004c00 	.word	0x40004c00
 8002780:	58024400 	.word	0x58024400
 8002784:	58020000 	.word	0x58020000
 8002788:	20003ff4 	.word	0x20003ff4
 800278c:	40020088 	.word	0x40020088
 8002790:	20004800 	.word	0x20004800
 8002794:	400200a0 	.word	0x400200a0
 8002798:	40005000 	.word	0x40005000
 800279c:	58020400 	.word	0x58020400
 80027a0:	20004778 	.word	0x20004778
 80027a4:	40020070 	.word	0x40020070
 80027a8:	20004878 	.word	0x20004878
 80027ac:	40020440 	.word	0x40020440
  else if(huart->Instance==UART8)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a96      	ldr	r2, [pc, #600]	; (8002a10 <HAL_UART_MspInit+0x50c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	f040 8091 	bne.w	80028de <HAL_UART_MspInit+0x3da>
    __HAL_RCC_UART8_CLK_ENABLE();
 80027bc:	4b95      	ldr	r3, [pc, #596]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80027be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c2:	4a94      	ldr	r2, [pc, #592]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80027c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027cc:	4b91      	ldr	r3, [pc, #580]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80027ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027da:	4b8e      	ldr	r3, [pc, #568]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e0:	4a8c      	ldr	r2, [pc, #560]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80027e2:	f043 0310 	orr.w	r3, r3, #16
 80027e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ea:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027f8:	2303      	movs	r3, #3
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002808:	2308      	movs	r3, #8
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800280c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002810:	4619      	mov	r1, r3
 8002812:	4881      	ldr	r0, [pc, #516]	; (8002a18 <HAL_UART_MspInit+0x514>)
 8002814:	f003 ff76 	bl	8006704 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_UART_MspInit+0x518>)
 800281a:	4a81      	ldr	r2, [pc, #516]	; (8002a20 <HAL_UART_MspInit+0x51c>)
 800281c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800281e:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002820:	2251      	movs	r2, #81	; 0x51
 8002822:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <HAL_UART_MspInit+0x518>)
 800282c:	2200      	movs	r2, #0
 800282e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002836:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002838:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_UART_MspInit+0x518>)
 800283a:	2200      	movs	r2, #0
 800283c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283e:	4b77      	ldr	r3, [pc, #476]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002844:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800284a:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <HAL_UART_MspInit+0x518>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002850:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002852:	2200      	movs	r2, #0
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002856:	4871      	ldr	r0, [pc, #452]	; (8002a1c <HAL_UART_MspInit+0x518>)
 8002858:	f001 f90e 	bl	8003a78 <HAL_DMA_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_UART_MspInit+0x362>
      Error_Handler();
 8002862:	f7ff fe2b 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a6c      	ldr	r2, [pc, #432]	; (8002a1c <HAL_UART_MspInit+0x518>)
 800286a:	67da      	str	r2, [r3, #124]	; 0x7c
 800286c:	4a6b      	ldr	r2, [pc, #428]	; (8002a1c <HAL_UART_MspInit+0x518>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 8002872:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_UART_MspInit+0x520>)
 8002874:	4a6c      	ldr	r2, [pc, #432]	; (8002a28 <HAL_UART_MspInit+0x524>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_UART_MspInit+0x520>)
 800287a:	2252      	movs	r2, #82	; 0x52
 800287c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800287e:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_UART_MspInit+0x520>)
 8002880:	2240      	movs	r2, #64	; 0x40
 8002882:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_UART_MspInit+0x520>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800288a:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_UART_MspInit+0x520>)
 800288c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002890:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_UART_MspInit+0x520>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002898:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_UART_MspInit+0x520>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_UART_MspInit+0x520>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_UART_MspInit+0x520>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028aa:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_UART_MspInit+0x520>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80028b0:	485c      	ldr	r0, [pc, #368]	; (8002a24 <HAL_UART_MspInit+0x520>)
 80028b2:	f001 f8e1 	bl	8003a78 <HAL_DMA_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_MspInit+0x3bc>
      Error_Handler();
 80028bc:	f7ff fdfe 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_UART_MspInit+0x520>)
 80028c4:	679a      	str	r2, [r3, #120]	; 0x78
 80028c6:	4a57      	ldr	r2, [pc, #348]	; (8002a24 <HAL_UART_MspInit+0x520>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2105      	movs	r1, #5
 80028d0:	2053      	movs	r0, #83	; 0x53
 80028d2:	f001 f8a9 	bl	8003a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80028d6:	2053      	movs	r0, #83	; 0x53
 80028d8:	f001 f8c0 	bl	8003a5c <HAL_NVIC_EnableIRQ>
}
 80028dc:	e1b2      	b.n	8002c44 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a52      	ldr	r2, [pc, #328]	; (8002a2c <HAL_UART_MspInit+0x528>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	f040 80ad 	bne.w	8002a44 <HAL_UART_MspInit+0x540>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80028ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80028f2:	f043 0310 	orr.w	r3, r3, #16
 80028f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_UART_MspInit+0x510>)
 80028fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002908:	4b42      	ldr	r3, [pc, #264]	; (8002a14 <HAL_UART_MspInit+0x510>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290e:	4a41      	ldr	r2, [pc, #260]	; (8002a14 <HAL_UART_MspInit+0x510>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002918:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_UART_MspInit+0x510>)
 800291a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002938:	2304      	movs	r3, #4
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002940:	4619      	mov	r1, r3
 8002942:	483b      	ldr	r0, [pc, #236]	; (8002a30 <HAL_UART_MspInit+0x52c>)
 8002944:	f003 fede 	bl	8006704 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_UART_MspInit+0x530>)
 800294a:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <HAL_UART_MspInit+0x534>)
 800294c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002950:	2229      	movs	r2, #41	; 0x29
 8002952:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002954:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800295a:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_UART_MspInit+0x530>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002966:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002968:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <HAL_UART_MspInit+0x530>)
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002974:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_UART_MspInit+0x530>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002986:	482b      	ldr	r0, [pc, #172]	; (8002a34 <HAL_UART_MspInit+0x530>)
 8002988:	f001 f876 	bl	8003a78 <HAL_DMA_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_UART_MspInit+0x492>
      Error_Handler();
 8002992:	f7ff fd93 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <HAL_UART_MspInit+0x530>)
 800299a:	67da      	str	r2, [r3, #124]	; 0x7c
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <HAL_UART_MspInit+0x530>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029a4:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <HAL_UART_MspInit+0x53c>)
 80029a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029aa:	222a      	movs	r2, #42	; 0x2a
 80029ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029dc:	2200      	movs	r2, #0
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80029e0:	4816      	ldr	r0, [pc, #88]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029e2:	f001 f849 	bl	8003a78 <HAL_DMA_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 80029ec:	f7ff fd66 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029f4:	679a      	str	r2, [r3, #120]	; 0x78
 80029f6:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_UART_MspInit+0x538>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2105      	movs	r1, #5
 8002a00:	2025      	movs	r0, #37	; 0x25
 8002a02:	f001 f811 	bl	8003a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a06:	2025      	movs	r0, #37	; 0x25
 8002a08:	f001 f828 	bl	8003a5c <HAL_NVIC_EnableIRQ>
}
 8002a0c:	e11a      	b.n	8002c44 <HAL_UART_MspInit+0x740>
 8002a0e:	bf00      	nop
 8002a10:	40007c00 	.word	0x40007c00
 8002a14:	58024400 	.word	0x58024400
 8002a18:	58021000 	.word	0x58021000
 8002a1c:	20004428 	.word	0x20004428
 8002a20:	400200b8 	.word	0x400200b8
 8002a24:	20004540 	.word	0x20004540
 8002a28:	40020410 	.word	0x40020410
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	58020400 	.word	0x58020400
 8002a34:	20004338 	.word	0x20004338
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	2000422c 	.word	0x2000422c
 8002a40:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_UART_MspInit+0x748>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f040 8091 	bne.w	8002b72 <HAL_UART_MspInit+0x66e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a50:	4b7f      	ldr	r3, [pc, #508]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a56:	4a7e      	ldr	r2, [pc, #504]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a60:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b78      	ldr	r3, [pc, #480]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	4a76      	ldr	r2, [pc, #472]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7e:	4b74      	ldr	r3, [pc, #464]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	486b      	ldr	r0, [pc, #428]	; (8002c54 <HAL_UART_MspInit+0x750>)
 8002aa8:	f003 fe2c 	bl	8006704 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002aae:	4a6b      	ldr	r2, [pc, #428]	; (8002c5c <HAL_UART_MspInit+0x758>)
 8002ab0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002ab2:	4b69      	ldr	r3, [pc, #420]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ab4:	222b      	movs	r2, #43	; 0x2b
 8002ab6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ab8:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abe:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac4:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002acc:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad2:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ade:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002aea:	485b      	ldr	r0, [pc, #364]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002aec:	f000 ffc4 	bl	8003a78 <HAL_DMA_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_UART_MspInit+0x5f6>
      Error_Handler();
 8002af6:	f7ff fce1 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a56      	ldr	r2, [pc, #344]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002afe:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b00:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <HAL_UART_MspInit+0x754>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002b06:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b08:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_UART_MspInit+0x760>)
 8002b0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b0c:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b0e:	222c      	movs	r2, #44	; 0x2c
 8002b10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b12:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b18:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b1e:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b26:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b3e:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b44:	4846      	ldr	r0, [pc, #280]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b46:	f000 ff97 	bl	8003a78 <HAL_DMA_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_MspInit+0x650>
      Error_Handler();
 8002b50:	f7ff fcb4 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b58:	679a      	str	r2, [r3, #120]	; 0x78
 8002b5a:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_UART_MspInit+0x75c>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2105      	movs	r1, #5
 8002b64:	2026      	movs	r0, #38	; 0x26
 8002b66:	f000 ff5f 	bl	8003a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b6a:	2026      	movs	r0, #38	; 0x26
 8002b6c:	f000 ff76 	bl	8003a5c <HAL_NVIC_EnableIRQ>
}
 8002b70:	e068      	b.n	8002c44 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART3)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_UART_MspInit+0x764>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d163      	bne.n	8002c44 <HAL_UART_MspInit+0x740>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b82:	4a33      	ldr	r2, [pc, #204]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_UART_MspInit+0x74c>)
 8002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4825      	ldr	r0, [pc, #148]	; (8002c6c <HAL_UART_MspInit+0x768>)
 8002bd6:	f003 fd95 	bl	8006704 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <HAL_UART_MspInit+0x770>)
 8002bde:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002be2:	222d      	movs	r2, #45	; 0x2d
 8002be4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bec:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c18:	4815      	ldr	r0, [pc, #84]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c1a:	f000 ff2d 	bl	8003a78 <HAL_DMA_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_UART_MspInit+0x724>
      Error_Handler();
 8002c24:	f7ff fc4a 	bl	80024bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c2c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_UART_MspInit+0x76c>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2105      	movs	r1, #5
 8002c38:	2027      	movs	r0, #39	; 0x27
 8002c3a:	f000 fef5 	bl	8003a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c3e:	2027      	movs	r0, #39	; 0x27
 8002c40:	f000 ff0c 	bl	8003a5c <HAL_NVIC_EnableIRQ>
}
 8002c44:	bf00      	nop
 8002c46:	3750      	adds	r7, #80	; 0x50
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40004400 	.word	0x40004400
 8002c50:	58024400 	.word	0x58024400
 8002c54:	58020000 	.word	0x58020000
 8002c58:	2000406c 	.word	0x2000406c
 8002c5c:	40020040 	.word	0x40020040
 8002c60:	200043b0 	.word	0x200043b0
 8002c64:	40020428 	.word	0x40020428
 8002c68:	40004800 	.word	0x40004800
 8002c6c:	58020400 	.word	0x58020400
 8002c70:	200040f4 	.word	0x200040f4
 8002c74:	40020058 	.word	0x40020058

08002c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b090      	sub	sp, #64	; 0x40
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d827      	bhi.n	8002cd6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002c86:	2200      	movs	r2, #0
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	2036      	movs	r0, #54	; 0x36
 8002c8c:	f000 fecc 	bl	8003a28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c90:	2036      	movs	r0, #54	; 0x36
 8002c92:	f000 fee3 	bl	8003a5c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002c96:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <HAL_InitTick+0xc4>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_InitTick+0xc8>)
 8002c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_InitTick+0xc8>)
 8002ca4:	f043 0310 	orr.w	r3, r3, #16
 8002ca8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_InitTick+0xc8>)
 8002cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cba:	f107 0210 	add.w	r2, r7, #16
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 ff4d 	bl	8007b64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_InitTick+0x6a>
 8002cd4:	e001      	b.n	8002cda <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e02b      	b.n	8002d32 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cda:	f004 ff17 	bl	8007b0c <HAL_RCC_GetPCLK1Freq>
 8002cde:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002ce0:	e004      	b.n	8002cec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ce2:	f004 ff13 	bl	8007b0c <HAL_RCC_GetPCLK1Freq>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_InitTick+0xcc>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	0c9b      	lsrs	r3, r3, #18
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_InitTick+0xd0>)
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <HAL_InitTick+0xd4>)
 8002cfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_InitTick+0xd0>)
 8002d02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d08:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <HAL_InitTick+0xd0>)
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_InitTick+0xd0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_InitTick+0xd0>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <HAL_InitTick+0xd0>)
 8002d1c:	f006 fac6 	bl	80092ac <HAL_TIM_Base_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d104      	bne.n	8002d30 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d26:	4808      	ldr	r0, [pc, #32]	; (8002d48 <HAL_InitTick+0xd0>)
 8002d28:	f006 fb22 	bl	8009370 <HAL_TIM_Base_Start_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	e000      	b.n	8002d32 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3740      	adds	r7, #64	; 0x40
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	58024400 	.word	0x58024400
 8002d44:	431bde83 	.word	0x431bde83
 8002d48:	200048f4 	.word	0x200048f4
 8002d4c:	40001000 	.word	0x40001000

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002d54:	e7fe      	b.n	8002d54 <NMI_Handler+0x4>

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <MemManage_Handler+0x4>

08002d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <DMA1_Stream0_IRQHandler+0x10>)
 8002d82:	f002 f9a1 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20004338 	.word	0x20004338

08002d90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <DMA1_Stream1_IRQHandler+0x10>)
 8002d96:	f002 f997 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000422c 	.word	0x2000422c

08002da4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <DMA1_Stream2_IRQHandler+0x10>)
 8002daa:	f002 f98d 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000406c 	.word	0x2000406c

08002db8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <DMA1_Stream3_IRQHandler+0x10>)
 8002dbe:	f002 f983 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200040f4 	.word	0x200040f4

08002dcc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <DMA1_Stream4_IRQHandler+0x10>)
 8002dd2:	f002 f979 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20004778 	.word	0x20004778

08002de0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <DMA1_Stream5_IRQHandler+0x10>)
 8002de6:	f002 f96f 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20003ff4 	.word	0x20003ff4

08002df4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <DMA1_Stream6_IRQHandler+0x10>)
 8002dfa:	f002 f965 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20004800 	.word	0x20004800

08002e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002e12:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <USART1_IRQHandler+0x10c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06b      	beq.n	8002f06 <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002e2e:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <USART1_IRQHandler+0x10c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002e36:	4837      	ldr	r0, [pc, #220]	; (8002f14 <USART1_IRQHandler+0x10c>)
 8002e38:	f006 fe20 	bl	8009a7c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002e3c:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a36      	ldr	r2, [pc, #216]	; (8002f1c <USART1_IRQHandler+0x114>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d04a      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <USART1_IRQHandler+0x118>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d045      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a33      	ldr	r2, [pc, #204]	; (8002f24 <USART1_IRQHandler+0x11c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d040      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <USART1_IRQHandler+0x120>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d03b      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e64:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <USART1_IRQHandler+0x124>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d036      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <USART1_IRQHandler+0x128>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d031      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <USART1_IRQHandler+0x12c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02c      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2c      	ldr	r2, [pc, #176]	; (8002f38 <USART1_IRQHandler+0x130>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d027      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e8c:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <USART1_IRQHandler+0x134>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d022      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <USART1_IRQHandler+0x138>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d01d      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <USART1_IRQHandler+0x13c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <USART1_IRQHandler+0x140>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <USART1_IRQHandler+0x144>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <USART1_IRQHandler+0x148>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <USART1_IRQHandler+0x14c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <USART1_IRQHandler+0xd4>
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <USART1_IRQHandler+0x150>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d103      	bne.n	8002ee4 <USART1_IRQHandler+0xdc>
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	e002      	b.n	8002eea <USART1_IRQHandler+0xe2>
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <USART1_IRQHandler+0x110>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <USART1_IRQHandler+0x10c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <USART1_IRQHandler+0x10c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0210 	bic.w	r2, r2, #16
 8002ef8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <USART1_IRQHandler+0x154>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f008 fedf 	bl	800bcc4 <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f06:	4803      	ldr	r0, [pc, #12]	; (8002f14 <USART1_IRQHandler+0x10c>)
 8002f08:	f006 fe28 	bl	8009b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200044a0 	.word	0x200044a0
 8002f18:	20004338 	.word	0x20004338
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	40020040 	.word	0x40020040
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40020088 	.word	0x40020088
 8002f34:	400200a0 	.word	0x400200a0
 8002f38:	400200b8 	.word	0x400200b8
 8002f3c:	40020410 	.word	0x40020410
 8002f40:	40020428 	.word	0x40020428
 8002f44:	40020440 	.word	0x40020440
 8002f48:	40020458 	.word	0x40020458
 8002f4c:	40020470 	.word	0x40020470
 8002f50:	40020488 	.word	0x40020488
 8002f54:	400204a0 	.word	0x400204a0
 8002f58:	400204b8 	.word	0x400204b8
 8002f5c:	20003fec 	.word	0x20003fec

08002f60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002f6a:	4b40      	ldr	r3, [pc, #256]	; (800306c <USART2_IRQHandler+0x10c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d06b      	beq.n	800305e <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <USART2_IRQHandler+0x10c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8002f8e:	4837      	ldr	r0, [pc, #220]	; (800306c <USART2_IRQHandler+0x10c>)
 8002f90:	f006 fd74 	bl	8009a7c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <USART2_IRQHandler+0x110>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a36      	ldr	r2, [pc, #216]	; (8003074 <USART2_IRQHandler+0x114>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d04a      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a35      	ldr	r2, [pc, #212]	; (8003078 <USART2_IRQHandler+0x118>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d045      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <USART2_IRQHandler+0x110>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a33      	ldr	r2, [pc, #204]	; (800307c <USART2_IRQHandler+0x11c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d040      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a32      	ldr	r2, [pc, #200]	; (8003080 <USART2_IRQHandler+0x120>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d03b      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a30      	ldr	r2, [pc, #192]	; (8003084 <USART2_IRQHandler+0x124>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d036      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2f      	ldr	r2, [pc, #188]	; (8003088 <USART2_IRQHandler+0x128>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d031      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2d      	ldr	r2, [pc, #180]	; (800308c <USART2_IRQHandler+0x12c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d02c      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fda:	4b25      	ldr	r3, [pc, #148]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <USART2_IRQHandler+0x130>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d027      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <USART2_IRQHandler+0x110>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <USART2_IRQHandler+0x134>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d022      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <USART2_IRQHandler+0x110>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <USART2_IRQHandler+0x138>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d01d      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <USART2_IRQHandler+0x110>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <USART2_IRQHandler+0x13c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d018      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <USART2_IRQHandler+0x110>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <USART2_IRQHandler+0x140>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <USART2_IRQHandler+0x110>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <USART2_IRQHandler+0x144>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00e      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <USART2_IRQHandler+0x110>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <USART2_IRQHandler+0x148>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <USART2_IRQHandler+0x110>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a21      	ldr	r2, [pc, #132]	; (80030ac <USART2_IRQHandler+0x14c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <USART2_IRQHandler+0xd4>
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <USART2_IRQHandler+0x110>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <USART2_IRQHandler+0x150>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d103      	bne.n	800303c <USART2_IRQHandler+0xdc>
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <USART2_IRQHandler+0x110>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	e002      	b.n	8003042 <USART2_IRQHandler+0xe2>
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <USART2_IRQHandler+0x110>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <USART2_IRQHandler+0x10c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <USART2_IRQHandler+0x10c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0210 	bic.w	r2, r2, #16
 8003050:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <USART2_IRQHandler+0x154>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f008 fe33 	bl	800bcc4 <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800305e:	4803      	ldr	r0, [pc, #12]	; (800306c <USART2_IRQHandler+0x10c>)
 8003060:	f006 fd7c 	bl	8009b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200046e8 	.word	0x200046e8
 8003070:	2000406c 	.word	0x2000406c
 8003074:	40020010 	.word	0x40020010
 8003078:	40020028 	.word	0x40020028
 800307c:	40020040 	.word	0x40020040
 8003080:	40020058 	.word	0x40020058
 8003084:	40020070 	.word	0x40020070
 8003088:	40020088 	.word	0x40020088
 800308c:	400200a0 	.word	0x400200a0
 8003090:	400200b8 	.word	0x400200b8
 8003094:	40020410 	.word	0x40020410
 8003098:	40020428 	.word	0x40020428
 800309c:	40020440 	.word	0x40020440
 80030a0:	40020458 	.word	0x40020458
 80030a4:	40020470 	.word	0x40020470
 80030a8:	40020488 	.word	0x40020488
 80030ac:	400204a0 	.word	0x400204a0
 80030b0:	400204b8 	.word	0x400204b8
 80030b4:	20004204 	.word	0x20004204

080030b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 80030c2:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <USART3_IRQHandler+0x10c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d06b      	beq.n	80031b6 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <USART3_IRQHandler+0x10c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2210      	movs	r2, #16
 80030e4:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 80030e6:	4837      	ldr	r0, [pc, #220]	; (80031c4 <USART3_IRQHandler+0x10c>)
 80030e8:	f006 fcc8 	bl	8009a7c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <USART3_IRQHandler+0x110>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a36      	ldr	r2, [pc, #216]	; (80031cc <USART3_IRQHandler+0x114>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d04a      	beq.n	800318c <USART3_IRQHandler+0xd4>
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <USART3_IRQHandler+0x110>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a35      	ldr	r2, [pc, #212]	; (80031d0 <USART3_IRQHandler+0x118>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d045      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003100:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <USART3_IRQHandler+0x11c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d040      	beq.n	800318c <USART3_IRQHandler+0xd4>
 800310a:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <USART3_IRQHandler+0x110>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <USART3_IRQHandler+0x120>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d03b      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003114:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a30      	ldr	r2, [pc, #192]	; (80031dc <USART3_IRQHandler+0x124>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d036      	beq.n	800318c <USART3_IRQHandler+0xd4>
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <USART3_IRQHandler+0x128>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d031      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <USART3_IRQHandler+0x110>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2d      	ldr	r2, [pc, #180]	; (80031e4 <USART3_IRQHandler+0x12c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02c      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003132:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <USART3_IRQHandler+0x130>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d027      	beq.n	800318c <USART3_IRQHandler+0xd4>
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <USART3_IRQHandler+0x110>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2a      	ldr	r2, [pc, #168]	; (80031ec <USART3_IRQHandler+0x134>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d022      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <USART3_IRQHandler+0x138>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d01d      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003150:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <USART3_IRQHandler+0x13c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d018      	beq.n	800318c <USART3_IRQHandler+0xd4>
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <USART3_IRQHandler+0x110>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <USART3_IRQHandler+0x140>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <USART3_IRQHandler+0x144>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00e      	beq.n	800318c <USART3_IRQHandler+0xd4>
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a23      	ldr	r2, [pc, #140]	; (8003200 <USART3_IRQHandler+0x148>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <USART3_IRQHandler+0x110>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <USART3_IRQHandler+0x14c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <USART3_IRQHandler+0xd4>
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a20      	ldr	r2, [pc, #128]	; (8003208 <USART3_IRQHandler+0x150>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d103      	bne.n	8003194 <USART3_IRQHandler+0xdc>
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <USART3_IRQHandler+0x110>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	e002      	b.n	800319a <USART3_IRQHandler+0xe2>
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <USART3_IRQHandler+0x110>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <USART3_IRQHandler+0x10c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <USART3_IRQHandler+0x10c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0210 	bic.w	r2, r2, #16
 80031a8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <USART3_IRQHandler+0x154>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f008 fd87 	bl	800bcc4 <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031b6:	4803      	ldr	r0, [pc, #12]	; (80031c4 <USART3_IRQHandler+0x10c>)
 80031b8:	f006 fcd0 	bl	8009b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000416c 	.word	0x2000416c
 80031c8:	200040f4 	.word	0x200040f4
 80031cc:	40020010 	.word	0x40020010
 80031d0:	40020028 	.word	0x40020028
 80031d4:	40020040 	.word	0x40020040
 80031d8:	40020058 	.word	0x40020058
 80031dc:	40020070 	.word	0x40020070
 80031e0:	40020088 	.word	0x40020088
 80031e4:	400200a0 	.word	0x400200a0
 80031e8:	400200b8 	.word	0x400200b8
 80031ec:	40020410 	.word	0x40020410
 80031f0:	40020428 	.word	0x40020428
 80031f4:	40020440 	.word	0x40020440
 80031f8:	40020458 	.word	0x40020458
 80031fc:	40020470 	.word	0x40020470
 8003200:	40020488 	.word	0x40020488
 8003204:	400204a0 	.word	0x400204a0
 8003208:	400204b8 	.word	0x400204b8
 800320c:	200048f0 	.word	0x200048f0

08003210 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA1_Stream7_IRQHandler+0x10>)
 8003216:	f001 ff57 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20004428 	.word	0x20004428

08003224 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800322e:	4b40      	ldr	r3, [pc, #256]	; (8003330 <UART4_IRQHandler+0x10c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d06b      	beq.n	8003322 <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800324a:	4b39      	ldr	r3, [pc, #228]	; (8003330 <UART4_IRQHandler+0x10c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8003252:	4837      	ldr	r0, [pc, #220]	; (8003330 <UART4_IRQHandler+0x10c>)
 8003254:	f006 fc12 	bl	8009a7c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <UART4_IRQHandler+0x110>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a36      	ldr	r2, [pc, #216]	; (8003338 <UART4_IRQHandler+0x114>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 8003262:	4b34      	ldr	r3, [pc, #208]	; (8003334 <UART4_IRQHandler+0x110>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a35      	ldr	r2, [pc, #212]	; (800333c <UART4_IRQHandler+0x118>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <UART4_IRQHandler+0x110>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a33      	ldr	r2, [pc, #204]	; (8003340 <UART4_IRQHandler+0x11c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <UART4_IRQHandler+0x110>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <UART4_IRQHandler+0x120>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 8003280:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <UART4_IRQHandler+0x110>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a30      	ldr	r2, [pc, #192]	; (8003348 <UART4_IRQHandler+0x124>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <UART4_IRQHandler+0x110>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2f      	ldr	r2, [pc, #188]	; (800334c <UART4_IRQHandler+0x128>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <UART4_IRQHandler+0x110>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <UART4_IRQHandler+0x12c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <UART4_IRQHandler+0x110>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2c      	ldr	r2, [pc, #176]	; (8003354 <UART4_IRQHandler+0x130>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <UART4_IRQHandler+0x110>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <UART4_IRQHandler+0x134>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <UART4_IRQHandler+0x110>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a29      	ldr	r2, [pc, #164]	; (800335c <UART4_IRQHandler+0x138>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <UART4_IRQHandler+0x110>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a27      	ldr	r2, [pc, #156]	; (8003360 <UART4_IRQHandler+0x13c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <UART4_IRQHandler+0x110>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a26      	ldr	r2, [pc, #152]	; (8003364 <UART4_IRQHandler+0x140>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <UART4_IRQHandler+0x110>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a24      	ldr	r2, [pc, #144]	; (8003368 <UART4_IRQHandler+0x144>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <UART4_IRQHandler+0x110>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <UART4_IRQHandler+0x148>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <UART4_IRQHandler+0x110>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a21      	ldr	r2, [pc, #132]	; (8003370 <UART4_IRQHandler+0x14c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <UART4_IRQHandler+0xd4>
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <UART4_IRQHandler+0x110>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a20      	ldr	r2, [pc, #128]	; (8003374 <UART4_IRQHandler+0x150>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d103      	bne.n	8003300 <UART4_IRQHandler+0xdc>
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <UART4_IRQHandler+0x110>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	e002      	b.n	8003306 <UART4_IRQHandler+0xe2>
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <UART4_IRQHandler+0x110>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <UART4_IRQHandler+0x10c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <UART4_IRQHandler+0x10c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0210 	bic.w	r2, r2, #16
 8003314:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <UART4_IRQHandler+0x154>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f008 fcd1 	bl	800bcc4 <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003322:	4803      	ldr	r0, [pc, #12]	; (8003330 <UART4_IRQHandler+0x10c>)
 8003324:	f006 fc1a 	bl	8009b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20004650 	.word	0x20004650
 8003334:	20003ff4 	.word	0x20003ff4
 8003338:	40020010 	.word	0x40020010
 800333c:	40020028 	.word	0x40020028
 8003340:	40020040 	.word	0x40020040
 8003344:	40020058 	.word	0x40020058
 8003348:	40020070 	.word	0x40020070
 800334c:	40020088 	.word	0x40020088
 8003350:	400200a0 	.word	0x400200a0
 8003354:	400200b8 	.word	0x400200b8
 8003358:	40020410 	.word	0x40020410
 800335c:	40020428 	.word	0x40020428
 8003360:	40020440 	.word	0x40020440
 8003364:	40020458 	.word	0x40020458
 8003368:	40020470 	.word	0x40020470
 800336c:	40020488 	.word	0x40020488
 8003370:	400204a0 	.word	0x400204a0
 8003374:	400204b8 	.word	0x400204b8
 8003378:	200047fc 	.word	0x200047fc

0800337c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 8003386:	4b40      	ldr	r3, [pc, #256]	; (8003488 <UART5_IRQHandler+0x10c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06b      	beq.n	800347a <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80033a2:	4b39      	ldr	r3, [pc, #228]	; (8003488 <UART5_IRQHandler+0x10c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2210      	movs	r2, #16
 80033a8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart5);
 80033aa:	4837      	ldr	r0, [pc, #220]	; (8003488 <UART5_IRQHandler+0x10c>)
 80033ac:	f006 fb66 	bl	8009a7c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <UART5_IRQHandler+0x110>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a36      	ldr	r2, [pc, #216]	; (8003490 <UART5_IRQHandler+0x114>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d04a      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <UART5_IRQHandler+0x110>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a35      	ldr	r2, [pc, #212]	; (8003494 <UART5_IRQHandler+0x118>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d045      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <UART5_IRQHandler+0x110>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a33      	ldr	r2, [pc, #204]	; (8003498 <UART5_IRQHandler+0x11c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d040      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <UART5_IRQHandler+0x110>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a32      	ldr	r2, [pc, #200]	; (800349c <UART5_IRQHandler+0x120>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d03b      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <UART5_IRQHandler+0x110>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <UART5_IRQHandler+0x124>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d036      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033e2:	4b2a      	ldr	r3, [pc, #168]	; (800348c <UART5_IRQHandler+0x110>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <UART5_IRQHandler+0x128>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d031      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <UART5_IRQHandler+0x110>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <UART5_IRQHandler+0x12c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02c      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <UART5_IRQHandler+0x110>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <UART5_IRQHandler+0x130>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d027      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <UART5_IRQHandler+0x110>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <UART5_IRQHandler+0x134>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <UART5_IRQHandler+0x110>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <UART5_IRQHandler+0x138>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01d      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <UART5_IRQHandler+0x110>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <UART5_IRQHandler+0x13c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <UART5_IRQHandler+0x110>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a26      	ldr	r2, [pc, #152]	; (80034bc <UART5_IRQHandler+0x140>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <UART5_IRQHandler+0x110>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <UART5_IRQHandler+0x144>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <UART5_IRQHandler+0x110>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <UART5_IRQHandler+0x148>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <UART5_IRQHandler+0x110>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <UART5_IRQHandler+0x14c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <UART5_IRQHandler+0xd4>
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <UART5_IRQHandler+0x110>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a20      	ldr	r2, [pc, #128]	; (80034cc <UART5_IRQHandler+0x150>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <UART5_IRQHandler+0xdc>
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <UART5_IRQHandler+0x110>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	e002      	b.n	800345e <UART5_IRQHandler+0xe2>
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <UART5_IRQHandler+0x110>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart5, UART_IT_IDLE);
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <UART5_IRQHandler+0x10c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <UART5_IRQHandler+0x10c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0210 	bic.w	r2, r2, #16
 800346c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30TransFinishHandle, pdFALSE);
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <UART5_IRQHandler+0x154>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f008 fc25 	bl	800bcc4 <xQueueGiveFromISR>
	}
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800347a:	4803      	ldr	r0, [pc, #12]	; (8003488 <UART5_IRQHandler+0x10c>)
 800347c:	f006 fb6e 	bl	8009b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200042a4 	.word	0x200042a4
 800348c:	20004778 	.word	0x20004778
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	20003fe8 	.word	0x20003fe8

080034d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <TIM6_DAC_IRQHandler+0x10>)
 80034da:	f005 ffb9 	bl	8009450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200048f4 	.word	0x200048f4

080034e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <DMA2_Stream0_IRQHandler+0x10>)
 80034ee:	f001 fdeb 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20004540 	.word	0x20004540

080034fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <DMA2_Stream1_IRQHandler+0x10>)
 8003502:	f001 fde1 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200043b0 	.word	0x200043b0

08003510 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <DMA2_Stream2_IRQHandler+0x10>)
 8003516:	f001 fdd7 	bl	80050c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20004878 	.word	0x20004878

08003524 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 800352e:	4b40      	ldr	r3, [pc, #256]	; (8003630 <UART8_IRQHandler+0x10c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d06b      	beq.n	8003622 <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <UART8_IRQHandler+0x10c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2210      	movs	r2, #16
 8003550:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8003552:	4837      	ldr	r0, [pc, #220]	; (8003630 <UART8_IRQHandler+0x10c>)
 8003554:	f006 fa92 	bl	8009a7c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8003558:	4b36      	ldr	r3, [pc, #216]	; (8003634 <UART8_IRQHandler+0x110>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a36      	ldr	r2, [pc, #216]	; (8003638 <UART8_IRQHandler+0x114>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d04a      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 8003562:	4b34      	ldr	r3, [pc, #208]	; (8003634 <UART8_IRQHandler+0x110>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a35      	ldr	r2, [pc, #212]	; (800363c <UART8_IRQHandler+0x118>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d045      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <UART8_IRQHandler+0x110>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a33      	ldr	r2, [pc, #204]	; (8003640 <UART8_IRQHandler+0x11c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d040      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <UART8_IRQHandler+0x110>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a32      	ldr	r2, [pc, #200]	; (8003644 <UART8_IRQHandler+0x120>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d03b      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <UART8_IRQHandler+0x110>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a30      	ldr	r2, [pc, #192]	; (8003648 <UART8_IRQHandler+0x124>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d036      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <UART8_IRQHandler+0x110>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2f      	ldr	r2, [pc, #188]	; (800364c <UART8_IRQHandler+0x128>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d031      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <UART8_IRQHandler+0x110>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <UART8_IRQHandler+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02c      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <UART8_IRQHandler+0x110>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <UART8_IRQHandler+0x130>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d027      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <UART8_IRQHandler+0x110>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <UART8_IRQHandler+0x134>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <UART8_IRQHandler+0x110>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a29      	ldr	r2, [pc, #164]	; (800365c <UART8_IRQHandler+0x138>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01d      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <UART8_IRQHandler+0x110>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <UART8_IRQHandler+0x13c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <UART8_IRQHandler+0x110>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <UART8_IRQHandler+0x140>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035d0:	4b18      	ldr	r3, [pc, #96]	; (8003634 <UART8_IRQHandler+0x110>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <UART8_IRQHandler+0x144>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <UART8_IRQHandler+0x110>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a23      	ldr	r2, [pc, #140]	; (800366c <UART8_IRQHandler+0x148>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <UART8_IRQHandler+0x110>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <UART8_IRQHandler+0x14c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <UART8_IRQHandler+0xd4>
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <UART8_IRQHandler+0x110>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a20      	ldr	r2, [pc, #128]	; (8003674 <UART8_IRQHandler+0x150>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <UART8_IRQHandler+0xdc>
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <UART8_IRQHandler+0x110>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	e002      	b.n	8003606 <UART8_IRQHandler+0xe2>
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <UART8_IRQHandler+0x110>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <UART8_IRQHandler+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <UART8_IRQHandler+0x10c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0210 	bic.w	r2, r2, #16
 8003614:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <UART8_IRQHandler+0x154>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f008 fb51 	bl	800bcc4 <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003622:	4803      	ldr	r0, [pc, #12]	; (8003630 <UART8_IRQHandler+0x10c>)
 8003624:	f006 fa9a 	bl	8009b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200045bc 	.word	0x200045bc
 8003634:	20004428 	.word	0x20004428
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
 8003678:	200045b8 	.word	0x200045b8

0800367c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <SystemInit+0xec>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	4a38      	ldr	r2, [pc, #224]	; (8003768 <SystemInit+0xec>)
 8003688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800368c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <SystemInit+0xf0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	2b06      	cmp	r3, #6
 800369a:	d807      	bhi.n	80036ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800369c:	4b33      	ldr	r3, [pc, #204]	; (800376c <SystemInit+0xf0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 030f 	bic.w	r3, r3, #15
 80036a4:	4a31      	ldr	r2, [pc, #196]	; (800376c <SystemInit+0xf0>)
 80036a6:	f043 0307 	orr.w	r3, r3, #7
 80036aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <SystemInit+0xf4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2f      	ldr	r2, [pc, #188]	; (8003770 <SystemInit+0xf4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <SystemInit+0xf4>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <SystemInit+0xf4>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	492b      	ldr	r1, [pc, #172]	; (8003770 <SystemInit+0xf4>)
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <SystemInit+0xf8>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <SystemInit+0xf0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <SystemInit+0xf0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 030f 	bic.w	r3, r3, #15
 80036de:	4a23      	ldr	r2, [pc, #140]	; (800376c <SystemInit+0xf0>)
 80036e0:	f043 0307 	orr.w	r3, r3, #7
 80036e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80036e6:	4b22      	ldr	r3, [pc, #136]	; (8003770 <SystemInit+0xf4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <SystemInit+0xf4>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <SystemInit+0xf4>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <SystemInit+0xf4>)
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <SystemInit+0xfc>)
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <SystemInit+0xf4>)
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <SystemInit+0x100>)
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <SystemInit+0xf4>)
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <SystemInit+0x104>)
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <SystemInit+0xf4>)
 800370c:	2200      	movs	r2, #0
 800370e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003710:	4b17      	ldr	r3, [pc, #92]	; (8003770 <SystemInit+0xf4>)
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <SystemInit+0x104>)
 8003714:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <SystemInit+0xf4>)
 8003718:	2200      	movs	r2, #0
 800371a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <SystemInit+0xf4>)
 800371e:	4a18      	ldr	r2, [pc, #96]	; (8003780 <SystemInit+0x104>)
 8003720:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <SystemInit+0xf4>)
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <SystemInit+0xf4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a10      	ldr	r2, [pc, #64]	; (8003770 <SystemInit+0xf4>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <SystemInit+0xf4>)
 8003736:	2200      	movs	r2, #0
 8003738:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <SystemInit+0x108>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <SystemInit+0x10c>)
 8003740:	4013      	ands	r3, r2
 8003742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003746:	d202      	bcs.n	800374e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <SystemInit+0x110>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <SystemInit+0x114>)
 8003750:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003754:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SystemInit+0xec>)
 8003758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800375c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00
 800376c:	52002000 	.word	0x52002000
 8003770:	58024400 	.word	0x58024400
 8003774:	eaf6ed7f 	.word	0xeaf6ed7f
 8003778:	02020200 	.word	0x02020200
 800377c:	01ff0000 	.word	0x01ff0000
 8003780:	01010280 	.word	0x01010280
 8003784:	5c001000 	.word	0x5c001000
 8003788:	ffff0000 	.word	0xffff0000
 800378c:	51008108 	.word	0x51008108
 8003790:	52004000 	.word	0x52004000

08003794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003798:	f7ff ff70 	bl	800367c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800379c:	480c      	ldr	r0, [pc, #48]	; (80037d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800379e:	490d      	ldr	r1, [pc, #52]	; (80037d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037a4:	e002      	b.n	80037ac <LoopCopyDataInit>

080037a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037aa:	3304      	adds	r3, #4

080037ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037b0:	d3f9      	bcc.n	80037a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037b4:	4c0a      	ldr	r4, [pc, #40]	; (80037e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b8:	e001      	b.n	80037be <LoopFillZerobss>

080037ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037bc:	3204      	adds	r2, #4

080037be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037c0:	d3fb      	bcc.n	80037ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037c2:	f00a fa5b 	bl	800dc7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037c6:	f7fd fdbf 	bl	8001348 <main>
  bx  lr
 80037ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80037d8:	0800de08 	.word	0x0800de08
  ldr r2, =_sbss
 80037dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80037e0:	20004944 	.word	0x20004944

080037e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037e4:	e7fe      	b.n	80037e4 <ADC3_IRQHandler>
	...

080037e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ee:	2003      	movs	r0, #3
 80037f0:	f000 f90f 	bl	8003a12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037f4:	f003 ffe0 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_Init+0x68>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4913      	ldr	r1, [pc, #76]	; (8003854 <HAL_Init+0x6c>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_Init+0x68>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <HAL_Init+0x6c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	4a0b      	ldr	r2, [pc, #44]	; (8003858 <HAL_Init+0x70>)
 800382a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800382c:	4a0b      	ldr	r2, [pc, #44]	; (800385c <HAL_Init+0x74>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003832:	2000      	movs	r0, #0
 8003834:	f7ff fa20 	bl	8002c78 <HAL_InitTick>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e002      	b.n	8003848 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003842:	f7fe fe41 	bl	80024c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	58024400 	.word	0x58024400
 8003854:	0800ddb8 	.word	0x0800ddb8
 8003858:	20000004 	.word	0x20000004
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_IncTick+0x20>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_IncTick+0x24>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <HAL_IncTick+0x24>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000000c 	.word	0x2000000c
 8003884:	20004940 	.word	0x20004940

08003888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return uwTick;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_GetTick+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20004940 	.word	0x20004940

080038a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_GetREVID+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0c1b      	lsrs	r3, r3, #16
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	5c001000 	.word	0x5c001000

080038b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <__NVIC_SetPriorityGrouping+0x40>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d4:	4013      	ands	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e6:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <__NVIC_SetPriorityGrouping+0x40>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	60d3      	str	r3, [r2, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00
 80038fc:	05fa0000 	.word	0x05fa0000

08003900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <__NVIC_GetPriorityGrouping+0x18>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	f003 0307 	and.w	r3, r3, #7
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4907      	ldr	r1, [pc, #28]	; (8003954 <__NVIC_EnableIRQ+0x38>)
 8003936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	; (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	; (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	; 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ff4c 	bl	80038b8 <__NVIC_SetPriorityGrouping>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a36:	f7ff ff63 	bl	8003900 <__NVIC_GetPriorityGrouping>
 8003a3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	6978      	ldr	r0, [r7, #20]
 8003a42:	f7ff ffb3 	bl	80039ac <NVIC_EncodePriority>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff82 	bl	8003958 <__NVIC_SetPriority>
}
 8003a54:	bf00      	nop
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff56 	bl	800391c <__NVIC_EnableIRQ>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7ff ff02 	bl	8003888 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e316      	b.n	80040be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a66      	ldr	r2, [pc, #408]	; (8003c30 <HAL_DMA_Init+0x1b8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04a      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_DMA_Init+0x1bc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d045      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a63      	ldr	r2, [pc, #396]	; (8003c38 <HAL_DMA_Init+0x1c0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a62      	ldr	r2, [pc, #392]	; (8003c3c <HAL_DMA_Init+0x1c4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d03b      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a60      	ldr	r2, [pc, #384]	; (8003c40 <HAL_DMA_Init+0x1c8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5f      	ldr	r2, [pc, #380]	; (8003c44 <HAL_DMA_Init+0x1cc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_DMA_Init+0x1d0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <HAL_DMA_Init+0x1d4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d027      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a5a      	ldr	r2, [pc, #360]	; (8003c50 <HAL_DMA_Init+0x1d8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a59      	ldr	r2, [pc, #356]	; (8003c54 <HAL_DMA_Init+0x1dc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01d      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a57      	ldr	r2, [pc, #348]	; (8003c58 <HAL_DMA_Init+0x1e0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a56      	ldr	r2, [pc, #344]	; (8003c5c <HAL_DMA_Init+0x1e4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <HAL_DMA_Init+0x1e8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a53      	ldr	r2, [pc, #332]	; (8003c64 <HAL_DMA_Init+0x1ec>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a51      	ldr	r2, [pc, #324]	; (8003c68 <HAL_DMA_Init+0x1f0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_Init+0xb8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a50      	ldr	r2, [pc, #320]	; (8003c6c <HAL_DMA_Init+0x1f4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Init+0xbc>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_DMA_Init+0xbe>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 813b 	beq.w	8003db2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a37      	ldr	r2, [pc, #220]	; (8003c30 <HAL_DMA_Init+0x1b8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04a      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a36      	ldr	r2, [pc, #216]	; (8003c34 <HAL_DMA_Init+0x1bc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d045      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <HAL_DMA_Init+0x1c0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d040      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <HAL_DMA_Init+0x1c4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d03b      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a31      	ldr	r2, [pc, #196]	; (8003c40 <HAL_DMA_Init+0x1c8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d036      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a30      	ldr	r2, [pc, #192]	; (8003c44 <HAL_DMA_Init+0x1cc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d031      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <HAL_DMA_Init+0x1d0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02c      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <HAL_DMA_Init+0x1d4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d027      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <HAL_DMA_Init+0x1d8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d022      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <HAL_DMA_Init+0x1dc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01d      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_DMA_Init+0x1e0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d018      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <HAL_DMA_Init+0x1e4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <HAL_DMA_Init+0x1e8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a24      	ldr	r2, [pc, #144]	; (8003c64 <HAL_DMA_Init+0x1ec>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <HAL_DMA_Init+0x1f0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_DMA_Init+0x174>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <HAL_DMA_Init+0x1f4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <HAL_DMA_Init+0x186>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e007      	b.n	8003c0e <HAL_DMA_Init+0x196>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c0e:	e02f      	b.n	8003c70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c10:	f7ff fe3a 	bl	8003888 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d928      	bls.n	8003c70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2203      	movs	r2, #3
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e246      	b.n	80040be <HAL_DMA_Init+0x646>
 8003c30:	40020010 	.word	0x40020010
 8003c34:	40020028 	.word	0x40020028
 8003c38:	40020040 	.word	0x40020040
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	40020070 	.word	0x40020070
 8003c44:	40020088 	.word	0x40020088
 8003c48:	400200a0 	.word	0x400200a0
 8003c4c:	400200b8 	.word	0x400200b8
 8003c50:	40020410 	.word	0x40020410
 8003c54:	40020428 	.word	0x40020428
 8003c58:	40020440 	.word	0x40020440
 8003c5c:	40020458 	.word	0x40020458
 8003c60:	40020470 	.word	0x40020470
 8003c64:	40020488 	.word	0x40020488
 8003c68:	400204a0 	.word	0x400204a0
 8003c6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1c8      	bne.n	8003c10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4b83      	ldr	r3, [pc, #524]	; (8003e98 <HAL_DMA_Init+0x420>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d107      	bne.n	8003cd4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003cd4:	4b71      	ldr	r3, [pc, #452]	; (8003e9c <HAL_DMA_Init+0x424>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b71      	ldr	r3, [pc, #452]	; (8003ea0 <HAL_DMA_Init+0x428>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d328      	bcc.n	8003d34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b28      	cmp	r3, #40	; 0x28
 8003ce8:	d903      	bls.n	8003cf2 <HAL_DMA_Init+0x27a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf0:	d917      	bls.n	8003d22 <HAL_DMA_Init+0x2aa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003cf8:	d903      	bls.n	8003d02 <HAL_DMA_Init+0x28a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b42      	cmp	r3, #66	; 0x42
 8003d00:	d90f      	bls.n	8003d22 <HAL_DMA_Init+0x2aa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b46      	cmp	r3, #70	; 0x46
 8003d08:	d903      	bls.n	8003d12 <HAL_DMA_Init+0x29a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b48      	cmp	r3, #72	; 0x48
 8003d10:	d907      	bls.n	8003d22 <HAL_DMA_Init+0x2aa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b4e      	cmp	r3, #78	; 0x4e
 8003d18:	d905      	bls.n	8003d26 <HAL_DMA_Init+0x2ae>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b52      	cmp	r3, #82	; 0x52
 8003d20:	d801      	bhi.n	8003d26 <HAL_DMA_Init+0x2ae>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_DMA_Init+0x2b0>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0307 	bic.w	r3, r3, #7
 8003d4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d117      	bne.n	8003d8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f002 fb3d 	bl	80063f0 <DMA_CheckFifoParam>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e197      	b.n	80040be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f002 fa78 	bl	800628c <DMA_CalcBaseAndBitshift>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	223f      	movs	r2, #63	; 0x3f
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	e0cd      	b.n	8003f4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_DMA_Init+0x42c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a39      	ldr	r2, [pc, #228]	; (8003ea8 <HAL_DMA_Init+0x430>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a38      	ldr	r2, [pc, #224]	; (8003eac <HAL_DMA_Init+0x434>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a36      	ldr	r2, [pc, #216]	; (8003eb0 <HAL_DMA_Init+0x438>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <HAL_DMA_Init+0x43c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a33      	ldr	r2, [pc, #204]	; (8003eb8 <HAL_DMA_Init+0x440>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <HAL_DMA_Init+0x444>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_Init+0x38a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_DMA_Init+0x448>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_DMA_Init+0x38e>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_DMA_Init+0x390>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8097 	beq.w	8003f3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_DMA_Init+0x42c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d021      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_DMA_Init+0x430>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01c      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_DMA_Init+0x434>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d017      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_DMA_Init+0x438>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d012      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_DMA_Init+0x43c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00d      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_DMA_Init+0x440>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d008      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_DMA_Init+0x444>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <HAL_DMA_Init+0x3e4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_DMA_Init+0x448>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_DMA_Init+0x44c>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d020      	beq.n	8003ec8 <HAL_DMA_Init+0x450>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d102      	bne.n	8003e94 <HAL_DMA_Init+0x41c>
 8003e8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e92:	e01a      	b.n	8003eca <HAL_DMA_Init+0x452>
 8003e94:	2300      	movs	r3, #0
 8003e96:	e018      	b.n	8003eca <HAL_DMA_Init+0x452>
 8003e98:	fe10803f 	.word	0xfe10803f
 8003e9c:	5c001000 	.word	0x5c001000
 8003ea0:	ffff0000 	.word	0xffff0000
 8003ea4:	58025408 	.word	0x58025408
 8003ea8:	5802541c 	.word	0x5802541c
 8003eac:	58025430 	.word	0x58025430
 8003eb0:	58025444 	.word	0x58025444
 8003eb4:	58025458 	.word	0x58025458
 8003eb8:	5802546c 	.word	0x5802546c
 8003ebc:	58025480 	.word	0x58025480
 8003ec0:	58025494 	.word	0x58025494
 8003ec4:	fffe000f 	.word	0xfffe000f
 8003ec8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68d2      	ldr	r2, [r2, #12]
 8003ece:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ef8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b6e      	ldr	r3, [pc, #440]	; (80040c8 <HAL_DMA_Init+0x650>)
 8003f10:	4413      	add	r3, r2
 8003f12:	4a6e      	ldr	r2, [pc, #440]	; (80040cc <HAL_DMA_Init+0x654>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f002 f9b3 	bl	800628c <DMA_CalcBaseAndBitshift>
 8003f26:	4603      	mov	r3, r0
 8003f28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	e008      	b.n	8003f4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0b7      	b.n	80040be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a5f      	ldr	r2, [pc, #380]	; (80040d0 <HAL_DMA_Init+0x658>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d072      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a5d      	ldr	r2, [pc, #372]	; (80040d4 <HAL_DMA_Init+0x65c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d06d      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5c      	ldr	r2, [pc, #368]	; (80040d8 <HAL_DMA_Init+0x660>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d068      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <HAL_DMA_Init+0x664>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d063      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a59      	ldr	r2, [pc, #356]	; (80040e0 <HAL_DMA_Init+0x668>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d05e      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_DMA_Init+0x66c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d059      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a56      	ldr	r2, [pc, #344]	; (80040e8 <HAL_DMA_Init+0x670>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d054      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_DMA_Init+0x674>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04f      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a53      	ldr	r2, [pc, #332]	; (80040f0 <HAL_DMA_Init+0x678>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d04a      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a51      	ldr	r2, [pc, #324]	; (80040f4 <HAL_DMA_Init+0x67c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d045      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a50      	ldr	r2, [pc, #320]	; (80040f8 <HAL_DMA_Init+0x680>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d040      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4e      	ldr	r2, [pc, #312]	; (80040fc <HAL_DMA_Init+0x684>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d03b      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4d      	ldr	r2, [pc, #308]	; (8004100 <HAL_DMA_Init+0x688>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d036      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <HAL_DMA_Init+0x68c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <HAL_DMA_Init+0x690>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d02c      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_DMA_Init+0x694>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d027      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a47      	ldr	r2, [pc, #284]	; (8004110 <HAL_DMA_Init+0x698>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a45      	ldr	r2, [pc, #276]	; (8004114 <HAL_DMA_Init+0x69c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01d      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a44      	ldr	r2, [pc, #272]	; (8004118 <HAL_DMA_Init+0x6a0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a42      	ldr	r2, [pc, #264]	; (800411c <HAL_DMA_Init+0x6a4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a41      	ldr	r2, [pc, #260]	; (8004120 <HAL_DMA_Init+0x6a8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3f      	ldr	r2, [pc, #252]	; (8004124 <HAL_DMA_Init+0x6ac>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3e      	ldr	r2, [pc, #248]	; (8004128 <HAL_DMA_Init+0x6b0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_DMA_Init+0x5c6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3c      	ldr	r2, [pc, #240]	; (800412c <HAL_DMA_Init+0x6b4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <HAL_DMA_Init+0x5ca>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_DMA_Init+0x5cc>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d032      	beq.n	80040ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f002 fa4d 	bl	80064e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d102      	bne.n	800405c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004070:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d010      	beq.n	800409c <HAL_DMA_Init+0x624>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d80c      	bhi.n	800409c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f002 faca 	bl	800661c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	e008      	b.n	80040ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	a7fdabf8 	.word	0xa7fdabf8
 80040cc:	cccccccd 	.word	0xcccccccd
 80040d0:	40020010 	.word	0x40020010
 80040d4:	40020028 	.word	0x40020028
 80040d8:	40020040 	.word	0x40020040
 80040dc:	40020058 	.word	0x40020058
 80040e0:	40020070 	.word	0x40020070
 80040e4:	40020088 	.word	0x40020088
 80040e8:	400200a0 	.word	0x400200a0
 80040ec:	400200b8 	.word	0x400200b8
 80040f0:	40020410 	.word	0x40020410
 80040f4:	40020428 	.word	0x40020428
 80040f8:	40020440 	.word	0x40020440
 80040fc:	40020458 	.word	0x40020458
 8004100:	40020470 	.word	0x40020470
 8004104:	40020488 	.word	0x40020488
 8004108:	400204a0 	.word	0x400204a0
 800410c:	400204b8 	.word	0x400204b8
 8004110:	58025408 	.word	0x58025408
 8004114:	5802541c 	.word	0x5802541c
 8004118:	58025430 	.word	0x58025430
 800411c:	58025444 	.word	0x58025444
 8004120:	58025458 	.word	0x58025458
 8004124:	5802546c 	.word	0x5802546c
 8004128:	58025480 	.word	0x58025480
 800412c:	58025494 	.word	0x58025494

08004130 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e226      	b.n	800459a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_DMA_Start_IT+0x2a>
 8004156:	2302      	movs	r3, #2
 8004158:	e21f      	b.n	800459a <HAL_DMA_Start_IT+0x46a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	f040 820a 	bne.w	8004584 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a68      	ldr	r2, [pc, #416]	; (8004324 <HAL_DMA_Start_IT+0x1f4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a66      	ldr	r2, [pc, #408]	; (8004328 <HAL_DMA_Start_IT+0x1f8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a65      	ldr	r2, [pc, #404]	; (800432c <HAL_DMA_Start_IT+0x1fc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a63      	ldr	r2, [pc, #396]	; (8004330 <HAL_DMA_Start_IT+0x200>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a62      	ldr	r2, [pc, #392]	; (8004334 <HAL_DMA_Start_IT+0x204>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a60      	ldr	r2, [pc, #384]	; (8004338 <HAL_DMA_Start_IT+0x208>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5f      	ldr	r2, [pc, #380]	; (800433c <HAL_DMA_Start_IT+0x20c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	; (8004340 <HAL_DMA_Start_IT+0x210>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5c      	ldr	r2, [pc, #368]	; (8004344 <HAL_DMA_Start_IT+0x214>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5a      	ldr	r2, [pc, #360]	; (8004348 <HAL_DMA_Start_IT+0x218>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a59      	ldr	r2, [pc, #356]	; (800434c <HAL_DMA_Start_IT+0x21c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_DMA_Start_IT+0x220>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_DMA_Start_IT+0x224>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a54      	ldr	r2, [pc, #336]	; (8004358 <HAL_DMA_Start_IT+0x228>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a53      	ldr	r2, [pc, #332]	; (800435c <HAL_DMA_Start_IT+0x22c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_Start_IT+0xee>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <HAL_DMA_Start_IT+0x230>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <HAL_DMA_Start_IT+0x100>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e007      	b.n	8004240 <HAL_DMA_Start_IT+0x110>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f001 fe74 	bl	8005f34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a34      	ldr	r2, [pc, #208]	; (8004324 <HAL_DMA_Start_IT+0x1f4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d04a      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a33      	ldr	r2, [pc, #204]	; (8004328 <HAL_DMA_Start_IT+0x1f8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d045      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a31      	ldr	r2, [pc, #196]	; (800432c <HAL_DMA_Start_IT+0x1fc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d040      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a30      	ldr	r2, [pc, #192]	; (8004330 <HAL_DMA_Start_IT+0x200>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d03b      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2e      	ldr	r2, [pc, #184]	; (8004334 <HAL_DMA_Start_IT+0x204>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d036      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <HAL_DMA_Start_IT+0x208>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d031      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2b      	ldr	r2, [pc, #172]	; (800433c <HAL_DMA_Start_IT+0x20c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02c      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <HAL_DMA_Start_IT+0x210>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d027      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a28      	ldr	r2, [pc, #160]	; (8004344 <HAL_DMA_Start_IT+0x214>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d022      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a27      	ldr	r2, [pc, #156]	; (8004348 <HAL_DMA_Start_IT+0x218>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d01d      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a25      	ldr	r2, [pc, #148]	; (800434c <HAL_DMA_Start_IT+0x21c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d018      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a24      	ldr	r2, [pc, #144]	; (8004350 <HAL_DMA_Start_IT+0x220>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a22      	ldr	r2, [pc, #136]	; (8004354 <HAL_DMA_Start_IT+0x224>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a21      	ldr	r2, [pc, #132]	; (8004358 <HAL_DMA_Start_IT+0x228>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <HAL_DMA_Start_IT+0x22c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_Start_IT+0x1bc>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_DMA_Start_IT+0x230>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <HAL_DMA_Start_IT+0x1c0>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_DMA_Start_IT+0x1c2>
 80042f0:	2300      	movs	r3, #0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d036      	beq.n	8004364 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 021e 	bic.w	r2, r3, #30
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0216 	orr.w	r2, r2, #22
 8004308:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03e      	beq.n	8004390 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0208 	orr.w	r2, r2, #8
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e035      	b.n	8004390 <HAL_DMA_Start_IT+0x260>
 8004324:	40020010 	.word	0x40020010
 8004328:	40020028 	.word	0x40020028
 800432c:	40020040 	.word	0x40020040
 8004330:	40020058 	.word	0x40020058
 8004334:	40020070 	.word	0x40020070
 8004338:	40020088 	.word	0x40020088
 800433c:	400200a0 	.word	0x400200a0
 8004340:	400200b8 	.word	0x400200b8
 8004344:	40020410 	.word	0x40020410
 8004348:	40020428 	.word	0x40020428
 800434c:	40020440 	.word	0x40020440
 8004350:	40020458 	.word	0x40020458
 8004354:	40020470 	.word	0x40020470
 8004358:	40020488 	.word	0x40020488
 800435c:	400204a0 	.word	0x400204a0
 8004360:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 020e 	bic.w	r2, r3, #14
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 020a 	orr.w	r2, r2, #10
 8004376:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0204 	orr.w	r2, r2, #4
 800438e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a83      	ldr	r2, [pc, #524]	; (80045a4 <HAL_DMA_Start_IT+0x474>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d072      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a82      	ldr	r2, [pc, #520]	; (80045a8 <HAL_DMA_Start_IT+0x478>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d06d      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a80      	ldr	r2, [pc, #512]	; (80045ac <HAL_DMA_Start_IT+0x47c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d068      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a7f      	ldr	r2, [pc, #508]	; (80045b0 <HAL_DMA_Start_IT+0x480>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d063      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a7d      	ldr	r2, [pc, #500]	; (80045b4 <HAL_DMA_Start_IT+0x484>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d05e      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7c      	ldr	r2, [pc, #496]	; (80045b8 <HAL_DMA_Start_IT+0x488>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d059      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7a      	ldr	r2, [pc, #488]	; (80045bc <HAL_DMA_Start_IT+0x48c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d054      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a79      	ldr	r2, [pc, #484]	; (80045c0 <HAL_DMA_Start_IT+0x490>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04f      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a77      	ldr	r2, [pc, #476]	; (80045c4 <HAL_DMA_Start_IT+0x494>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d04a      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a76      	ldr	r2, [pc, #472]	; (80045c8 <HAL_DMA_Start_IT+0x498>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d045      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a74      	ldr	r2, [pc, #464]	; (80045cc <HAL_DMA_Start_IT+0x49c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d040      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a73      	ldr	r2, [pc, #460]	; (80045d0 <HAL_DMA_Start_IT+0x4a0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d03b      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a71      	ldr	r2, [pc, #452]	; (80045d4 <HAL_DMA_Start_IT+0x4a4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d036      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a70      	ldr	r2, [pc, #448]	; (80045d8 <HAL_DMA_Start_IT+0x4a8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d031      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6e      	ldr	r2, [pc, #440]	; (80045dc <HAL_DMA_Start_IT+0x4ac>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02c      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6d      	ldr	r2, [pc, #436]	; (80045e0 <HAL_DMA_Start_IT+0x4b0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d027      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6b      	ldr	r2, [pc, #428]	; (80045e4 <HAL_DMA_Start_IT+0x4b4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6a      	ldr	r2, [pc, #424]	; (80045e8 <HAL_DMA_Start_IT+0x4b8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d01d      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a68      	ldr	r2, [pc, #416]	; (80045ec <HAL_DMA_Start_IT+0x4bc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a67      	ldr	r2, [pc, #412]	; (80045f0 <HAL_DMA_Start_IT+0x4c0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a65      	ldr	r2, [pc, #404]	; (80045f4 <HAL_DMA_Start_IT+0x4c4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a64      	ldr	r2, [pc, #400]	; (80045f8 <HAL_DMA_Start_IT+0x4c8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a62      	ldr	r2, [pc, #392]	; (80045fc <HAL_DMA_Start_IT+0x4cc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_DMA_Start_IT+0x350>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a61      	ldr	r2, [pc, #388]	; (8004600 <HAL_DMA_Start_IT+0x4d0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_DMA_Start_IT+0x354>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_DMA_Start_IT+0x356>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01a      	beq.n	80044c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a37      	ldr	r2, [pc, #220]	; (80045a4 <HAL_DMA_Start_IT+0x474>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04a      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <HAL_DMA_Start_IT+0x478>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d045      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a34      	ldr	r2, [pc, #208]	; (80045ac <HAL_DMA_Start_IT+0x47c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d040      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a33      	ldr	r2, [pc, #204]	; (80045b0 <HAL_DMA_Start_IT+0x480>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03b      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a31      	ldr	r2, [pc, #196]	; (80045b4 <HAL_DMA_Start_IT+0x484>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d036      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <HAL_DMA_Start_IT+0x488>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d031      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <HAL_DMA_Start_IT+0x48c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d02c      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_DMA_Start_IT+0x490>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d027      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_DMA_Start_IT+0x494>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <HAL_DMA_Start_IT+0x498>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a28      	ldr	r2, [pc, #160]	; (80045cc <HAL_DMA_Start_IT+0x49c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <HAL_DMA_Start_IT+0x4a0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a25      	ldr	r2, [pc, #148]	; (80045d4 <HAL_DMA_Start_IT+0x4a4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <HAL_DMA_Start_IT+0x4a8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <HAL_DMA_Start_IT+0x4ac>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_DMA_Start_IT+0x430>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <HAL_DMA_Start_IT+0x4b0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d108      	bne.n	8004572 <HAL_DMA_Start_IT+0x442>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e012      	b.n	8004598 <HAL_DMA_Start_IT+0x468>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e009      	b.n	8004598 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004592:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40020010 	.word	0x40020010
 80045a8:	40020028 	.word	0x40020028
 80045ac:	40020040 	.word	0x40020040
 80045b0:	40020058 	.word	0x40020058
 80045b4:	40020070 	.word	0x40020070
 80045b8:	40020088 	.word	0x40020088
 80045bc:	400200a0 	.word	0x400200a0
 80045c0:	400200b8 	.word	0x400200b8
 80045c4:	40020410 	.word	0x40020410
 80045c8:	40020428 	.word	0x40020428
 80045cc:	40020440 	.word	0x40020440
 80045d0:	40020458 	.word	0x40020458
 80045d4:	40020470 	.word	0x40020470
 80045d8:	40020488 	.word	0x40020488
 80045dc:	400204a0 	.word	0x400204a0
 80045e0:	400204b8 	.word	0x400204b8
 80045e4:	58025408 	.word	0x58025408
 80045e8:	5802541c 	.word	0x5802541c
 80045ec:	58025430 	.word	0x58025430
 80045f0:	58025444 	.word	0x58025444
 80045f4:	58025458 	.word	0x58025458
 80045f8:	5802546c 	.word	0x5802546c
 80045fc:	58025480 	.word	0x58025480
 8004600:	58025494 	.word	0x58025494

08004604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800460c:	f7ff f93c 	bl	8003888 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e2dc      	b.n	8004bd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d008      	beq.n	800463a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e2cd      	b.n	8004bd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a76      	ldr	r2, [pc, #472]	; (8004818 <HAL_DMA_Abort+0x214>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d04a      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a74      	ldr	r2, [pc, #464]	; (800481c <HAL_DMA_Abort+0x218>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d045      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a73      	ldr	r2, [pc, #460]	; (8004820 <HAL_DMA_Abort+0x21c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d040      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a71      	ldr	r2, [pc, #452]	; (8004824 <HAL_DMA_Abort+0x220>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d03b      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a70      	ldr	r2, [pc, #448]	; (8004828 <HAL_DMA_Abort+0x224>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d036      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a6e      	ldr	r2, [pc, #440]	; (800482c <HAL_DMA_Abort+0x228>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d031      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6d      	ldr	r2, [pc, #436]	; (8004830 <HAL_DMA_Abort+0x22c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d02c      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6b      	ldr	r2, [pc, #428]	; (8004834 <HAL_DMA_Abort+0x230>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d027      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6a      	ldr	r2, [pc, #424]	; (8004838 <HAL_DMA_Abort+0x234>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_DMA_Abort+0x238>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a67      	ldr	r2, [pc, #412]	; (8004840 <HAL_DMA_Abort+0x23c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <HAL_DMA_Abort+0x240>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a64      	ldr	r2, [pc, #400]	; (8004848 <HAL_DMA_Abort+0x244>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a62      	ldr	r2, [pc, #392]	; (800484c <HAL_DMA_Abort+0x248>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a61      	ldr	r2, [pc, #388]	; (8004850 <HAL_DMA_Abort+0x24c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_Abort+0xd6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5f      	ldr	r2, [pc, #380]	; (8004854 <HAL_DMA_Abort+0x250>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_DMA_Abort+0xda>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_DMA_Abort+0xdc>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 021e 	bic.w	r2, r2, #30
 80046f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004702:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e00a      	b.n	8004722 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 020e 	bic.w	r2, r2, #14
 800471a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a3c      	ldr	r2, [pc, #240]	; (8004818 <HAL_DMA_Abort+0x214>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d072      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3a      	ldr	r2, [pc, #232]	; (800481c <HAL_DMA_Abort+0x218>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d06d      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a39      	ldr	r2, [pc, #228]	; (8004820 <HAL_DMA_Abort+0x21c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d068      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a37      	ldr	r2, [pc, #220]	; (8004824 <HAL_DMA_Abort+0x220>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d063      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a36      	ldr	r2, [pc, #216]	; (8004828 <HAL_DMA_Abort+0x224>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d05e      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a34      	ldr	r2, [pc, #208]	; (800482c <HAL_DMA_Abort+0x228>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d059      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a33      	ldr	r2, [pc, #204]	; (8004830 <HAL_DMA_Abort+0x22c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d054      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a31      	ldr	r2, [pc, #196]	; (8004834 <HAL_DMA_Abort+0x230>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d04f      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a30      	ldr	r2, [pc, #192]	; (8004838 <HAL_DMA_Abort+0x234>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d04a      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2e      	ldr	r2, [pc, #184]	; (800483c <HAL_DMA_Abort+0x238>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d045      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2d      	ldr	r2, [pc, #180]	; (8004840 <HAL_DMA_Abort+0x23c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d040      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2b      	ldr	r2, [pc, #172]	; (8004844 <HAL_DMA_Abort+0x240>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d03b      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <HAL_DMA_Abort+0x244>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d036      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a28      	ldr	r2, [pc, #160]	; (800484c <HAL_DMA_Abort+0x248>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d031      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a27      	ldr	r2, [pc, #156]	; (8004850 <HAL_DMA_Abort+0x24c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d02c      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a25      	ldr	r2, [pc, #148]	; (8004854 <HAL_DMA_Abort+0x250>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d027      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a24      	ldr	r2, [pc, #144]	; (8004858 <HAL_DMA_Abort+0x254>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a22      	ldr	r2, [pc, #136]	; (800485c <HAL_DMA_Abort+0x258>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01d      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a21      	ldr	r2, [pc, #132]	; (8004860 <HAL_DMA_Abort+0x25c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <HAL_DMA_Abort+0x260>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_DMA_Abort+0x264>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_DMA_Abort+0x268>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_DMA_Abort+0x26c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_DMA_Abort+0x20e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_DMA_Abort+0x270>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d132      	bne.n	8004878 <HAL_DMA_Abort+0x274>
 8004812:	2301      	movs	r3, #1
 8004814:	e031      	b.n	800487a <HAL_DMA_Abort+0x276>
 8004816:	bf00      	nop
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
 8004858:	58025408 	.word	0x58025408
 800485c:	5802541c 	.word	0x5802541c
 8004860:	58025430 	.word	0x58025430
 8004864:	58025444 	.word	0x58025444
 8004868:	58025458 	.word	0x58025458
 800486c:	5802546c 	.word	0x5802546c
 8004870:	58025480 	.word	0x58025480
 8004874:	58025494 	.word	0x58025494
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6d      	ldr	r2, [pc, #436]	; (8004a48 <HAL_DMA_Abort+0x444>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d04a      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a6b      	ldr	r2, [pc, #428]	; (8004a4c <HAL_DMA_Abort+0x448>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d045      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6a      	ldr	r2, [pc, #424]	; (8004a50 <HAL_DMA_Abort+0x44c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d040      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a68      	ldr	r2, [pc, #416]	; (8004a54 <HAL_DMA_Abort+0x450>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d03b      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a67      	ldr	r2, [pc, #412]	; (8004a58 <HAL_DMA_Abort+0x454>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d036      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <HAL_DMA_Abort+0x458>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a64      	ldr	r2, [pc, #400]	; (8004a60 <HAL_DMA_Abort+0x45c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d02c      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a62      	ldr	r2, [pc, #392]	; (8004a64 <HAL_DMA_Abort+0x460>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d027      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a61      	ldr	r2, [pc, #388]	; (8004a68 <HAL_DMA_Abort+0x464>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5f      	ldr	r2, [pc, #380]	; (8004a6c <HAL_DMA_Abort+0x468>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a5e      	ldr	r2, [pc, #376]	; (8004a70 <HAL_DMA_Abort+0x46c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5c      	ldr	r2, [pc, #368]	; (8004a74 <HAL_DMA_Abort+0x470>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a5b      	ldr	r2, [pc, #364]	; (8004a78 <HAL_DMA_Abort+0x474>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a59      	ldr	r2, [pc, #356]	; (8004a7c <HAL_DMA_Abort+0x478>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_DMA_Abort+0x47c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_DMA_Abort+0x32a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a56      	ldr	r2, [pc, #344]	; (8004a84 <HAL_DMA_Abort+0x480>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <HAL_DMA_Abort+0x33c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e007      	b.n	8004950 <HAL_DMA_Abort+0x34c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004950:	e013      	b.n	800497a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004952:	f7fe ff99 	bl	8003888 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b05      	cmp	r3, #5
 800495e:	d90c      	bls.n	800497a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2203      	movs	r2, #3
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e12d      	b.n	8004bd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <HAL_DMA_Abort+0x444>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <HAL_DMA_Abort+0x448>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2c      	ldr	r2, [pc, #176]	; (8004a50 <HAL_DMA_Abort+0x44c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <HAL_DMA_Abort+0x450>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <HAL_DMA_Abort+0x454>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <HAL_DMA_Abort+0x458>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <HAL_DMA_Abort+0x45c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <HAL_DMA_Abort+0x460>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <HAL_DMA_Abort+0x464>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <HAL_DMA_Abort+0x468>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <HAL_DMA_Abort+0x46c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <HAL_DMA_Abort+0x470>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <HAL_DMA_Abort+0x474>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_DMA_Abort+0x478>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <HAL_DMA_Abort+0x47c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_Abort+0x422>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <HAL_DMA_Abort+0x480>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Abort+0x426>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_Abort+0x428>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02b      	beq.n	8004a88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	223f      	movs	r2, #63	; 0x3f
 8004a40:	409a      	lsls	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	e02a      	b.n	8004a9e <HAL_DMA_Abort+0x49a>
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a4f      	ldr	r2, [pc, #316]	; (8004be0 <HAL_DMA_Abort+0x5dc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d072      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a4d      	ldr	r2, [pc, #308]	; (8004be4 <HAL_DMA_Abort+0x5e0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d06d      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4c      	ldr	r2, [pc, #304]	; (8004be8 <HAL_DMA_Abort+0x5e4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d068      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_DMA_Abort+0x5e8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d063      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a49      	ldr	r2, [pc, #292]	; (8004bf0 <HAL_DMA_Abort+0x5ec>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d05e      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a47      	ldr	r2, [pc, #284]	; (8004bf4 <HAL_DMA_Abort+0x5f0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d059      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a46      	ldr	r2, [pc, #280]	; (8004bf8 <HAL_DMA_Abort+0x5f4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d054      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a44      	ldr	r2, [pc, #272]	; (8004bfc <HAL_DMA_Abort+0x5f8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d04f      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a43      	ldr	r2, [pc, #268]	; (8004c00 <HAL_DMA_Abort+0x5fc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04a      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a41      	ldr	r2, [pc, #260]	; (8004c04 <HAL_DMA_Abort+0x600>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d045      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <HAL_DMA_Abort+0x604>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d040      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3e      	ldr	r2, [pc, #248]	; (8004c0c <HAL_DMA_Abort+0x608>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <HAL_DMA_Abort+0x60c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d036      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <HAL_DMA_Abort+0x610>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <HAL_DMA_Abort+0x614>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d02c      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a38      	ldr	r2, [pc, #224]	; (8004c1c <HAL_DMA_Abort+0x618>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a37      	ldr	r2, [pc, #220]	; (8004c20 <HAL_DMA_Abort+0x61c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <HAL_DMA_Abort+0x620>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <HAL_DMA_Abort+0x624>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a32      	ldr	r2, [pc, #200]	; (8004c2c <HAL_DMA_Abort+0x628>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <HAL_DMA_Abort+0x62c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <HAL_DMA_Abort+0x630>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <HAL_DMA_Abort+0x634>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_Abort+0x58a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <HAL_DMA_Abort+0x638>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_DMA_Abort+0x58e>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_DMA_Abort+0x590>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ba0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004bc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40020010 	.word	0x40020010
 8004be4:	40020028 	.word	0x40020028
 8004be8:	40020040 	.word	0x40020040
 8004bec:	40020058 	.word	0x40020058
 8004bf0:	40020070 	.word	0x40020070
 8004bf4:	40020088 	.word	0x40020088
 8004bf8:	400200a0 	.word	0x400200a0
 8004bfc:	400200b8 	.word	0x400200b8
 8004c00:	40020410 	.word	0x40020410
 8004c04:	40020428 	.word	0x40020428
 8004c08:	40020440 	.word	0x40020440
 8004c0c:	40020458 	.word	0x40020458
 8004c10:	40020470 	.word	0x40020470
 8004c14:	40020488 	.word	0x40020488
 8004c18:	400204a0 	.word	0x400204a0
 8004c1c:	400204b8 	.word	0x400204b8
 8004c20:	58025408 	.word	0x58025408
 8004c24:	5802541c 	.word	0x5802541c
 8004c28:	58025430 	.word	0x58025430
 8004c2c:	58025444 	.word	0x58025444
 8004c30:	58025458 	.word	0x58025458
 8004c34:	5802546c 	.word	0x5802546c
 8004c38:	58025480 	.word	0x58025480
 8004c3c:	58025494 	.word	0x58025494

08004c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e205      	b.n	800505e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e1fa      	b.n	800505e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a8c      	ldr	r2, [pc, #560]	; (8004ea0 <HAL_DMA_Abort_IT+0x260>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d04a      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a8b      	ldr	r2, [pc, #556]	; (8004ea4 <HAL_DMA_Abort_IT+0x264>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d045      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a89      	ldr	r2, [pc, #548]	; (8004ea8 <HAL_DMA_Abort_IT+0x268>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d040      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a88      	ldr	r2, [pc, #544]	; (8004eac <HAL_DMA_Abort_IT+0x26c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d03b      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a86      	ldr	r2, [pc, #536]	; (8004eb0 <HAL_DMA_Abort_IT+0x270>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d036      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a85      	ldr	r2, [pc, #532]	; (8004eb4 <HAL_DMA_Abort_IT+0x274>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d031      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a83      	ldr	r2, [pc, #524]	; (8004eb8 <HAL_DMA_Abort_IT+0x278>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d02c      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a82      	ldr	r2, [pc, #520]	; (8004ebc <HAL_DMA_Abort_IT+0x27c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d027      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a80      	ldr	r2, [pc, #512]	; (8004ec0 <HAL_DMA_Abort_IT+0x280>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d022      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7f      	ldr	r2, [pc, #508]	; (8004ec4 <HAL_DMA_Abort_IT+0x284>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d01d      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a7d      	ldr	r2, [pc, #500]	; (8004ec8 <HAL_DMA_Abort_IT+0x288>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d018      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7c      	ldr	r2, [pc, #496]	; (8004ecc <HAL_DMA_Abort_IT+0x28c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7a      	ldr	r2, [pc, #488]	; (8004ed0 <HAL_DMA_Abort_IT+0x290>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00e      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a79      	ldr	r2, [pc, #484]	; (8004ed4 <HAL_DMA_Abort_IT+0x294>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a77      	ldr	r2, [pc, #476]	; (8004ed8 <HAL_DMA_Abort_IT+0x298>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_DMA_Abort_IT+0xc8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a76      	ldr	r2, [pc, #472]	; (8004edc <HAL_DMA_Abort_IT+0x29c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_DMA_Abort_IT+0xcc>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_DMA_Abort_IT+0xce>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d065      	beq.n	8004dde <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a60      	ldr	r2, [pc, #384]	; (8004ea0 <HAL_DMA_Abort_IT+0x260>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d04a      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5e      	ldr	r2, [pc, #376]	; (8004ea4 <HAL_DMA_Abort_IT+0x264>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d045      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a5d      	ldr	r2, [pc, #372]	; (8004ea8 <HAL_DMA_Abort_IT+0x268>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d040      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a5b      	ldr	r2, [pc, #364]	; (8004eac <HAL_DMA_Abort_IT+0x26c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d03b      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a5a      	ldr	r2, [pc, #360]	; (8004eb0 <HAL_DMA_Abort_IT+0x270>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d036      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_DMA_Abort_IT+0x274>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d031      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_DMA_Abort_IT+0x278>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d02c      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a55      	ldr	r2, [pc, #340]	; (8004ebc <HAL_DMA_Abort_IT+0x27c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d027      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a54      	ldr	r2, [pc, #336]	; (8004ec0 <HAL_DMA_Abort_IT+0x280>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_DMA_Abort_IT+0x284>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01d      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_DMA_Abort_IT+0x288>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d018      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a4f      	ldr	r2, [pc, #316]	; (8004ecc <HAL_DMA_Abort_IT+0x28c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a4e      	ldr	r2, [pc, #312]	; (8004ed0 <HAL_DMA_Abort_IT+0x290>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a4c      	ldr	r2, [pc, #304]	; (8004ed4 <HAL_DMA_Abort_IT+0x294>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_DMA_Abort_IT+0x298>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_DMA_Abort_IT+0x17a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a49      	ldr	r2, [pc, #292]	; (8004edc <HAL_DMA_Abort_IT+0x29c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <HAL_DMA_Abort_IT+0x18c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e147      	b.n	800505c <HAL_DMA_Abort_IT+0x41c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e13e      	b.n	800505c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 020e 	bic.w	r2, r2, #14
 8004dec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <HAL_DMA_Abort_IT+0x260>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d04a      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <HAL_DMA_Abort_IT+0x264>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d045      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <HAL_DMA_Abort_IT+0x268>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d040      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a26      	ldr	r2, [pc, #152]	; (8004eac <HAL_DMA_Abort_IT+0x26c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d03b      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <HAL_DMA_Abort_IT+0x270>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d036      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_DMA_Abort_IT+0x274>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d031      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_DMA_Abort_IT+0x278>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d02c      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <HAL_DMA_Abort_IT+0x27c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d027      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <HAL_DMA_Abort_IT+0x280>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d022      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_DMA_Abort_IT+0x284>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01d      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <HAL_DMA_Abort_IT+0x288>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_DMA_Abort_IT+0x28c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <HAL_DMA_Abort_IT+0x290>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_DMA_Abort_IT+0x294>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_DMA_Abort_IT+0x298>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_DMA_Abort_IT+0x24e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a14      	ldr	r2, [pc, #80]	; (8004edc <HAL_DMA_Abort_IT+0x29c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d128      	bne.n	8004ee0 <HAL_DMA_Abort_IT+0x2a0>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e027      	b.n	8004ef0 <HAL_DMA_Abort_IT+0x2b0>
 8004ea0:	40020010 	.word	0x40020010
 8004ea4:	40020028 	.word	0x40020028
 8004ea8:	40020040 	.word	0x40020040
 8004eac:	40020058 	.word	0x40020058
 8004eb0:	40020070 	.word	0x40020070
 8004eb4:	40020088 	.word	0x40020088
 8004eb8:	400200a0 	.word	0x400200a0
 8004ebc:	400200b8 	.word	0x400200b8
 8004ec0:	40020410 	.word	0x40020410
 8004ec4:	40020428 	.word	0x40020428
 8004ec8:	40020440 	.word	0x40020440
 8004ecc:	40020458 	.word	0x40020458
 8004ed0:	40020470 	.word	0x40020470
 8004ed4:	40020488 	.word	0x40020488
 8004ed8:	400204a0 	.word	0x400204a0
 8004edc:	400204b8 	.word	0x400204b8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5c      	ldr	r2, [pc, #368]	; (8005068 <HAL_DMA_Abort_IT+0x428>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d072      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a5b      	ldr	r2, [pc, #364]	; (800506c <HAL_DMA_Abort_IT+0x42c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d06d      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a59      	ldr	r2, [pc, #356]	; (8005070 <HAL_DMA_Abort_IT+0x430>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d068      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a58      	ldr	r2, [pc, #352]	; (8005074 <HAL_DMA_Abort_IT+0x434>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d063      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_DMA_Abort_IT+0x438>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d05e      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a55      	ldr	r2, [pc, #340]	; (800507c <HAL_DMA_Abort_IT+0x43c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d059      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a53      	ldr	r2, [pc, #332]	; (8005080 <HAL_DMA_Abort_IT+0x440>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d054      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a52      	ldr	r2, [pc, #328]	; (8005084 <HAL_DMA_Abort_IT+0x444>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d04f      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a50      	ldr	r2, [pc, #320]	; (8005088 <HAL_DMA_Abort_IT+0x448>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d04a      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a4f      	ldr	r2, [pc, #316]	; (800508c <HAL_DMA_Abort_IT+0x44c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d045      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a4d      	ldr	r2, [pc, #308]	; (8005090 <HAL_DMA_Abort_IT+0x450>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d040      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a4c      	ldr	r2, [pc, #304]	; (8005094 <HAL_DMA_Abort_IT+0x454>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d03b      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <HAL_DMA_Abort_IT+0x458>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d036      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a49      	ldr	r2, [pc, #292]	; (800509c <HAL_DMA_Abort_IT+0x45c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d031      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a47      	ldr	r2, [pc, #284]	; (80050a0 <HAL_DMA_Abort_IT+0x460>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02c      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a46      	ldr	r2, [pc, #280]	; (80050a4 <HAL_DMA_Abort_IT+0x464>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d027      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a44      	ldr	r2, [pc, #272]	; (80050a8 <HAL_DMA_Abort_IT+0x468>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d022      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a43      	ldr	r2, [pc, #268]	; (80050ac <HAL_DMA_Abort_IT+0x46c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d01d      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_DMA_Abort_IT+0x470>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d018      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a40      	ldr	r2, [pc, #256]	; (80050b4 <HAL_DMA_Abort_IT+0x474>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <HAL_DMA_Abort_IT+0x478>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00e      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3d      	ldr	r2, [pc, #244]	; (80050bc <HAL_DMA_Abort_IT+0x47c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a3b      	ldr	r2, [pc, #236]	; (80050c0 <HAL_DMA_Abort_IT+0x480>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x3a0>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <HAL_DMA_Abort_IT+0x484>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA_Abort_IT+0x3a4>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_DMA_Abort_IT+0x3a6>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d028      	beq.n	800503c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005018:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005030:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800503a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40020010 	.word	0x40020010
 800506c:	40020028 	.word	0x40020028
 8005070:	40020040 	.word	0x40020040
 8005074:	40020058 	.word	0x40020058
 8005078:	40020070 	.word	0x40020070
 800507c:	40020088 	.word	0x40020088
 8005080:	400200a0 	.word	0x400200a0
 8005084:	400200b8 	.word	0x400200b8
 8005088:	40020410 	.word	0x40020410
 800508c:	40020428 	.word	0x40020428
 8005090:	40020440 	.word	0x40020440
 8005094:	40020458 	.word	0x40020458
 8005098:	40020470 	.word	0x40020470
 800509c:	40020488 	.word	0x40020488
 80050a0:	400204a0 	.word	0x400204a0
 80050a4:	400204b8 	.word	0x400204b8
 80050a8:	58025408 	.word	0x58025408
 80050ac:	5802541c 	.word	0x5802541c
 80050b0:	58025430 	.word	0x58025430
 80050b4:	58025444 	.word	0x58025444
 80050b8:	58025458 	.word	0x58025458
 80050bc:	5802546c 	.word	0x5802546c
 80050c0:	58025480 	.word	0x58025480
 80050c4:	58025494 	.word	0x58025494

080050c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050d4:	4b67      	ldr	r3, [pc, #412]	; (8005274 <HAL_DMA_IRQHandler+0x1ac>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_DMA_IRQHandler+0x1b0>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0a9b      	lsrs	r3, r3, #10
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a5f      	ldr	r2, [pc, #380]	; (800527c <HAL_DMA_IRQHandler+0x1b4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04a      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5d      	ldr	r2, [pc, #372]	; (8005280 <HAL_DMA_IRQHandler+0x1b8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d045      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5c      	ldr	r2, [pc, #368]	; (8005284 <HAL_DMA_IRQHandler+0x1bc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d040      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5a      	ldr	r2, [pc, #360]	; (8005288 <HAL_DMA_IRQHandler+0x1c0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d03b      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a59      	ldr	r2, [pc, #356]	; (800528c <HAL_DMA_IRQHandler+0x1c4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d036      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_DMA_IRQHandler+0x1c8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a56      	ldr	r2, [pc, #344]	; (8005294 <HAL_DMA_IRQHandler+0x1cc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d02c      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a54      	ldr	r2, [pc, #336]	; (8005298 <HAL_DMA_IRQHandler+0x1d0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d027      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a53      	ldr	r2, [pc, #332]	; (800529c <HAL_DMA_IRQHandler+0x1d4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a51      	ldr	r2, [pc, #324]	; (80052a0 <HAL_DMA_IRQHandler+0x1d8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a50      	ldr	r2, [pc, #320]	; (80052a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a4e      	ldr	r2, [pc, #312]	; (80052a8 <HAL_DMA_IRQHandler+0x1e0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4d      	ldr	r2, [pc, #308]	; (80052ac <HAL_DMA_IRQHandler+0x1e4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a4b      	ldr	r2, [pc, #300]	; (80052b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4a      	ldr	r2, [pc, #296]	; (80052b4 <HAL_DMA_IRQHandler+0x1ec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_DMA_IRQHandler+0xd2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a48      	ldr	r2, [pc, #288]	; (80052b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_DMA_IRQHandler+0xd6>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_DMA_IRQHandler+0xd8>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 842b 	beq.w	80059fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2208      	movs	r2, #8
 80051b0:	409a      	lsls	r2, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80a2 	beq.w	8005300 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2e      	ldr	r2, [pc, #184]	; (800527c <HAL_DMA_IRQHandler+0x1b4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <HAL_DMA_IRQHandler+0x1b8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <HAL_DMA_IRQHandler+0x1bc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <HAL_DMA_IRQHandler+0x1c0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a28      	ldr	r2, [pc, #160]	; (800528c <HAL_DMA_IRQHandler+0x1c4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <HAL_DMA_IRQHandler+0x1c8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_DMA_IRQHandler+0x1cc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a24      	ldr	r2, [pc, #144]	; (8005298 <HAL_DMA_IRQHandler+0x1d0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <HAL_DMA_IRQHandler+0x1d4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_DMA_IRQHandler+0x1d8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_DMA_IRQHandler+0x1e0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_DMA_IRQHandler+0x1e4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <HAL_DMA_IRQHandler+0x1ec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_IRQHandler+0x194>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d12f      	bne.n	80052bc <HAL_DMA_IRQHandler+0x1f4>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e02e      	b.n	80052d0 <HAL_DMA_IRQHandler+0x208>
 8005272:	bf00      	nop
 8005274:	20000000 	.word	0x20000000
 8005278:	1b4e81b5 	.word	0x1b4e81b5
 800527c:	40020010 	.word	0x40020010
 8005280:	40020028 	.word	0x40020028
 8005284:	40020040 	.word	0x40020040
 8005288:	40020058 	.word	0x40020058
 800528c:	40020070 	.word	0x40020070
 8005290:	40020088 	.word	0x40020088
 8005294:	400200a0 	.word	0x400200a0
 8005298:	400200b8 	.word	0x400200b8
 800529c:	40020410 	.word	0x40020410
 80052a0:	40020428 	.word	0x40020428
 80052a4:	40020440 	.word	0x40020440
 80052a8:	40020458 	.word	0x40020458
 80052ac:	40020470 	.word	0x40020470
 80052b0:	40020488 	.word	0x40020488
 80052b4:	400204a0 	.word	0x400204a0
 80052b8:	400204b8 	.word	0x400204b8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d015      	beq.n	8005300 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0204 	bic.w	r2, r2, #4
 80052e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2208      	movs	r2, #8
 80052ee:	409a      	lsls	r2, r3
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d06e      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a69      	ldr	r2, [pc, #420]	; (80054c0 <HAL_DMA_IRQHandler+0x3f8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d04a      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a67      	ldr	r2, [pc, #412]	; (80054c4 <HAL_DMA_IRQHandler+0x3fc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d045      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a66      	ldr	r2, [pc, #408]	; (80054c8 <HAL_DMA_IRQHandler+0x400>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d040      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a64      	ldr	r2, [pc, #400]	; (80054cc <HAL_DMA_IRQHandler+0x404>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d03b      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a63      	ldr	r2, [pc, #396]	; (80054d0 <HAL_DMA_IRQHandler+0x408>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d036      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a61      	ldr	r2, [pc, #388]	; (80054d4 <HAL_DMA_IRQHandler+0x40c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d031      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a60      	ldr	r2, [pc, #384]	; (80054d8 <HAL_DMA_IRQHandler+0x410>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d02c      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a5e      	ldr	r2, [pc, #376]	; (80054dc <HAL_DMA_IRQHandler+0x414>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d027      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a5d      	ldr	r2, [pc, #372]	; (80054e0 <HAL_DMA_IRQHandler+0x418>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a5b      	ldr	r2, [pc, #364]	; (80054e4 <HAL_DMA_IRQHandler+0x41c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01d      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a5a      	ldr	r2, [pc, #360]	; (80054e8 <HAL_DMA_IRQHandler+0x420>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a58      	ldr	r2, [pc, #352]	; (80054ec <HAL_DMA_IRQHandler+0x424>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a57      	ldr	r2, [pc, #348]	; (80054f0 <HAL_DMA_IRQHandler+0x428>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a55      	ldr	r2, [pc, #340]	; (80054f4 <HAL_DMA_IRQHandler+0x42c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a54      	ldr	r2, [pc, #336]	; (80054f8 <HAL_DMA_IRQHandler+0x430>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x2ee>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a52      	ldr	r2, [pc, #328]	; (80054fc <HAL_DMA_IRQHandler+0x434>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10a      	bne.n	80053cc <HAL_DMA_IRQHandler+0x304>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e003      	b.n	80053d4 <HAL_DMA_IRQHandler+0x30c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2201      	movs	r2, #1
 80053e2:	409a      	lsls	r2, r3
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f043 0202 	orr.w	r2, r3, #2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2204      	movs	r2, #4
 80053fe:	409a      	lsls	r2, r3
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4013      	ands	r3, r2
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 808f 	beq.w	8005528 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2c      	ldr	r2, [pc, #176]	; (80054c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d04a      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <HAL_DMA_IRQHandler+0x3fc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d045      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <HAL_DMA_IRQHandler+0x400>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d040      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a27      	ldr	r2, [pc, #156]	; (80054cc <HAL_DMA_IRQHandler+0x404>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d03b      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <HAL_DMA_IRQHandler+0x408>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d036      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <HAL_DMA_IRQHandler+0x40c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d031      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <HAL_DMA_IRQHandler+0x410>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d02c      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a21      	ldr	r2, [pc, #132]	; (80054dc <HAL_DMA_IRQHandler+0x414>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d027      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <HAL_DMA_IRQHandler+0x418>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <HAL_DMA_IRQHandler+0x41c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01d      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <HAL_DMA_IRQHandler+0x420>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_DMA_IRQHandler+0x424>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <HAL_DMA_IRQHandler+0x428>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_DMA_IRQHandler+0x42c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <HAL_DMA_IRQHandler+0x430>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_DMA_IRQHandler+0x3e2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a15      	ldr	r2, [pc, #84]	; (80054fc <HAL_DMA_IRQHandler+0x434>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d12a      	bne.n	8005500 <HAL_DMA_IRQHandler+0x438>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e023      	b.n	8005508 <HAL_DMA_IRQHandler+0x440>
 80054c0:	40020010 	.word	0x40020010
 80054c4:	40020028 	.word	0x40020028
 80054c8:	40020040 	.word	0x40020040
 80054cc:	40020058 	.word	0x40020058
 80054d0:	40020070 	.word	0x40020070
 80054d4:	40020088 	.word	0x40020088
 80054d8:	400200a0 	.word	0x400200a0
 80054dc:	400200b8 	.word	0x400200b8
 80054e0:	40020410 	.word	0x40020410
 80054e4:	40020428 	.word	0x40020428
 80054e8:	40020440 	.word	0x40020440
 80054ec:	40020458 	.word	0x40020458
 80054f0:	40020470 	.word	0x40020470
 80054f4:	40020488 	.word	0x40020488
 80054f8:	400204a0 	.word	0x400204a0
 80054fc:	400204b8 	.word	0x400204b8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	2204      	movs	r2, #4
 8005516:	409a      	lsls	r2, r3
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	f043 0204 	orr.w	r2, r3, #4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2210      	movs	r2, #16
 8005532:	409a      	lsls	r2, r3
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80a6 	beq.w	800568a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a85      	ldr	r2, [pc, #532]	; (8005758 <HAL_DMA_IRQHandler+0x690>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d04a      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a83      	ldr	r2, [pc, #524]	; (800575c <HAL_DMA_IRQHandler+0x694>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d045      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a82      	ldr	r2, [pc, #520]	; (8005760 <HAL_DMA_IRQHandler+0x698>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d040      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a80      	ldr	r2, [pc, #512]	; (8005764 <HAL_DMA_IRQHandler+0x69c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d03b      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7f      	ldr	r2, [pc, #508]	; (8005768 <HAL_DMA_IRQHandler+0x6a0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d036      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a7d      	ldr	r2, [pc, #500]	; (800576c <HAL_DMA_IRQHandler+0x6a4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d031      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a7c      	ldr	r2, [pc, #496]	; (8005770 <HAL_DMA_IRQHandler+0x6a8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d02c      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a7a      	ldr	r2, [pc, #488]	; (8005774 <HAL_DMA_IRQHandler+0x6ac>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d027      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a79      	ldr	r2, [pc, #484]	; (8005778 <HAL_DMA_IRQHandler+0x6b0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a77      	ldr	r2, [pc, #476]	; (800577c <HAL_DMA_IRQHandler+0x6b4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a76      	ldr	r2, [pc, #472]	; (8005780 <HAL_DMA_IRQHandler+0x6b8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a74      	ldr	r2, [pc, #464]	; (8005784 <HAL_DMA_IRQHandler+0x6bc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a73      	ldr	r2, [pc, #460]	; (8005788 <HAL_DMA_IRQHandler+0x6c0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a71      	ldr	r2, [pc, #452]	; (800578c <HAL_DMA_IRQHandler+0x6c4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a70      	ldr	r2, [pc, #448]	; (8005790 <HAL_DMA_IRQHandler+0x6c8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_DMA_IRQHandler+0x516>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6e      	ldr	r2, [pc, #440]	; (8005794 <HAL_DMA_IRQHandler+0x6cc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d10a      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x52c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e009      	b.n	8005608 <HAL_DMA_IRQHandler+0x540>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d03e      	beq.n	800568a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2210      	movs	r2, #16
 8005616:	409a      	lsls	r2, r3
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d024      	beq.n	800568a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4798      	blx	r3
 8005648:	e01f      	b.n	800568a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01b      	beq.n	800568a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
 800565a:	e016      	b.n	800568a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0208 	bic.w	r2, r2, #8
 8005678:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2220      	movs	r2, #32
 8005694:	409a      	lsls	r2, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8110 	beq.w	80058c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a2c      	ldr	r2, [pc, #176]	; (8005758 <HAL_DMA_IRQHandler+0x690>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d04a      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2b      	ldr	r2, [pc, #172]	; (800575c <HAL_DMA_IRQHandler+0x694>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d045      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <HAL_DMA_IRQHandler+0x698>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d040      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a28      	ldr	r2, [pc, #160]	; (8005764 <HAL_DMA_IRQHandler+0x69c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d03b      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <HAL_DMA_IRQHandler+0x6a0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d036      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a25      	ldr	r2, [pc, #148]	; (800576c <HAL_DMA_IRQHandler+0x6a4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d031      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a23      	ldr	r2, [pc, #140]	; (8005770 <HAL_DMA_IRQHandler+0x6a8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d02c      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a22      	ldr	r2, [pc, #136]	; (8005774 <HAL_DMA_IRQHandler+0x6ac>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d027      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <HAL_DMA_IRQHandler+0x6b0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d022      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_DMA_IRQHandler+0x6b4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d01d      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_DMA_IRQHandler+0x6b8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d018      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_DMA_IRQHandler+0x6bc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <HAL_DMA_IRQHandler+0x6c0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_DMA_IRQHandler+0x6c4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d009      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HAL_DMA_IRQHandler+0x6c8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_DMA_IRQHandler+0x678>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <HAL_DMA_IRQHandler+0x6cc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d12b      	bne.n	8005798 <HAL_DMA_IRQHandler+0x6d0>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	e02a      	b.n	80057ac <HAL_DMA_IRQHandler+0x6e4>
 8005756:	bf00      	nop
 8005758:	40020010 	.word	0x40020010
 800575c:	40020028 	.word	0x40020028
 8005760:	40020040 	.word	0x40020040
 8005764:	40020058 	.word	0x40020058
 8005768:	40020070 	.word	0x40020070
 800576c:	40020088 	.word	0x40020088
 8005770:	400200a0 	.word	0x400200a0
 8005774:	400200b8 	.word	0x400200b8
 8005778:	40020410 	.word	0x40020410
 800577c:	40020428 	.word	0x40020428
 8005780:	40020440 	.word	0x40020440
 8005784:	40020458 	.word	0x40020458
 8005788:	40020470 	.word	0x40020470
 800578c:	40020488 	.word	0x40020488
 8005790:	400204a0 	.word	0x400204a0
 8005794:	400204b8 	.word	0x400204b8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bf14      	ite	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	2300      	moveq	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8087 	beq.w	80058c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2220      	movs	r2, #32
 80057bc:	409a      	lsls	r2, r3
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d139      	bne.n	8005842 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0216 	bic.w	r2, r2, #22
 80057dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <HAL_DMA_IRQHandler+0x736>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0208 	bic.w	r2, r2, #8
 800580c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	223f      	movs	r2, #63	; 0x3f
 8005818:	409a      	lsls	r2, r3
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 834a 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
          }
          return;
 8005840:	e344      	b.n	8005ecc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d018      	beq.n	8005882 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02c      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
 800586e:	e027      	b.n	80058c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e01e      	b.n	80058c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10f      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0210 	bic.w	r2, r2, #16
 800589e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8306 	beq.w	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8088 	beq.w	80059e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2204      	movs	r2, #4
 80058dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a7a      	ldr	r2, [pc, #488]	; (8005ad0 <HAL_DMA_IRQHandler+0xa08>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d04a      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a79      	ldr	r2, [pc, #484]	; (8005ad4 <HAL_DMA_IRQHandler+0xa0c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d045      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a77      	ldr	r2, [pc, #476]	; (8005ad8 <HAL_DMA_IRQHandler+0xa10>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d040      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a76      	ldr	r2, [pc, #472]	; (8005adc <HAL_DMA_IRQHandler+0xa14>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d03b      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a74      	ldr	r2, [pc, #464]	; (8005ae0 <HAL_DMA_IRQHandler+0xa18>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d036      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a73      	ldr	r2, [pc, #460]	; (8005ae4 <HAL_DMA_IRQHandler+0xa1c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d031      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a71      	ldr	r2, [pc, #452]	; (8005ae8 <HAL_DMA_IRQHandler+0xa20>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d02c      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a70      	ldr	r2, [pc, #448]	; (8005aec <HAL_DMA_IRQHandler+0xa24>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d027      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6e      	ldr	r2, [pc, #440]	; (8005af0 <HAL_DMA_IRQHandler+0xa28>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d022      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a6d      	ldr	r2, [pc, #436]	; (8005af4 <HAL_DMA_IRQHandler+0xa2c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d01d      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a6b      	ldr	r2, [pc, #428]	; (8005af8 <HAL_DMA_IRQHandler+0xa30>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a6a      	ldr	r2, [pc, #424]	; (8005afc <HAL_DMA_IRQHandler+0xa34>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a68      	ldr	r2, [pc, #416]	; (8005b00 <HAL_DMA_IRQHandler+0xa38>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a67      	ldr	r2, [pc, #412]	; (8005b04 <HAL_DMA_IRQHandler+0xa3c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a65      	ldr	r2, [pc, #404]	; (8005b08 <HAL_DMA_IRQHandler+0xa40>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_DMA_IRQHandler+0x8b8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a64      	ldr	r2, [pc, #400]	; (8005b0c <HAL_DMA_IRQHandler+0xa44>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <HAL_DMA_IRQHandler+0x8ca>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e007      	b.n	80059a2 <HAL_DMA_IRQHandler+0x8da>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d307      	bcc.n	80059be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f2      	bne.n	80059a2 <HAL_DMA_IRQHandler+0x8da>
 80059bc:	e000      	b.n	80059c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80059be:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2203      	movs	r2, #3
 80059da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80059de:	e003      	b.n	80059e8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8272 	beq.w	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
 80059fa:	e26c      	b.n	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a43      	ldr	r2, [pc, #268]	; (8005b10 <HAL_DMA_IRQHandler+0xa48>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d022      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a42      	ldr	r2, [pc, #264]	; (8005b14 <HAL_DMA_IRQHandler+0xa4c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d01d      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a40      	ldr	r2, [pc, #256]	; (8005b18 <HAL_DMA_IRQHandler+0xa50>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d018      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a3f      	ldr	r2, [pc, #252]	; (8005b1c <HAL_DMA_IRQHandler+0xa54>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3d      	ldr	r2, [pc, #244]	; (8005b20 <HAL_DMA_IRQHandler+0xa58>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00e      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a3c      	ldr	r2, [pc, #240]	; (8005b24 <HAL_DMA_IRQHandler+0xa5c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d009      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3a      	ldr	r2, [pc, #232]	; (8005b28 <HAL_DMA_IRQHandler+0xa60>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x984>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a39      	ldr	r2, [pc, #228]	; (8005b2c <HAL_DMA_IRQHandler+0xa64>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x988>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_DMA_IRQHandler+0x98a>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 823f 	beq.w	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2204      	movs	r2, #4
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80cd 	beq.w	8005c10 <HAL_DMA_IRQHandler+0xb48>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80c7 	beq.w	8005c10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d049      	beq.n	8005b30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8210 	beq.w	8005ed0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab8:	e20a      	b.n	8005ed0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8206 	beq.w	8005ed0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005acc:	e200      	b.n	8005ed0 <HAL_DMA_IRQHandler+0xe08>
 8005ace:	bf00      	nop
 8005ad0:	40020010 	.word	0x40020010
 8005ad4:	40020028 	.word	0x40020028
 8005ad8:	40020040 	.word	0x40020040
 8005adc:	40020058 	.word	0x40020058
 8005ae0:	40020070 	.word	0x40020070
 8005ae4:	40020088 	.word	0x40020088
 8005ae8:	400200a0 	.word	0x400200a0
 8005aec:	400200b8 	.word	0x400200b8
 8005af0:	40020410 	.word	0x40020410
 8005af4:	40020428 	.word	0x40020428
 8005af8:	40020440 	.word	0x40020440
 8005afc:	40020458 	.word	0x40020458
 8005b00:	40020470 	.word	0x40020470
 8005b04:	40020488 	.word	0x40020488
 8005b08:	400204a0 	.word	0x400204a0
 8005b0c:	400204b8 	.word	0x400204b8
 8005b10:	58025408 	.word	0x58025408
 8005b14:	5802541c 	.word	0x5802541c
 8005b18:	58025430 	.word	0x58025430
 8005b1c:	58025444 	.word	0x58025444
 8005b20:	58025458 	.word	0x58025458
 8005b24:	5802546c 	.word	0x5802546c
 8005b28:	58025480 	.word	0x58025480
 8005b2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d160      	bne.n	8005bfc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a8c      	ldr	r2, [pc, #560]	; (8005d70 <HAL_DMA_IRQHandler+0xca8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d04a      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a8a      	ldr	r2, [pc, #552]	; (8005d74 <HAL_DMA_IRQHandler+0xcac>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d045      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a89      	ldr	r2, [pc, #548]	; (8005d78 <HAL_DMA_IRQHandler+0xcb0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d040      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a87      	ldr	r2, [pc, #540]	; (8005d7c <HAL_DMA_IRQHandler+0xcb4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d03b      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a86      	ldr	r2, [pc, #536]	; (8005d80 <HAL_DMA_IRQHandler+0xcb8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d036      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a84      	ldr	r2, [pc, #528]	; (8005d84 <HAL_DMA_IRQHandler+0xcbc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d031      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a83      	ldr	r2, [pc, #524]	; (8005d88 <HAL_DMA_IRQHandler+0xcc0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d02c      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a81      	ldr	r2, [pc, #516]	; (8005d8c <HAL_DMA_IRQHandler+0xcc4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d027      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a80      	ldr	r2, [pc, #512]	; (8005d90 <HAL_DMA_IRQHandler+0xcc8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a7e      	ldr	r2, [pc, #504]	; (8005d94 <HAL_DMA_IRQHandler+0xccc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a7d      	ldr	r2, [pc, #500]	; (8005d98 <HAL_DMA_IRQHandler+0xcd0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a7b      	ldr	r2, [pc, #492]	; (8005d9c <HAL_DMA_IRQHandler+0xcd4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a7a      	ldr	r2, [pc, #488]	; (8005da0 <HAL_DMA_IRQHandler+0xcd8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a78      	ldr	r2, [pc, #480]	; (8005da4 <HAL_DMA_IRQHandler+0xcdc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a77      	ldr	r2, [pc, #476]	; (8005da8 <HAL_DMA_IRQHandler+0xce0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_DMA_IRQHandler+0xb12>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a75      	ldr	r2, [pc, #468]	; (8005dac <HAL_DMA_IRQHandler+0xce4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d108      	bne.n	8005bec <HAL_DMA_IRQHandler+0xb24>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0208 	bic.w	r2, r2, #8
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e007      	b.n	8005bfc <HAL_DMA_IRQHandler+0xb34>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8165 	beq.w	8005ed0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c0e:	e15f      	b.n	8005ed0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2202      	movs	r2, #2
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 80c5 	beq.w	8005db0 <HAL_DMA_IRQHandler+0xce8>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80bf 	beq.w	8005db0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	409a      	lsls	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d018      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 813a 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c68:	e134      	b.n	8005ed4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8130 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c7c:	e12a      	b.n	8005ed4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d168      	bne.n	8005d5a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a38      	ldr	r2, [pc, #224]	; (8005d70 <HAL_DMA_IRQHandler+0xca8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d04a      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a37      	ldr	r2, [pc, #220]	; (8005d74 <HAL_DMA_IRQHandler+0xcac>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d045      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a35      	ldr	r2, [pc, #212]	; (8005d78 <HAL_DMA_IRQHandler+0xcb0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d040      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a34      	ldr	r2, [pc, #208]	; (8005d7c <HAL_DMA_IRQHandler+0xcb4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d03b      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a32      	ldr	r2, [pc, #200]	; (8005d80 <HAL_DMA_IRQHandler+0xcb8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d036      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a31      	ldr	r2, [pc, #196]	; (8005d84 <HAL_DMA_IRQHandler+0xcbc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d031      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <HAL_DMA_IRQHandler+0xcc0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d02c      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2e      	ldr	r2, [pc, #184]	; (8005d8c <HAL_DMA_IRQHandler+0xcc4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d027      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <HAL_DMA_IRQHandler+0xcc8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d022      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a2b      	ldr	r2, [pc, #172]	; (8005d94 <HAL_DMA_IRQHandler+0xccc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d01d      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a29      	ldr	r2, [pc, #164]	; (8005d98 <HAL_DMA_IRQHandler+0xcd0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d018      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a28      	ldr	r2, [pc, #160]	; (8005d9c <HAL_DMA_IRQHandler+0xcd4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <HAL_DMA_IRQHandler+0xcd8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00e      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a25      	ldr	r2, [pc, #148]	; (8005da4 <HAL_DMA_IRQHandler+0xcdc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d009      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <HAL_DMA_IRQHandler+0xce0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_DMA_IRQHandler+0xc60>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a22      	ldr	r2, [pc, #136]	; (8005dac <HAL_DMA_IRQHandler+0xce4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <HAL_DMA_IRQHandler+0xc72>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0214 	bic.w	r2, r2, #20
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	e007      	b.n	8005d4a <HAL_DMA_IRQHandler+0xc82>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 020a 	bic.w	r2, r2, #10
 8005d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80b8 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d6c:	e0b2      	b.n	8005ed4 <HAL_DMA_IRQHandler+0xe0c>
 8005d6e:	bf00      	nop
 8005d70:	40020010 	.word	0x40020010
 8005d74:	40020028 	.word	0x40020028
 8005d78:	40020040 	.word	0x40020040
 8005d7c:	40020058 	.word	0x40020058
 8005d80:	40020070 	.word	0x40020070
 8005d84:	40020088 	.word	0x40020088
 8005d88:	400200a0 	.word	0x400200a0
 8005d8c:	400200b8 	.word	0x400200b8
 8005d90:	40020410 	.word	0x40020410
 8005d94:	40020428 	.word	0x40020428
 8005d98:	40020440 	.word	0x40020440
 8005d9c:	40020458 	.word	0x40020458
 8005da0:	40020470 	.word	0x40020470
 8005da4:	40020488 	.word	0x40020488
 8005da8:	400204a0 	.word	0x400204a0
 8005dac:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	2208      	movs	r2, #8
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8088 	beq.w	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8082 	beq.w	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a41      	ldr	r2, [pc, #260]	; (8005edc <HAL_DMA_IRQHandler+0xe14>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d04a      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a3f      	ldr	r2, [pc, #252]	; (8005ee0 <HAL_DMA_IRQHandler+0xe18>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d045      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a3e      	ldr	r2, [pc, #248]	; (8005ee4 <HAL_DMA_IRQHandler+0xe1c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d040      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <HAL_DMA_IRQHandler+0xe20>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d03b      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a3b      	ldr	r2, [pc, #236]	; (8005eec <HAL_DMA_IRQHandler+0xe24>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d036      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a39      	ldr	r2, [pc, #228]	; (8005ef0 <HAL_DMA_IRQHandler+0xe28>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d031      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a38      	ldr	r2, [pc, #224]	; (8005ef4 <HAL_DMA_IRQHandler+0xe2c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d02c      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a36      	ldr	r2, [pc, #216]	; (8005ef8 <HAL_DMA_IRQHandler+0xe30>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d027      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a35      	ldr	r2, [pc, #212]	; (8005efc <HAL_DMA_IRQHandler+0xe34>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a33      	ldr	r2, [pc, #204]	; (8005f00 <HAL_DMA_IRQHandler+0xe38>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01d      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a32      	ldr	r2, [pc, #200]	; (8005f04 <HAL_DMA_IRQHandler+0xe3c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a30      	ldr	r2, [pc, #192]	; (8005f08 <HAL_DMA_IRQHandler+0xe40>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2f      	ldr	r2, [pc, #188]	; (8005f0c <HAL_DMA_IRQHandler+0xe44>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2d      	ldr	r2, [pc, #180]	; (8005f10 <HAL_DMA_IRQHandler+0xe48>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2c      	ldr	r2, [pc, #176]	; (8005f14 <HAL_DMA_IRQHandler+0xe4c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xdaa>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <HAL_DMA_IRQHandler+0xe50>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d108      	bne.n	8005e84 <HAL_DMA_IRQHandler+0xdbc>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 021c 	bic.w	r2, r2, #28
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e007      	b.n	8005e94 <HAL_DMA_IRQHandler+0xdcc>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020e 	bic.w	r2, r2, #14
 8005e92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
 8005eca:	e004      	b.n	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ecc:	bf00      	nop
 8005ece:	e002      	b.n	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ed6:	3728      	adds	r7, #40	; 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40020010 	.word	0x40020010
 8005ee0:	40020028 	.word	0x40020028
 8005ee4:	40020040 	.word	0x40020040
 8005ee8:	40020058 	.word	0x40020058
 8005eec:	40020070 	.word	0x40020070
 8005ef0:	40020088 	.word	0x40020088
 8005ef4:	400200a0 	.word	0x400200a0
 8005ef8:	400200b8 	.word	0x400200b8
 8005efc:	40020410 	.word	0x40020410
 8005f00:	40020428 	.word	0x40020428
 8005f04:	40020440 	.word	0x40020440
 8005f08:	40020458 	.word	0x40020458
 8005f0c:	40020470 	.word	0x40020470
 8005f10:	40020488 	.word	0x40020488
 8005f14:	400204a0 	.word	0x400204a0
 8005f18:	400204b8 	.word	0x400204b8

08005f1c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a84      	ldr	r2, [pc, #528]	; (8006164 <DMA_SetConfig+0x230>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d072      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a82      	ldr	r2, [pc, #520]	; (8006168 <DMA_SetConfig+0x234>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d06d      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a81      	ldr	r2, [pc, #516]	; (800616c <DMA_SetConfig+0x238>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d068      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7f      	ldr	r2, [pc, #508]	; (8006170 <DMA_SetConfig+0x23c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d063      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a7e      	ldr	r2, [pc, #504]	; (8006174 <DMA_SetConfig+0x240>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d05e      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7c      	ldr	r2, [pc, #496]	; (8006178 <DMA_SetConfig+0x244>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d059      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a7b      	ldr	r2, [pc, #492]	; (800617c <DMA_SetConfig+0x248>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d054      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a79      	ldr	r2, [pc, #484]	; (8006180 <DMA_SetConfig+0x24c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04f      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a78      	ldr	r2, [pc, #480]	; (8006184 <DMA_SetConfig+0x250>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d04a      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a76      	ldr	r2, [pc, #472]	; (8006188 <DMA_SetConfig+0x254>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d045      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a75      	ldr	r2, [pc, #468]	; (800618c <DMA_SetConfig+0x258>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d040      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a73      	ldr	r2, [pc, #460]	; (8006190 <DMA_SetConfig+0x25c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d03b      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a72      	ldr	r2, [pc, #456]	; (8006194 <DMA_SetConfig+0x260>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d036      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a70      	ldr	r2, [pc, #448]	; (8006198 <DMA_SetConfig+0x264>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d031      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6f      	ldr	r2, [pc, #444]	; (800619c <DMA_SetConfig+0x268>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d02c      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a6d      	ldr	r2, [pc, #436]	; (80061a0 <DMA_SetConfig+0x26c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d027      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6c      	ldr	r2, [pc, #432]	; (80061a4 <DMA_SetConfig+0x270>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <DMA_SetConfig+0x10a>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a6a      	ldr	r2, [pc, #424]	; (80061a8 <DMA_SetConfig+0x274>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01d      	beq.n	800603e <DMA_SetConfig+0x10a>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a69      	ldr	r2, [pc, #420]	; (80061ac <DMA_SetConfig+0x278>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <DMA_SetConfig+0x10a>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a67      	ldr	r2, [pc, #412]	; (80061b0 <DMA_SetConfig+0x27c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <DMA_SetConfig+0x10a>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a66      	ldr	r2, [pc, #408]	; (80061b4 <DMA_SetConfig+0x280>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <DMA_SetConfig+0x10a>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a64      	ldr	r2, [pc, #400]	; (80061b8 <DMA_SetConfig+0x284>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <DMA_SetConfig+0x10a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a63      	ldr	r2, [pc, #396]	; (80061bc <DMA_SetConfig+0x288>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <DMA_SetConfig+0x10a>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a61      	ldr	r2, [pc, #388]	; (80061c0 <DMA_SetConfig+0x28c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <DMA_SetConfig+0x10e>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <DMA_SetConfig+0x110>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00d      	beq.n	8006064 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006050:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006062:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a3e      	ldr	r2, [pc, #248]	; (8006164 <DMA_SetConfig+0x230>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d04a      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a3d      	ldr	r2, [pc, #244]	; (8006168 <DMA_SetConfig+0x234>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d045      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3b      	ldr	r2, [pc, #236]	; (800616c <DMA_SetConfig+0x238>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d040      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <DMA_SetConfig+0x23c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d03b      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a38      	ldr	r2, [pc, #224]	; (8006174 <DMA_SetConfig+0x240>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d036      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a37      	ldr	r2, [pc, #220]	; (8006178 <DMA_SetConfig+0x244>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d031      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a35      	ldr	r2, [pc, #212]	; (800617c <DMA_SetConfig+0x248>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02c      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <DMA_SetConfig+0x24c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d027      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a32      	ldr	r2, [pc, #200]	; (8006184 <DMA_SetConfig+0x250>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a31      	ldr	r2, [pc, #196]	; (8006188 <DMA_SetConfig+0x254>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <DMA_SetConfig+0x258>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2e      	ldr	r2, [pc, #184]	; (8006190 <DMA_SetConfig+0x25c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2c      	ldr	r2, [pc, #176]	; (8006194 <DMA_SetConfig+0x260>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2b      	ldr	r2, [pc, #172]	; (8006198 <DMA_SetConfig+0x264>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <DMA_SetConfig+0x268>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <DMA_SetConfig+0x1d0>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <DMA_SetConfig+0x26c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <DMA_SetConfig+0x1d4>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <DMA_SetConfig+0x1d6>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05a      	beq.n	80061c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	223f      	movs	r2, #63	; 0x3f
 8006118:	409a      	lsls	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800612c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d108      	bne.n	8006150 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800614e:	e087      	b.n	8006260 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	60da      	str	r2, [r3, #12]
}
 8006160:	e07e      	b.n	8006260 <DMA_SetConfig+0x32c>
 8006162:	bf00      	nop
 8006164:	40020010 	.word	0x40020010
 8006168:	40020028 	.word	0x40020028
 800616c:	40020040 	.word	0x40020040
 8006170:	40020058 	.word	0x40020058
 8006174:	40020070 	.word	0x40020070
 8006178:	40020088 	.word	0x40020088
 800617c:	400200a0 	.word	0x400200a0
 8006180:	400200b8 	.word	0x400200b8
 8006184:	40020410 	.word	0x40020410
 8006188:	40020428 	.word	0x40020428
 800618c:	40020440 	.word	0x40020440
 8006190:	40020458 	.word	0x40020458
 8006194:	40020470 	.word	0x40020470
 8006198:	40020488 	.word	0x40020488
 800619c:	400204a0 	.word	0x400204a0
 80061a0:	400204b8 	.word	0x400204b8
 80061a4:	58025408 	.word	0x58025408
 80061a8:	5802541c 	.word	0x5802541c
 80061ac:	58025430 	.word	0x58025430
 80061b0:	58025444 	.word	0x58025444
 80061b4:	58025458 	.word	0x58025458
 80061b8:	5802546c 	.word	0x5802546c
 80061bc:	58025480 	.word	0x58025480
 80061c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <DMA_SetConfig+0x338>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d022      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a27      	ldr	r2, [pc, #156]	; (8006270 <DMA_SetConfig+0x33c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d01d      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <DMA_SetConfig+0x340>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d018      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a24      	ldr	r2, [pc, #144]	; (8006278 <DMA_SetConfig+0x344>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <DMA_SetConfig+0x348>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00e      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <DMA_SetConfig+0x34c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d009      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <DMA_SetConfig+0x350>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <DMA_SetConfig+0x2e0>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <DMA_SetConfig+0x354>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d101      	bne.n	8006218 <DMA_SetConfig+0x2e4>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <DMA_SetConfig+0x2e6>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	2201      	movs	r2, #1
 8006228:	409a      	lsls	r2, r3
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d108      	bne.n	8006250 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	60da      	str	r2, [r3, #12]
}
 800624e:	e007      	b.n	8006260 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	58025408 	.word	0x58025408
 8006270:	5802541c 	.word	0x5802541c
 8006274:	58025430 	.word	0x58025430
 8006278:	58025444 	.word	0x58025444
 800627c:	58025458 	.word	0x58025458
 8006280:	5802546c 	.word	0x5802546c
 8006284:	58025480 	.word	0x58025480
 8006288:	58025494 	.word	0x58025494

0800628c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a42      	ldr	r2, [pc, #264]	; (80063a4 <DMA_CalcBaseAndBitshift+0x118>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d04a      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a41      	ldr	r2, [pc, #260]	; (80063a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d045      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a3f      	ldr	r2, [pc, #252]	; (80063ac <DMA_CalcBaseAndBitshift+0x120>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d040      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3e      	ldr	r2, [pc, #248]	; (80063b0 <DMA_CalcBaseAndBitshift+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d03b      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a3c      	ldr	r2, [pc, #240]	; (80063b4 <DMA_CalcBaseAndBitshift+0x128>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d036      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a3b      	ldr	r2, [pc, #236]	; (80063b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d031      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a39      	ldr	r2, [pc, #228]	; (80063bc <DMA_CalcBaseAndBitshift+0x130>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d02c      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a38      	ldr	r2, [pc, #224]	; (80063c0 <DMA_CalcBaseAndBitshift+0x134>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d027      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a36      	ldr	r2, [pc, #216]	; (80063c4 <DMA_CalcBaseAndBitshift+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d022      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a35      	ldr	r2, [pc, #212]	; (80063c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d01d      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a33      	ldr	r2, [pc, #204]	; (80063cc <DMA_CalcBaseAndBitshift+0x140>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d018      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a32      	ldr	r2, [pc, #200]	; (80063d0 <DMA_CalcBaseAndBitshift+0x144>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <DMA_CalcBaseAndBitshift+0x148>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00e      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2f      	ldr	r2, [pc, #188]	; (80063d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d009      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2d      	ldr	r2, [pc, #180]	; (80063dc <DMA_CalcBaseAndBitshift+0x150>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <DMA_CalcBaseAndBitshift+0xa8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2c      	ldr	r2, [pc, #176]	; (80063e0 <DMA_CalcBaseAndBitshift+0x154>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d101      	bne.n	8006338 <DMA_CalcBaseAndBitshift+0xac>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <DMA_CalcBaseAndBitshift+0xae>
 8006338:	2300      	movs	r3, #0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d024      	beq.n	8006388 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	3b10      	subs	r3, #16
 8006346:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <DMA_CalcBaseAndBitshift+0x158>)
 8006348:	fba2 2303 	umull	r2, r3, r2, r3
 800634c:	091b      	lsrs	r3, r3, #4
 800634e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	4a24      	ldr	r2, [pc, #144]	; (80063e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006358:	5cd3      	ldrb	r3, [r2, r3]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b03      	cmp	r3, #3
 8006364:	d908      	bls.n	8006378 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	4b1f      	ldr	r3, [pc, #124]	; (80063ec <DMA_CalcBaseAndBitshift+0x160>)
 800636e:	4013      	ands	r3, r2
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	659a      	str	r2, [r3, #88]	; 0x58
 8006376:	e00d      	b.n	8006394 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <DMA_CalcBaseAndBitshift+0x160>)
 8006380:	4013      	ands	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6593      	str	r3, [r2, #88]	; 0x58
 8006386:	e005      	b.n	8006394 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40020010 	.word	0x40020010
 80063a8:	40020028 	.word	0x40020028
 80063ac:	40020040 	.word	0x40020040
 80063b0:	40020058 	.word	0x40020058
 80063b4:	40020070 	.word	0x40020070
 80063b8:	40020088 	.word	0x40020088
 80063bc:	400200a0 	.word	0x400200a0
 80063c0:	400200b8 	.word	0x400200b8
 80063c4:	40020410 	.word	0x40020410
 80063c8:	40020428 	.word	0x40020428
 80063cc:	40020440 	.word	0x40020440
 80063d0:	40020458 	.word	0x40020458
 80063d4:	40020470 	.word	0x40020470
 80063d8:	40020488 	.word	0x40020488
 80063dc:	400204a0 	.word	0x400204a0
 80063e0:	400204b8 	.word	0x400204b8
 80063e4:	aaaaaaab 	.word	0xaaaaaaab
 80063e8:	0800ddc8 	.word	0x0800ddc8
 80063ec:	fffffc00 	.word	0xfffffc00

080063f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d120      	bne.n	8006446 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	2b03      	cmp	r3, #3
 800640a:	d858      	bhi.n	80064be <DMA_CheckFifoParam+0xce>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <DMA_CheckFifoParam+0x24>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006425 	.word	0x08006425
 8006418:	08006437 	.word	0x08006437
 800641c:	08006425 	.word	0x08006425
 8006420:	080064bf 	.word	0x080064bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d048      	beq.n	80064c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006434:	e045      	b.n	80064c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800643e:	d142      	bne.n	80064c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006444:	e03f      	b.n	80064c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644e:	d123      	bne.n	8006498 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	2b03      	cmp	r3, #3
 8006456:	d838      	bhi.n	80064ca <DMA_CheckFifoParam+0xda>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <DMA_CheckFifoParam+0x70>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006471 	.word	0x08006471
 8006464:	08006477 	.word	0x08006477
 8006468:	08006471 	.word	0x08006471
 800646c:	08006489 	.word	0x08006489
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
        break;
 8006474:	e030      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d025      	beq.n	80064ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006486:	e022      	b.n	80064ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006490:	d11f      	bne.n	80064d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006496:	e01c      	b.n	80064d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	2b02      	cmp	r3, #2
 800649e:	d902      	bls.n	80064a6 <DMA_CheckFifoParam+0xb6>
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d003      	beq.n	80064ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80064a4:	e018      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
        break;
 80064aa:	e015      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00e      	beq.n	80064d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
    break;
 80064bc:	e00b      	b.n	80064d6 <DMA_CheckFifoParam+0xe6>
        break;
 80064be:	bf00      	nop
 80064c0:	e00a      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        break;
 80064c2:	bf00      	nop
 80064c4:	e008      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        break;
 80064c6:	bf00      	nop
 80064c8:	e006      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        break;
 80064ca:	bf00      	nop
 80064cc:	e004      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        break;
 80064ce:	bf00      	nop
 80064d0:	e002      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
        break;
 80064d2:	bf00      	nop
 80064d4:	e000      	b.n	80064d8 <DMA_CheckFifoParam+0xe8>
    break;
 80064d6:	bf00      	nop
    }
  }

  return status;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop

080064e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a38      	ldr	r2, [pc, #224]	; (80065dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a36      	ldr	r2, [pc, #216]	; (80065e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01d      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a35      	ldr	r2, [pc, #212]	; (80065e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a32      	ldr	r2, [pc, #200]	; (80065ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2f      	ldr	r2, [pc, #188]	; (80065f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01a      	beq.n	8006586 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	3b08      	subs	r3, #8
 8006558:	4a28      	ldr	r2, [pc, #160]	; (80065fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4b26      	ldr	r3, [pc, #152]	; (8006600 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	461a      	mov	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a24      	ldr	r2, [pc, #144]	; (8006604 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006574:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	2201      	movs	r2, #1
 800657e:	409a      	lsls	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006584:	e024      	b.n	80065d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3b10      	subs	r3, #16
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d806      	bhi.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d902      	bls.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3308      	adds	r3, #8
 80065ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4b18      	ldr	r3, [pc, #96]	; (8006614 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a16      	ldr	r2, [pc, #88]	; (8006618 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80065c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2201      	movs	r2, #1
 80065ca:	409a      	lsls	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	58025408 	.word	0x58025408
 80065e0:	5802541c 	.word	0x5802541c
 80065e4:	58025430 	.word	0x58025430
 80065e8:	58025444 	.word	0x58025444
 80065ec:	58025458 	.word	0x58025458
 80065f0:	5802546c 	.word	0x5802546c
 80065f4:	58025480 	.word	0x58025480
 80065f8:	58025494 	.word	0x58025494
 80065fc:	cccccccd 	.word	0xcccccccd
 8006600:	16009600 	.word	0x16009600
 8006604:	58025880 	.word	0x58025880
 8006608:	aaaaaaab 	.word	0xaaaaaaab
 800660c:	400204b8 	.word	0x400204b8
 8006610:	4002040f 	.word	0x4002040f
 8006614:	10008200 	.word	0x10008200
 8006618:	40020880 	.word	0x40020880

0800661c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04a      	beq.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d847      	bhi.n	80066c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a25      	ldr	r2, [pc, #148]	; (80066d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a24      	ldr	r2, [pc, #144]	; (80066d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d01d      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a22      	ldr	r2, [pc, #136]	; (80066dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1f      	ldr	r2, [pc, #124]	; (80066e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d101      	bne.n	800668c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800668c:	2300      	movs	r3, #0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4b17      	ldr	r3, [pc, #92]	; (80066f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80066a4:	671a      	str	r2, [r3, #112]	; 0x70
 80066a6:	e009      	b.n	80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4b14      	ldr	r3, [pc, #80]	; (80066fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a11      	ldr	r2, [pc, #68]	; (8006700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80066ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3b01      	subs	r3, #1
 80066c0:	2201      	movs	r2, #1
 80066c2:	409a      	lsls	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	58025408 	.word	0x58025408
 80066d8:	5802541c 	.word	0x5802541c
 80066dc:	58025430 	.word	0x58025430
 80066e0:	58025444 	.word	0x58025444
 80066e4:	58025458 	.word	0x58025458
 80066e8:	5802546c 	.word	0x5802546c
 80066ec:	58025480 	.word	0x58025480
 80066f0:	58025494 	.word	0x58025494
 80066f4:	1600963f 	.word	0x1600963f
 80066f8:	58025940 	.word	0x58025940
 80066fc:	1000823f 	.word	0x1000823f
 8006700:	40020940 	.word	0x40020940

08006704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	; 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006712:	4b89      	ldr	r3, [pc, #548]	; (8006938 <HAL_GPIO_Init+0x234>)
 8006714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006716:	e194      	b.n	8006a42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	2101      	movs	r1, #1
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	fa01 f303 	lsl.w	r3, r1, r3
 8006724:	4013      	ands	r3, r2
 8006726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8186 	beq.w	8006a3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d00b      	beq.n	8006750 <HAL_GPIO_Init+0x4c>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d007      	beq.n	8006750 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006744:	2b11      	cmp	r3, #17
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b12      	cmp	r3, #18
 800674e:	d130      	bne.n	80067b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	2203      	movs	r2, #3
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006786:	2201      	movs	r2, #1
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	43db      	mvns	r3, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4013      	ands	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	091b      	lsrs	r3, r3, #4
 800679c:	f003 0201 	and.w	r2, r3, #1
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	fa02 f303 	lsl.w	r3, r2, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	2203      	movs	r2, #3
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	43db      	mvns	r3, r3
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	4013      	ands	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4313      	orrs	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d003      	beq.n	80067f2 <HAL_GPIO_Init+0xee>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b12      	cmp	r3, #18
 80067f0:	d123      	bne.n	800683a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	08da      	lsrs	r2, r3, #3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3208      	adds	r2, #8
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	220f      	movs	r2, #15
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43db      	mvns	r3, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4013      	ands	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	08da      	lsrs	r2, r3, #3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3208      	adds	r2, #8
 8006834:	69b9      	ldr	r1, [r7, #24]
 8006836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	2203      	movs	r2, #3
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43db      	mvns	r3, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4013      	ands	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f003 0203 	and.w	r2, r3, #3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4313      	orrs	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 80e0 	beq.w	8006a3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800687c:	4b2f      	ldr	r3, [pc, #188]	; (800693c <HAL_GPIO_Init+0x238>)
 800687e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006882:	4a2e      	ldr	r2, [pc, #184]	; (800693c <HAL_GPIO_Init+0x238>)
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800688c:	4b2b      	ldr	r3, [pc, #172]	; (800693c <HAL_GPIO_Init+0x238>)
 800688e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800689a:	4a29      	ldr	r2, [pc, #164]	; (8006940 <HAL_GPIO_Init+0x23c>)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	3302      	adds	r3, #2
 80068a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	220f      	movs	r2, #15
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a20      	ldr	r2, [pc, #128]	; (8006944 <HAL_GPIO_Init+0x240>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d052      	beq.n	800696c <HAL_GPIO_Init+0x268>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <HAL_GPIO_Init+0x244>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_GPIO_Init+0x22e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1e      	ldr	r2, [pc, #120]	; (800694c <HAL_GPIO_Init+0x248>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d02b      	beq.n	800692e <HAL_GPIO_Init+0x22a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <HAL_GPIO_Init+0x24c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d025      	beq.n	800692a <HAL_GPIO_Init+0x226>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1c      	ldr	r2, [pc, #112]	; (8006954 <HAL_GPIO_Init+0x250>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01f      	beq.n	8006926 <HAL_GPIO_Init+0x222>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <HAL_GPIO_Init+0x254>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d019      	beq.n	8006922 <HAL_GPIO_Init+0x21e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1a      	ldr	r2, [pc, #104]	; (800695c <HAL_GPIO_Init+0x258>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_GPIO_Init+0x21a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a19      	ldr	r2, [pc, #100]	; (8006960 <HAL_GPIO_Init+0x25c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00d      	beq.n	800691a <HAL_GPIO_Init+0x216>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_GPIO_Init+0x260>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <HAL_GPIO_Init+0x212>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_GPIO_Init+0x264>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <HAL_GPIO_Init+0x20e>
 800690e:	2309      	movs	r3, #9
 8006910:	e02d      	b.n	800696e <HAL_GPIO_Init+0x26a>
 8006912:	230a      	movs	r3, #10
 8006914:	e02b      	b.n	800696e <HAL_GPIO_Init+0x26a>
 8006916:	2308      	movs	r3, #8
 8006918:	e029      	b.n	800696e <HAL_GPIO_Init+0x26a>
 800691a:	2307      	movs	r3, #7
 800691c:	e027      	b.n	800696e <HAL_GPIO_Init+0x26a>
 800691e:	2306      	movs	r3, #6
 8006920:	e025      	b.n	800696e <HAL_GPIO_Init+0x26a>
 8006922:	2305      	movs	r3, #5
 8006924:	e023      	b.n	800696e <HAL_GPIO_Init+0x26a>
 8006926:	2304      	movs	r3, #4
 8006928:	e021      	b.n	800696e <HAL_GPIO_Init+0x26a>
 800692a:	2303      	movs	r3, #3
 800692c:	e01f      	b.n	800696e <HAL_GPIO_Init+0x26a>
 800692e:	2302      	movs	r3, #2
 8006930:	e01d      	b.n	800696e <HAL_GPIO_Init+0x26a>
 8006932:	2301      	movs	r3, #1
 8006934:	e01b      	b.n	800696e <HAL_GPIO_Init+0x26a>
 8006936:	bf00      	nop
 8006938:	58000080 	.word	0x58000080
 800693c:	58024400 	.word	0x58024400
 8006940:	58000400 	.word	0x58000400
 8006944:	58020000 	.word	0x58020000
 8006948:	58020400 	.word	0x58020400
 800694c:	58020800 	.word	0x58020800
 8006950:	58020c00 	.word	0x58020c00
 8006954:	58021000 	.word	0x58021000
 8006958:	58021400 	.word	0x58021400
 800695c:	58021800 	.word	0x58021800
 8006960:	58021c00 	.word	0x58021c00
 8006964:	58022000 	.word	0x58022000
 8006968:	58022400 	.word	0x58022400
 800696c:	2300      	movs	r3, #0
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	f002 0203 	and.w	r2, r2, #3
 8006974:	0092      	lsls	r2, r2, #2
 8006976:	4093      	lsls	r3, r2
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800697e:	4938      	ldr	r1, [pc, #224]	; (8006a60 <HAL_GPIO_Init+0x35c>)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	089b      	lsrs	r3, r3, #2
 8006984:	3302      	adds	r3, #2
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	43db      	mvns	r3, r3
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	4013      	ands	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	43db      	mvns	r3, r3
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	4013      	ands	r3, r2
 80069c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	43db      	mvns	r3, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f ae63 	bne.w	8006718 <HAL_GPIO_Init+0x14>
  }
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	3724      	adds	r7, #36	; 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58000400 	.word	0x58000400

08006a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	887b      	ldrh	r3, [r7, #2]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
 8006a80:	e001      	b.n	8006a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	807b      	strh	r3, [r7, #2]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006aa4:	787b      	ldrb	r3, [r7, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aaa:	887a      	ldrh	r2, [r7, #2]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ab0:	e003      	b.n	8006aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ab2:	887b      	ldrh	r3, [r7, #2]
 8006ab4:	041a      	lsls	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	619a      	str	r2, [r3, #24]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ad8:	887a      	ldrh	r2, [r7, #2]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4013      	ands	r3, r2
 8006ade:	041a      	lsls	r2, r3, #16
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	43d9      	mvns	r1, r3
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	619a      	str	r2, [r3, #24]
}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e041      	b.n	8006b90 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006b14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f245 5255 	movw	r2, #21845	; 0x5555
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006b34:	f7fc fea8 	bl	8003888 <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b3a:	e00f      	b.n	8006b5c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006b3c:	f7fc fea4 	bl	8003888 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b30      	cmp	r3, #48	; 0x30
 8006b48:	d908      	bls.n	8006b5c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e019      	b.n	8006b90 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e8      	bne.n	8006b3c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d005      	beq.n	8006b84 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68d2      	ldr	r2, [r2, #12]
 8006b80:	611a      	str	r2, [r3, #16]
 8006b82:	e004      	b.n	8006b8e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006bc0:	4b19      	ldr	r3, [pc, #100]	; (8006c28 <HAL_PWREx_ConfigSupply+0x70>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d00a      	beq.n	8006be2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <HAL_PWREx_ConfigSupply+0x70>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d001      	beq.n	8006bde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e01f      	b.n	8006c1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e01d      	b.n	8006c1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <HAL_PWREx_ConfigSupply+0x70>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f023 0207 	bic.w	r2, r3, #7
 8006bea:	490f      	ldr	r1, [pc, #60]	; (8006c28 <HAL_PWREx_ConfigSupply+0x70>)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006bf2:	f7fc fe49 	bl	8003888 <HAL_GetTick>
 8006bf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bf8:	e009      	b.n	8006c0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bfa:	f7fc fe45 	bl	8003888 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c08:	d901      	bls.n	8006c0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e007      	b.n	8006c1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <HAL_PWREx_ConfigSupply+0x70>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1a:	d1ee      	bne.n	8006bfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	58024800 	.word	0x58024800

08006c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08c      	sub	sp, #48	; 0x30
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e3ff      	b.n	800743e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8087 	beq.w	8006d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c4c:	4b99      	ldr	r3, [pc, #612]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c56:	4b97      	ldr	r3, [pc, #604]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d007      	beq.n	8006c72 <HAL_RCC_OscConfig+0x46>
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b18      	cmp	r3, #24
 8006c66:	d110      	bne.n	8006c8a <HAL_RCC_OscConfig+0x5e>
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d10b      	bne.n	8006c8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c72:	4b90      	ldr	r3, [pc, #576]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d06c      	beq.n	8006d58 <HAL_RCC_OscConfig+0x12c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d168      	bne.n	8006d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e3d9      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c92:	d106      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x76>
 8006c94:	4b87      	ldr	r3, [pc, #540]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a86      	ldr	r2, [pc, #536]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	e02e      	b.n	8006d00 <HAL_RCC_OscConfig+0xd4>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x98>
 8006caa:	4b82      	ldr	r3, [pc, #520]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a81      	ldr	r2, [pc, #516]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4b7f      	ldr	r3, [pc, #508]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a7e      	ldr	r2, [pc, #504]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	e01d      	b.n	8006d00 <HAL_RCC_OscConfig+0xd4>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_RCC_OscConfig+0xbc>
 8006cce:	4b79      	ldr	r3, [pc, #484]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a78      	ldr	r2, [pc, #480]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4b76      	ldr	r3, [pc, #472]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a75      	ldr	r2, [pc, #468]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e00b      	b.n	8006d00 <HAL_RCC_OscConfig+0xd4>
 8006ce8:	4b72      	ldr	r3, [pc, #456]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a71      	ldr	r2, [pc, #452]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	4b6f      	ldr	r3, [pc, #444]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6e      	ldr	r2, [pc, #440]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d013      	beq.n	8006d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d08:	f7fc fdbe 	bl	8003888 <HAL_GetTick>
 8006d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d10:	f7fc fdba 	bl	8003888 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b64      	cmp	r3, #100	; 0x64
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e38d      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d22:	4b64      	ldr	r3, [pc, #400]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0xe4>
 8006d2e:	e014      	b.n	8006d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d30:	f7fc fdaa 	bl	8003888 <HAL_GetTick>
 8006d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d38:	f7fc fda6 	bl	8003888 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b64      	cmp	r3, #100	; 0x64
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e379      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d4a:	4b5a      	ldr	r3, [pc, #360]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f0      	bne.n	8006d38 <HAL_RCC_OscConfig+0x10c>
 8006d56:	e000      	b.n	8006d5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80ae 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d68:	4b52      	ldr	r3, [pc, #328]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d72:	4b50      	ldr	r3, [pc, #320]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <HAL_RCC_OscConfig+0x162>
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	2b18      	cmp	r3, #24
 8006d82:	d13a      	bne.n	8006dfa <HAL_RCC_OscConfig+0x1ce>
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d135      	bne.n	8006dfa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d8e:	4b49      	ldr	r3, [pc, #292]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_RCC_OscConfig+0x17a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e34b      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da6:	f7fc fd7b 	bl	80038a0 <HAL_GetREVID>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f241 0203 	movw	r2, #4099	; 0x1003
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d817      	bhi.n	8006de4 <HAL_RCC_OscConfig+0x1b8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d108      	bne.n	8006dce <HAL_RCC_OscConfig+0x1a2>
 8006dbc:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006dc4:	4a3b      	ldr	r2, [pc, #236]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dcc:	e07a      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dce:	4b39      	ldr	r3, [pc, #228]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	031b      	lsls	r3, r3, #12
 8006ddc:	4935      	ldr	r1, [pc, #212]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006de2:	e06f      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de4:	4b33      	ldr	r3, [pc, #204]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	4930      	ldr	r1, [pc, #192]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006df8:	e064      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d045      	beq.n	8006e8e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e02:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 0219 	bic.w	r2, r3, #25
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4929      	ldr	r1, [pc, #164]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fc fd38 	bl	8003888 <HAL_GetTick>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e1c:	f7fc fd34 	bl	8003888 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e307      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e2e:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3a:	f7fc fd31 	bl	80038a0 <HAL_GetREVID>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d817      	bhi.n	8006e78 <HAL_RCC_OscConfig+0x24c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d108      	bne.n	8006e62 <HAL_RCC_OscConfig+0x236>
 8006e50:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e58:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5e:	6053      	str	r3, [r2, #4]
 8006e60:	e030      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
 8006e62:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	031b      	lsls	r3, r3, #12
 8006e70:	4910      	ldr	r1, [pc, #64]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	604b      	str	r3, [r1, #4]
 8006e76:	e025      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
 8006e78:	4b0e      	ldr	r3, [pc, #56]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	061b      	lsls	r3, r3, #24
 8006e86:	490b      	ldr	r1, [pc, #44]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	604b      	str	r3, [r1, #4]
 8006e8c:	e01a      	b.n	8006ec4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <HAL_RCC_OscConfig+0x288>)
 8006e94:	f023 0301 	bic.w	r3, r3, #1
 8006e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9a:	f7fc fcf5 	bl	8003888 <HAL_GetTick>
 8006e9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ea0:	e00a      	b.n	8006eb8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea2:	f7fc fcf1 	bl	8003888 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d903      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e2c4      	b.n	800743e <HAL_RCC_OscConfig+0x812>
 8006eb4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006eb8:	4ba4      	ldr	r3, [pc, #656]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ee      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80a9 	beq.w	8007024 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ed2:	4b9e      	ldr	r3, [pc, #632]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006edc:	4b9b      	ldr	r3, [pc, #620]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d007      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x2cc>
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b18      	cmp	r3, #24
 8006eec:	d13a      	bne.n	8006f64 <HAL_RCC_OscConfig+0x338>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d135      	bne.n	8006f64 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ef8:	4b94      	ldr	r3, [pc, #592]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_RCC_OscConfig+0x2e4>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d001      	beq.n	8006f10 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e296      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f10:	f7fc fcc6 	bl	80038a0 <HAL_GetREVID>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d817      	bhi.n	8006f4e <HAL_RCC_OscConfig+0x322>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d108      	bne.n	8006f38 <HAL_RCC_OscConfig+0x30c>
 8006f26:	4b89      	ldr	r3, [pc, #548]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f2e:	4a87      	ldr	r2, [pc, #540]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f36:	e075      	b.n	8007024 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f38:	4b84      	ldr	r3, [pc, #528]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	069b      	lsls	r3, r3, #26
 8006f46:	4981      	ldr	r1, [pc, #516]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f4c:	e06a      	b.n	8007024 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f4e:	4b7f      	ldr	r3, [pc, #508]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	061b      	lsls	r3, r3, #24
 8006f5c:	497b      	ldr	r1, [pc, #492]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f62:	e05f      	b.n	8007024 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d042      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f6c:	4b77      	ldr	r3, [pc, #476]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a76      	ldr	r2, [pc, #472]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fc fc86 	bl	8003888 <HAL_GetTick>
 8006f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f80:	f7fc fc82 	bl	8003888 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e255      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f92:	4b6e      	ldr	r3, [pc, #440]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f9e:	f7fc fc7f 	bl	80038a0 <HAL_GetREVID>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d817      	bhi.n	8006fdc <HAL_RCC_OscConfig+0x3b0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d108      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x39a>
 8006fb4:	4b65      	ldr	r3, [pc, #404]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fbc:	4a63      	ldr	r2, [pc, #396]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fc2:	6053      	str	r3, [r2, #4]
 8006fc4:	e02e      	b.n	8007024 <HAL_RCC_OscConfig+0x3f8>
 8006fc6:	4b61      	ldr	r3, [pc, #388]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	069b      	lsls	r3, r3, #26
 8006fd4:	495d      	ldr	r1, [pc, #372]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	604b      	str	r3, [r1, #4]
 8006fda:	e023      	b.n	8007024 <HAL_RCC_OscConfig+0x3f8>
 8006fdc:	4b5b      	ldr	r3, [pc, #364]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	061b      	lsls	r3, r3, #24
 8006fea:	4958      	ldr	r1, [pc, #352]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60cb      	str	r3, [r1, #12]
 8006ff0:	e018      	b.n	8007024 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ff2:	4b56      	ldr	r3, [pc, #344]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a55      	ldr	r2, [pc, #340]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8006ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffe:	f7fc fc43 	bl	8003888 <HAL_GetTick>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007006:	f7fc fc3f 	bl	8003888 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e212      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007018:	4b4c      	ldr	r3, [pc, #304]	; (800714c <HAL_RCC_OscConfig+0x520>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f0      	bne.n	8007006 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d036      	beq.n	800709e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d019      	beq.n	800706c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007038:	4b44      	ldr	r3, [pc, #272]	; (800714c <HAL_RCC_OscConfig+0x520>)
 800703a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703c:	4a43      	ldr	r2, [pc, #268]	; (800714c <HAL_RCC_OscConfig+0x520>)
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7fc fc20 	bl	8003888 <HAL_GetTick>
 8007048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800704c:	f7fc fc1c 	bl	8003888 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e1ef      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800705e:	4b3b      	ldr	r3, [pc, #236]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCC_OscConfig+0x420>
 800706a:	e018      	b.n	800709e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800706c:	4b37      	ldr	r3, [pc, #220]	; (800714c <HAL_RCC_OscConfig+0x520>)
 800706e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007070:	4a36      	ldr	r2, [pc, #216]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007078:	f7fc fc06 	bl	8003888 <HAL_GetTick>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007080:	f7fc fc02 	bl	8003888 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e1d5      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <HAL_RCC_OscConfig+0x520>)
 8007094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f0      	bne.n	8007080 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d036      	beq.n	8007118 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d019      	beq.n	80070e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_RCC_OscConfig+0x520>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a25      	ldr	r2, [pc, #148]	; (800714c <HAL_RCC_OscConfig+0x520>)
 80070b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070be:	f7fc fbe3 	bl	8003888 <HAL_GetTick>
 80070c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80070c6:	f7fc fbdf 	bl	8003888 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e1b2      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070d8:	4b1c      	ldr	r3, [pc, #112]	; (800714c <HAL_RCC_OscConfig+0x520>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <HAL_RCC_OscConfig+0x49a>
 80070e4:	e018      	b.n	8007118 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <HAL_RCC_OscConfig+0x520>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a18      	ldr	r2, [pc, #96]	; (800714c <HAL_RCC_OscConfig+0x520>)
 80070ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070f2:	f7fc fbc9 	bl	8003888 <HAL_GetTick>
 80070f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80070fa:	f7fc fbc5 	bl	8003888 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e198      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <HAL_RCC_OscConfig+0x520>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f0      	bne.n	80070fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8085 	beq.w	8007230 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <HAL_RCC_OscConfig+0x524>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a09      	ldr	r2, [pc, #36]	; (8007150 <HAL_RCC_OscConfig+0x524>)
 800712c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007132:	f7fc fba9 	bl	8003888 <HAL_GetTick>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007138:	e00c      	b.n	8007154 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800713a:	f7fc fba5 	bl	8003888 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b64      	cmp	r3, #100	; 0x64
 8007146:	d905      	bls.n	8007154 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e178      	b.n	800743e <HAL_RCC_OscConfig+0x812>
 800714c:	58024400 	.word	0x58024400
 8007150:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007154:	4b96      	ldr	r3, [pc, #600]	; (80073b0 <HAL_RCC_OscConfig+0x784>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ec      	beq.n	800713a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d106      	bne.n	8007176 <HAL_RCC_OscConfig+0x54a>
 8007168:	4b92      	ldr	r3, [pc, #584]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800716a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716c:	4a91      	ldr	r2, [pc, #580]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	6713      	str	r3, [r2, #112]	; 0x70
 8007174:	e02d      	b.n	80071d2 <HAL_RCC_OscConfig+0x5a6>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0x56c>
 800717e:	4b8d      	ldr	r3, [pc, #564]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	4a8c      	ldr	r2, [pc, #560]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	6713      	str	r3, [r2, #112]	; 0x70
 800718a:	4b8a      	ldr	r3, [pc, #552]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	4a89      	ldr	r2, [pc, #548]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007190:	f023 0304 	bic.w	r3, r3, #4
 8007194:	6713      	str	r3, [r2, #112]	; 0x70
 8007196:	e01c      	b.n	80071d2 <HAL_RCC_OscConfig+0x5a6>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b05      	cmp	r3, #5
 800719e:	d10c      	bne.n	80071ba <HAL_RCC_OscConfig+0x58e>
 80071a0:	4b84      	ldr	r3, [pc, #528]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	4a83      	ldr	r2, [pc, #524]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071a6:	f043 0304 	orr.w	r3, r3, #4
 80071aa:	6713      	str	r3, [r2, #112]	; 0x70
 80071ac:	4b81      	ldr	r3, [pc, #516]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b0:	4a80      	ldr	r2, [pc, #512]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	6713      	str	r3, [r2, #112]	; 0x70
 80071b8:	e00b      	b.n	80071d2 <HAL_RCC_OscConfig+0x5a6>
 80071ba:	4b7e      	ldr	r3, [pc, #504]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	4a7d      	ldr	r2, [pc, #500]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	6713      	str	r3, [r2, #112]	; 0x70
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	4a7a      	ldr	r2, [pc, #488]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071cc:	f023 0304 	bic.w	r3, r3, #4
 80071d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d015      	beq.n	8007206 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071da:	f7fc fb55 	bl	8003888 <HAL_GetTick>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071e0:	e00a      	b.n	80071f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071e2:	f7fc fb51 	bl	8003888 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e122      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071f8:	4b6e      	ldr	r3, [pc, #440]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0ee      	beq.n	80071e2 <HAL_RCC_OscConfig+0x5b6>
 8007204:	e014      	b.n	8007230 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007206:	f7fc fb3f 	bl	8003888 <HAL_GetTick>
 800720a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800720c:	e00a      	b.n	8007224 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fc fb3b 	bl	8003888 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	; 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e10c      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007224:	4b63      	ldr	r3, [pc, #396]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1ee      	bne.n	800720e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8101 	beq.w	800743c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800723a:	4b5e      	ldr	r3, [pc, #376]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007242:	2b18      	cmp	r3, #24
 8007244:	f000 80bc 	beq.w	80073c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b02      	cmp	r3, #2
 800724e:	f040 8095 	bne.w	800737c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007252:	4b58      	ldr	r3, [pc, #352]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a57      	ldr	r2, [pc, #348]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800725c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725e:	f7fc fb13 	bl	8003888 <HAL_GetTick>
 8007262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007266:	f7fc fb0f 	bl	8003888 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e0e2      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007278:	4b4e      	ldr	r3, [pc, #312]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1f0      	bne.n	8007266 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007284:	4b4b      	ldr	r3, [pc, #300]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007288:	4b4b      	ldr	r3, [pc, #300]	; (80073b8 <HAL_RCC_OscConfig+0x78c>)
 800728a:	4013      	ands	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007294:	0112      	lsls	r2, r2, #4
 8007296:	430a      	orrs	r2, r1
 8007298:	4946      	ldr	r1, [pc, #280]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800729a:	4313      	orrs	r3, r2
 800729c:	628b      	str	r3, [r1, #40]	; 0x28
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	3b01      	subs	r3, #1
 80072a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ac:	3b01      	subs	r3, #1
 80072ae:	025b      	lsls	r3, r3, #9
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	3b01      	subs	r3, #1
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c6:	3b01      	subs	r3, #1
 80072c8:	061b      	lsls	r3, r3, #24
 80072ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072ce:	4939      	ldr	r1, [pc, #228]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80072d4:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4a36      	ldr	r2, [pc, #216]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072e0:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80072e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e4:	4b35      	ldr	r3, [pc, #212]	; (80073bc <HAL_RCC_OscConfig+0x790>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072ec:	00d2      	lsls	r2, r2, #3
 80072ee:	4931      	ldr	r1, [pc, #196]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072f4:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	f023 020c 	bic.w	r2, r3, #12
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	492c      	ldr	r1, [pc, #176]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007302:	4313      	orrs	r3, r2
 8007304:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007306:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	f023 0202 	bic.w	r2, r3, #2
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	4928      	ldr	r1, [pc, #160]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007314:	4313      	orrs	r3, r2
 8007316:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007318:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	4a25      	ldr	r2, [pc, #148]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800731e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007324:	4b23      	ldr	r3, [pc, #140]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800732a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007330:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	4a1f      	ldr	r2, [pc, #124]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800733a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800734e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fc fa98 	bl	8003888 <HAL_GetTick>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800735c:	f7fc fa94 	bl	8003888 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e067      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0x730>
 800737a:	e05f      	b.n	800743c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737c:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 8007382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fc fa7e 	bl	8003888 <HAL_GetTick>
 800738c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007390:	f7fc fa7a 	bl	8003888 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e04d      	b.n	800743e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073a2:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <HAL_RCC_OscConfig+0x788>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x764>
 80073ae:	e045      	b.n	800743c <HAL_RCC_OscConfig+0x810>
 80073b0:	58024800 	.word	0x58024800
 80073b4:	58024400 	.word	0x58024400
 80073b8:	fffffc0c 	.word	0xfffffc0c
 80073bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073c0:	4b21      	ldr	r3, [pc, #132]	; (8007448 <HAL_RCC_OscConfig+0x81c>)
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073c6:	4b20      	ldr	r3, [pc, #128]	; (8007448 <HAL_RCC_OscConfig+0x81c>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d031      	beq.n	8007438 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f003 0203 	and.w	r2, r3, #3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073de:	429a      	cmp	r2, r3
 80073e0:	d12a      	bne.n	8007438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d122      	bne.n	8007438 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073fe:	429a      	cmp	r2, r3
 8007400:	d11a      	bne.n	8007438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	0a5b      	lsrs	r3, r3, #9
 8007406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007410:	429a      	cmp	r2, r3
 8007412:	d111      	bne.n	8007438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007422:	429a      	cmp	r2, r3
 8007424:	d108      	bne.n	8007438 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	0e1b      	lsrs	r3, r3, #24
 800742a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007432:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007434:	429a      	cmp	r2, r3
 8007436:	d001      	beq.n	800743c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3730      	adds	r7, #48	; 0x30
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	58024400 	.word	0x58024400

0800744c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e19c      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007460:	4b8a      	ldr	r3, [pc, #552]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d910      	bls.n	8007490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746e:	4b87      	ldr	r3, [pc, #540]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f023 020f 	bic.w	r2, r3, #15
 8007476:	4985      	ldr	r1, [pc, #532]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	4313      	orrs	r3, r2
 800747c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800747e:	4b83      	ldr	r3, [pc, #524]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d001      	beq.n	8007490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e184      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d010      	beq.n	80074be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	4b7b      	ldr	r3, [pc, #492]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d908      	bls.n	80074be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074ac:	4b78      	ldr	r3, [pc, #480]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	4975      	ldr	r1, [pc, #468]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d010      	beq.n	80074ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695a      	ldr	r2, [r3, #20]
 80074ce:	4b70      	ldr	r3, [pc, #448]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d908      	bls.n	80074ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074da:	4b6d      	ldr	r3, [pc, #436]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	496a      	ldr	r1, [pc, #424]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d010      	beq.n	800751a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699a      	ldr	r2, [r3, #24]
 80074fc:	4b64      	ldr	r3, [pc, #400]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007504:	429a      	cmp	r2, r3
 8007506:	d908      	bls.n	800751a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007508:	4b61      	ldr	r3, [pc, #388]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	495e      	ldr	r1, [pc, #376]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007516:	4313      	orrs	r3, r2
 8007518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d010      	beq.n	8007548 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69da      	ldr	r2, [r3, #28]
 800752a:	4b59      	ldr	r3, [pc, #356]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007532:	429a      	cmp	r2, r3
 8007534:	d908      	bls.n	8007548 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007536:	4b56      	ldr	r3, [pc, #344]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	4953      	ldr	r1, [pc, #332]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007544:	4313      	orrs	r3, r2
 8007546:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	4b4d      	ldr	r3, [pc, #308]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f003 030f 	and.w	r3, r3, #15
 8007560:	429a      	cmp	r2, r3
 8007562:	d908      	bls.n	8007576 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007564:	4b4a      	ldr	r3, [pc, #296]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f023 020f 	bic.w	r2, r3, #15
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4947      	ldr	r1, [pc, #284]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007572:	4313      	orrs	r3, r2
 8007574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d055      	beq.n	800762e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007582:	4b43      	ldr	r3, [pc, #268]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	4940      	ldr	r1, [pc, #256]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007590:	4313      	orrs	r3, r2
 8007592:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d107      	bne.n	80075ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800759c:	4b3c      	ldr	r3, [pc, #240]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d121      	bne.n	80075ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0f6      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d107      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075b4:	4b36      	ldr	r3, [pc, #216]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d115      	bne.n	80075ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0ea      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d107      	bne.n	80075dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075cc:	4b30      	ldr	r3, [pc, #192]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0de      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075dc:	4b2c      	ldr	r3, [pc, #176]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e0d6      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f023 0207 	bic.w	r2, r3, #7
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4925      	ldr	r1, [pc, #148]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fe:	f7fc f943 	bl	8003888 <HAL_GetTick>
 8007602:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007604:	e00a      	b.n	800761c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007606:	f7fc f93f 	bl	8003888 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	f241 3288 	movw	r2, #5000	; 0x1388
 8007614:	4293      	cmp	r3, r2
 8007616:	d901      	bls.n	800761c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e0be      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761c:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	429a      	cmp	r2, r3
 800762c:	d1eb      	bne.n	8007606 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	4b14      	ldr	r3, [pc, #80]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	429a      	cmp	r2, r3
 8007648:	d208      	bcs.n	800765c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800764a:	4b11      	ldr	r3, [pc, #68]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f023 020f 	bic.w	r2, r3, #15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	490e      	ldr	r1, [pc, #56]	; (8007690 <HAL_RCC_ClockConfig+0x244>)
 8007658:	4313      	orrs	r3, r2
 800765a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d214      	bcs.n	8007694 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f023 020f 	bic.w	r2, r3, #15
 8007672:	4906      	ldr	r1, [pc, #24]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800767a:	4b04      	ldr	r3, [pc, #16]	; (800768c <HAL_RCC_ClockConfig+0x240>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d005      	beq.n	8007694 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e086      	b.n	800779a <HAL_RCC_ClockConfig+0x34e>
 800768c:	52002000 	.word	0x52002000
 8007690:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d010      	beq.n	80076c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	4b3f      	ldr	r3, [pc, #252]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d208      	bcs.n	80076c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076b0:	4b3c      	ldr	r3, [pc, #240]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	4939      	ldr	r1, [pc, #228]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d010      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695a      	ldr	r2, [r3, #20]
 80076d2:	4b34      	ldr	r3, [pc, #208]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076da:	429a      	cmp	r2, r3
 80076dc:	d208      	bcs.n	80076f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076de:	4b31      	ldr	r3, [pc, #196]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	492e      	ldr	r1, [pc, #184]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d010      	beq.n	800771e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	4b28      	ldr	r3, [pc, #160]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007708:	429a      	cmp	r2, r3
 800770a:	d208      	bcs.n	800771e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800770c:	4b25      	ldr	r3, [pc, #148]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	4922      	ldr	r1, [pc, #136]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 800771a:	4313      	orrs	r3, r2
 800771c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d010      	beq.n	800774c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69da      	ldr	r2, [r3, #28]
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007736:	429a      	cmp	r2, r3
 8007738:	d208      	bcs.n	800774c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800773a:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	4917      	ldr	r1, [pc, #92]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 8007748:	4313      	orrs	r3, r2
 800774a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800774c:	f000 f834 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8007750:	4602      	mov	r2, r0
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	4912      	ldr	r1, [pc, #72]	; (80077a8 <HAL_RCC_ClockConfig+0x35c>)
 800775e:	5ccb      	ldrb	r3, [r1, r3]
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800776a:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <HAL_RCC_ClockConfig+0x358>)
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	4a0d      	ldr	r2, [pc, #52]	; (80077a8 <HAL_RCC_ClockConfig+0x35c>)
 8007774:	5cd3      	ldrb	r3, [r2, r3]
 8007776:	f003 031f 	and.w	r3, r3, #31
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	4a0a      	ldr	r2, [pc, #40]	; (80077ac <HAL_RCC_ClockConfig+0x360>)
 8007782:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007784:	4a0a      	ldr	r2, [pc, #40]	; (80077b0 <HAL_RCC_ClockConfig+0x364>)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <HAL_RCC_ClockConfig+0x368>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fb fa72 	bl	8002c78 <HAL_InitTick>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
 80077a8:	0800ddb8 	.word	0x0800ddb8
 80077ac:	20000004 	.word	0x20000004
 80077b0:	20000000 	.word	0x20000000
 80077b4:	20000008 	.word	0x20000008

080077b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b089      	sub	sp, #36	; 0x24
 80077bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077be:	4bb3      	ldr	r3, [pc, #716]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077c6:	2b18      	cmp	r3, #24
 80077c8:	f200 8155 	bhi.w	8007a76 <HAL_RCC_GetSysClockFreq+0x2be>
 80077cc:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80077ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d2:	bf00      	nop
 80077d4:	08007839 	.word	0x08007839
 80077d8:	08007a77 	.word	0x08007a77
 80077dc:	08007a77 	.word	0x08007a77
 80077e0:	08007a77 	.word	0x08007a77
 80077e4:	08007a77 	.word	0x08007a77
 80077e8:	08007a77 	.word	0x08007a77
 80077ec:	08007a77 	.word	0x08007a77
 80077f0:	08007a77 	.word	0x08007a77
 80077f4:	0800785f 	.word	0x0800785f
 80077f8:	08007a77 	.word	0x08007a77
 80077fc:	08007a77 	.word	0x08007a77
 8007800:	08007a77 	.word	0x08007a77
 8007804:	08007a77 	.word	0x08007a77
 8007808:	08007a77 	.word	0x08007a77
 800780c:	08007a77 	.word	0x08007a77
 8007810:	08007a77 	.word	0x08007a77
 8007814:	08007865 	.word	0x08007865
 8007818:	08007a77 	.word	0x08007a77
 800781c:	08007a77 	.word	0x08007a77
 8007820:	08007a77 	.word	0x08007a77
 8007824:	08007a77 	.word	0x08007a77
 8007828:	08007a77 	.word	0x08007a77
 800782c:	08007a77 	.word	0x08007a77
 8007830:	08007a77 	.word	0x08007a77
 8007834:	0800786b 	.word	0x0800786b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007838:	4b94      	ldr	r3, [pc, #592]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007844:	4b91      	ldr	r3, [pc, #580]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	08db      	lsrs	r3, r3, #3
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	4a90      	ldr	r2, [pc, #576]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007856:	e111      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007858:	4b8d      	ldr	r3, [pc, #564]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800785a:	61bb      	str	r3, [r7, #24]
    break;
 800785c:	e10e      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800785e:	4b8d      	ldr	r3, [pc, #564]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007860:	61bb      	str	r3, [r7, #24]
    break;
 8007862:	e10b      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007864:	4b8c      	ldr	r3, [pc, #560]	; (8007a98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007866:	61bb      	str	r3, [r7, #24]
    break;
 8007868:	e108      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800786a:	4b88      	ldr	r3, [pc, #544]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007874:	4b85      	ldr	r3, [pc, #532]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	091b      	lsrs	r3, r3, #4
 800787a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800787e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007880:	4b82      	ldr	r3, [pc, #520]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800788a:	4b80      	ldr	r3, [pc, #512]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	08db      	lsrs	r3, r3, #3
 8007890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80e1 	beq.w	8007a70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	f000 8083 	beq.w	80079bc <HAL_RCC_GetSysClockFreq+0x204>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	f200 80a1 	bhi.w	8007a00 <HAL_RCC_GetSysClockFreq+0x248>
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_RCC_GetSysClockFreq+0x114>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d056      	beq.n	8007978 <HAL_RCC_GetSysClockFreq+0x1c0>
 80078ca:	e099      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078cc:	4b6f      	ldr	r3, [pc, #444]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d02d      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078d8:	4b6c      	ldr	r3, [pc, #432]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	08db      	lsrs	r3, r3, #3
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	4a6b      	ldr	r2, [pc, #428]	; (8007a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
 80078e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b62      	ldr	r3, [pc, #392]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	ed97 6a02 	vldr	s12, [r7, #8]
 8007916:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007932:	e087      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007aa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b51      	ldr	r3, [pc, #324]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a02 	vldr	s12, [r7, #8]
 800795a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007976:	e065      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b40      	ldr	r3, [pc, #256]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a02 	vldr	s12, [r7, #8]
 800799e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ba:	e043      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007aa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ce:	4b2f      	ldr	r3, [pc, #188]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a02 	vldr	s12, [r7, #8]
 80079e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fe:	e021      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a12:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007a44:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	0a5b      	lsrs	r3, r3, #9
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	3301      	adds	r3, #1
 8007a50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a68:	ee17 3a90 	vmov	r3, s15
 8007a6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007a6e:	e005      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61bb      	str	r3, [r7, #24]
    break;
 8007a74:	e002      	b.n	8007a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007a76:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a78:	61bb      	str	r3, [r7, #24]
    break;
 8007a7a:	bf00      	nop
  }

  return sysclockfreq;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3724      	adds	r7, #36	; 0x24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	03d09000 	.word	0x03d09000
 8007a94:	003d0900 	.word	0x003d0900
 8007a98:	017d7840 	.word	0x017d7840
 8007a9c:	46000000 	.word	0x46000000
 8007aa0:	4c742400 	.word	0x4c742400
 8007aa4:	4a742400 	.word	0x4a742400
 8007aa8:	4bbebc20 	.word	0x4bbebc20

08007aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ab2:	f7ff fe81 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	4b10      	ldr	r3, [pc, #64]	; (8007afc <HAL_RCC_GetHCLKFreq+0x50>)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	0a1b      	lsrs	r3, r3, #8
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	490f      	ldr	r1, [pc, #60]	; (8007b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ac4:	5ccb      	ldrb	r3, [r1, r3]
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ace:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <HAL_RCC_GetHCLKFreq+0x50>)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ada:	5cd3      	ldrb	r3, [r2, r3]
 8007adc:	f003 031f 	and.w	r3, r3, #31
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	4a07      	ldr	r2, [pc, #28]	; (8007b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ae8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007aea:	4a07      	ldr	r2, [pc, #28]	; (8007b08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8007af2:	681b      	ldr	r3, [r3, #0]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	58024400 	.word	0x58024400
 8007b00:	0800ddb8 	.word	0x0800ddb8
 8007b04:	20000004 	.word	0x20000004
 8007b08:	20000000 	.word	0x20000000

08007b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b10:	f7ff ffcc 	bl	8007aac <HAL_RCC_GetHCLKFreq>
 8007b14:	4602      	mov	r2, r0
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	091b      	lsrs	r3, r3, #4
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	4904      	ldr	r1, [pc, #16]	; (8007b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b22:	5ccb      	ldrb	r3, [r1, r3]
 8007b24:	f003 031f 	and.w	r3, r3, #31
 8007b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	58024400 	.word	0x58024400
 8007b34:	0800ddb8 	.word	0x0800ddb8

08007b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007b3c:	f7ff ffb6 	bl	8007aac <HAL_RCC_GetHCLKFreq>
 8007b40:	4602      	mov	r2, r0
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	4904      	ldr	r1, [pc, #16]	; (8007b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b4e:	5ccb      	ldrb	r3, [r1, r3]
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	0800ddb8 	.word	0x0800ddb8

08007b64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	223f      	movs	r2, #63	; 0x3f
 8007b72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b74:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0207 	and.w	r2, r3, #7
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007b8c:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007bbc:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <HAL_RCC_GetClockConfig+0x7c>)
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <HAL_RCC_GetClockConfig+0x80>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 020f 	and.w	r2, r3, #15
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	601a      	str	r2, [r3, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	58024400 	.word	0x58024400
 8007be4:	52002000 	.word	0x52002000

08007be8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d03f      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c0c:	d02a      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c12:	d824      	bhi.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c18:	d018      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c1e:	d81e      	bhi.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c28:	d007      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007c2a:	e018      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2c:	4bab      	ldr	r3, [pc, #684]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	4aaa      	ldr	r2, [pc, #680]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c38:	e015      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	2102      	movs	r1, #2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 f9cf 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c4a:	e00c      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	2102      	movs	r1, #2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f001 fa78 	bl	8009148 <RCCEx_PLL3_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007c5c:	e003      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
      break;
 8007c62:	e000      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007c6c:	4b9b      	ldr	r3, [pc, #620]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c78:	4998      	ldr	r1, [pc, #608]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8007c7e:	e001      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03d      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d826      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007cb5 	.word	0x08007cb5
 8007ca4:	08007cc3 	.word	0x08007cc3
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	08007ced 	.word	0x08007ced
 8007cb0:	08007ced 	.word	0x08007ced
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb4:	4b89      	ldr	r3, [pc, #548]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4a88      	ldr	r2, [pc, #544]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cc0:	e015      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 f98b 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cd2:	e00c      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3324      	adds	r3, #36	; 0x24
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fa34 	bl	8009148 <RCCEx_PLL3_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ce4:	e003      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cf4:	4b79      	ldr	r3, [pc, #484]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf8:	f023 0207 	bic.w	r2, r3, #7
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d00:	4976      	ldr	r1, [pc, #472]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	650b      	str	r3, [r1, #80]	; 0x50
 8007d06:	e001      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d042      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d20:	d02b      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d26:	d825      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007d28:	2bc0      	cmp	r3, #192	; 0xc0
 8007d2a:	d028      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007d2e:	d821      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007d30:	2b80      	cmp	r3, #128	; 0x80
 8007d32:	d016      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007d34:	2b80      	cmp	r3, #128	; 0x80
 8007d36:	d81d      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d007      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007d40:	e018      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d42:	4b66      	ldr	r3, [pc, #408]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	4a65      	ldr	r2, [pc, #404]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007d4e:	e017      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3304      	adds	r3, #4
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 f944 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007d60:	e00e      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3324      	adds	r3, #36	; 0x24
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 f9ed 	bl	8009148 <RCCEx_PLL3_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007d72:	e005      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	75fb      	strb	r3, [r7, #23]
      break;
 8007d78:	e002      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d86:	4b55      	ldr	r3, [pc, #340]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d92:	4952      	ldr	r1, [pc, #328]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	650b      	str	r3, [r1, #80]	; 0x50
 8007d98:	e001      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d049      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007db4:	d030      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dba:	d82a      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007dc0:	d02c      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007dc6:	d824      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dcc:	d018      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dd2:	d81e      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ddc:	d007      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007dde:	e018      	b.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de0:	4b3e      	ldr	r3, [pc, #248]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	4a3d      	ldr	r2, [pc, #244]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dec:	e017      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3304      	adds	r3, #4
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f001 f8f5 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007dfe:	e00e      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3324      	adds	r3, #36	; 0x24
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 f99e 	bl	8009148 <RCCEx_PLL3_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e10:	e005      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	75fb      	strb	r3, [r7, #23]
      break;
 8007e16:	e002      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007e18:	bf00      	nop
 8007e1a:	e000      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007e24:	4b2d      	ldr	r3, [pc, #180]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e32:	492a      	ldr	r1, [pc, #168]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	658b      	str	r3, [r1, #88]	; 0x58
 8007e38:	e001      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d04c      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e54:	d030      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e5a:	d82a      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e60:	d02c      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007e62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e66:	d824      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e6c:	d018      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e72:	d81e      	bhi.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e7c:	d007      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007e7e:	e018      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e80:	4b16      	ldr	r3, [pc, #88]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	4a15      	ldr	r2, [pc, #84]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e8c:	e017      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3304      	adds	r3, #4
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 f8a5 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e9e:	e00e      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3324      	adds	r3, #36	; 0x24
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 f94e 	bl	8009148 <RCCEx_PLL3_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007eb0:	e005      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb6:	e002      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007eb8:	bf00      	nop
 8007eba:	e000      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ed2:	4902      	ldr	r1, [pc, #8]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ed8:	e004      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007eda:	bf00      	nop
 8007edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d032      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef4:	2b30      	cmp	r3, #48	; 0x30
 8007ef6:	d01c      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ef8:	2b30      	cmp	r3, #48	; 0x30
 8007efa:	d817      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d00c      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d813      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d016      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d10f      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f0c:	4baf      	ldr	r3, [pc, #700]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4aae      	ldr	r2, [pc, #696]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007f18:	e00e      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	2102      	movs	r1, #2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 f85f 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007f2a:	e005      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f30:	e002      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007f32:	bf00      	nop
 8007f34:	e000      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f3e:	4ba3      	ldr	r3, [pc, #652]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4a:	49a0      	ldr	r1, [pc, #640]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f50:	e001      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d047      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f6a:	d030      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f70:	d82a      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f76:	d02c      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f7c:	d824      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f82:	d018      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f88:	d81e      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	d007      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007f94:	e018      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f96:	4b8d      	ldr	r3, [pc, #564]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	4a8c      	ldr	r2, [pc, #560]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007fa2:	e017      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 f81a 	bl	8008fe4 <RCCEx_PLL2_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007fb4:	e00e      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3324      	adds	r3, #36	; 0x24
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f8c3 	bl	8009148 <RCCEx_PLL3_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007fc6:	e005      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007fda:	4b7c      	ldr	r3, [pc, #496]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe6:	4979      	ldr	r1, [pc, #484]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	650b      	str	r3, [r1, #80]	; 0x50
 8007fec:	e001      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d049      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008006:	d02e      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800800c:	d828      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800800e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008012:	d02a      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008018:	d822      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800801a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800801e:	d026      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008024:	d81c      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800802a:	d010      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800802c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008030:	d816      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01d      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803a:	d111      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	2101      	movs	r1, #1
 8008042:	4618      	mov	r0, r3
 8008044:	f000 ffce 	bl	8008fe4 <RCCEx_PLL2_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800804c:	e012      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3324      	adds	r3, #36	; 0x24
 8008052:	2101      	movs	r1, #1
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f877 	bl	8009148 <RCCEx_PLL3_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800805e:	e009      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	75fb      	strb	r3, [r7, #23]
      break;
 8008064:	e006      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008066:	bf00      	nop
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800807a:	4b54      	ldr	r3, [pc, #336]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800807c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008086:	4951      	ldr	r1, [pc, #324]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008088:	4313      	orrs	r3, r2
 800808a:	650b      	str	r3, [r1, #80]	; 0x50
 800808c:	e001      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d04b      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a8:	d02e      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80080aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ae:	d828      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b4:	d02a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80080b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ba:	d822      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080c0:	d026      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80080c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080c6:	d81c      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080cc:	d010      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d2:	d816      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01d      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80080d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080dc:	d111      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	2101      	movs	r1, #1
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 ff7d 	bl	8008fe4 <RCCEx_PLL2_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80080ee:	e012      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3324      	adds	r3, #36	; 0x24
 80080f4:	2101      	movs	r1, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 f826 	bl	8009148 <RCCEx_PLL3_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008100:	e009      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	75fb      	strb	r3, [r7, #23]
      break;
 8008106:	e006      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008108:	bf00      	nop
 800810a:	e004      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800810c:	bf00      	nop
 800810e:	e002      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800811c:	4b2b      	ldr	r3, [pc, #172]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800811e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008120:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800812a:	4928      	ldr	r1, [pc, #160]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800812c:	4313      	orrs	r3, r2
 800812e:	658b      	str	r3, [r1, #88]	; 0x58
 8008130:	e001      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d02f      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814a:	d00e      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008150:	d814      	bhi.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d015      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800815a:	d10f      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800815c:	4b1b      	ldr	r3, [pc, #108]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	4a1a      	ldr	r2, [pc, #104]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008168:	e00c      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3304      	adds	r3, #4
 800816e:	2101      	movs	r1, #1
 8008170:	4618      	mov	r0, r3
 8008172:	f000 ff37 	bl	8008fe4 <RCCEx_PLL2_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800817a:	e003      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]
      break;
 8008180:	e000      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800818a:	4b10      	ldr	r3, [pc, #64]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800818c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008196:	490d      	ldr	r1, [pc, #52]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008198:	4313      	orrs	r3, r2
 800819a:	650b      	str	r3, [r1, #80]	; 0x50
 800819c:	e001      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d033      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d81c      	bhi.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081f7 	.word	0x080081f7
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	080081df 	.word	0x080081df
 80081c8:	080081f7 	.word	0x080081f7
 80081cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d0:	4bb8      	ldr	r3, [pc, #736]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	4ab7      	ldr	r2, [pc, #732]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80081dc:	e00c      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3304      	adds	r3, #4
 80081e2:	2102      	movs	r1, #2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fefd 	bl	8008fe4 <RCCEx_PLL2_Config>
 80081ea:	4603      	mov	r3, r0
 80081ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80081ee:	e003      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	75fb      	strb	r3, [r7, #23]
      break;
 80081f4:	e000      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80081f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081fe:	4bad      	ldr	r3, [pc, #692]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008202:	f023 0203 	bic.w	r2, r3, #3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820a:	49aa      	ldr	r1, [pc, #680]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800820c:	4313      	orrs	r3, r2
 800820e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008210:	e001      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8086 	beq.w	8008330 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008224:	4ba4      	ldr	r3, [pc, #656]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4aa3      	ldr	r2, [pc, #652]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800822a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800822e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008230:	f7fb fb2a 	bl	8003888 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008236:	e009      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008238:	f7fb fb26 	bl	8003888 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b64      	cmp	r3, #100	; 0x64
 8008244:	d902      	bls.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	75fb      	strb	r3, [r7, #23]
        break;
 800824a:	e005      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800824c:	4b9a      	ldr	r3, [pc, #616]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0ef      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d166      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800825e:	4b95      	ldr	r3, [pc, #596]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008260:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008268:	4053      	eors	r3, r2
 800826a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800826e:	2b00      	cmp	r3, #0
 8008270:	d013      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008272:	4b90      	ldr	r3, [pc, #576]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800827a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800827c:	4b8d      	ldr	r3, [pc, #564]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800827e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008280:	4a8c      	ldr	r2, [pc, #560]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008286:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008288:	4b8a      	ldr	r3, [pc, #552]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800828a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828c:	4a89      	ldr	r2, [pc, #548]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800828e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008292:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008294:	4a87      	ldr	r2, [pc, #540]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a4:	d115      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a6:	f7fb faef 	bl	8003888 <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082ac:	e00b      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ae:	f7fb faeb 	bl	8003888 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082bc:	4293      	cmp	r3, r2
 80082be:	d902      	bls.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	75fb      	strb	r3, [r7, #23]
            break;
 80082c4:	e005      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c6:	4b7b      	ldr	r3, [pc, #492]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0ed      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d126      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e6:	d10d      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80082e8:	4b72      	ldr	r3, [pc, #456]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082f6:	0919      	lsrs	r1, r3, #4
 80082f8:	4b70      	ldr	r3, [pc, #448]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80082fa:	400b      	ands	r3, r1
 80082fc:	496d      	ldr	r1, [pc, #436]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	610b      	str	r3, [r1, #16]
 8008302:	e005      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008304:	4b6b      	ldr	r3, [pc, #428]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	4a6a      	ldr	r2, [pc, #424]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800830a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800830e:	6113      	str	r3, [r2, #16]
 8008310:	4b68      	ldr	r3, [pc, #416]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800831a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800831e:	4965      	ldr	r1, [pc, #404]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008320:	4313      	orrs	r3, r2
 8008322:	670b      	str	r3, [r1, #112]	; 0x70
 8008324:	e004      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	75bb      	strb	r3, [r7, #22]
 800832a:	e001      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d07e      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008340:	2b28      	cmp	r3, #40	; 0x28
 8008342:	d867      	bhi.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	0800841b 	.word	0x0800841b
 8008350:	08008415 	.word	0x08008415
 8008354:	08008415 	.word	0x08008415
 8008358:	08008415 	.word	0x08008415
 800835c:	08008415 	.word	0x08008415
 8008360:	08008415 	.word	0x08008415
 8008364:	08008415 	.word	0x08008415
 8008368:	08008415 	.word	0x08008415
 800836c:	080083f1 	.word	0x080083f1
 8008370:	08008415 	.word	0x08008415
 8008374:	08008415 	.word	0x08008415
 8008378:	08008415 	.word	0x08008415
 800837c:	08008415 	.word	0x08008415
 8008380:	08008415 	.word	0x08008415
 8008384:	08008415 	.word	0x08008415
 8008388:	08008415 	.word	0x08008415
 800838c:	08008403 	.word	0x08008403
 8008390:	08008415 	.word	0x08008415
 8008394:	08008415 	.word	0x08008415
 8008398:	08008415 	.word	0x08008415
 800839c:	08008415 	.word	0x08008415
 80083a0:	08008415 	.word	0x08008415
 80083a4:	08008415 	.word	0x08008415
 80083a8:	08008415 	.word	0x08008415
 80083ac:	0800841b 	.word	0x0800841b
 80083b0:	08008415 	.word	0x08008415
 80083b4:	08008415 	.word	0x08008415
 80083b8:	08008415 	.word	0x08008415
 80083bc:	08008415 	.word	0x08008415
 80083c0:	08008415 	.word	0x08008415
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008415 	.word	0x08008415
 80083cc:	0800841b 	.word	0x0800841b
 80083d0:	08008415 	.word	0x08008415
 80083d4:	08008415 	.word	0x08008415
 80083d8:	08008415 	.word	0x08008415
 80083dc:	08008415 	.word	0x08008415
 80083e0:	08008415 	.word	0x08008415
 80083e4:	08008415 	.word	0x08008415
 80083e8:	08008415 	.word	0x08008415
 80083ec:	0800841b 	.word	0x0800841b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3304      	adds	r3, #4
 80083f4:	2101      	movs	r1, #1
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fdf4 	bl	8008fe4 <RCCEx_PLL2_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008400:	e00c      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3324      	adds	r3, #36	; 0x24
 8008406:	2101      	movs	r1, #1
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fe9d 	bl	8009148 <RCCEx_PLL3_Config>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
      break;
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800841a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008422:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800842e:	4921      	ldr	r1, [pc, #132]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008430:	4313      	orrs	r3, r2
 8008432:	654b      	str	r3, [r1, #84]	; 0x54
 8008434:	e001      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d03e      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800844a:	2b05      	cmp	r3, #5
 800844c:	d820      	bhi.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008497 	.word	0x08008497
 8008458:	0800846d 	.word	0x0800846d
 800845c:	0800847f 	.word	0x0800847f
 8008460:	08008497 	.word	0x08008497
 8008464:	08008497 	.word	0x08008497
 8008468:	08008497 	.word	0x08008497
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3304      	adds	r3, #4
 8008470:	2101      	movs	r1, #1
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fdb6 	bl	8008fe4 <RCCEx_PLL2_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800847c:	e00c      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3324      	adds	r3, #36	; 0x24
 8008482:	2101      	movs	r1, #1
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fe5f 	bl	8009148 <RCCEx_PLL3_Config>
 800848a:	4603      	mov	r3, r0
 800848c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800848e:	e003      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
      break;
 8008494:	e000      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d110      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	f023 0207 	bic.w	r2, r3, #7
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084aa:	4902      	ldr	r1, [pc, #8]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	654b      	str	r3, [r1, #84]	; 0x54
 80084b0:	e008      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80084b2:	bf00      	nop
 80084b4:	58024400 	.word	0x58024400
 80084b8:	58024800 	.word	0x58024800
 80084bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d039      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d820      	bhi.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008523 	.word	0x08008523
 80084e4:	080084f9 	.word	0x080084f9
 80084e8:	0800850b 	.word	0x0800850b
 80084ec:	08008523 	.word	0x08008523
 80084f0:	08008523 	.word	0x08008523
 80084f4:	08008523 	.word	0x08008523
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3304      	adds	r3, #4
 80084fc:	2101      	movs	r1, #1
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd70 	bl	8008fe4 <RCCEx_PLL2_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008508:	e00c      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3324      	adds	r3, #36	; 0x24
 800850e:	2101      	movs	r1, #1
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fe19 	bl	8009148 <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800851a:	e003      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	75fb      	strb	r3, [r7, #23]
      break;
 8008520:	e000      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800852a:	4bb7      	ldr	r3, [pc, #732]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	f023 0207 	bic.w	r2, r3, #7
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008538:	49b3      	ldr	r1, [pc, #716]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800853a:	4313      	orrs	r3, r2
 800853c:	658b      	str	r3, [r1, #88]	; 0x58
 800853e:	e001      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d04b      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800855a:	d02e      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800855c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008560:	d828      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008566:	d02a      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856c:	d822      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800856e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008572:	d026      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008578:	d81c      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800857a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857e:	d010      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008584:	d816      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01d      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800858a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858e:	d111      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fd24 	bl	8008fe4 <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80085a0:	e012      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3324      	adds	r3, #36	; 0x24
 80085a6:	2102      	movs	r1, #2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fdcd 	bl	8009148 <RCCEx_PLL3_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80085b2:	e009      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]
      break;
 80085b8:	e006      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80085ba:	bf00      	nop
 80085bc:	e004      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80085be:	bf00      	nop
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80085c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085ce:	4b8e      	ldr	r3, [pc, #568]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085dc:	498a      	ldr	r1, [pc, #552]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	654b      	str	r3, [r1, #84]	; 0x54
 80085e2:	e001      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d04b      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085fe:	d02e      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008600:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008604:	d828      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860a:	d02a      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008610:	d822      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008616:	d026      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800861c:	d81c      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800861e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008622:	d010      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008628:	d816      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01d      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800862e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008632:	d111      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fcd2 	bl	8008fe4 <RCCEx_PLL2_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008644:	e012      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3324      	adds	r3, #36	; 0x24
 800864a:	2102      	movs	r1, #2
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fd7b 	bl	8009148 <RCCEx_PLL3_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008656:	e009      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
      break;
 800865c:	e006      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800865e:	bf00      	nop
 8008660:	e004      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008662:	bf00      	nop
 8008664:	e002      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800866a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008672:	4b65      	ldr	r3, [pc, #404]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008676:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008680:	4961      	ldr	r1, [pc, #388]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008682:	4313      	orrs	r3, r2
 8008684:	658b      	str	r3, [r1, #88]	; 0x58
 8008686:	e001      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008694:	2b00      	cmp	r3, #0
 8008696:	d04b      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800869e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086a2:	d02e      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80086a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086a8:	d828      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80086aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ae:	d02a      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80086b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086b4:	d822      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80086b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086ba:	d026      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80086bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80086c0:	d81c      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80086c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086c6:	d010      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80086c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086cc:	d816      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01d      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d6:	d111      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fc80 	bl	8008fe4 <RCCEx_PLL2_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80086e8:	e012      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	2102      	movs	r1, #2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fd29 	bl	8009148 <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80086fa:	e009      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e006      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008702:	bf00      	nop
 8008704:	e004      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008706:	bf00      	nop
 8008708:	e002      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800870a:	bf00      	nop
 800870c:	e000      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800870e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008716:	4b3c      	ldr	r3, [pc, #240]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008724:	4938      	ldr	r1, [pc, #224]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008726:	4313      	orrs	r3, r2
 8008728:	658b      	str	r3, [r1, #88]	; 0x58
 800872a:	e001      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01a      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008746:	d10a      	bne.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	2102      	movs	r1, #2
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fcfa 	bl	8009148 <RCCEx_PLL3_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800875e:	4b2a      	ldr	r3, [pc, #168]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800876c:	4926      	ldr	r1, [pc, #152]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800876e:	4313      	orrs	r3, r2
 8008770:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01a      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008788:	d10a      	bne.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3324      	adds	r3, #36	; 0x24
 800878e:	2102      	movs	r1, #2
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fcd9 	bl	8009148 <RCCEx_PLL3_Config>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087a0:	4b19      	ldr	r3, [pc, #100]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ae:	4916      	ldr	r1, [pc, #88]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d036      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ca:	d01f      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80087cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087d0:	d817      	bhi.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80087d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087da:	d009      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80087dc:	e011      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3304      	adds	r3, #4
 80087e2:	2100      	movs	r1, #0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fbfd 	bl	8008fe4 <RCCEx_PLL2_Config>
 80087ea:	4603      	mov	r3, r0
 80087ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80087ee:	e00e      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3324      	adds	r3, #36	; 0x24
 80087f4:	2102      	movs	r1, #2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fca6 	bl	8009148 <RCCEx_PLL3_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008800:	e005      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	75fb      	strb	r3, [r7, #23]
      break;
 8008806:	e002      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008808:	58024400 	.word	0x58024400
      break;
 800880c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008814:	4b93      	ldr	r3, [pc, #588]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008822:	4990      	ldr	r1, [pc, #576]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	658b      	str	r3, [r1, #88]	; 0x58
 8008828:	e001      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d033      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008844:	d01c      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008846:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800884a:	d816      	bhi.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800884c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008850:	d003      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008856:	d007      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008858:	e00f      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885a:	4b82      	ldr	r3, [pc, #520]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	4a81      	ldr	r2, [pc, #516]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008866:	e00c      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3324      	adds	r3, #36	; 0x24
 800886c:	2101      	movs	r1, #1
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fc6a 	bl	8009148 <RCCEx_PLL3_Config>
 8008874:	4603      	mov	r3, r0
 8008876:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008878:	e003      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	75fb      	strb	r3, [r7, #23]
      break;
 800887e:	e000      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008888:	4b76      	ldr	r3, [pc, #472]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800888a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008896:	4973      	ldr	r1, [pc, #460]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008898:	4313      	orrs	r3, r2
 800889a:	654b      	str	r3, [r1, #84]	; 0x54
 800889c:	e001      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d029      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80088b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ba:	d007      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80088bc:	e00f      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088be:	4b69      	ldr	r3, [pc, #420]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	4a68      	ldr	r2, [pc, #416]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80088ca:	e00b      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3304      	adds	r3, #4
 80088d0:	2102      	movs	r1, #2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fb86 	bl	8008fe4 <RCCEx_PLL2_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80088dc:	e002      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
      break;
 80088e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088ea:	4b5e      	ldr	r3, [pc, #376]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f6:	495b      	ldr	r1, [pc, #364]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088fc:	e001      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	; 0x24
 8008912:	2102      	movs	r1, #2
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fc17 	bl	8009148 <RCCEx_PLL3_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d030      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008938:	d017      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800893a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800893e:	d811      	bhi.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008944:	d013      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800894a:	d80b      	bhi.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d010      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008954:	d106      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008956:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	4a42      	ldr	r2, [pc, #264]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800895c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008962:	e007      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
      break;
 8008968:	e004      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800896a:	bf00      	nop
 800896c:	e002      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800896e:	bf00      	nop
 8008970:	e000      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800897a:	4b3a      	ldr	r3, [pc, #232]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008986:	4937      	ldr	r1, [pc, #220]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008988:	4313      	orrs	r3, r2
 800898a:	654b      	str	r3, [r1, #84]	; 0x54
 800898c:	e001      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d008      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800899e:	4b31      	ldr	r3, [pc, #196]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089aa:	492e      	ldr	r1, [pc, #184]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089bc:	4b29      	ldr	r3, [pc, #164]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089ca:	4926      	ldr	r1, [pc, #152]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089dc:	4b21      	ldr	r3, [pc, #132]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e8:	491e      	ldr	r1, [pc, #120]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00d      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089fa:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	4a19      	ldr	r2, [pc, #100]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a04:	6113      	str	r3, [r2, #16]
 8008a06:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a10:	4914      	ldr	r1, [pc, #80]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da08      	bge.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a1e:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2a:	490e      	ldr	r1, [pc, #56]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d009      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a3c:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	4906      	ldr	r1, [pc, #24]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008a50:	7dbb      	ldrb	r3, [r7, #22]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e000      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400

08008a68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a6c:	f7ff f81e 	bl	8007aac <HAL_RCC_GetHCLKFreq>
 8008a70:	4602      	mov	r2, r0
 8008a72:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	4904      	ldr	r1, [pc, #16]	; (8008a90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a7e:	5ccb      	ldrb	r3, [r1, r3]
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	0800ddb8 	.word	0x0800ddb8

08008a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b089      	sub	sp, #36	; 0x24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a9c:	4ba1      	ldr	r3, [pc, #644]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008aa6:	4b9f      	ldr	r3, [pc, #636]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aaa:	0b1b      	lsrs	r3, r3, #12
 8008aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ab2:	4b9c      	ldr	r3, [pc, #624]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	091b      	lsrs	r3, r3, #4
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008abe:	4b99      	ldr	r3, [pc, #612]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	08db      	lsrs	r3, r3, #3
 8008ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	fb02 f303 	mul.w	r3, r2, r3
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 8111 	beq.w	8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	f000 8083 	beq.w	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	f200 80a1 	bhi.w	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d056      	beq.n	8008bac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008afe:	e099      	b.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b00:	4b88      	ldr	r3, [pc, #544]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d02d      	beq.n	8008b68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b0c:	4b85      	ldr	r3, [pc, #532]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	08db      	lsrs	r3, r3, #3
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	4a84      	ldr	r2, [pc, #528]	; (8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	ee07 3a90 	vmov	s15, r3
 8008b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b7b      	ldr	r3, [pc, #492]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b66:	e087      	b.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b6a      	ldr	r3, [pc, #424]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008baa:	e065      	b.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b59      	ldr	r3, [pc, #356]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bee:	e043      	b.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c02:	4b48      	ldr	r3, [pc, #288]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c32:	e021      	b.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c46:	4b37      	ldr	r3, [pc, #220]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008c78:	4b2a      	ldr	r3, [pc, #168]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	0a5b      	lsrs	r3, r3, #9
 8008c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c9e:	ee17 2a90 	vmov	r2, s15
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ca6:	4b1f      	ldr	r3, [pc, #124]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	0c1b      	lsrs	r3, r3, #16
 8008cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ccc:	ee17 2a90 	vmov	r2, s15
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008cd4:	4b13      	ldr	r3, [pc, #76]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	0e1b      	lsrs	r3, r3, #24
 8008cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cfa:	ee17 2a90 	vmov	r2, s15
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d02:	e008      	b.n	8008d16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
}
 8008d16:	bf00      	nop
 8008d18:	3724      	adds	r7, #36	; 0x24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	58024400 	.word	0x58024400
 8008d28:	03d09000 	.word	0x03d09000
 8008d2c:	46000000 	.word	0x46000000
 8008d30:	4c742400 	.word	0x4c742400
 8008d34:	4a742400 	.word	0x4a742400
 8008d38:	4bbebc20 	.word	0x4bbebc20

08008d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b089      	sub	sp, #36	; 0x24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d44:	4ba1      	ldr	r3, [pc, #644]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	f003 0303 	and.w	r3, r3, #3
 8008d4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008d4e:	4b9f      	ldr	r3, [pc, #636]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d52:	0d1b      	lsrs	r3, r3, #20
 8008d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d5a:	4b9c      	ldr	r3, [pc, #624]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008d66:	4b99      	ldr	r3, [pc, #612]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6a:	08db      	lsrs	r3, r3, #3
 8008d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	fb02 f303 	mul.w	r3, r2, r3
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8111 	beq.w	8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	f000 8083 	beq.w	8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	f200 80a1 	bhi.w	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d056      	beq.n	8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008da6:	e099      	b.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008da8:	4b88      	ldr	r3, [pc, #544]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d02d      	beq.n	8008e10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008db4:	4b85      	ldr	r3, [pc, #532]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	08db      	lsrs	r3, r3, #3
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	4a84      	ldr	r2, [pc, #528]	; (8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	ee07 3a90 	vmov	s15, r3
 8008dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dde:	4b7b      	ldr	r3, [pc, #492]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e0e:	e087      	b.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e22:	4b6a      	ldr	r3, [pc, #424]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e52:	e065      	b.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e66:	4b59      	ldr	r3, [pc, #356]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e96:	e043      	b.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eaa:	4b48      	ldr	r3, [pc, #288]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ebe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eda:	e021      	b.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eee:	4b37      	ldr	r3, [pc, #220]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f20:	4b2a      	ldr	r3, [pc, #168]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	0a5b      	lsrs	r3, r3, #9
 8008f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f46:	ee17 2a90 	vmov	r2, s15
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f4e:	4b1f      	ldr	r3, [pc, #124]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f74:	ee17 2a90 	vmov	r2, s15
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008f7c:	4b13      	ldr	r3, [pc, #76]	; (8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f80:	0e1b      	lsrs	r3, r3, #24
 8008f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa2:	ee17 2a90 	vmov	r2, s15
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008faa:	e008      	b.n	8008fbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	609a      	str	r2, [r3, #8]
}
 8008fbe:	bf00      	nop
 8008fc0:	3724      	adds	r7, #36	; 0x24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	58024400 	.word	0x58024400
 8008fd0:	03d09000 	.word	0x03d09000
 8008fd4:	46000000 	.word	0x46000000
 8008fd8:	4c742400 	.word	0x4c742400
 8008fdc:	4a742400 	.word	0x4a742400
 8008fe0:	4bbebc20 	.word	0x4bbebc20

08008fe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ff2:	4b53      	ldr	r3, [pc, #332]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d101      	bne.n	8009002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e099      	b.n	8009136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009002:	4b4f      	ldr	r3, [pc, #316]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a4e      	ldr	r2, [pc, #312]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800900c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900e:	f7fa fc3b 	bl	8003888 <HAL_GetTick>
 8009012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009014:	e008      	b.n	8009028 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009016:	f7fa fc37 	bl	8003888 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d901      	bls.n	8009028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e086      	b.n	8009136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009028:	4b45      	ldr	r3, [pc, #276]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f0      	bne.n	8009016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009034:	4b42      	ldr	r3, [pc, #264]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	031b      	lsls	r3, r3, #12
 8009042:	493f      	ldr	r1, [pc, #252]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	628b      	str	r3, [r1, #40]	; 0x28
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	3b01      	subs	r3, #1
 800904e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	3b01      	subs	r3, #1
 8009058:	025b      	lsls	r3, r3, #9
 800905a:	b29b      	uxth	r3, r3
 800905c:	431a      	orrs	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	3b01      	subs	r3, #1
 8009064:	041b      	lsls	r3, r3, #16
 8009066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	3b01      	subs	r3, #1
 8009072:	061b      	lsls	r3, r3, #24
 8009074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009078:	4931      	ldr	r1, [pc, #196]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800907e:	4b30      	ldr	r3, [pc, #192]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	492d      	ldr	r1, [pc, #180]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 800908c:	4313      	orrs	r3, r2
 800908e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009090:	4b2b      	ldr	r3, [pc, #172]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	f023 0220 	bic.w	r2, r3, #32
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	4928      	ldr	r1, [pc, #160]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80090a2:	4b27      	ldr	r3, [pc, #156]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	4a26      	ldr	r2, [pc, #152]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	f023 0310 	bic.w	r3, r3, #16
 80090ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090ae:	4b24      	ldr	r3, [pc, #144]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090b2:	4b24      	ldr	r3, [pc, #144]	; (8009144 <RCCEx_PLL2_Config+0x160>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	69d2      	ldr	r2, [r2, #28]
 80090ba:	00d2      	lsls	r2, r2, #3
 80090bc:	4920      	ldr	r1, [pc, #128]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090c2:	4b1f      	ldr	r3, [pc, #124]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	4a1e      	ldr	r2, [pc, #120]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090c8:	f043 0310 	orr.w	r3, r3, #16
 80090cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d106      	bne.n	80090e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090d4:	4b1a      	ldr	r3, [pc, #104]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	4a19      	ldr	r2, [pc, #100]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090e0:	e00f      	b.n	8009102 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d106      	bne.n	80090f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090e8:	4b15      	ldr	r3, [pc, #84]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	4a14      	ldr	r2, [pc, #80]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090f4:	e005      	b.n	8009102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090f6:	4b12      	ldr	r3, [pc, #72]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fa:	4a11      	ldr	r2, [pc, #68]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 80090fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009102:	4b0f      	ldr	r3, [pc, #60]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a0e      	ldr	r2, [pc, #56]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 8009108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800910c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800910e:	f7fa fbbb 	bl	8003888 <HAL_GetTick>
 8009112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009114:	e008      	b.n	8009128 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009116:	f7fa fbb7 	bl	8003888 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e006      	b.n	8009136 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <RCCEx_PLL2_Config+0x15c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0f0      	beq.n	8009116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	58024400 	.word	0x58024400
 8009144:	ffff0007 	.word	0xffff0007

08009148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009156:	4b53      	ldr	r3, [pc, #332]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d101      	bne.n	8009166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e099      	b.n	800929a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009166:	4b4f      	ldr	r3, [pc, #316]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a4e      	ldr	r2, [pc, #312]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800916c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009172:	f7fa fb89 	bl	8003888 <HAL_GetTick>
 8009176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009178:	e008      	b.n	800918c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800917a:	f7fa fb85 	bl	8003888 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	2b02      	cmp	r3, #2
 8009186:	d901      	bls.n	800918c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e086      	b.n	800929a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800918c:	4b45      	ldr	r3, [pc, #276]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f0      	bne.n	800917a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009198:	4b42      	ldr	r3, [pc, #264]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	051b      	lsls	r3, r3, #20
 80091a6:	493f      	ldr	r1, [pc, #252]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	628b      	str	r3, [r1, #40]	; 0x28
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	025b      	lsls	r3, r3, #9
 80091be:	b29b      	uxth	r3, r3
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	041b      	lsls	r3, r3, #16
 80091ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091dc:	4931      	ldr	r1, [pc, #196]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091e2:	4b30      	ldr	r3, [pc, #192]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 80091e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	492d      	ldr	r1, [pc, #180]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091f4:	4b2b      	ldr	r3, [pc, #172]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	4928      	ldr	r1, [pc, #160]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009202:	4313      	orrs	r3, r2
 8009204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009206:	4b27      	ldr	r3, [pc, #156]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	4a26      	ldr	r2, [pc, #152]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800920c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009212:	4b24      	ldr	r3, [pc, #144]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009216:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <RCCEx_PLL3_Config+0x160>)
 8009218:	4013      	ands	r3, r2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	69d2      	ldr	r2, [r2, #28]
 800921e:	00d2      	lsls	r2, r2, #3
 8009220:	4920      	ldr	r1, [pc, #128]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009222:	4313      	orrs	r3, r2
 8009224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009226:	4b1f      	ldr	r3, [pc, #124]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	4a1e      	ldr	r2, [pc, #120]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800922c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009238:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	4a19      	ldr	r2, [pc, #100]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800923e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009242:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009244:	e00f      	b.n	8009266 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d106      	bne.n	800925a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800924c:	4b15      	ldr	r3, [pc, #84]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	4a14      	ldr	r2, [pc, #80]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009258:	e005      	b.n	8009266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800925a:	4b12      	ldr	r3, [pc, #72]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800925c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925e:	4a11      	ldr	r2, [pc, #68]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a0e      	ldr	r2, [pc, #56]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800926c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009272:	f7fa fb09 	bl	8003888 <HAL_GetTick>
 8009276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009278:	e008      	b.n	800928c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800927a:	f7fa fb05 	bl	8003888 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e006      	b.n	800929a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <RCCEx_PLL3_Config+0x15c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0f0      	beq.n	800927a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
 80092a8:	ffff0007 	.word	0xffff0007

080092ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e049      	b.n	8009352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f841 	bl	800935a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f000 f9f8 	bl	80096e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d001      	beq.n	8009388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e04f      	b.n	8009428 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0201 	orr.w	r2, r2, #1
 800939e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a23      	ldr	r2, [pc, #140]	; (8009434 <HAL_TIM_Base_Start_IT+0xc4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d01d      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x76>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b2:	d018      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x76>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1f      	ldr	r2, [pc, #124]	; (8009438 <HAL_TIM_Base_Start_IT+0xc8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x76>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1e      	ldr	r2, [pc, #120]	; (800943c <HAL_TIM_Base_Start_IT+0xcc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00e      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x76>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a1c      	ldr	r2, [pc, #112]	; (8009440 <HAL_TIM_Base_Start_IT+0xd0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x76>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a1b      	ldr	r2, [pc, #108]	; (8009444 <HAL_TIM_Base_Start_IT+0xd4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_TIM_Base_Start_IT+0x76>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a19      	ldr	r2, [pc, #100]	; (8009448 <HAL_TIM_Base_Start_IT+0xd8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d115      	bne.n	8009412 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	4b17      	ldr	r3, [pc, #92]	; (800944c <HAL_TIM_Base_Start_IT+0xdc>)
 80093ee:	4013      	ands	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b06      	cmp	r3, #6
 80093f6:	d015      	beq.n	8009424 <HAL_TIM_Base_Start_IT+0xb4>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fe:	d011      	beq.n	8009424 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0201 	orr.w	r2, r2, #1
 800940e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009410:	e008      	b.n	8009424 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f042 0201 	orr.w	r2, r2, #1
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	e000      	b.n	8009426 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40010000 	.word	0x40010000
 8009438:	40000400 	.word	0x40000400
 800943c:	40000800 	.word	0x40000800
 8009440:	40000c00 	.word	0x40000c00
 8009444:	40010400 	.word	0x40010400
 8009448:	40001800 	.word	0x40001800
 800944c:	00010007 	.word	0x00010007

08009450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d122      	bne.n	80094ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b02      	cmp	r3, #2
 8009472:	d11b      	bne.n	80094ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0202 	mvn.w	r2, #2
 800947c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f905 	bl	80096a2 <HAL_TIM_IC_CaptureCallback>
 8009498:	e005      	b.n	80094a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8f7 	bl	800968e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f908 	bl	80096b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d122      	bne.n	8009500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d11b      	bne.n	8009500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f06f 0204 	mvn.w	r2, #4
 80094d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2202      	movs	r2, #2
 80094d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8db 	bl	80096a2 <HAL_TIM_IC_CaptureCallback>
 80094ec:	e005      	b.n	80094fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f8cd 	bl	800968e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f8de 	bl	80096b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b08      	cmp	r3, #8
 800950c:	d122      	bne.n	8009554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b08      	cmp	r3, #8
 800951a:	d11b      	bne.n	8009554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f06f 0208 	mvn.w	r2, #8
 8009524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2204      	movs	r2, #4
 800952a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f8b1 	bl	80096a2 <HAL_TIM_IC_CaptureCallback>
 8009540:	e005      	b.n	800954e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f8a3 	bl	800968e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f8b4 	bl	80096b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0310 	and.w	r3, r3, #16
 800955e:	2b10      	cmp	r3, #16
 8009560:	d122      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b10      	cmp	r3, #16
 800956e:	d11b      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f06f 0210 	mvn.w	r2, #16
 8009578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2208      	movs	r2, #8
 800957e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f887 	bl	80096a2 <HAL_TIM_IC_CaptureCallback>
 8009594:	e005      	b.n	80095a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f879 	bl	800968e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f88a 	bl	80096b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d10e      	bne.n	80095d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d107      	bne.n	80095d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f06f 0201 	mvn.w	r2, #1
 80095cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7f8 ff62 	bl	8002498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095de:	2b80      	cmp	r3, #128	; 0x80
 80095e0:	d10e      	bne.n	8009600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ec:	2b80      	cmp	r3, #128	; 0x80
 80095ee:	d107      	bne.n	8009600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f914 	bl	8009828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800960a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800960e:	d10e      	bne.n	800962e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961a:	2b80      	cmp	r3, #128	; 0x80
 800961c:	d107      	bne.n	800962e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f907 	bl	800983c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009638:	2b40      	cmp	r3, #64	; 0x40
 800963a:	d10e      	bne.n	800965a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009646:	2b40      	cmp	r3, #64	; 0x40
 8009648:	d107      	bne.n	800965a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f838 	bl	80096ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b20      	cmp	r3, #32
 8009666:	d10e      	bne.n	8009686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b20      	cmp	r3, #32
 8009674:	d107      	bne.n	8009686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f06f 0220 	mvn.w	r2, #32
 800967e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f8c7 	bl	8009814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009686:	bf00      	nop
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b083      	sub	sp, #12
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096aa:	bf00      	nop
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
	...

080096e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a40      	ldr	r2, [pc, #256]	; (80097f4 <TIM_Base_SetConfig+0x114>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d013      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fe:	d00f      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a3d      	ldr	r2, [pc, #244]	; (80097f8 <TIM_Base_SetConfig+0x118>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00b      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a3c      	ldr	r2, [pc, #240]	; (80097fc <TIM_Base_SetConfig+0x11c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d007      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a3b      	ldr	r2, [pc, #236]	; (8009800 <TIM_Base_SetConfig+0x120>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a3a      	ldr	r2, [pc, #232]	; (8009804 <TIM_Base_SetConfig+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d108      	bne.n	8009732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a2f      	ldr	r2, [pc, #188]	; (80097f4 <TIM_Base_SetConfig+0x114>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01f      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009740:	d01b      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a2c      	ldr	r2, [pc, #176]	; (80097f8 <TIM_Base_SetConfig+0x118>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d017      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a2b      	ldr	r2, [pc, #172]	; (80097fc <TIM_Base_SetConfig+0x11c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d013      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2a      	ldr	r2, [pc, #168]	; (8009800 <TIM_Base_SetConfig+0x120>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00f      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a29      	ldr	r2, [pc, #164]	; (8009804 <TIM_Base_SetConfig+0x124>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00b      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a28      	ldr	r2, [pc, #160]	; (8009808 <TIM_Base_SetConfig+0x128>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d007      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a27      	ldr	r2, [pc, #156]	; (800980c <TIM_Base_SetConfig+0x12c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d003      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a26      	ldr	r2, [pc, #152]	; (8009810 <TIM_Base_SetConfig+0x130>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d108      	bne.n	800978c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a10      	ldr	r2, [pc, #64]	; (80097f4 <TIM_Base_SetConfig+0x114>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00f      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a12      	ldr	r2, [pc, #72]	; (8009804 <TIM_Base_SetConfig+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00b      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a11      	ldr	r2, [pc, #68]	; (8009808 <TIM_Base_SetConfig+0x128>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a10      	ldr	r2, [pc, #64]	; (800980c <TIM_Base_SetConfig+0x12c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a0f      	ldr	r2, [pc, #60]	; (8009810 <TIM_Base_SetConfig+0x130>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d103      	bne.n	80097e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	615a      	str	r2, [r3, #20]
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800
 8009800:	40000c00 	.word	0x40000c00
 8009804:	40010400 	.word	0x40010400
 8009808:	40014000 	.word	0x40014000
 800980c:	40014400 	.word	0x40014400
 8009810:	40014800 	.word	0x40014800

08009814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e042      	b.n	80098e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7f8 fe45 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2224      	movs	r2, #36	; 0x24
 800987e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0201 	bic.w	r2, r2, #1
 8009890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fc5a 	bl	800a14c <UART_SetConfig>
 8009898:	4603      	mov	r3, r0
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e022      	b.n	80098e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 f9ae 	bl	800ac0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0201 	orr.w	r2, r2, #1
 80098de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 fa35 	bl	800ad50 <UART_CheckIdleState>
 80098e6:	4603      	mov	r3, r0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009904:	2b20      	cmp	r3, #32
 8009906:	d168      	bne.n	80099da <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <HAL_UART_Transmit_DMA+0x24>
 800990e:	88fb      	ldrh	r3, [r7, #6]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e061      	b.n	80099dc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_UART_Transmit_DMA+0x36>
 8009922:	2302      	movs	r3, #2
 8009924:	e05a      	b.n	80099dc <HAL_UART_Transmit_DMA+0xec>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	88fa      	ldrh	r2, [r7, #6]
 8009938:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	88fa      	ldrh	r2, [r7, #6]
 8009940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2221      	movs	r2, #33	; 0x21
 8009950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009958:	2b00      	cmp	r3, #0
 800995a:	d02c      	beq.n	80099b6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009960:	4a20      	ldr	r2, [pc, #128]	; (80099e4 <HAL_UART_Transmit_DMA+0xf4>)
 8009962:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009968:	4a1f      	ldr	r2, [pc, #124]	; (80099e8 <HAL_UART_Transmit_DMA+0xf8>)
 800996a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009970:	4a1e      	ldr	r2, [pc, #120]	; (80099ec <HAL_UART_Transmit_DMA+0xfc>)
 8009972:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009978:	2200      	movs	r2, #0
 800997a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009984:	4619      	mov	r1, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3328      	adds	r3, #40	; 0x28
 800998c:	461a      	mov	r2, r3
 800998e:	88fb      	ldrh	r3, [r7, #6]
 8009990:	f7fa fbce 	bl	8004130 <HAL_DMA_Start_IT>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00d      	beq.n	80099b6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2210      	movs	r2, #16
 800999e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e012      	b.n	80099dc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2240      	movs	r2, #64	; 0x40
 80099bc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099d4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	e000      	b.n	80099dc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80099da:	2302      	movs	r3, #2
  }
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	0800b065 	.word	0x0800b065
 80099e8:	0800b0b5 	.word	0x0800b0b5
 80099ec:	0800b19f 	.word	0x0800b19f

080099f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a04:	2b20      	cmp	r3, #32
 8009a06:	d131      	bne.n	8009a6c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <HAL_UART_Receive_DMA+0x24>
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e02a      	b.n	8009a6e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d101      	bne.n	8009a26 <HAL_UART_Receive_DMA+0x36>
 8009a22:	2302      	movs	r3, #2
 8009a24:	e023      	b.n	8009a6e <HAL_UART_Receive_DMA+0x7e>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a0f      	ldr	r2, [pc, #60]	; (8009a78 <HAL_UART_Receive_DMA+0x88>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00e      	beq.n	8009a5c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009a5a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f001 fa40 	bl	800aee8 <UART_Start_Receive_DMA>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	e000      	b.n	8009a6e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009a6c:	2302      	movs	r3, #2
  }
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	58000c00 	.word	0x58000c00

08009a7c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a8a:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9e:	2b80      	cmp	r3, #128	; 0x80
 8009aa0:	d127      	bne.n	8009af2 <HAL_UART_DMAStop+0x76>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b21      	cmp	r3, #33	; 0x21
 8009aa6:	d124      	bne.n	8009af2 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ab6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d015      	beq.n	8009aec <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fa fd9d 	bl	8004604 <HAL_DMA_Abort>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00d      	beq.n	8009aec <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fc fa21 	bl	8005f1c <HAL_DMA_GetError>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d105      	bne.n	8009aec <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e032      	b.n	8009b52 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 fa69 	bl	800afc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d127      	bne.n	8009b50 <HAL_UART_DMAStop+0xd4>
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2b22      	cmp	r3, #34	; 0x22
 8009b04:	d124      	bne.n	8009b50 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b14:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d015      	beq.n	8009b4a <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fa fd6e 	bl	8004604 <HAL_DMA_Abort>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00d      	beq.n	8009b4a <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fc f9f2 	bl	8005f1c <HAL_DMA_GetError>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d105      	bne.n	8009b4a <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2210      	movs	r2, #16
 8009b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e003      	b.n	8009b52 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fa58 	bl	800b000 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b82:	4013      	ands	r3, r2
 8009b84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d118      	bne.n	8009bbe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d013      	beq.n	8009bbe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d009      	beq.n	8009bbe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 8282 	beq.w	800a0b8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
      }
      return;
 8009bbc:	e27c      	b.n	800a0b8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 80ef 	beq.w	8009da4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4b73      	ldr	r3, [pc, #460]	; (8009d98 <HAL_UART_IRQHandler+0x23c>)
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d105      	bne.n	8009bdc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	4b72      	ldr	r3, [pc, #456]	; (8009d9c <HAL_UART_IRQHandler+0x240>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 80e4 	beq.w	8009da4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d010      	beq.n	8009c08 <HAL_UART_IRQHandler+0xac>
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bfe:	f043 0201 	orr.w	r2, r3, #1
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d010      	beq.n	8009c34 <HAL_UART_IRQHandler+0xd8>
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2202      	movs	r2, #2
 8009c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c2a:	f043 0204 	orr.w	r2, r3, #4
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d010      	beq.n	8009c60 <HAL_UART_IRQHandler+0x104>
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2204      	movs	r2, #4
 8009c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c56:	f043 0202 	orr.w	r2, r3, #2
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	f003 0308 	and.w	r3, r3, #8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d015      	beq.n	8009c96 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	4b48      	ldr	r3, [pc, #288]	; (8009d98 <HAL_UART_IRQHandler+0x23c>)
 8009c78:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00b      	beq.n	8009c96 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2208      	movs	r2, #8
 8009c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c8c:	f043 0208 	orr.w	r2, r3, #8
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d011      	beq.n	8009cc4 <HAL_UART_IRQHandler+0x168>
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00c      	beq.n	8009cc4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cba:	f043 0220 	orr.w	r2, r3, #32
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 81f6 	beq.w	800a0bc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d011      	beq.n	8009cfe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d007      	beq.n	8009cfe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d04:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b40      	cmp	r3, #64	; 0x40
 8009d12:	d004      	beq.n	8009d1e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d031      	beq.n	8009d82 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 f96e 	bl	800b000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b40      	cmp	r3, #64	; 0x40
 8009d30:	d123      	bne.n	8009d7a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689a      	ldr	r2, [r3, #8]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d40:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d013      	beq.n	8009d72 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d4e:	4a14      	ldr	r2, [pc, #80]	; (8009da0 <HAL_UART_IRQHandler+0x244>)
 8009d50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fa ff72 	bl	8004c40 <HAL_DMA_Abort_IT>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d017      	beq.n	8009d92 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d70:	e00f      	b.n	8009d92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9d4 	bl	800a120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d78:	e00b      	b.n	8009d92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f9d0 	bl	800a120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d80:	e007      	b.n	8009d92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f9cc 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009d90:	e194      	b.n	800a0bc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d92:	bf00      	nop
    return;
 8009d94:	e192      	b.n	800a0bc <HAL_UART_IRQHandler+0x560>
 8009d96:	bf00      	nop
 8009d98:	10000001 	.word	0x10000001
 8009d9c:	04000120 	.word	0x04000120
 8009da0:	0800b21f 	.word	0x0800b21f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	f040 810f 	bne.w	8009fcc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 8109 	beq.w	8009fcc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f003 0310 	and.w	r3, r3, #16
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 8103 	beq.w	8009fcc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2210      	movs	r2, #16
 8009dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd8:	2b40      	cmp	r3, #64	; 0x40
 8009dda:	f040 80bb 	bne.w	8009f54 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a96      	ldr	r2, [pc, #600]	; (800a040 <HAL_UART_IRQHandler+0x4e4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d059      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a94      	ldr	r2, [pc, #592]	; (800a044 <HAL_UART_IRQHandler+0x4e8>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d053      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a92      	ldr	r2, [pc, #584]	; (800a048 <HAL_UART_IRQHandler+0x4ec>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d04d      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a90      	ldr	r2, [pc, #576]	; (800a04c <HAL_UART_IRQHandler+0x4f0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d047      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a8e      	ldr	r2, [pc, #568]	; (800a050 <HAL_UART_IRQHandler+0x4f4>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d041      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a8c      	ldr	r2, [pc, #560]	; (800a054 <HAL_UART_IRQHandler+0x4f8>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d03b      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a8a      	ldr	r2, [pc, #552]	; (800a058 <HAL_UART_IRQHandler+0x4fc>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d035      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a88      	ldr	r2, [pc, #544]	; (800a05c <HAL_UART_IRQHandler+0x500>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d02f      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a86      	ldr	r2, [pc, #536]	; (800a060 <HAL_UART_IRQHandler+0x504>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d029      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a84      	ldr	r2, [pc, #528]	; (800a064 <HAL_UART_IRQHandler+0x508>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d023      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a82      	ldr	r2, [pc, #520]	; (800a068 <HAL_UART_IRQHandler+0x50c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d01d      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a80      	ldr	r2, [pc, #512]	; (800a06c <HAL_UART_IRQHandler+0x510>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d017      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a7e      	ldr	r2, [pc, #504]	; (800a070 <HAL_UART_IRQHandler+0x514>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d011      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a7c      	ldr	r2, [pc, #496]	; (800a074 <HAL_UART_IRQHandler+0x518>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00b      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a7a      	ldr	r2, [pc, #488]	; (800a078 <HAL_UART_IRQHandler+0x51c>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d005      	beq.n	8009e9e <HAL_UART_IRQHandler+0x342>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a78      	ldr	r2, [pc, #480]	; (800a07c <HAL_UART_IRQHandler+0x520>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d105      	bne.n	8009eaa <HAL_UART_IRQHandler+0x34e>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	e004      	b.n	8009eb4 <HAL_UART_IRQHandler+0x358>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009eb6:	893b      	ldrh	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 8101 	beq.w	800a0c0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ec4:	893a      	ldrh	r2, [r7, #8]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	f080 80fa 	bcs.w	800a0c0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	893a      	ldrh	r2, [r7, #8]
 8009ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ede:	d02b      	beq.n	8009f38 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0201 	bic.w	r2, r2, #1
 8009efe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f0e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0210 	bic.w	r2, r2, #16
 8009f2c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fa fb66 	bl	8004604 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f8f1 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f52:	e0b5      	b.n	800a0c0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80a8 	beq.w	800a0c4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009f74:	897b      	ldrh	r3, [r7, #10]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 80a4 	beq.w	800a0c4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6899      	ldr	r1, [r3, #8]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	4b3a      	ldr	r3, [pc, #232]	; (800a080 <HAL_UART_IRQHandler+0x524>)
 8009f98:	400b      	ands	r3, r1
 8009f9a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0210 	bic.w	r2, r2, #16
 8009fbe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fc0:	897b      	ldrh	r3, [r7, #10]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f8b5 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fca:	e07b      	b.n	800a0c4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00d      	beq.n	8009ff2 <HAL_UART_IRQHandler+0x496>
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d008      	beq.n	8009ff2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 f947 	bl	800b27e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ff0:	e06b      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d012      	beq.n	800a022 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d104      	bne.n	800a010 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d008      	beq.n	800a022 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a014:	2b00      	cmp	r3, #0
 800a016:	d057      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
    }
    return;
 800a020:	e052      	b.n	800a0c8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d02b      	beq.n	800a084 <HAL_UART_IRQHandler+0x528>
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d026      	beq.n	800a084 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 f907 	bl	800b24a <UART_EndTransmit_IT>
    return;
 800a03c:	e045      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
 800a03e:	bf00      	nop
 800a040:	40020010 	.word	0x40020010
 800a044:	40020028 	.word	0x40020028
 800a048:	40020040 	.word	0x40020040
 800a04c:	40020058 	.word	0x40020058
 800a050:	40020070 	.word	0x40020070
 800a054:	40020088 	.word	0x40020088
 800a058:	400200a0 	.word	0x400200a0
 800a05c:	400200b8 	.word	0x400200b8
 800a060:	40020410 	.word	0x40020410
 800a064:	40020428 	.word	0x40020428
 800a068:	40020440 	.word	0x40020440
 800a06c:	40020458 	.word	0x40020458
 800a070:	40020470 	.word	0x40020470
 800a074:	40020488 	.word	0x40020488
 800a078:	400204a0 	.word	0x400204a0
 800a07c:	400204b8 	.word	0x400204b8
 800a080:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d008      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x544>
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 f904 	bl	800b2a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a09e:	e014      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00f      	beq.n	800a0ca <HAL_UART_IRQHandler+0x56e>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	da0c      	bge.n	800a0ca <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 f8ee 	bl	800b292 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0b6:	e008      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
      return;
 800a0b8:	bf00      	nop
 800a0ba:	e006      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
    return;
 800a0bc:	bf00      	nop
 800a0be:	e004      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
      return;
 800a0c0:	bf00      	nop
 800a0c2:	e002      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
      return;
 800a0c4:	bf00      	nop
 800a0c6:	e000      	b.n	800a0ca <HAL_UART_IRQHandler+0x56e>
    return;
 800a0c8:	bf00      	nop
  }
}
 800a0ca:	3720      	adds	r7, #32
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a14c:	b5b0      	push	{r4, r5, r7, lr}
 800a14e:	b08e      	sub	sp, #56	; 0x38
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	431a      	orrs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	4313      	orrs	r3, r2
 800a170:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	4bbf      	ldr	r3, [pc, #764]	; (800a478 <UART_SetConfig+0x32c>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a182:	430b      	orrs	r3, r1
 800a184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	430a      	orrs	r2, r1
 800a19a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4ab5      	ldr	r2, [pc, #724]	; (800a47c <UART_SetConfig+0x330>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d004      	beq.n	800a1b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	4bb0      	ldr	r3, [pc, #704]	; (800a480 <UART_SetConfig+0x334>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	6812      	ldr	r2, [r2, #0]
 800a1c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	f023 010f 	bic.w	r1, r3, #15
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4aa7      	ldr	r2, [pc, #668]	; (800a484 <UART_SetConfig+0x338>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d176      	bne.n	800a2d8 <UART_SetConfig+0x18c>
 800a1ea:	4ba7      	ldr	r3, [pc, #668]	; (800a488 <UART_SetConfig+0x33c>)
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1f2:	2b28      	cmp	r3, #40	; 0x28
 800a1f4:	d86c      	bhi.n	800a2d0 <UART_SetConfig+0x184>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <UART_SetConfig+0xb0>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a2a1 	.word	0x0800a2a1
 800a200:	0800a2d1 	.word	0x0800a2d1
 800a204:	0800a2d1 	.word	0x0800a2d1
 800a208:	0800a2d1 	.word	0x0800a2d1
 800a20c:	0800a2d1 	.word	0x0800a2d1
 800a210:	0800a2d1 	.word	0x0800a2d1
 800a214:	0800a2d1 	.word	0x0800a2d1
 800a218:	0800a2d1 	.word	0x0800a2d1
 800a21c:	0800a2a9 	.word	0x0800a2a9
 800a220:	0800a2d1 	.word	0x0800a2d1
 800a224:	0800a2d1 	.word	0x0800a2d1
 800a228:	0800a2d1 	.word	0x0800a2d1
 800a22c:	0800a2d1 	.word	0x0800a2d1
 800a230:	0800a2d1 	.word	0x0800a2d1
 800a234:	0800a2d1 	.word	0x0800a2d1
 800a238:	0800a2d1 	.word	0x0800a2d1
 800a23c:	0800a2b1 	.word	0x0800a2b1
 800a240:	0800a2d1 	.word	0x0800a2d1
 800a244:	0800a2d1 	.word	0x0800a2d1
 800a248:	0800a2d1 	.word	0x0800a2d1
 800a24c:	0800a2d1 	.word	0x0800a2d1
 800a250:	0800a2d1 	.word	0x0800a2d1
 800a254:	0800a2d1 	.word	0x0800a2d1
 800a258:	0800a2d1 	.word	0x0800a2d1
 800a25c:	0800a2b9 	.word	0x0800a2b9
 800a260:	0800a2d1 	.word	0x0800a2d1
 800a264:	0800a2d1 	.word	0x0800a2d1
 800a268:	0800a2d1 	.word	0x0800a2d1
 800a26c:	0800a2d1 	.word	0x0800a2d1
 800a270:	0800a2d1 	.word	0x0800a2d1
 800a274:	0800a2d1 	.word	0x0800a2d1
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	0800a2c1 	.word	0x0800a2c1
 800a280:	0800a2d1 	.word	0x0800a2d1
 800a284:	0800a2d1 	.word	0x0800a2d1
 800a288:	0800a2d1 	.word	0x0800a2d1
 800a28c:	0800a2d1 	.word	0x0800a2d1
 800a290:	0800a2d1 	.word	0x0800a2d1
 800a294:	0800a2d1 	.word	0x0800a2d1
 800a298:	0800a2d1 	.word	0x0800a2d1
 800a29c:	0800a2c9 	.word	0x0800a2c9
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a6:	e222      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ae:	e21e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b6:	e21a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e216      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2c0:	2320      	movs	r3, #32
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e212      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e20e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2d0:	2380      	movs	r3, #128	; 0x80
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e20a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a6b      	ldr	r2, [pc, #428]	; (800a48c <UART_SetConfig+0x340>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d130      	bne.n	800a344 <UART_SetConfig+0x1f8>
 800a2e2:	4b69      	ldr	r3, [pc, #420]	; (800a488 <UART_SetConfig+0x33c>)
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b05      	cmp	r3, #5
 800a2ec:	d826      	bhi.n	800a33c <UART_SetConfig+0x1f0>
 800a2ee:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0x1a8>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a30d 	.word	0x0800a30d
 800a2f8:	0800a315 	.word	0x0800a315
 800a2fc:	0800a31d 	.word	0x0800a31d
 800a300:	0800a325 	.word	0x0800a325
 800a304:	0800a32d 	.word	0x0800a32d
 800a308:	0800a335 	.word	0x0800a335
 800a30c:	2300      	movs	r3, #0
 800a30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a312:	e1ec      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a314:	2304      	movs	r3, #4
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e1e8      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a31c:	2308      	movs	r3, #8
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	e1e4      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a324:	2310      	movs	r3, #16
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32a:	e1e0      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a32c:	2320      	movs	r3, #32
 800a32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a332:	e1dc      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33a:	e1d8      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a33c:	2380      	movs	r3, #128	; 0x80
 800a33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a342:	e1d4      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a51      	ldr	r2, [pc, #324]	; (800a490 <UART_SetConfig+0x344>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d130      	bne.n	800a3b0 <UART_SetConfig+0x264>
 800a34e:	4b4e      	ldr	r3, [pc, #312]	; (800a488 <UART_SetConfig+0x33c>)
 800a350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	2b05      	cmp	r3, #5
 800a358:	d826      	bhi.n	800a3a8 <UART_SetConfig+0x25c>
 800a35a:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <UART_SetConfig+0x214>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a379 	.word	0x0800a379
 800a364:	0800a381 	.word	0x0800a381
 800a368:	0800a389 	.word	0x0800a389
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a3a1 	.word	0x0800a3a1
 800a378:	2300      	movs	r3, #0
 800a37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37e:	e1b6      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a380:	2304      	movs	r3, #4
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e1b2      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a388:	2308      	movs	r3, #8
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e1ae      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a390:	2310      	movs	r3, #16
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e1aa      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a398:	2320      	movs	r3, #32
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e1a6      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a3a0:	2340      	movs	r3, #64	; 0x40
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e1a2      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a3a8:	2380      	movs	r3, #128	; 0x80
 800a3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ae:	e19e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a37      	ldr	r2, [pc, #220]	; (800a494 <UART_SetConfig+0x348>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d130      	bne.n	800a41c <UART_SetConfig+0x2d0>
 800a3ba:	4b33      	ldr	r3, [pc, #204]	; (800a488 <UART_SetConfig+0x33c>)
 800a3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3be:	f003 0307 	and.w	r3, r3, #7
 800a3c2:	2b05      	cmp	r3, #5
 800a3c4:	d826      	bhi.n	800a414 <UART_SetConfig+0x2c8>
 800a3c6:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <UART_SetConfig+0x280>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a3e5 	.word	0x0800a3e5
 800a3d0:	0800a3ed 	.word	0x0800a3ed
 800a3d4:	0800a3f5 	.word	0x0800a3f5
 800a3d8:	0800a3fd 	.word	0x0800a3fd
 800a3dc:	0800a405 	.word	0x0800a405
 800a3e0:	0800a40d 	.word	0x0800a40d
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e180      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e17c      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a3f4:	2308      	movs	r3, #8
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e178      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e174      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a404:	2320      	movs	r3, #32
 800a406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40a:	e170      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a40c:	2340      	movs	r3, #64	; 0x40
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a412:	e16c      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a414:	2380      	movs	r3, #128	; 0x80
 800a416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41a:	e168      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1d      	ldr	r2, [pc, #116]	; (800a498 <UART_SetConfig+0x34c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d142      	bne.n	800a4ac <UART_SetConfig+0x360>
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <UART_SetConfig+0x33c>)
 800a428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d838      	bhi.n	800a4a4 <UART_SetConfig+0x358>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <UART_SetConfig+0x2ec>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a459 	.word	0x0800a459
 800a440:	0800a461 	.word	0x0800a461
 800a444:	0800a469 	.word	0x0800a469
 800a448:	0800a471 	.word	0x0800a471
 800a44c:	0800a49d 	.word	0x0800a49d
 800a450:	2300      	movs	r3, #0
 800a452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a456:	e14a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a458:	2304      	movs	r3, #4
 800a45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45e:	e146      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a460:	2308      	movs	r3, #8
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e142      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a468:	2310      	movs	r3, #16
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46e:	e13e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a470:	2320      	movs	r3, #32
 800a472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a476:	e13a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a478:	cfff69f3 	.word	0xcfff69f3
 800a47c:	58000c00 	.word	0x58000c00
 800a480:	11fff4ff 	.word	0x11fff4ff
 800a484:	40011000 	.word	0x40011000
 800a488:	58024400 	.word	0x58024400
 800a48c:	40004400 	.word	0x40004400
 800a490:	40004800 	.word	0x40004800
 800a494:	40004c00 	.word	0x40004c00
 800a498:	40005000 	.word	0x40005000
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e124      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a4a4:	2380      	movs	r3, #128	; 0x80
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e120      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4acc      	ldr	r2, [pc, #816]	; (800a7e4 <UART_SetConfig+0x698>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d176      	bne.n	800a5a4 <UART_SetConfig+0x458>
 800a4b6:	4bcc      	ldr	r3, [pc, #816]	; (800a7e8 <UART_SetConfig+0x69c>)
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4be:	2b28      	cmp	r3, #40	; 0x28
 800a4c0:	d86c      	bhi.n	800a59c <UART_SetConfig+0x450>
 800a4c2:	a201      	add	r2, pc, #4	; (adr r2, 800a4c8 <UART_SetConfig+0x37c>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a56d 	.word	0x0800a56d
 800a4cc:	0800a59d 	.word	0x0800a59d
 800a4d0:	0800a59d 	.word	0x0800a59d
 800a4d4:	0800a59d 	.word	0x0800a59d
 800a4d8:	0800a59d 	.word	0x0800a59d
 800a4dc:	0800a59d 	.word	0x0800a59d
 800a4e0:	0800a59d 	.word	0x0800a59d
 800a4e4:	0800a59d 	.word	0x0800a59d
 800a4e8:	0800a575 	.word	0x0800a575
 800a4ec:	0800a59d 	.word	0x0800a59d
 800a4f0:	0800a59d 	.word	0x0800a59d
 800a4f4:	0800a59d 	.word	0x0800a59d
 800a4f8:	0800a59d 	.word	0x0800a59d
 800a4fc:	0800a59d 	.word	0x0800a59d
 800a500:	0800a59d 	.word	0x0800a59d
 800a504:	0800a59d 	.word	0x0800a59d
 800a508:	0800a57d 	.word	0x0800a57d
 800a50c:	0800a59d 	.word	0x0800a59d
 800a510:	0800a59d 	.word	0x0800a59d
 800a514:	0800a59d 	.word	0x0800a59d
 800a518:	0800a59d 	.word	0x0800a59d
 800a51c:	0800a59d 	.word	0x0800a59d
 800a520:	0800a59d 	.word	0x0800a59d
 800a524:	0800a59d 	.word	0x0800a59d
 800a528:	0800a585 	.word	0x0800a585
 800a52c:	0800a59d 	.word	0x0800a59d
 800a530:	0800a59d 	.word	0x0800a59d
 800a534:	0800a59d 	.word	0x0800a59d
 800a538:	0800a59d 	.word	0x0800a59d
 800a53c:	0800a59d 	.word	0x0800a59d
 800a540:	0800a59d 	.word	0x0800a59d
 800a544:	0800a59d 	.word	0x0800a59d
 800a548:	0800a58d 	.word	0x0800a58d
 800a54c:	0800a59d 	.word	0x0800a59d
 800a550:	0800a59d 	.word	0x0800a59d
 800a554:	0800a59d 	.word	0x0800a59d
 800a558:	0800a59d 	.word	0x0800a59d
 800a55c:	0800a59d 	.word	0x0800a59d
 800a560:	0800a59d 	.word	0x0800a59d
 800a564:	0800a59d 	.word	0x0800a59d
 800a568:	0800a595 	.word	0x0800a595
 800a56c:	2301      	movs	r3, #1
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e0bc      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a574:	2304      	movs	r3, #4
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e0b8      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a57c:	2308      	movs	r3, #8
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e0b4      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a584:	2310      	movs	r3, #16
 800a586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58a:	e0b0      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a58c:	2320      	movs	r3, #32
 800a58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a592:	e0ac      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59a:	e0a8      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a59c:	2380      	movs	r3, #128	; 0x80
 800a59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a2:	e0a4      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a90      	ldr	r2, [pc, #576]	; (800a7ec <UART_SetConfig+0x6a0>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d130      	bne.n	800a610 <UART_SetConfig+0x4c4>
 800a5ae:	4b8e      	ldr	r3, [pc, #568]	; (800a7e8 <UART_SetConfig+0x69c>)
 800a5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d826      	bhi.n	800a608 <UART_SetConfig+0x4bc>
 800a5ba:	a201      	add	r2, pc, #4	; (adr r2, 800a5c0 <UART_SetConfig+0x474>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a5d9 	.word	0x0800a5d9
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5e9 	.word	0x0800a5e9
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5de:	e086      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e082      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e07e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f6:	e07a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a5f8:	2320      	movs	r3, #32
 800a5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fe:	e076      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a600:	2340      	movs	r3, #64	; 0x40
 800a602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a606:	e072      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60e:	e06e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a76      	ldr	r2, [pc, #472]	; (800a7f0 <UART_SetConfig+0x6a4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d130      	bne.n	800a67c <UART_SetConfig+0x530>
 800a61a:	4b73      	ldr	r3, [pc, #460]	; (800a7e8 <UART_SetConfig+0x69c>)
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	f003 0307 	and.w	r3, r3, #7
 800a622:	2b05      	cmp	r3, #5
 800a624:	d826      	bhi.n	800a674 <UART_SetConfig+0x528>
 800a626:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <UART_SetConfig+0x4e0>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a645 	.word	0x0800a645
 800a630:	0800a64d 	.word	0x0800a64d
 800a634:	0800a655 	.word	0x0800a655
 800a638:	0800a65d 	.word	0x0800a65d
 800a63c:	0800a665 	.word	0x0800a665
 800a640:	0800a66d 	.word	0x0800a66d
 800a644:	2300      	movs	r3, #0
 800a646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64a:	e050      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a64c:	2304      	movs	r3, #4
 800a64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a652:	e04c      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a654:	2308      	movs	r3, #8
 800a656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65a:	e048      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a65c:	2310      	movs	r3, #16
 800a65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a662:	e044      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a664:	2320      	movs	r3, #32
 800a666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66a:	e040      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a66c:	2340      	movs	r3, #64	; 0x40
 800a66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a672:	e03c      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a674:	2380      	movs	r3, #128	; 0x80
 800a676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67a:	e038      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a5c      	ldr	r2, [pc, #368]	; (800a7f4 <UART_SetConfig+0x6a8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d130      	bne.n	800a6e8 <UART_SetConfig+0x59c>
 800a686:	4b58      	ldr	r3, [pc, #352]	; (800a7e8 <UART_SetConfig+0x69c>)
 800a688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68a:	f003 0307 	and.w	r3, r3, #7
 800a68e:	2b05      	cmp	r3, #5
 800a690:	d826      	bhi.n	800a6e0 <UART_SetConfig+0x594>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <UART_SetConfig+0x54c>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6b1 	.word	0x0800a6b1
 800a69c:	0800a6b9 	.word	0x0800a6b9
 800a6a0:	0800a6c1 	.word	0x0800a6c1
 800a6a4:	0800a6c9 	.word	0x0800a6c9
 800a6a8:	0800a6d1 	.word	0x0800a6d1
 800a6ac:	0800a6d9 	.word	0x0800a6d9
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b6:	e01a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6be:	e016      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6c0:	2308      	movs	r3, #8
 800a6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c6:	e012      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6c8:	2310      	movs	r3, #16
 800a6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ce:	e00e      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6d0:	2320      	movs	r3, #32
 800a6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d6:	e00a      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6d8:	2340      	movs	r3, #64	; 0x40
 800a6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6de:	e006      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6e0:	2380      	movs	r3, #128	; 0x80
 800a6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e6:	e002      	b.n	800a6ee <UART_SetConfig+0x5a2>
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a40      	ldr	r2, [pc, #256]	; (800a7f4 <UART_SetConfig+0x6a8>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	f040 80ef 	bne.w	800a8d8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	dc46      	bgt.n	800a790 <UART_SetConfig+0x644>
 800a702:	2b02      	cmp	r3, #2
 800a704:	f2c0 8081 	blt.w	800a80a <UART_SetConfig+0x6be>
 800a708:	3b02      	subs	r3, #2
 800a70a:	2b1e      	cmp	r3, #30
 800a70c:	d87d      	bhi.n	800a80a <UART_SetConfig+0x6be>
 800a70e:	a201      	add	r2, pc, #4	; (adr r2, 800a714 <UART_SetConfig+0x5c8>)
 800a710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a714:	0800a797 	.word	0x0800a797
 800a718:	0800a80b 	.word	0x0800a80b
 800a71c:	0800a79f 	.word	0x0800a79f
 800a720:	0800a80b 	.word	0x0800a80b
 800a724:	0800a80b 	.word	0x0800a80b
 800a728:	0800a80b 	.word	0x0800a80b
 800a72c:	0800a7af 	.word	0x0800a7af
 800a730:	0800a80b 	.word	0x0800a80b
 800a734:	0800a80b 	.word	0x0800a80b
 800a738:	0800a80b 	.word	0x0800a80b
 800a73c:	0800a80b 	.word	0x0800a80b
 800a740:	0800a80b 	.word	0x0800a80b
 800a744:	0800a80b 	.word	0x0800a80b
 800a748:	0800a80b 	.word	0x0800a80b
 800a74c:	0800a7bf 	.word	0x0800a7bf
 800a750:	0800a80b 	.word	0x0800a80b
 800a754:	0800a80b 	.word	0x0800a80b
 800a758:	0800a80b 	.word	0x0800a80b
 800a75c:	0800a80b 	.word	0x0800a80b
 800a760:	0800a80b 	.word	0x0800a80b
 800a764:	0800a80b 	.word	0x0800a80b
 800a768:	0800a80b 	.word	0x0800a80b
 800a76c:	0800a80b 	.word	0x0800a80b
 800a770:	0800a80b 	.word	0x0800a80b
 800a774:	0800a80b 	.word	0x0800a80b
 800a778:	0800a80b 	.word	0x0800a80b
 800a77c:	0800a80b 	.word	0x0800a80b
 800a780:	0800a80b 	.word	0x0800a80b
 800a784:	0800a80b 	.word	0x0800a80b
 800a788:	0800a80b 	.word	0x0800a80b
 800a78c:	0800a7fd 	.word	0x0800a7fd
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d036      	beq.n	800a802 <UART_SetConfig+0x6b6>
 800a794:	e039      	b.n	800a80a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a796:	f7fe f967 	bl	8008a68 <HAL_RCCEx_GetD3PCLK1Freq>
 800a79a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a79c:	e03b      	b.n	800a816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a79e:	f107 0314 	add.w	r3, r7, #20
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe f976 	bl	8008a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ac:	e033      	b.n	800a816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe fac2 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7bc:	e02b      	b.n	800a816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7be:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <UART_SetConfig+0x69c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7ca:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <UART_SetConfig+0x69c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	08db      	lsrs	r3, r3, #3
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	4a08      	ldr	r2, [pc, #32]	; (800a7f8 <UART_SetConfig+0x6ac>)
 800a7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7dc:	e01b      	b.n	800a816 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a7de:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <UART_SetConfig+0x6ac>)
 800a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7e2:	e018      	b.n	800a816 <UART_SetConfig+0x6ca>
 800a7e4:	40011400 	.word	0x40011400
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	40007800 	.word	0x40007800
 800a7f0:	40007c00 	.word	0x40007c00
 800a7f4:	58000c00 	.word	0x58000c00
 800a7f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7fc:	4bc4      	ldr	r3, [pc, #784]	; (800ab10 <UART_SetConfig+0x9c4>)
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a800:	e009      	b.n	800a816 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a808:	e005      	b.n	800a816 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 81da 	beq.w	800abd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	4abc      	ldr	r2, [pc, #752]	; (800ab14 <UART_SetConfig+0x9c8>)
 800a824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a828:	461a      	mov	r2, r3
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a830:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	4413      	add	r3, r2
 800a83c:	6a3a      	ldr	r2, [r7, #32]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d305      	bcc.n	800a84e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a848:	6a3a      	ldr	r2, [r7, #32]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d903      	bls.n	800a856 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a854:	e1bd      	b.n	800abd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	4618      	mov	r0, r3
 800a85a:	f04f 0100 	mov.w	r1, #0
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	4aac      	ldr	r2, [pc, #688]	; (800ab14 <UART_SetConfig+0x9c8>)
 800a864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a868:	b29a      	uxth	r2, r3
 800a86a:	f04f 0300 	mov.w	r3, #0
 800a86e:	f7f5 fd37 	bl	80002e0 <__aeabi_uldivmod>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4610      	mov	r0, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	f04f 0200 	mov.w	r2, #0
 800a87e:	f04f 0300 	mov.w	r3, #0
 800a882:	020b      	lsls	r3, r1, #8
 800a884:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a888:	0202      	lsls	r2, r0, #8
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	6849      	ldr	r1, [r1, #4]
 800a88e:	0849      	lsrs	r1, r1, #1
 800a890:	4608      	mov	r0, r1
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	1814      	adds	r4, r2, r0
 800a898:	eb43 0501 	adc.w	r5, r3, r1
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f04f 0300 	mov.w	r3, #0
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	f7f5 fd19 	bl	80002e0 <__aeabi_uldivmod>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8bc:	d308      	bcc.n	800a8d0 <UART_SetConfig+0x784>
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8c4:	d204      	bcs.n	800a8d0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8cc:	60da      	str	r2, [r3, #12]
 800a8ce:	e180      	b.n	800abd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a8d6:	e17c      	b.n	800abd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8e0:	f040 80bf 	bne.w	800aa62 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a8e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	dc49      	bgt.n	800a980 <UART_SetConfig+0x834>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	db7c      	blt.n	800a9ea <UART_SetConfig+0x89e>
 800a8f0:	2b20      	cmp	r3, #32
 800a8f2:	d87a      	bhi.n	800a9ea <UART_SetConfig+0x89e>
 800a8f4:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <UART_SetConfig+0x7b0>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a987 	.word	0x0800a987
 800a900:	0800a98f 	.word	0x0800a98f
 800a904:	0800a9eb 	.word	0x0800a9eb
 800a908:	0800a9eb 	.word	0x0800a9eb
 800a90c:	0800a997 	.word	0x0800a997
 800a910:	0800a9eb 	.word	0x0800a9eb
 800a914:	0800a9eb 	.word	0x0800a9eb
 800a918:	0800a9eb 	.word	0x0800a9eb
 800a91c:	0800a9a7 	.word	0x0800a9a7
 800a920:	0800a9eb 	.word	0x0800a9eb
 800a924:	0800a9eb 	.word	0x0800a9eb
 800a928:	0800a9eb 	.word	0x0800a9eb
 800a92c:	0800a9eb 	.word	0x0800a9eb
 800a930:	0800a9eb 	.word	0x0800a9eb
 800a934:	0800a9eb 	.word	0x0800a9eb
 800a938:	0800a9eb 	.word	0x0800a9eb
 800a93c:	0800a9b7 	.word	0x0800a9b7
 800a940:	0800a9eb 	.word	0x0800a9eb
 800a944:	0800a9eb 	.word	0x0800a9eb
 800a948:	0800a9eb 	.word	0x0800a9eb
 800a94c:	0800a9eb 	.word	0x0800a9eb
 800a950:	0800a9eb 	.word	0x0800a9eb
 800a954:	0800a9eb 	.word	0x0800a9eb
 800a958:	0800a9eb 	.word	0x0800a9eb
 800a95c:	0800a9eb 	.word	0x0800a9eb
 800a960:	0800a9eb 	.word	0x0800a9eb
 800a964:	0800a9eb 	.word	0x0800a9eb
 800a968:	0800a9eb 	.word	0x0800a9eb
 800a96c:	0800a9eb 	.word	0x0800a9eb
 800a970:	0800a9eb 	.word	0x0800a9eb
 800a974:	0800a9eb 	.word	0x0800a9eb
 800a978:	0800a9eb 	.word	0x0800a9eb
 800a97c:	0800a9dd 	.word	0x0800a9dd
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	d02e      	beq.n	800a9e2 <UART_SetConfig+0x896>
 800a984:	e031      	b.n	800a9ea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a986:	f7fd f8c1 	bl	8007b0c <HAL_RCC_GetPCLK1Freq>
 800a98a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a98c:	e033      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a98e:	f7fd f8d3 	bl	8007b38 <HAL_RCC_GetPCLK2Freq>
 800a992:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a994:	e02f      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a996:	f107 0314 	add.w	r3, r7, #20
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fe f87a 	bl	8008a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9a4:	e027      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a6:	f107 0308 	add.w	r3, r7, #8
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe f9c6 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9b4:	e01f      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b6:	4b58      	ldr	r3, [pc, #352]	; (800ab18 <UART_SetConfig+0x9cc>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d009      	beq.n	800a9d6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9c2:	4b55      	ldr	r3, [pc, #340]	; (800ab18 <UART_SetConfig+0x9cc>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	08db      	lsrs	r3, r3, #3
 800a9c8:	f003 0303 	and.w	r3, r3, #3
 800a9cc:	4a53      	ldr	r2, [pc, #332]	; (800ab1c <UART_SetConfig+0x9d0>)
 800a9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9d4:	e00f      	b.n	800a9f6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a9d6:	4b51      	ldr	r3, [pc, #324]	; (800ab1c <UART_SetConfig+0x9d0>)
 800a9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9da:	e00c      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9dc:	4b4c      	ldr	r3, [pc, #304]	; (800ab10 <UART_SetConfig+0x9c4>)
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9e0:	e009      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9e8:	e005      	b.n	800a9f6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a9f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 80ea 	beq.w	800abd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	4a44      	ldr	r2, [pc, #272]	; (800ab14 <UART_SetConfig+0x9c8>)
 800aa04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa10:	005a      	lsls	r2, r3, #1
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	441a      	add	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	2b0f      	cmp	r3, #15
 800aa2a:	d916      	bls.n	800aa5a <UART_SetConfig+0x90e>
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa32:	d212      	bcs.n	800aa5a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f023 030f 	bic.w	r3, r3, #15
 800aa3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa56:	60da      	str	r2, [r3, #12]
 800aa58:	e0bb      	b.n	800abd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aa60:	e0b7      	b.n	800abd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa66:	2b20      	cmp	r3, #32
 800aa68:	dc4a      	bgt.n	800ab00 <UART_SetConfig+0x9b4>
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f2c0 8086 	blt.w	800ab7c <UART_SetConfig+0xa30>
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	f200 8083 	bhi.w	800ab7c <UART_SetConfig+0xa30>
 800aa76:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <UART_SetConfig+0x930>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800ab07 	.word	0x0800ab07
 800aa80:	0800ab21 	.word	0x0800ab21
 800aa84:	0800ab7d 	.word	0x0800ab7d
 800aa88:	0800ab7d 	.word	0x0800ab7d
 800aa8c:	0800ab29 	.word	0x0800ab29
 800aa90:	0800ab7d 	.word	0x0800ab7d
 800aa94:	0800ab7d 	.word	0x0800ab7d
 800aa98:	0800ab7d 	.word	0x0800ab7d
 800aa9c:	0800ab39 	.word	0x0800ab39
 800aaa0:	0800ab7d 	.word	0x0800ab7d
 800aaa4:	0800ab7d 	.word	0x0800ab7d
 800aaa8:	0800ab7d 	.word	0x0800ab7d
 800aaac:	0800ab7d 	.word	0x0800ab7d
 800aab0:	0800ab7d 	.word	0x0800ab7d
 800aab4:	0800ab7d 	.word	0x0800ab7d
 800aab8:	0800ab7d 	.word	0x0800ab7d
 800aabc:	0800ab49 	.word	0x0800ab49
 800aac0:	0800ab7d 	.word	0x0800ab7d
 800aac4:	0800ab7d 	.word	0x0800ab7d
 800aac8:	0800ab7d 	.word	0x0800ab7d
 800aacc:	0800ab7d 	.word	0x0800ab7d
 800aad0:	0800ab7d 	.word	0x0800ab7d
 800aad4:	0800ab7d 	.word	0x0800ab7d
 800aad8:	0800ab7d 	.word	0x0800ab7d
 800aadc:	0800ab7d 	.word	0x0800ab7d
 800aae0:	0800ab7d 	.word	0x0800ab7d
 800aae4:	0800ab7d 	.word	0x0800ab7d
 800aae8:	0800ab7d 	.word	0x0800ab7d
 800aaec:	0800ab7d 	.word	0x0800ab7d
 800aaf0:	0800ab7d 	.word	0x0800ab7d
 800aaf4:	0800ab7d 	.word	0x0800ab7d
 800aaf8:	0800ab7d 	.word	0x0800ab7d
 800aafc:	0800ab6f 	.word	0x0800ab6f
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	d037      	beq.n	800ab74 <UART_SetConfig+0xa28>
 800ab04:	e03a      	b.n	800ab7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab06:	f7fd f801 	bl	8007b0c <HAL_RCC_GetPCLK1Freq>
 800ab0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab0c:	e03c      	b.n	800ab88 <UART_SetConfig+0xa3c>
 800ab0e:	bf00      	nop
 800ab10:	003d0900 	.word	0x003d0900
 800ab14:	0800ddd0 	.word	0x0800ddd0
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab20:	f7fd f80a 	bl	8007b38 <HAL_RCC_GetPCLK2Freq>
 800ab24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab26:	e02f      	b.n	800ab88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab28:	f107 0314 	add.w	r3, r7, #20
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fd ffb1 	bl	8008a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab36:	e027      	b.n	800ab88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab38:	f107 0308 	add.w	r3, r7, #8
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe f8fd 	bl	8008d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab46:	e01f      	b.n	800ab88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab48:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <UART_SetConfig+0xab0>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d009      	beq.n	800ab68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab54:	4b29      	ldr	r3, [pc, #164]	; (800abfc <UART_SetConfig+0xab0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	08db      	lsrs	r3, r3, #3
 800ab5a:	f003 0303 	and.w	r3, r3, #3
 800ab5e:	4a28      	ldr	r2, [pc, #160]	; (800ac00 <UART_SetConfig+0xab4>)
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab66:	e00f      	b.n	800ab88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ab68:	4b25      	ldr	r3, [pc, #148]	; (800ac00 <UART_SetConfig+0xab4>)
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab6c:	e00c      	b.n	800ab88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab6e:	4b25      	ldr	r3, [pc, #148]	; (800ac04 <UART_SetConfig+0xab8>)
 800ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab72:	e009      	b.n	800ab88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab7a:	e005      	b.n	800ab88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab86:	bf00      	nop
    }

    if (pclk != 0U)
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d021      	beq.n	800abd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	4a1d      	ldr	r2, [pc, #116]	; (800ac08 <UART_SetConfig+0xabc>)
 800ab94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	fbb3 f2f2 	udiv	r2, r3, r2
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	441a      	add	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	2b0f      	cmp	r3, #15
 800abb8:	d908      	bls.n	800abcc <UART_SetConfig+0xa80>
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc0:	d204      	bcs.n	800abcc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	e002      	b.n	800abd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800abee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3738      	adds	r7, #56	; 0x38
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bdb0      	pop	{r4, r5, r7, pc}
 800abfa:	bf00      	nop
 800abfc:	58024400 	.word	0x58024400
 800ac00:	03d09000 	.word	0x03d09000
 800ac04:	003d0900 	.word	0x003d0900
 800ac08:	0800ddd0 	.word	0x0800ddd0

0800ac0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00a      	beq.n	800ac58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00a      	beq.n	800ac7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7e:	f003 0308 	and.w	r3, r3, #8
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00a      	beq.n	800ac9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	f003 0310 	and.w	r3, r3, #16
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00a      	beq.n	800acbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01a      	beq.n	800ad22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad0a:	d10a      	bne.n	800ad22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	430a      	orrs	r2, r1
 800ad42:	605a      	str	r2, [r3, #4]
  }
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af02      	add	r7, sp, #8
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad60:	f7f8 fd92 	bl	8003888 <HAL_GetTick>
 800ad64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0308 	and.w	r3, r3, #8
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d10e      	bne.n	800ad92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f82f 	bl	800ade6 <UART_WaitOnFlagUntilTimeout>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e025      	b.n	800adde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d10e      	bne.n	800adbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ada0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f819 	bl	800ade6 <UART_WaitOnFlagUntilTimeout>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e00f      	b.n	800adde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	603b      	str	r3, [r7, #0]
 800adf2:	4613      	mov	r3, r2
 800adf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf6:	e062      	b.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfe:	d05e      	beq.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae00:	f7f8 fd42 	bl	8003888 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d302      	bcc.n	800ae16 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d11d      	bne.n	800ae52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689a      	ldr	r2, [r3, #8]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f022 0201 	bic.w	r2, r2, #1
 800ae34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e045      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d02e      	beq.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae6e:	d126      	bne.n	800aebe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0201 	bic.w	r2, r2, #1
 800ae98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e00f      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69da      	ldr	r2, [r3, #28]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4013      	ands	r3, r2
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	bf0c      	ite	eq
 800aece:	2301      	moveq	r3, #1
 800aed0:	2300      	movne	r3, #0
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	461a      	mov	r2, r3
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d08d      	beq.n	800adf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
	...

0800aee8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	88fa      	ldrh	r2, [r7, #6]
 800af00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2222      	movs	r2, #34	; 0x22
 800af10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d02c      	beq.n	800af76 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af20:	4a25      	ldr	r2, [pc, #148]	; (800afb8 <UART_Start_Receive_DMA+0xd0>)
 800af22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af28:	4a24      	ldr	r2, [pc, #144]	; (800afbc <UART_Start_Receive_DMA+0xd4>)
 800af2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af30:	4a23      	ldr	r2, [pc, #140]	; (800afc0 <UART_Start_Receive_DMA+0xd8>)
 800af32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af38:	2200      	movs	r2, #0
 800af3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3324      	adds	r3, #36	; 0x24
 800af46:	4619      	mov	r1, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4c:	461a      	mov	r2, r3
 800af4e:	88fb      	ldrh	r3, [r7, #6]
 800af50:	f7f9 f8ee 	bl	8004130 <HAL_DMA_Start_IT>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00d      	beq.n	800af76 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2210      	movs	r2, #16
 800af5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2220      	movs	r2, #32
 800af6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e01c      	b.n	800afb0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af8c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0201 	orr.w	r2, r2, #1
 800af9c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afac:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	0800b0d1 	.word	0x0800b0d1
 800afbc:	0800b167 	.word	0x0800b167
 800afc0:	0800b19f 	.word	0x0800b19f

0800afc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800afda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800afea:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2220      	movs	r2, #32
 800aff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6899      	ldr	r1, [r3, #8]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <UART_EndRxTransfer+0x60>)
 800b024:	400b      	ands	r3, r1
 800b026:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d107      	bne.n	800b040 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f022 0210 	bic.w	r2, r2, #16
 800b03e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2220      	movs	r2, #32
 800b044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	effffffe 	.word	0xeffffffe

0800b064 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b070:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b07a:	d014      	beq.n	800b0a6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b092:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0a2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0a4:	e002      	b.n	800b0ac <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7ff f812 	bl	800a0d0 <HAL_UART_TxCpltCallback>
}
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff f80e 	bl	800a0e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e6:	d02b      	beq.n	800b140 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689a      	ldr	r2, [r3, #8]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f022 0201 	bic.w	r2, r2, #1
 800b10e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b11e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2220      	movs	r2, #32
 800b124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d107      	bne.n	800b140 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 0210 	bic.w	r2, r2, #16
 800b13e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b144:	2b01      	cmp	r3, #1
 800b146:	d107      	bne.n	800b158 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7fe ffef 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b156:	e002      	b.n	800b15e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7fe ffcd 	bl	800a0f8 <HAL_UART_RxCpltCallback>
}
 800b15e:	bf00      	nop
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d109      	bne.n	800b190 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	b29b      	uxth	r3, r3
 800b186:	4619      	mov	r1, r3
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7fe ffd3 	bl	800a134 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b18e:	e002      	b.n	800b196 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7fe ffbb 	bl	800a10c <HAL_UART_RxHalfCpltCallback>
}
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b086      	sub	sp, #24
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c6:	2b80      	cmp	r3, #128	; 0x80
 800b1c8:	d109      	bne.n	800b1de <UART_DMAError+0x40>
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2b21      	cmp	r3, #33	; 0x21
 800b1ce:	d106      	bne.n	800b1de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b1d8:	6978      	ldr	r0, [r7, #20]
 800b1da:	f7ff fef3 	bl	800afc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e8:	2b40      	cmp	r3, #64	; 0x40
 800b1ea:	d109      	bne.n	800b200 <UART_DMAError+0x62>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b22      	cmp	r3, #34	; 0x22
 800b1f0:	d106      	bne.n	800b200 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b1fa:	6978      	ldr	r0, [r7, #20]
 800b1fc:	f7ff ff00 	bl	800b000 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b206:	f043 0210 	orr.w	r2, r3, #16
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f7fe ff85 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b216:	bf00      	nop
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7fe ff6f 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b260:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7fe ff2d 	bl	800a0d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b286:	bf00      	nop
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b292:	b480      	push	{r7}
 800b294:	b083      	sub	sp, #12
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b29a:	bf00      	nop
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b2ae:	bf00      	nop
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d101      	bne.n	800b2d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	e027      	b.n	800b320 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2224      	movs	r2, #36	; 0x24
 800b2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0201 	bic.w	r2, r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b2fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d101      	bne.n	800b344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b340:	2302      	movs	r3, #2
 800b342:	e02d      	b.n	800b3a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2224      	movs	r2, #36	; 0x24
 800b350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 0201 	bic.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f84f 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2220      	movs	r2, #32
 800b392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d101      	bne.n	800b3c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	e02d      	b.n	800b41c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2224      	movs	r2, #36	; 0x24
 800b3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 0201 	bic.w	r2, r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f811 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b430:	2b00      	cmp	r3, #0
 800b432:	d108      	bne.n	800b446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b444:	e031      	b.n	800b4aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b446:	2310      	movs	r3, #16
 800b448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b44a:	2310      	movs	r3, #16
 800b44c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	0e5b      	lsrs	r3, r3, #25
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	0f5b      	lsrs	r3, r3, #29
 800b466:	b2db      	uxtb	r3, r3
 800b468:	f003 0307 	and.w	r3, r3, #7
 800b46c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	7b3a      	ldrb	r2, [r7, #12]
 800b472:	4911      	ldr	r1, [pc, #68]	; (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b47a:	7b3a      	ldrb	r2, [r7, #12]
 800b47c:	490f      	ldr	r1, [pc, #60]	; (800b4bc <UARTEx_SetNbDataToProcess+0x98>)
 800b47e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b480:	fb93 f3f2 	sdiv	r3, r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	7b7a      	ldrb	r2, [r7, #13]
 800b490:	4909      	ldr	r1, [pc, #36]	; (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b492:	5c8a      	ldrb	r2, [r1, r2]
 800b494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b498:	7b7a      	ldrb	r2, [r7, #13]
 800b49a:	4908      	ldr	r1, [pc, #32]	; (800b4bc <UARTEx_SetNbDataToProcess+0x98>)
 800b49c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b49e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	0800dde8 	.word	0x0800dde8
 800b4bc:	0800ddf0 	.word	0x0800ddf0

0800b4c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b4ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4d2:	2b84      	cmp	r3, #132	; 0x84
 800b4d4:	d005      	beq.n	800b4e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b4d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4413      	add	r3, r2
 800b4de:	3303      	adds	r3, #3
 800b4e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b4f4:	f001 f96c 	bl	800c7d0 <vTaskStartScheduler>
  
  return osOK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b500:	b089      	sub	sp, #36	; 0x24
 800b502:	af04      	add	r7, sp, #16
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d020      	beq.n	800b552 <osThreadCreate+0x54>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d01c      	beq.n	800b552 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685c      	ldr	r4, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681d      	ldr	r5, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691e      	ldr	r6, [r3, #16]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff ffc8 	bl	800b4c0 <makeFreeRtosPriority>
 800b530:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b53a:	9202      	str	r2, [sp, #8]
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	9100      	str	r1, [sp, #0]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	4632      	mov	r2, r6
 800b544:	4629      	mov	r1, r5
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fe58 	bl	800c1fc <xTaskCreateStatic>
 800b54c:	4603      	mov	r3, r0
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	e01c      	b.n	800b58c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685c      	ldr	r4, [r3, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b55e:	b29e      	uxth	r6, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff ffaa 	bl	800b4c0 <makeFreeRtosPriority>
 800b56c:	4602      	mov	r2, r0
 800b56e:	f107 030c 	add.w	r3, r7, #12
 800b572:	9301      	str	r3, [sp, #4]
 800b574:	9200      	str	r2, [sp, #0]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	4632      	mov	r2, r6
 800b57a:	4629      	mov	r1, r5
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fe9a 	bl	800c2b6 <xTaskCreate>
 800b582:	4603      	mov	r3, r0
 800b584:	2b01      	cmp	r3, #1
 800b586:	d001      	beq.n	800b58c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b588:	2300      	movs	r3, #0
 800b58a:	e000      	b.n	800b58e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b596 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <osDelay+0x16>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	e000      	b.n	800b5ae <osDelay+0x18>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 ffb8 	bl	800c524 <vTaskDelay>
  
  return osOK;
 800b5b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d007      	beq.n	800b5de <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	f000 fa5c 	bl	800ba92 <xQueueCreateMutexStatic>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	e003      	b.n	800b5e6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b5de:	2001      	movs	r0, #1
 800b5e0:	f000 fa3f 	bl	800ba62 <xQueueCreateMutex>
 800b5e4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af02      	add	r7, sp, #8
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00f      	beq.n	800b620 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d10a      	bne.n	800b61c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2203      	movs	r2, #3
 800b60c:	9200      	str	r2, [sp, #0]
 800b60e:	2200      	movs	r2, #0
 800b610:	2100      	movs	r1, #0
 800b612:	2001      	movs	r0, #1
 800b614:	f000 f93a 	bl	800b88c <xQueueGenericCreateStatic>
 800b618:	4603      	mov	r3, r0
 800b61a:	e016      	b.n	800b64a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e014      	b.n	800b64a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d110      	bne.n	800b648 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b626:	2203      	movs	r2, #3
 800b628:	2100      	movs	r1, #0
 800b62a:	2001      	movs	r0, #1
 800b62c:	f000 f9a6 	bl	800b97c <xQueueGenericCreate>
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d005      	beq.n	800b644 <osSemaphoreCreate+0x56>
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	2100      	movs	r1, #0
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 fa42 	bl	800bac8 <xQueueGenericSend>
      return sema;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	e000      	b.n	800b64a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b648:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f103 0208 	add.w	r2, r3, #8
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f103 0208 	add.w	r2, r3, #8
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f103 0208 	add.w	r2, r3, #8
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	689a      	ldr	r2, [r3, #8]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]
}
 800b6e8:	bf00      	nop
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d103      	bne.n	800b714 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	e00c      	b.n	800b72e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3308      	adds	r3, #8
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	e002      	b.n	800b722 <vListInsert+0x2e>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d2f6      	bcs.n	800b71c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	6892      	ldr	r2, [r2, #8]
 800b77c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	6852      	ldr	r2, [r2, #4]
 800b786:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d103      	bne.n	800b79a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
	...

0800b7bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b7e6:	f001 ff3d 	bl	800d664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f2:	68f9      	ldr	r1, [r7, #12]
 800b7f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7f6:	fb01 f303 	mul.w	r3, r1, r3
 800b7fa:	441a      	add	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b816:	3b01      	subs	r3, #1
 800b818:	68f9      	ldr	r1, [r7, #12]
 800b81a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b81c:	fb01 f303 	mul.w	r3, r1, r3
 800b820:	441a      	add	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	22ff      	movs	r2, #255	; 0xff
 800b82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	22ff      	movs	r2, #255	; 0xff
 800b832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d114      	bne.n	800b866 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d01a      	beq.n	800b87a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3310      	adds	r3, #16
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 fa03 	bl	800cc54 <xTaskRemoveFromEventList>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d012      	beq.n	800b87a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b854:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <xQueueGenericReset+0xcc>)
 800b856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	e009      	b.n	800b87a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3310      	adds	r3, #16
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fef1 	bl	800b652 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3324      	adds	r3, #36	; 0x24
 800b874:	4618      	mov	r0, r3
 800b876:	f7ff feec 	bl	800b652 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b87a:	f001 ff23 	bl	800d6c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b87e:	2301      	movs	r3, #1
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08e      	sub	sp, #56	; 0x38
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10a      	bne.n	800b8b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8b2:	bf00      	nop
 800b8b4:	e7fe      	b.n	800b8b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10a      	bne.n	800b8d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8ce:	bf00      	nop
 800b8d0:	e7fe      	b.n	800b8d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <xQueueGenericCreateStatic+0x52>
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <xQueueGenericCreateStatic+0x56>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e000      	b.n	800b8e4 <xQueueGenericCreateStatic+0x58>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	623b      	str	r3, [r7, #32]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <xQueueGenericCreateStatic+0x7e>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <xQueueGenericCreateStatic+0x82>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <xQueueGenericCreateStatic+0x84>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	61fb      	str	r3, [r7, #28]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b92a:	2348      	movs	r3, #72	; 0x48
 800b92c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b48      	cmp	r3, #72	; 0x48
 800b932:	d00a      	beq.n	800b94a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61bb      	str	r3, [r7, #24]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b94a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00d      	beq.n	800b972 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b95e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	4613      	mov	r3, r2
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 f83f 	bl	800b9f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b974:	4618      	mov	r0, r3
 800b976:	3730      	adds	r7, #48	; 0x30
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af02      	add	r7, sp, #8
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	613b      	str	r3, [r7, #16]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	fb02 f303 	mul.w	r3, r2, r3
 800b9ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	3348      	adds	r3, #72	; 0x48
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 ff77 	bl	800d8a8 <pvPortMalloc>
 800b9ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d011      	beq.n	800b9e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	3348      	adds	r3, #72	; 0x48
 800b9ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9d4:	79fa      	ldrb	r2, [r7, #7]
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f805 	bl	800b9f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9e6:	69bb      	ldr	r3, [r7, #24]
	}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3720      	adds	r7, #32
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d103      	bne.n	800ba0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	e002      	b.n	800ba12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba1e:	2101      	movs	r1, #1
 800ba20:	69b8      	ldr	r0, [r7, #24]
 800ba22:	f7ff fecb 	bl	800b7bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b082      	sub	sp, #8
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00e      	beq.n	800ba5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f837 	bl	800bac8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba5a:	bf00      	nop
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	4603      	mov	r3, r0
 800ba6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	617b      	str	r3, [r7, #20]
 800ba70:	2300      	movs	r3, #0
 800ba72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	461a      	mov	r2, r3
 800ba78:	6939      	ldr	r1, [r7, #16]
 800ba7a:	6978      	ldr	r0, [r7, #20]
 800ba7c:	f7ff ff7e 	bl	800b97c <xQueueGenericCreate>
 800ba80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f7ff ffd3 	bl	800ba2e <prvInitialiseMutex>

		return xNewQueue;
 800ba88:	68fb      	ldr	r3, [r7, #12]
	}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b088      	sub	sp, #32
 800ba96:	af02      	add	r7, sp, #8
 800ba98:	4603      	mov	r3, r0
 800ba9a:	6039      	str	r1, [r7, #0]
 800ba9c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	2300      	movs	r3, #0
 800baa4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2200      	movs	r2, #0
 800baae:	6939      	ldr	r1, [r7, #16]
 800bab0:	6978      	ldr	r0, [r7, #20]
 800bab2:	f7ff feeb 	bl	800b88c <xQueueGenericCreateStatic>
 800bab6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff ffb8 	bl	800ba2e <prvInitialiseMutex>

		return xNewQueue;
 800babe:	68fb      	ldr	r3, [r7, #12]
	}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08e      	sub	sp, #56	; 0x38
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bad6:	2300      	movs	r3, #0
 800bad8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xQueueGenericSend+0x32>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d103      	bne.n	800bb08 <xQueueGenericSend+0x40>
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <xQueueGenericSend+0x44>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e000      	b.n	800bb0e <xQueueGenericSend+0x46>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <xQueueGenericSend+0x60>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb24:	bf00      	nop
 800bb26:	e7fe      	b.n	800bb26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d103      	bne.n	800bb36 <xQueueGenericSend+0x6e>
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d101      	bne.n	800bb3a <xQueueGenericSend+0x72>
 800bb36:	2301      	movs	r3, #1
 800bb38:	e000      	b.n	800bb3c <xQueueGenericSend+0x74>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xQueueGenericSend+0x8e>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	623b      	str	r3, [r7, #32]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb56:	f001 fa39 	bl	800cfcc <xTaskGetSchedulerState>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <xQueueGenericSend+0x9e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <xQueueGenericSend+0xa2>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e000      	b.n	800bb6c <xQueueGenericSend+0xa4>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10a      	bne.n	800bb86 <xQueueGenericSend+0xbe>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	61fb      	str	r3, [r7, #28]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb86:	f001 fd6d 	bl	800d664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d302      	bcc.n	800bb9c <xQueueGenericSend+0xd4>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d129      	bne.n	800bbf0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba2:	f000 fa41 	bl	800c028 <prvCopyDataToQueue>
 800bba6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d010      	beq.n	800bbd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	3324      	adds	r3, #36	; 0x24
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 f84d 	bl	800cc54 <xTaskRemoveFromEventList>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d013      	beq.n	800bbe8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbc0:	4b3f      	ldr	r3, [pc, #252]	; (800bcc0 <xQueueGenericSend+0x1f8>)
 800bbc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	e00a      	b.n	800bbe8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d007      	beq.n	800bbe8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bbd8:	4b39      	ldr	r3, [pc, #228]	; (800bcc0 <xQueueGenericSend+0x1f8>)
 800bbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bbe8:	f001 fd6c 	bl	800d6c4 <vPortExitCritical>
				return pdPASS;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e063      	b.n	800bcb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d103      	bne.n	800bbfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbf6:	f001 fd65 	bl	800d6c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e05c      	b.n	800bcb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d106      	bne.n	800bc12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc04:	f107 0314 	add.w	r3, r7, #20
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 f885 	bl	800cd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc12:	f001 fd57 	bl	800d6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc16:	f000 fe3b 	bl	800c890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc1a:	f001 fd23 	bl	800d664 <vPortEnterCritical>
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2a:	d103      	bne.n	800bc34 <xQueueGenericSend+0x16c>
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc3a:	b25b      	sxtb	r3, r3
 800bc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc40:	d103      	bne.n	800bc4a <xQueueGenericSend+0x182>
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc4a:	f001 fd3b 	bl	800d6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc4e:	1d3a      	adds	r2, r7, #4
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	4611      	mov	r1, r2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 f874 	bl	800cd44 <xTaskCheckForTimeOut>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d124      	bne.n	800bcac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc64:	f000 fab2 	bl	800c1cc <prvIsQueueFull>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d018      	beq.n	800bca0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	3310      	adds	r3, #16
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 ffc8 	bl	800cc0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc7e:	f000 fa3d 	bl	800c0fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc82:	f000 fe13 	bl	800c8ac <xTaskResumeAll>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f47f af7c 	bne.w	800bb86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bc8e:	4b0c      	ldr	r3, [pc, #48]	; (800bcc0 <xQueueGenericSend+0x1f8>)
 800bc90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	e772      	b.n	800bb86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bca2:	f000 fa2b 	bl	800c0fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bca6:	f000 fe01 	bl	800c8ac <xTaskResumeAll>
 800bcaa:	e76c      	b.n	800bb86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bcac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcae:	f000 fa25 	bl	800c0fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcb2:	f000 fdfb 	bl	800c8ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bcb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3738      	adds	r7, #56	; 0x38
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	e000ed04 	.word	0xe000ed04

0800bcc4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08e      	sub	sp, #56	; 0x38
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	623b      	str	r3, [r7, #32]
}
 800bcea:	bf00      	nop
 800bcec:	e7fe      	b.n	800bcec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00a      	beq.n	800bd0c <xQueueGiveFromISR+0x48>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	61fb      	str	r3, [r7, #28]
}
 800bd08:	bf00      	nop
 800bd0a:	e7fe      	b.n	800bd0a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d103      	bne.n	800bd1c <xQueueGiveFromISR+0x58>
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <xQueueGiveFromISR+0x5c>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e000      	b.n	800bd22 <xQueueGiveFromISR+0x5e>
 800bd20:	2300      	movs	r3, #0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10a      	bne.n	800bd3c <xQueueGiveFromISR+0x78>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	61bb      	str	r3, [r7, #24]
}
 800bd38:	bf00      	nop
 800bd3a:	e7fe      	b.n	800bd3a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd3c:	f001 fd74 	bl	800d828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd40:	f3ef 8211 	mrs	r2, BASEPRI
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	617a      	str	r2, [r7, #20]
 800bd56:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd58:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd60:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d22b      	bcs.n	800bdc4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd86:	d112      	bne.n	800bdae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d016      	beq.n	800bdbe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	3324      	adds	r3, #36	; 0x24
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 ff5d 	bl	800cc54 <xTaskRemoveFromEventList>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00e      	beq.n	800bdbe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	e007      	b.n	800bdbe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	b25a      	sxtb	r2, r3
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc2:	e001      	b.n	800bdc8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bdd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3738      	adds	r7, #56	; 0x38
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
	...

0800bde0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08e      	sub	sp, #56	; 0x38
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	623b      	str	r3, [r7, #32]
}
 800be0e:	bf00      	nop
 800be10:	e7fe      	b.n	800be10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	61fb      	str	r3, [r7, #28]
}
 800be2c:	bf00      	nop
 800be2e:	e7fe      	b.n	800be2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be30:	f001 f8cc 	bl	800cfcc <xTaskGetSchedulerState>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <xQueueSemaphoreTake+0x60>
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <xQueueSemaphoreTake+0x64>
 800be40:	2301      	movs	r3, #1
 800be42:	e000      	b.n	800be46 <xQueueSemaphoreTake+0x66>
 800be44:	2300      	movs	r3, #0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10a      	bne.n	800be60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	61bb      	str	r3, [r7, #24]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be60:	f001 fc00 	bl	800d664 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d024      	beq.n	800beba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	1e5a      	subs	r2, r3, #1
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d104      	bne.n	800be8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be80:	f001 fa4c 	bl	800d31c <pvTaskIncrementMutexHeldCount>
 800be84:	4602      	mov	r2, r0
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00f      	beq.n	800beb2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	3310      	adds	r3, #16
 800be96:	4618      	mov	r0, r3
 800be98:	f000 fedc 	bl	800cc54 <xTaskRemoveFromEventList>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d007      	beq.n	800beb2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bea2:	4b54      	ldr	r3, [pc, #336]	; (800bff4 <xQueueSemaphoreTake+0x214>)
 800bea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beb2:	f001 fc07 	bl	800d6c4 <vPortExitCritical>
				return pdPASS;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e097      	b.n	800bfea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d111      	bne.n	800bee4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	617b      	str	r3, [r7, #20]
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bedc:	f001 fbf2 	bl	800d6c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bee0:	2300      	movs	r3, #0
 800bee2:	e082      	b.n	800bfea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d106      	bne.n	800bef8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800beea:	f107 030c 	add.w	r3, r7, #12
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 ff12 	bl	800cd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bef4:	2301      	movs	r3, #1
 800bef6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bef8:	f001 fbe4 	bl	800d6c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800befc:	f000 fcc8 	bl	800c890 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf00:	f001 fbb0 	bl	800d664 <vPortEnterCritical>
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf0a:	b25b      	sxtb	r3, r3
 800bf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf10:	d103      	bne.n	800bf1a <xQueueSemaphoreTake+0x13a>
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf20:	b25b      	sxtb	r3, r3
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	d103      	bne.n	800bf30 <xQueueSemaphoreTake+0x150>
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf30:	f001 fbc8 	bl	800d6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf34:	463a      	mov	r2, r7
 800bf36:	f107 030c 	add.w	r3, r7, #12
 800bf3a:	4611      	mov	r1, r2
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 ff01 	bl	800cd44 <xTaskCheckForTimeOut>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d132      	bne.n	800bfae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf4a:	f000 f929 	bl	800c1a0 <prvIsQueueEmpty>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d026      	beq.n	800bfa2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d109      	bne.n	800bf70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bf5c:	f001 fb82 	bl	800d664 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f001 f84f 	bl	800d008 <xTaskPriorityInherit>
 800bf6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf6c:	f001 fbaa 	bl	800d6c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	3324      	adds	r3, #36	; 0x24
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fe47 	bl	800cc0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf80:	f000 f8bc 	bl	800c0fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf84:	f000 fc92 	bl	800c8ac <xTaskResumeAll>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f47f af68 	bne.w	800be60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bf90:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <xQueueSemaphoreTake+0x214>)
 800bf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	e75e      	b.n	800be60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa4:	f000 f8aa 	bl	800c0fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfa8:	f000 fc80 	bl	800c8ac <xTaskResumeAll>
 800bfac:	e758      	b.n	800be60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfb0:	f000 f8a4 	bl	800c0fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfb4:	f000 fc7a 	bl	800c8ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfba:	f000 f8f1 	bl	800c1a0 <prvIsQueueEmpty>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f43f af4d 	beq.w	800be60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00d      	beq.n	800bfe8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bfcc:	f001 fb4a 	bl	800d664 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bfd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd2:	f000 f811 	bl	800bff8 <prvGetDisinheritPriorityAfterTimeout>
 800bfd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 f90e 	bl	800d200 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bfe4:	f001 fb6e 	bl	800d6c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3738      	adds	r7, #56	; 0x38
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	e000ed04 	.word	0xe000ed04

0800bff8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d006      	beq.n	800c016 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f1c3 0307 	rsb	r3, r3, #7
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e001      	b.n	800c01a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c016:	2300      	movs	r3, #0
 800c018:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c01a:	68fb      	ldr	r3, [r7, #12]
	}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c034:	2300      	movs	r3, #0
 800c036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10d      	bne.n	800c062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d14d      	bne.n	800c0ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	4618      	mov	r0, r3
 800c054:	f001 f84e 	bl	800d0f4 <xTaskPriorityDisinherit>
 800c058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	609a      	str	r2, [r3, #8]
 800c060:	e043      	b.n	800c0ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d119      	bne.n	800c09c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6858      	ldr	r0, [r3, #4]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c070:	461a      	mov	r2, r3
 800c072:	68b9      	ldr	r1, [r7, #8]
 800c074:	f001 fe26 	bl	800dcc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	441a      	add	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	685a      	ldr	r2, [r3, #4]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d32b      	bcc.n	800c0ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	605a      	str	r2, [r3, #4]
 800c09a:	e026      	b.n	800c0ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	68d8      	ldr	r0, [r3, #12]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	68b9      	ldr	r1, [r7, #8]
 800c0a8:	f001 fe0c 	bl	800dcc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	68da      	ldr	r2, [r3, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	441a      	add	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	68da      	ldr	r2, [r3, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d207      	bcs.n	800c0d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	689a      	ldr	r2, [r3, #8]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d0:	425b      	negs	r3, r3
 800c0d2:	441a      	add	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d105      	bne.n	800c0ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	1c5a      	adds	r2, r3, #1
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0f2:	697b      	ldr	r3, [r7, #20]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3718      	adds	r7, #24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c104:	f001 faae 	bl	800d664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c10e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c110:	e011      	b.n	800c136 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c116:	2b00      	cmp	r3, #0
 800c118:	d012      	beq.n	800c140 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	3324      	adds	r3, #36	; 0x24
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 fd98 	bl	800cc54 <xTaskRemoveFromEventList>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c12a:	f000 fe6d 	bl	800ce08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
 800c130:	3b01      	subs	r3, #1
 800c132:	b2db      	uxtb	r3, r3
 800c134:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dce9      	bgt.n	800c112 <prvUnlockQueue+0x16>
 800c13e:	e000      	b.n	800c142 <prvUnlockQueue+0x46>
					break;
 800c140:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	22ff      	movs	r2, #255	; 0xff
 800c146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c14a:	f001 fabb 	bl	800d6c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c14e:	f001 fa89 	bl	800d664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c158:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c15a:	e011      	b.n	800c180 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d012      	beq.n	800c18a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3310      	adds	r3, #16
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fd73 	bl	800cc54 <xTaskRemoveFromEventList>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c174:	f000 fe48 	bl	800ce08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	3b01      	subs	r3, #1
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c184:	2b00      	cmp	r3, #0
 800c186:	dce9      	bgt.n	800c15c <prvUnlockQueue+0x60>
 800c188:	e000      	b.n	800c18c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c18a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	22ff      	movs	r2, #255	; 0xff
 800c190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c194:	f001 fa96 	bl	800d6c4 <vPortExitCritical>
}
 800c198:	bf00      	nop
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1a8:	f001 fa5c 	bl	800d664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	e001      	b.n	800c1be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1be:	f001 fa81 	bl	800d6c4 <vPortExitCritical>

	return xReturn;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1d4:	f001 fa46 	bl	800d664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d102      	bne.n	800c1ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	e001      	b.n	800c1ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1ee:	f001 fa69 	bl	800d6c4 <vPortExitCritical>

	return xReturn;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08e      	sub	sp, #56	; 0x38
 800c200:	af04      	add	r7, sp, #16
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10a      	bne.n	800c226 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	623b      	str	r3, [r7, #32]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xTaskCreateStatic+0x46>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	61fb      	str	r3, [r7, #28]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c242:	2354      	movs	r3, #84	; 0x54
 800c244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b54      	cmp	r3, #84	; 0x54
 800c24a:	d00a      	beq.n	800c262 <xTaskCreateStatic+0x66>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	61bb      	str	r3, [r7, #24]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c262:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	2b00      	cmp	r3, #0
 800c268:	d01e      	beq.n	800c2a8 <xTaskCreateStatic+0xac>
 800c26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01b      	beq.n	800c2a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c278:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	2202      	movs	r2, #2
 800c27e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c282:	2300      	movs	r3, #0
 800c284:	9303      	str	r3, [sp, #12]
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	9302      	str	r3, [sp, #8]
 800c28a:	f107 0314 	add.w	r3, r7, #20
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f000 f850 	bl	800c340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2a2:	f000 f8d5 	bl	800c450 <prvAddNewTaskToReadyList>
 800c2a6:	e001      	b.n	800c2ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2ac:	697b      	ldr	r3, [r7, #20]
	}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3728      	adds	r7, #40	; 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b08c      	sub	sp, #48	; 0x30
 800c2ba:	af04      	add	r7, sp, #16
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	603b      	str	r3, [r7, #0]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 faec 	bl	800d8a8 <pvPortMalloc>
 800c2d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00e      	beq.n	800c2f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2d8:	2054      	movs	r0, #84	; 0x54
 800c2da:	f001 fae5 	bl	800d8a8 <pvPortMalloc>
 800c2de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d003      	beq.n	800c2ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	631a      	str	r2, [r3, #48]	; 0x30
 800c2ec:	e005      	b.n	800c2fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2ee:	6978      	ldr	r0, [r7, #20]
 800c2f0:	f001 fba6 	bl	800da40 <vPortFree>
 800c2f4:	e001      	b.n	800c2fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d017      	beq.n	800c330 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c308:	88fa      	ldrh	r2, [r7, #6]
 800c30a:	2300      	movs	r3, #0
 800c30c:	9303      	str	r3, [sp, #12]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	9302      	str	r3, [sp, #8]
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f80e 	bl	800c340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c324:	69f8      	ldr	r0, [r7, #28]
 800c326:	f000 f893 	bl	800c450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c32a:	2301      	movs	r3, #1
 800c32c:	61bb      	str	r3, [r7, #24]
 800c32e:	e002      	b.n	800c336 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c330:	f04f 33ff 	mov.w	r3, #4294967295
 800c334:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c336:	69bb      	ldr	r3, [r7, #24]
	}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c352:	6879      	ldr	r1, [r7, #4]
 800c354:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c358:	440b      	add	r3, r1
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f023 0307 	bic.w	r3, r3, #7
 800c366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	617b      	str	r3, [r7, #20]
}
 800c384:	bf00      	nop
 800c386:	e7fe      	b.n	800c386 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d01f      	beq.n	800c3ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c38e:	2300      	movs	r3, #0
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	e012      	b.n	800c3ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	4413      	add	r3, r2
 800c39a:	7819      	ldrb	r1, [r3, #0]
 800c39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3334      	adds	r3, #52	; 0x34
 800c3a4:	460a      	mov	r2, r1
 800c3a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	2b0f      	cmp	r3, #15
 800c3be:	d9e9      	bls.n	800c394 <prvInitialiseNewTask+0x54>
 800c3c0:	e000      	b.n	800c3c4 <prvInitialiseNewTask+0x84>
			{
				break;
 800c3c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3cc:	e003      	b.n	800c3d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	2b06      	cmp	r3, #6
 800c3da:	d901      	bls.n	800c3e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3dc:	2306      	movs	r3, #6
 800c3de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff f94b 	bl	800b692 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	3318      	adds	r3, #24
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff f946 	bl	800b692 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c40a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	f1c3 0207 	rsb	r2, r3, #7
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	2200      	movs	r2, #0
 800c420:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	2200      	movs	r2, #0
 800c426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	68f9      	ldr	r1, [r7, #12]
 800c42e:	69b8      	ldr	r0, [r7, #24]
 800c430:	f000 ffee 	bl	800d410 <pxPortInitialiseStack>
 800c434:	4602      	mov	r2, r0
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c446:	bf00      	nop
 800c448:	3720      	adds	r7, #32
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c458:	f001 f904 	bl	800d664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c45c:	4b2a      	ldr	r3, [pc, #168]	; (800c508 <prvAddNewTaskToReadyList+0xb8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	4a29      	ldr	r2, [pc, #164]	; (800c508 <prvAddNewTaskToReadyList+0xb8>)
 800c464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c466:	4b29      	ldr	r3, [pc, #164]	; (800c50c <prvAddNewTaskToReadyList+0xbc>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d109      	bne.n	800c482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c46e:	4a27      	ldr	r2, [pc, #156]	; (800c50c <prvAddNewTaskToReadyList+0xbc>)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c474:	4b24      	ldr	r3, [pc, #144]	; (800c508 <prvAddNewTaskToReadyList+0xb8>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d110      	bne.n	800c49e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c47c:	f000 fce8 	bl	800ce50 <prvInitialiseTaskLists>
 800c480:	e00d      	b.n	800c49e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c482:	4b23      	ldr	r3, [pc, #140]	; (800c510 <prvAddNewTaskToReadyList+0xc0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c48a:	4b20      	ldr	r3, [pc, #128]	; (800c50c <prvAddNewTaskToReadyList+0xbc>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	429a      	cmp	r2, r3
 800c496:	d802      	bhi.n	800c49e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c498:	4a1c      	ldr	r2, [pc, #112]	; (800c50c <prvAddNewTaskToReadyList+0xbc>)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c49e:	4b1d      	ldr	r3, [pc, #116]	; (800c514 <prvAddNewTaskToReadyList+0xc4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <prvAddNewTaskToReadyList+0xc4>)
 800c4a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	409a      	lsls	r2, r3
 800c4b0:	4b19      	ldr	r3, [pc, #100]	; (800c518 <prvAddNewTaskToReadyList+0xc8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	4a18      	ldr	r2, [pc, #96]	; (800c518 <prvAddNewTaskToReadyList+0xc8>)
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4be:	4613      	mov	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4a15      	ldr	r2, [pc, #84]	; (800c51c <prvAddNewTaskToReadyList+0xcc>)
 800c4c8:	441a      	add	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	f7ff f8eb 	bl	800b6ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4d6:	f001 f8f5 	bl	800d6c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4da:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <prvAddNewTaskToReadyList+0xc0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00e      	beq.n	800c500 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4e2:	4b0a      	ldr	r3, [pc, #40]	; (800c50c <prvAddNewTaskToReadyList+0xbc>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d207      	bcs.n	800c500 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4f0:	4b0b      	ldr	r3, [pc, #44]	; (800c520 <prvAddNewTaskToReadyList+0xd0>)
 800c4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20000394 	.word	0x20000394
 800c50c:	20000294 	.word	0x20000294
 800c510:	200003a0 	.word	0x200003a0
 800c514:	200003b0 	.word	0x200003b0
 800c518:	2000039c 	.word	0x2000039c
 800c51c:	20000298 	.word	0x20000298
 800c520:	e000ed04 	.word	0xe000ed04

0800c524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d017      	beq.n	800c566 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c536:	4b13      	ldr	r3, [pc, #76]	; (800c584 <vTaskDelay+0x60>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <vTaskDelay+0x30>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	60bb      	str	r3, [r7, #8]
}
 800c550:	bf00      	nop
 800c552:	e7fe      	b.n	800c552 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c554:	f000 f99c 	bl	800c890 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c558:	2100      	movs	r1, #0
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fef2 	bl	800d344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c560:	f000 f9a4 	bl	800c8ac <xTaskResumeAll>
 800c564:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d107      	bne.n	800c57c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c56c:	4b06      	ldr	r3, [pc, #24]	; (800c588 <vTaskDelay+0x64>)
 800c56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c57c:	bf00      	nop
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	200003bc 	.word	0x200003bc
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c594:	f001 f866 	bl	800d664 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d102      	bne.n	800c5a4 <vTaskSuspend+0x18>
 800c59e:	4b3c      	ldr	r3, [pc, #240]	; (800c690 <vTaskSuspend+0x104>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	e000      	b.n	800c5a6 <vTaskSuspend+0x1a>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff f8da 	bl	800b766 <uxListRemove>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d115      	bne.n	800c5e4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5bc:	4935      	ldr	r1, [pc, #212]	; (800c694 <vTaskSuspend+0x108>)
 800c5be:	4613      	mov	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	440b      	add	r3, r1
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <vTaskSuspend+0x58>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d8:	43da      	mvns	r2, r3
 800c5da:	4b2f      	ldr	r3, [pc, #188]	; (800c698 <vTaskSuspend+0x10c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4013      	ands	r3, r2
 800c5e0:	4a2d      	ldr	r2, [pc, #180]	; (800c698 <vTaskSuspend+0x10c>)
 800c5e2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d004      	beq.n	800c5f6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3318      	adds	r3, #24
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff f8b8 	bl	800b766 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4827      	ldr	r0, [pc, #156]	; (800c69c <vTaskSuspend+0x110>)
 800c5fe:	f7ff f855 	bl	800b6ac <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d103      	bne.n	800c616 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c616:	f001 f855 	bl	800d6c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c61a:	4b21      	ldr	r3, [pc, #132]	; (800c6a0 <vTaskSuspend+0x114>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c622:	f001 f81f 	bl	800d664 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c626:	f000 fcb1 	bl	800cf8c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c62a:	f001 f84b 	bl	800d6c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c62e:	4b18      	ldr	r3, [pc, #96]	; (800c690 <vTaskSuspend+0x104>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	429a      	cmp	r2, r3
 800c636:	d127      	bne.n	800c688 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800c638:	4b19      	ldr	r3, [pc, #100]	; (800c6a0 <vTaskSuspend+0x114>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d017      	beq.n	800c670 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c640:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <vTaskSuspend+0x118>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00a      	beq.n	800c65e <vTaskSuspend+0xd2>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	60bb      	str	r3, [r7, #8]
}
 800c65a:	bf00      	nop
 800c65c:	e7fe      	b.n	800c65c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800c65e:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <vTaskSuspend+0x11c>)
 800c660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c66e:	e00b      	b.n	800c688 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c670:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <vTaskSuspend+0x110>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	4b0d      	ldr	r3, [pc, #52]	; (800c6ac <vTaskSuspend+0x120>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d103      	bne.n	800c684 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800c67c:	4b04      	ldr	r3, [pc, #16]	; (800c690 <vTaskSuspend+0x104>)
 800c67e:	2200      	movs	r2, #0
 800c680:	601a      	str	r2, [r3, #0]
	}
 800c682:	e001      	b.n	800c688 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800c684:	f000 fa66 	bl	800cb54 <vTaskSwitchContext>
	}
 800c688:	bf00      	nop
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	20000294 	.word	0x20000294
 800c694:	20000298 	.word	0x20000298
 800c698:	2000039c 	.word	0x2000039c
 800c69c:	20000380 	.word	0x20000380
 800c6a0:	200003a0 	.word	0x200003a0
 800c6a4:	200003bc 	.word	0x200003bc
 800c6a8:	e000ed04 	.word	0xe000ed04
 800c6ac:	20000394 	.word	0x20000394

0800c6b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10a      	bne.n	800c6dc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	60fb      	str	r3, [r7, #12]
}
 800c6d8:	bf00      	nop
 800c6da:	e7fe      	b.n	800c6da <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	; (800c70c <prvTaskIsTaskSuspended+0x5c>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d10a      	bne.n	800c6fc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ea:	4a09      	ldr	r2, [pc, #36]	; (800c710 <prvTaskIsTaskSuspended+0x60>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d005      	beq.n	800c6fc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6fc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c6fe:	4618      	mov	r0, r3
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	20000380 	.word	0x20000380
 800c710:	20000354 	.word	0x20000354

0800c714 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10a      	bne.n	800c73c <vTaskResume+0x28>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	60bb      	str	r3, [r7, #8]
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c73c:	4b20      	ldr	r3, [pc, #128]	; (800c7c0 <vTaskResume+0xac>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	429a      	cmp	r2, r3
 800c744:	d037      	beq.n	800c7b6 <vTaskResume+0xa2>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d034      	beq.n	800c7b6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800c74c:	f000 ff8a 	bl	800d664 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7ff ffad 	bl	800c6b0 <prvTaskIsTaskSuspended>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d02a      	beq.n	800c7b2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3304      	adds	r3, #4
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff f800 	bl	800b766 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76a:	2201      	movs	r2, #1
 800c76c:	409a      	lsls	r2, r3
 800c76e:	4b15      	ldr	r3, [pc, #84]	; (800c7c4 <vTaskResume+0xb0>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4313      	orrs	r3, r2
 800c774:	4a13      	ldr	r2, [pc, #76]	; (800c7c4 <vTaskResume+0xb0>)
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77c:	4613      	mov	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4a10      	ldr	r2, [pc, #64]	; (800c7c8 <vTaskResume+0xb4>)
 800c786:	441a      	add	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3304      	adds	r3, #4
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	f7fe ff8c 	bl	800b6ac <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c798:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <vTaskResume+0xac>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d307      	bcc.n	800c7b2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c7a2:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <vTaskResume+0xb8>)
 800c7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c7b2:	f000 ff87 	bl	800d6c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7b6:	bf00      	nop
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20000294 	.word	0x20000294
 800c7c4:	2000039c 	.word	0x2000039c
 800c7c8:	20000298 	.word	0x20000298
 800c7cc:	e000ed04 	.word	0xe000ed04

0800c7d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	; 0x28
 800c7d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7de:	463a      	mov	r2, r7
 800c7e0:	1d39      	adds	r1, r7, #4
 800c7e2:	f107 0308 	add.w	r3, r7, #8
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7f4 fd94 	bl	8001314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	9202      	str	r2, [sp, #8]
 800c7f4:	9301      	str	r3, [sp, #4]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	460a      	mov	r2, r1
 800c7fe:	491e      	ldr	r1, [pc, #120]	; (800c878 <vTaskStartScheduler+0xa8>)
 800c800:	481e      	ldr	r0, [pc, #120]	; (800c87c <vTaskStartScheduler+0xac>)
 800c802:	f7ff fcfb 	bl	800c1fc <xTaskCreateStatic>
 800c806:	4603      	mov	r3, r0
 800c808:	4a1d      	ldr	r2, [pc, #116]	; (800c880 <vTaskStartScheduler+0xb0>)
 800c80a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c80c:	4b1c      	ldr	r3, [pc, #112]	; (800c880 <vTaskStartScheduler+0xb0>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c814:	2301      	movs	r3, #1
 800c816:	617b      	str	r3, [r7, #20]
 800c818:	e001      	b.n	800c81e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d116      	bne.n	800c852 <vTaskStartScheduler+0x82>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	613b      	str	r3, [r7, #16]
}
 800c836:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c838:	4b12      	ldr	r3, [pc, #72]	; (800c884 <vTaskStartScheduler+0xb4>)
 800c83a:	f04f 32ff 	mov.w	r2, #4294967295
 800c83e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c840:	4b11      	ldr	r3, [pc, #68]	; (800c888 <vTaskStartScheduler+0xb8>)
 800c842:	2201      	movs	r2, #1
 800c844:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c846:	4b11      	ldr	r3, [pc, #68]	; (800c88c <vTaskStartScheduler+0xbc>)
 800c848:	2200      	movs	r2, #0
 800c84a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c84c:	f000 fe68 	bl	800d520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c850:	e00e      	b.n	800c870 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c858:	d10a      	bne.n	800c870 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	60fb      	str	r3, [r7, #12]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <vTaskStartScheduler+0x9e>
}
 800c870:	bf00      	nop
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	0800ddb0 	.word	0x0800ddb0
 800c87c:	0800ce21 	.word	0x0800ce21
 800c880:	200003b8 	.word	0x200003b8
 800c884:	200003b4 	.word	0x200003b4
 800c888:	200003a0 	.word	0x200003a0
 800c88c:	20000398 	.word	0x20000398

0800c890 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c890:	b480      	push	{r7}
 800c892:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c894:	4b04      	ldr	r3, [pc, #16]	; (800c8a8 <vTaskSuspendAll+0x18>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3301      	adds	r3, #1
 800c89a:	4a03      	ldr	r2, [pc, #12]	; (800c8a8 <vTaskSuspendAll+0x18>)
 800c89c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c89e:	bf00      	nop
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr
 800c8a8:	200003bc 	.word	0x200003bc

0800c8ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8ba:	4b41      	ldr	r3, [pc, #260]	; (800c9c0 <xTaskResumeAll+0x114>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10a      	bne.n	800c8d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	603b      	str	r3, [r7, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	e7fe      	b.n	800c8d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8d8:	f000 fec4 	bl	800d664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8dc:	4b38      	ldr	r3, [pc, #224]	; (800c9c0 <xTaskResumeAll+0x114>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	4a37      	ldr	r2, [pc, #220]	; (800c9c0 <xTaskResumeAll+0x114>)
 800c8e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8e6:	4b36      	ldr	r3, [pc, #216]	; (800c9c0 <xTaskResumeAll+0x114>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d161      	bne.n	800c9b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c8ee:	4b35      	ldr	r3, [pc, #212]	; (800c9c4 <xTaskResumeAll+0x118>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d05d      	beq.n	800c9b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8f6:	e02e      	b.n	800c956 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f8:	4b33      	ldr	r3, [pc, #204]	; (800c9c8 <xTaskResumeAll+0x11c>)
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3318      	adds	r3, #24
 800c904:	4618      	mov	r0, r3
 800c906:	f7fe ff2e 	bl	800b766 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3304      	adds	r3, #4
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe ff29 	bl	800b766 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c918:	2201      	movs	r2, #1
 800c91a:	409a      	lsls	r2, r3
 800c91c:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <xTaskResumeAll+0x120>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4313      	orrs	r3, r2
 800c922:	4a2a      	ldr	r2, [pc, #168]	; (800c9cc <xTaskResumeAll+0x120>)
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92a:	4613      	mov	r3, r2
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	4413      	add	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4a27      	ldr	r2, [pc, #156]	; (800c9d0 <xTaskResumeAll+0x124>)
 800c934:	441a      	add	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3304      	adds	r3, #4
 800c93a:	4619      	mov	r1, r3
 800c93c:	4610      	mov	r0, r2
 800c93e:	f7fe feb5 	bl	800b6ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c946:	4b23      	ldr	r3, [pc, #140]	; (800c9d4 <xTaskResumeAll+0x128>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d302      	bcc.n	800c956 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c950:	4b21      	ldr	r3, [pc, #132]	; (800c9d8 <xTaskResumeAll+0x12c>)
 800c952:	2201      	movs	r2, #1
 800c954:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c956:	4b1c      	ldr	r3, [pc, #112]	; (800c9c8 <xTaskResumeAll+0x11c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1cc      	bne.n	800c8f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c964:	f000 fb12 	bl	800cf8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c968:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <xTaskResumeAll+0x130>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d010      	beq.n	800c996 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c974:	f000 f836 	bl	800c9e4 <xTaskIncrementTick>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d002      	beq.n	800c984 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c97e:	4b16      	ldr	r3, [pc, #88]	; (800c9d8 <xTaskResumeAll+0x12c>)
 800c980:	2201      	movs	r2, #1
 800c982:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	3b01      	subs	r3, #1
 800c988:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1f1      	bne.n	800c974 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c990:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <xTaskResumeAll+0x130>)
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c996:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <xTaskResumeAll+0x12c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d009      	beq.n	800c9b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9a2:	4b0f      	ldr	r3, [pc, #60]	; (800c9e0 <xTaskResumeAll+0x134>)
 800c9a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9b2:	f000 fe87 	bl	800d6c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	200003bc 	.word	0x200003bc
 800c9c4:	20000394 	.word	0x20000394
 800c9c8:	20000354 	.word	0x20000354
 800c9cc:	2000039c 	.word	0x2000039c
 800c9d0:	20000298 	.word	0x20000298
 800c9d4:	20000294 	.word	0x20000294
 800c9d8:	200003a8 	.word	0x200003a8
 800c9dc:	200003a4 	.word	0x200003a4
 800c9e0:	e000ed04 	.word	0xe000ed04

0800c9e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9ee:	4b4e      	ldr	r3, [pc, #312]	; (800cb28 <xTaskIncrementTick+0x144>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f040 808e 	bne.w	800cb14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9f8:	4b4c      	ldr	r3, [pc, #304]	; (800cb2c <xTaskIncrementTick+0x148>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca00:	4a4a      	ldr	r2, [pc, #296]	; (800cb2c <xTaskIncrementTick+0x148>)
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d120      	bne.n	800ca4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca0c:	4b48      	ldr	r3, [pc, #288]	; (800cb30 <xTaskIncrementTick+0x14c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <xTaskIncrementTick+0x48>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	603b      	str	r3, [r7, #0]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <xTaskIncrementTick+0x46>
 800ca2c:	4b40      	ldr	r3, [pc, #256]	; (800cb30 <xTaskIncrementTick+0x14c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	4b40      	ldr	r3, [pc, #256]	; (800cb34 <xTaskIncrementTick+0x150>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a3e      	ldr	r2, [pc, #248]	; (800cb30 <xTaskIncrementTick+0x14c>)
 800ca38:	6013      	str	r3, [r2, #0]
 800ca3a:	4a3e      	ldr	r2, [pc, #248]	; (800cb34 <xTaskIncrementTick+0x150>)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	4b3d      	ldr	r3, [pc, #244]	; (800cb38 <xTaskIncrementTick+0x154>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	4a3c      	ldr	r2, [pc, #240]	; (800cb38 <xTaskIncrementTick+0x154>)
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	f000 fa9f 	bl	800cf8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca4e:	4b3b      	ldr	r3, [pc, #236]	; (800cb3c <xTaskIncrementTick+0x158>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d348      	bcc.n	800caea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca58:	4b35      	ldr	r3, [pc, #212]	; (800cb30 <xTaskIncrementTick+0x14c>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d104      	bne.n	800ca6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca62:	4b36      	ldr	r3, [pc, #216]	; (800cb3c <xTaskIncrementTick+0x158>)
 800ca64:	f04f 32ff 	mov.w	r2, #4294967295
 800ca68:	601a      	str	r2, [r3, #0]
					break;
 800ca6a:	e03e      	b.n	800caea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca6c:	4b30      	ldr	r3, [pc, #192]	; (800cb30 <xTaskIncrementTick+0x14c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d203      	bcs.n	800ca8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca84:	4a2d      	ldr	r2, [pc, #180]	; (800cb3c <xTaskIncrementTick+0x158>)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca8a:	e02e      	b.n	800caea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fe fe68 	bl	800b766 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	3318      	adds	r3, #24
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fe5f 	bl	800b766 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caac:	2201      	movs	r2, #1
 800caae:	409a      	lsls	r2, r3
 800cab0:	4b23      	ldr	r3, [pc, #140]	; (800cb40 <xTaskIncrementTick+0x15c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	4a22      	ldr	r2, [pc, #136]	; (800cb40 <xTaskIncrementTick+0x15c>)
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4a1f      	ldr	r2, [pc, #124]	; (800cb44 <xTaskIncrementTick+0x160>)
 800cac8:	441a      	add	r2, r3
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	3304      	adds	r3, #4
 800cace:	4619      	mov	r1, r3
 800cad0:	4610      	mov	r0, r2
 800cad2:	f7fe fdeb 	bl	800b6ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cada:	4b1b      	ldr	r3, [pc, #108]	; (800cb48 <xTaskIncrementTick+0x164>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d3b9      	bcc.n	800ca58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cae4:	2301      	movs	r3, #1
 800cae6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cae8:	e7b6      	b.n	800ca58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800caea:	4b17      	ldr	r3, [pc, #92]	; (800cb48 <xTaskIncrementTick+0x164>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf0:	4914      	ldr	r1, [pc, #80]	; (800cb44 <xTaskIncrementTick+0x160>)
 800caf2:	4613      	mov	r3, r2
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	440b      	add	r3, r1
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d901      	bls.n	800cb06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cb02:	2301      	movs	r3, #1
 800cb04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb06:	4b11      	ldr	r3, [pc, #68]	; (800cb4c <xTaskIncrementTick+0x168>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d007      	beq.n	800cb1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	617b      	str	r3, [r7, #20]
 800cb12:	e004      	b.n	800cb1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb14:	4b0e      	ldr	r3, [pc, #56]	; (800cb50 <xTaskIncrementTick+0x16c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	4a0d      	ldr	r2, [pc, #52]	; (800cb50 <xTaskIncrementTick+0x16c>)
 800cb1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb1e:	697b      	ldr	r3, [r7, #20]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	200003bc 	.word	0x200003bc
 800cb2c:	20000398 	.word	0x20000398
 800cb30:	2000034c 	.word	0x2000034c
 800cb34:	20000350 	.word	0x20000350
 800cb38:	200003ac 	.word	0x200003ac
 800cb3c:	200003b4 	.word	0x200003b4
 800cb40:	2000039c 	.word	0x2000039c
 800cb44:	20000298 	.word	0x20000298
 800cb48:	20000294 	.word	0x20000294
 800cb4c:	200003a8 	.word	0x200003a8
 800cb50:	200003a4 	.word	0x200003a4

0800cb54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb5a:	4b27      	ldr	r3, [pc, #156]	; (800cbf8 <vTaskSwitchContext+0xa4>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb62:	4b26      	ldr	r3, [pc, #152]	; (800cbfc <vTaskSwitchContext+0xa8>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb68:	e03f      	b.n	800cbea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cb6a:	4b24      	ldr	r3, [pc, #144]	; (800cbfc <vTaskSwitchContext+0xa8>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb70:	4b23      	ldr	r3, [pc, #140]	; (800cc00 <vTaskSwitchContext+0xac>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	fab3 f383 	clz	r3, r3
 800cb7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb7e:	7afb      	ldrb	r3, [r7, #11]
 800cb80:	f1c3 031f 	rsb	r3, r3, #31
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	491f      	ldr	r1, [pc, #124]	; (800cc04 <vTaskSwitchContext+0xb0>)
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	440b      	add	r3, r1
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10a      	bne.n	800cbb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	607b      	str	r3, [r7, #4]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <vTaskSwitchContext+0x5a>
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4a12      	ldr	r2, [pc, #72]	; (800cc04 <vTaskSwitchContext+0xb0>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	613b      	str	r3, [r7, #16]
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	605a      	str	r2, [r3, #4]
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d104      	bne.n	800cbe0 <vTaskSwitchContext+0x8c>
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	605a      	str	r2, [r3, #4]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	4a08      	ldr	r2, [pc, #32]	; (800cc08 <vTaskSwitchContext+0xb4>)
 800cbe8:	6013      	str	r3, [r2, #0]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	200003bc 	.word	0x200003bc
 800cbfc:	200003a8 	.word	0x200003a8
 800cc00:	2000039c 	.word	0x2000039c
 800cc04:	20000298 	.word	0x20000298
 800cc08:	20000294 	.word	0x20000294

0800cc0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10a      	bne.n	800cc32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	60fb      	str	r3, [r7, #12]
}
 800cc2e:	bf00      	nop
 800cc30:	e7fe      	b.n	800cc30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc32:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <vTaskPlaceOnEventList+0x44>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3318      	adds	r3, #24
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7fe fd5a 	bl	800b6f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc40:	2101      	movs	r1, #1
 800cc42:	6838      	ldr	r0, [r7, #0]
 800cc44:	f000 fb7e 	bl	800d344 <prvAddCurrentTaskToDelayedList>
}
 800cc48:	bf00      	nop
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	20000294 	.word	0x20000294

0800cc54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	60fb      	str	r3, [r7, #12]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	3318      	adds	r3, #24
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fe fd6e 	bl	800b766 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc8a:	4b1d      	ldr	r3, [pc, #116]	; (800cd00 <xTaskRemoveFromEventList+0xac>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d11c      	bne.n	800cccc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	3304      	adds	r3, #4
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fd65 	bl	800b766 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca0:	2201      	movs	r2, #1
 800cca2:	409a      	lsls	r2, r3
 800cca4:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <xTaskRemoveFromEventList+0xb0>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	4a16      	ldr	r2, [pc, #88]	; (800cd04 <xTaskRemoveFromEventList+0xb0>)
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4a13      	ldr	r2, [pc, #76]	; (800cd08 <xTaskRemoveFromEventList+0xb4>)
 800ccbc:	441a      	add	r2, r3
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f7fe fcf1 	bl	800b6ac <vListInsertEnd>
 800ccca:	e005      	b.n	800ccd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	3318      	adds	r3, #24
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	480e      	ldr	r0, [pc, #56]	; (800cd0c <xTaskRemoveFromEventList+0xb8>)
 800ccd4:	f7fe fcea 	bl	800b6ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccdc:	4b0c      	ldr	r3, [pc, #48]	; (800cd10 <xTaskRemoveFromEventList+0xbc>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d905      	bls.n	800ccf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cce6:	2301      	movs	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccea:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <xTaskRemoveFromEventList+0xc0>)
 800ccec:	2201      	movs	r2, #1
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	e001      	b.n	800ccf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ccf6:	697b      	ldr	r3, [r7, #20]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	200003bc 	.word	0x200003bc
 800cd04:	2000039c 	.word	0x2000039c
 800cd08:	20000298 	.word	0x20000298
 800cd0c:	20000354 	.word	0x20000354
 800cd10:	20000294 	.word	0x20000294
 800cd14:	200003a8 	.word	0x200003a8

0800cd18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd20:	4b06      	ldr	r3, [pc, #24]	; (800cd3c <vTaskInternalSetTimeOutState+0x24>)
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd28:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <vTaskInternalSetTimeOutState+0x28>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	605a      	str	r2, [r3, #4]
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	200003ac 	.word	0x200003ac
 800cd40:	20000398 	.word	0x20000398

0800cd44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b088      	sub	sp, #32
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	613b      	str	r3, [r7, #16]
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10a      	bne.n	800cd86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	60fb      	str	r3, [r7, #12]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cd86:	f000 fc6d 	bl	800d664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd8a:	4b1d      	ldr	r3, [pc, #116]	; (800ce00 <xTaskCheckForTimeOut+0xbc>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	69ba      	ldr	r2, [r7, #24]
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda2:	d102      	bne.n	800cdaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cda4:	2300      	movs	r3, #0
 800cda6:	61fb      	str	r3, [r7, #28]
 800cda8:	e023      	b.n	800cdf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	4b15      	ldr	r3, [pc, #84]	; (800ce04 <xTaskCheckForTimeOut+0xc0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d007      	beq.n	800cdc6 <xTaskCheckForTimeOut+0x82>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	69ba      	ldr	r2, [r7, #24]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d302      	bcc.n	800cdc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	61fb      	str	r3, [r7, #28]
 800cdc4:	e015      	b.n	800cdf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d20b      	bcs.n	800cde8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	1ad2      	subs	r2, r2, r3
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ff9b 	bl	800cd18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cde2:	2300      	movs	r3, #0
 800cde4:	61fb      	str	r3, [r7, #28]
 800cde6:	e004      	b.n	800cdf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2200      	movs	r2, #0
 800cdec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdf2:	f000 fc67 	bl	800d6c4 <vPortExitCritical>

	return xReturn;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3720      	adds	r7, #32
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20000398 	.word	0x20000398
 800ce04:	200003ac 	.word	0x200003ac

0800ce08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce0c:	4b03      	ldr	r3, [pc, #12]	; (800ce1c <vTaskMissedYield+0x14>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
}
 800ce12:	bf00      	nop
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	200003a8 	.word	0x200003a8

0800ce20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce28:	f000 f852 	bl	800ced0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce2c:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <prvIdleTask+0x28>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d9f9      	bls.n	800ce28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce34:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <prvIdleTask+0x2c>)
 800ce36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce44:	e7f0      	b.n	800ce28 <prvIdleTask+0x8>
 800ce46:	bf00      	nop
 800ce48:	20000298 	.word	0x20000298
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce56:	2300      	movs	r3, #0
 800ce58:	607b      	str	r3, [r7, #4]
 800ce5a:	e00c      	b.n	800ce76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4a12      	ldr	r2, [pc, #72]	; (800ceb0 <prvInitialiseTaskLists+0x60>)
 800ce68:	4413      	add	r3, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe fbf1 	bl	800b652 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3301      	adds	r3, #1
 800ce74:	607b      	str	r3, [r7, #4]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b06      	cmp	r3, #6
 800ce7a:	d9ef      	bls.n	800ce5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce7c:	480d      	ldr	r0, [pc, #52]	; (800ceb4 <prvInitialiseTaskLists+0x64>)
 800ce7e:	f7fe fbe8 	bl	800b652 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce82:	480d      	ldr	r0, [pc, #52]	; (800ceb8 <prvInitialiseTaskLists+0x68>)
 800ce84:	f7fe fbe5 	bl	800b652 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce88:	480c      	ldr	r0, [pc, #48]	; (800cebc <prvInitialiseTaskLists+0x6c>)
 800ce8a:	f7fe fbe2 	bl	800b652 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce8e:	480c      	ldr	r0, [pc, #48]	; (800cec0 <prvInitialiseTaskLists+0x70>)
 800ce90:	f7fe fbdf 	bl	800b652 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce94:	480b      	ldr	r0, [pc, #44]	; (800cec4 <prvInitialiseTaskLists+0x74>)
 800ce96:	f7fe fbdc 	bl	800b652 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce9a:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <prvInitialiseTaskLists+0x78>)
 800ce9c:	4a05      	ldr	r2, [pc, #20]	; (800ceb4 <prvInitialiseTaskLists+0x64>)
 800ce9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cea0:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <prvInitialiseTaskLists+0x7c>)
 800cea2:	4a05      	ldr	r2, [pc, #20]	; (800ceb8 <prvInitialiseTaskLists+0x68>)
 800cea4:	601a      	str	r2, [r3, #0]
}
 800cea6:	bf00      	nop
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20000298 	.word	0x20000298
 800ceb4:	20000324 	.word	0x20000324
 800ceb8:	20000338 	.word	0x20000338
 800cebc:	20000354 	.word	0x20000354
 800cec0:	20000368 	.word	0x20000368
 800cec4:	20000380 	.word	0x20000380
 800cec8:	2000034c 	.word	0x2000034c
 800cecc:	20000350 	.word	0x20000350

0800ced0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ced6:	e019      	b.n	800cf0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ced8:	f000 fbc4 	bl	800d664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cedc:	4b10      	ldr	r3, [pc, #64]	; (800cf20 <prvCheckTasksWaitingTermination+0x50>)
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	3304      	adds	r3, #4
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe fc3c 	bl	800b766 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ceee:	4b0d      	ldr	r3, [pc, #52]	; (800cf24 <prvCheckTasksWaitingTermination+0x54>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3b01      	subs	r3, #1
 800cef4:	4a0b      	ldr	r2, [pc, #44]	; (800cf24 <prvCheckTasksWaitingTermination+0x54>)
 800cef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cef8:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <prvCheckTasksWaitingTermination+0x58>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	4a0a      	ldr	r2, [pc, #40]	; (800cf28 <prvCheckTasksWaitingTermination+0x58>)
 800cf00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf02:	f000 fbdf 	bl	800d6c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f810 	bl	800cf2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf0c:	4b06      	ldr	r3, [pc, #24]	; (800cf28 <prvCheckTasksWaitingTermination+0x58>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e1      	bne.n	800ced8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf14:	bf00      	nop
 800cf16:	bf00      	nop
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000368 	.word	0x20000368
 800cf24:	20000394 	.word	0x20000394
 800cf28:	2000037c 	.word	0x2000037c

0800cf2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d108      	bne.n	800cf50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fd7c 	bl	800da40 <vPortFree>
				vPortFree( pxTCB );
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fd79 	bl	800da40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf4e:	e018      	b.n	800cf82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d103      	bne.n	800cf62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fd70 	bl	800da40 <vPortFree>
	}
 800cf60:	e00f      	b.n	800cf82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d00a      	beq.n	800cf82 <prvDeleteTCB+0x56>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	60fb      	str	r3, [r7, #12]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <prvDeleteTCB+0x54>
	}
 800cf82:	bf00      	nop
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf92:	4b0c      	ldr	r3, [pc, #48]	; (800cfc4 <prvResetNextTaskUnblockTime+0x38>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d104      	bne.n	800cfa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <prvResetNextTaskUnblockTime+0x3c>)
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfa4:	e008      	b.n	800cfb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa6:	4b07      	ldr	r3, [pc, #28]	; (800cfc4 <prvResetNextTaskUnblockTime+0x38>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <prvResetNextTaskUnblockTime+0x3c>)
 800cfb6:	6013      	str	r3, [r2, #0]
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	2000034c 	.word	0x2000034c
 800cfc8:	200003b4 	.word	0x200003b4

0800cfcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <xTaskGetSchedulerState+0x34>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d102      	bne.n	800cfe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	607b      	str	r3, [r7, #4]
 800cfde:	e008      	b.n	800cff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe0:	4b08      	ldr	r3, [pc, #32]	; (800d004 <xTaskGetSchedulerState+0x38>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	607b      	str	r3, [r7, #4]
 800cfec:	e001      	b.n	800cff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfee:	2300      	movs	r3, #0
 800cff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cff2:	687b      	ldr	r3, [r7, #4]
	}
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	200003a0 	.word	0x200003a0
 800d004:	200003bc 	.word	0x200003bc

0800d008 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d014:	2300      	movs	r3, #0
 800d016:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d05e      	beq.n	800d0dc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d022:	4b31      	ldr	r3, [pc, #196]	; (800d0e8 <xTaskPriorityInherit+0xe0>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d028:	429a      	cmp	r2, r3
 800d02a:	d24e      	bcs.n	800d0ca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	db06      	blt.n	800d042 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d034:	4b2c      	ldr	r3, [pc, #176]	; (800d0e8 <xTaskPriorityInherit+0xe0>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03a:	f1c3 0207 	rsb	r2, r3, #7
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	6959      	ldr	r1, [r3, #20]
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04a:	4613      	mov	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4a26      	ldr	r2, [pc, #152]	; (800d0ec <xTaskPriorityInherit+0xe4>)
 800d054:	4413      	add	r3, r2
 800d056:	4299      	cmp	r1, r3
 800d058:	d12f      	bne.n	800d0ba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	3304      	adds	r3, #4
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fb81 	bl	800b766 <uxListRemove>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10a      	bne.n	800d080 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06e:	2201      	movs	r2, #1
 800d070:	fa02 f303 	lsl.w	r3, r2, r3
 800d074:	43da      	mvns	r2, r3
 800d076:	4b1e      	ldr	r3, [pc, #120]	; (800d0f0 <xTaskPriorityInherit+0xe8>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4013      	ands	r3, r2
 800d07c:	4a1c      	ldr	r2, [pc, #112]	; (800d0f0 <xTaskPriorityInherit+0xe8>)
 800d07e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d080:	4b19      	ldr	r3, [pc, #100]	; (800d0e8 <xTaskPriorityInherit+0xe0>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08e:	2201      	movs	r2, #1
 800d090:	409a      	lsls	r2, r3
 800d092:	4b17      	ldr	r3, [pc, #92]	; (800d0f0 <xTaskPriorityInherit+0xe8>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4313      	orrs	r3, r2
 800d098:	4a15      	ldr	r2, [pc, #84]	; (800d0f0 <xTaskPriorityInherit+0xe8>)
 800d09a:	6013      	str	r3, [r2, #0]
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	4413      	add	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4a10      	ldr	r2, [pc, #64]	; (800d0ec <xTaskPriorityInherit+0xe4>)
 800d0aa:	441a      	add	r2, r3
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f7fe fafa 	bl	800b6ac <vListInsertEnd>
 800d0b8:	e004      	b.n	800d0c4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0ba:	4b0b      	ldr	r3, [pc, #44]	; (800d0e8 <xTaskPriorityInherit+0xe0>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	60fb      	str	r3, [r7, #12]
 800d0c8:	e008      	b.n	800d0dc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ce:	4b06      	ldr	r3, [pc, #24]	; (800d0e8 <xTaskPriorityInherit+0xe0>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d201      	bcs.n	800d0dc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
	}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20000294 	.word	0x20000294
 800d0ec:	20000298 	.word	0x20000298
 800d0f0:	2000039c 	.word	0x2000039c

0800d0f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d100:	2300      	movs	r3, #0
 800d102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d06e      	beq.n	800d1e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d10a:	4b3a      	ldr	r3, [pc, #232]	; (800d1f4 <xTaskPriorityDisinherit+0x100>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	429a      	cmp	r2, r3
 800d112:	d00a      	beq.n	800d12a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	f383 8811 	msr	BASEPRI, r3
 800d11c:	f3bf 8f6f 	isb	sy
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	60fb      	str	r3, [r7, #12]
}
 800d126:	bf00      	nop
 800d128:	e7fe      	b.n	800d128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10a      	bne.n	800d148 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	60bb      	str	r3, [r7, #8]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d14c:	1e5a      	subs	r2, r3, #1
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d044      	beq.n	800d1e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d162:	2b00      	cmp	r3, #0
 800d164:	d140      	bne.n	800d1e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	3304      	adds	r3, #4
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe fafb 	bl	800b766 <uxListRemove>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d115      	bne.n	800d1a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17a:	491f      	ldr	r1, [pc, #124]	; (800d1f8 <xTaskPriorityDisinherit+0x104>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xTaskPriorityDisinherit+0xae>
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d190:	2201      	movs	r2, #1
 800d192:	fa02 f303 	lsl.w	r3, r2, r3
 800d196:	43da      	mvns	r2, r3
 800d198:	4b18      	ldr	r3, [pc, #96]	; (800d1fc <xTaskPriorityDisinherit+0x108>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4013      	ands	r3, r2
 800d19e:	4a17      	ldr	r2, [pc, #92]	; (800d1fc <xTaskPriorityDisinherit+0x108>)
 800d1a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	f1c3 0207 	rsb	r2, r3, #7
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	409a      	lsls	r2, r3
 800d1be:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <xTaskPriorityDisinherit+0x108>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	4a0d      	ldr	r2, [pc, #52]	; (800d1fc <xTaskPriorityDisinherit+0x108>)
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4a08      	ldr	r2, [pc, #32]	; (800d1f8 <xTaskPriorityDisinherit+0x104>)
 800d1d6:	441a      	add	r2, r3
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4610      	mov	r0, r2
 800d1e0:	f7fe fa64 	bl	800b6ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1e8:	697b      	ldr	r3, [r7, #20]
	}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3718      	adds	r7, #24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20000294 	.word	0x20000294
 800d1f8:	20000298 	.word	0x20000298
 800d1fc:	2000039c 	.word	0x2000039c

0800d200 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d200:	b580      	push	{r7, lr}
 800d202:	b088      	sub	sp, #32
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d20e:	2301      	movs	r3, #1
 800d210:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d077      	beq.n	800d308 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10a      	bne.n	800d236 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	60fb      	str	r3, [r7, #12]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d902      	bls.n	800d246 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	61fb      	str	r3, [r7, #28]
 800d244:	e002      	b.n	800d24c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d24a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	429a      	cmp	r2, r3
 800d254:	d058      	beq.n	800d308 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d153      	bne.n	800d308 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d260:	4b2b      	ldr	r3, [pc, #172]	; (800d310 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	429a      	cmp	r2, r3
 800d268:	d10a      	bne.n	800d280 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	60bb      	str	r3, [r7, #8]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	2b00      	cmp	r3, #0
 800d292:	db04      	blt.n	800d29e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	f1c3 0207 	rsb	r2, r3, #7
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	6959      	ldr	r1, [r3, #20]
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4a19      	ldr	r2, [pc, #100]	; (800d314 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d2ae:	4413      	add	r3, r2
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	d129      	bne.n	800d308 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fa54 	bl	800b766 <uxListRemove>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10a      	bne.n	800d2da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ce:	43da      	mvns	r2, r3
 800d2d0:	4b11      	ldr	r3, [pc, #68]	; (800d318 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	4a10      	ldr	r2, [pc, #64]	; (800d318 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	2201      	movs	r2, #1
 800d2e0:	409a      	lsls	r2, r3
 800d2e2:	4b0d      	ldr	r3, [pc, #52]	; (800d318 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	4a0b      	ldr	r2, [pc, #44]	; (800d318 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2ea:	6013      	str	r3, [r2, #0]
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4a06      	ldr	r2, [pc, #24]	; (800d314 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d2fa:	441a      	add	r2, r3
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	3304      	adds	r3, #4
 800d300:	4619      	mov	r1, r3
 800d302:	4610      	mov	r0, r2
 800d304:	f7fe f9d2 	bl	800b6ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d308:	bf00      	nop
 800d30a:	3720      	adds	r7, #32
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	20000294 	.word	0x20000294
 800d314:	20000298 	.word	0x20000298
 800d318:	2000039c 	.word	0x2000039c

0800d31c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d31c:	b480      	push	{r7}
 800d31e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d320:	4b07      	ldr	r3, [pc, #28]	; (800d340 <pvTaskIncrementMutexHeldCount+0x24>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d004      	beq.n	800d332 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d328:	4b05      	ldr	r3, [pc, #20]	; (800d340 <pvTaskIncrementMutexHeldCount+0x24>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d32e:	3201      	adds	r2, #1
 800d330:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d332:	4b03      	ldr	r3, [pc, #12]	; (800d340 <pvTaskIncrementMutexHeldCount+0x24>)
 800d334:	681b      	ldr	r3, [r3, #0]
	}
 800d336:	4618      	mov	r0, r3
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	20000294 	.word	0x20000294

0800d344 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d34e:	4b29      	ldr	r3, [pc, #164]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d354:	4b28      	ldr	r3, [pc, #160]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3304      	adds	r3, #4
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fe fa03 	bl	800b766 <uxListRemove>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10b      	bne.n	800d37e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d366:	4b24      	ldr	r3, [pc, #144]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36c:	2201      	movs	r2, #1
 800d36e:	fa02 f303 	lsl.w	r3, r2, r3
 800d372:	43da      	mvns	r2, r3
 800d374:	4b21      	ldr	r3, [pc, #132]	; (800d3fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4013      	ands	r3, r2
 800d37a:	4a20      	ldr	r2, [pc, #128]	; (800d3fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d37c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d384:	d10a      	bne.n	800d39c <prvAddCurrentTaskToDelayedList+0x58>
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d007      	beq.n	800d39c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d38c:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3304      	adds	r3, #4
 800d392:	4619      	mov	r1, r3
 800d394:	481a      	ldr	r0, [pc, #104]	; (800d400 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d396:	f7fe f989 	bl	800b6ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d39a:	e026      	b.n	800d3ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3a4:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d209      	bcs.n	800d3c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3b4:	4b13      	ldr	r3, [pc, #76]	; (800d404 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	4b0f      	ldr	r3, [pc, #60]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	f7fe f997 	bl	800b6f4 <vListInsert>
}
 800d3c6:	e010      	b.n	800d3ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3c8:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	f7fe f98d 	bl	800b6f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3da:	4b0c      	ldr	r3, [pc, #48]	; (800d40c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d202      	bcs.n	800d3ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d3e4:	4a09      	ldr	r2, [pc, #36]	; (800d40c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	6013      	str	r3, [r2, #0]
}
 800d3ea:	bf00      	nop
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20000398 	.word	0x20000398
 800d3f8:	20000294 	.word	0x20000294
 800d3fc:	2000039c 	.word	0x2000039c
 800d400:	20000380 	.word	0x20000380
 800d404:	20000350 	.word	0x20000350
 800d408:	2000034c 	.word	0x2000034c
 800d40c:	200003b4 	.word	0x200003b4

0800d410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3b04      	subs	r3, #4
 800d420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3b04      	subs	r3, #4
 800d42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f023 0201 	bic.w	r2, r3, #1
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3b04      	subs	r3, #4
 800d43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d440:	4a0c      	ldr	r2, [pc, #48]	; (800d474 <pxPortInitialiseStack+0x64>)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3b14      	subs	r3, #20
 800d44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	3b04      	subs	r3, #4
 800d456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f06f 0202 	mvn.w	r2, #2
 800d45e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3b20      	subs	r3, #32
 800d464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d466:	68fb      	ldr	r3, [r7, #12]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3714      	adds	r7, #20
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr
 800d474:	0800d479 	.word	0x0800d479

0800d478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d482:	4b12      	ldr	r3, [pc, #72]	; (800d4cc <prvTaskExitError+0x54>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48a:	d00a      	beq.n	800d4a2 <prvTaskExitError+0x2a>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	60fb      	str	r3, [r7, #12]
}
 800d49e:	bf00      	nop
 800d4a0:	e7fe      	b.n	800d4a0 <prvTaskExitError+0x28>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	60bb      	str	r3, [r7, #8]
}
 800d4b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4b6:	bf00      	nop
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0fc      	beq.n	800d4b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4be:	bf00      	nop
 800d4c0:	bf00      	nop
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	20000010 	.word	0x20000010

0800d4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <pxCurrentTCBConst2>)
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	6808      	ldr	r0, [r1, #0]
 800d4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	f380 8809 	msr	PSP, r0
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f380 8811 	msr	BASEPRI, r0
 800d4ea:	4770      	bx	lr
 800d4ec:	f3af 8000 	nop.w

0800d4f0 <pxCurrentTCBConst2>:
 800d4f0:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4f8:	4808      	ldr	r0, [pc, #32]	; (800d51c <prvPortStartFirstTask+0x24>)
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	6800      	ldr	r0, [r0, #0]
 800d4fe:	f380 8808 	msr	MSP, r0
 800d502:	f04f 0000 	mov.w	r0, #0
 800d506:	f380 8814 	msr	CONTROL, r0
 800d50a:	b662      	cpsie	i
 800d50c:	b661      	cpsie	f
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	df00      	svc	0
 800d518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d51a:	bf00      	nop
 800d51c:	e000ed08 	.word	0xe000ed08

0800d520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d526:	4b46      	ldr	r3, [pc, #280]	; (800d640 <xPortStartScheduler+0x120>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a46      	ldr	r2, [pc, #280]	; (800d644 <xPortStartScheduler+0x124>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d10a      	bne.n	800d546 <xPortStartScheduler+0x26>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	613b      	str	r3, [r7, #16]
}
 800d542:	bf00      	nop
 800d544:	e7fe      	b.n	800d544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d546:	4b3e      	ldr	r3, [pc, #248]	; (800d640 <xPortStartScheduler+0x120>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a3f      	ldr	r2, [pc, #252]	; (800d648 <xPortStartScheduler+0x128>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d10a      	bne.n	800d566 <xPortStartScheduler+0x46>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	60fb      	str	r3, [r7, #12]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d566:	4b39      	ldr	r3, [pc, #228]	; (800d64c <xPortStartScheduler+0x12c>)
 800d568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	22ff      	movs	r2, #255	; 0xff
 800d576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d580:	78fb      	ldrb	r3, [r7, #3]
 800d582:	b2db      	uxtb	r3, r3
 800d584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	4b31      	ldr	r3, [pc, #196]	; (800d650 <xPortStartScheduler+0x130>)
 800d58c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d58e:	4b31      	ldr	r3, [pc, #196]	; (800d654 <xPortStartScheduler+0x134>)
 800d590:	2207      	movs	r2, #7
 800d592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d594:	e009      	b.n	800d5aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d596:	4b2f      	ldr	r3, [pc, #188]	; (800d654 <xPortStartScheduler+0x134>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	4a2d      	ldr	r2, [pc, #180]	; (800d654 <xPortStartScheduler+0x134>)
 800d59e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5b2:	2b80      	cmp	r3, #128	; 0x80
 800d5b4:	d0ef      	beq.n	800d596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5b6:	4b27      	ldr	r3, [pc, #156]	; (800d654 <xPortStartScheduler+0x134>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f1c3 0307 	rsb	r3, r3, #7
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	d00a      	beq.n	800d5d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60bb      	str	r3, [r7, #8]
}
 800d5d4:	bf00      	nop
 800d5d6:	e7fe      	b.n	800d5d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5d8:	4b1e      	ldr	r3, [pc, #120]	; (800d654 <xPortStartScheduler+0x134>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	021b      	lsls	r3, r3, #8
 800d5de:	4a1d      	ldr	r2, [pc, #116]	; (800d654 <xPortStartScheduler+0x134>)
 800d5e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5e2:	4b1c      	ldr	r3, [pc, #112]	; (800d654 <xPortStartScheduler+0x134>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5ea:	4a1a      	ldr	r2, [pc, #104]	; (800d654 <xPortStartScheduler+0x134>)
 800d5ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5f6:	4b18      	ldr	r3, [pc, #96]	; (800d658 <xPortStartScheduler+0x138>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a17      	ldr	r2, [pc, #92]	; (800d658 <xPortStartScheduler+0x138>)
 800d5fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d602:	4b15      	ldr	r3, [pc, #84]	; (800d658 <xPortStartScheduler+0x138>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a14      	ldr	r2, [pc, #80]	; (800d658 <xPortStartScheduler+0x138>)
 800d608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d60c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d60e:	f000 f8dd 	bl	800d7cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d612:	4b12      	ldr	r3, [pc, #72]	; (800d65c <xPortStartScheduler+0x13c>)
 800d614:	2200      	movs	r2, #0
 800d616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d618:	f000 f8fc 	bl	800d814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d61c:	4b10      	ldr	r3, [pc, #64]	; (800d660 <xPortStartScheduler+0x140>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a0f      	ldr	r2, [pc, #60]	; (800d660 <xPortStartScheduler+0x140>)
 800d622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d628:	f7ff ff66 	bl	800d4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d62c:	f7ff fa92 	bl	800cb54 <vTaskSwitchContext>
	prvTaskExitError();
 800d630:	f7ff ff22 	bl	800d478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	e000ed00 	.word	0xe000ed00
 800d644:	410fc271 	.word	0x410fc271
 800d648:	410fc270 	.word	0x410fc270
 800d64c:	e000e400 	.word	0xe000e400
 800d650:	200003c0 	.word	0x200003c0
 800d654:	200003c4 	.word	0x200003c4
 800d658:	e000ed20 	.word	0xe000ed20
 800d65c:	20000010 	.word	0x20000010
 800d660:	e000ef34 	.word	0xe000ef34

0800d664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	607b      	str	r3, [r7, #4]
}
 800d67c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d67e:	4b0f      	ldr	r3, [pc, #60]	; (800d6bc <vPortEnterCritical+0x58>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	3301      	adds	r3, #1
 800d684:	4a0d      	ldr	r2, [pc, #52]	; (800d6bc <vPortEnterCritical+0x58>)
 800d686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d688:	4b0c      	ldr	r3, [pc, #48]	; (800d6bc <vPortEnterCritical+0x58>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d10f      	bne.n	800d6b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d690:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <vPortEnterCritical+0x5c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00a      	beq.n	800d6b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	603b      	str	r3, [r7, #0]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <vPortEnterCritical+0x4a>
	}
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	20000010 	.word	0x20000010
 800d6c0:	e000ed04 	.word	0xe000ed04

0800d6c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d6ca:	4b12      	ldr	r3, [pc, #72]	; (800d714 <vPortExitCritical+0x50>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10a      	bne.n	800d6e8 <vPortExitCritical+0x24>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	607b      	str	r3, [r7, #4]
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <vPortExitCritical+0x50>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	4a09      	ldr	r2, [pc, #36]	; (800d714 <vPortExitCritical+0x50>)
 800d6f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6f2:	4b08      	ldr	r3, [pc, #32]	; (800d714 <vPortExitCritical+0x50>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d105      	bne.n	800d706 <vPortExitCritical+0x42>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	f383 8811 	msr	BASEPRI, r3
}
 800d704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d706:	bf00      	nop
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	20000010 	.word	0x20000010
	...

0800d720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d720:	f3ef 8009 	mrs	r0, PSP
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	4b15      	ldr	r3, [pc, #84]	; (800d780 <pxCurrentTCBConst>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	f01e 0f10 	tst.w	lr, #16
 800d730:	bf08      	it	eq
 800d732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73a:	6010      	str	r0, [r2, #0]
 800d73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d744:	f380 8811 	msr	BASEPRI, r0
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f7ff fa00 	bl	800cb54 <vTaskSwitchContext>
 800d754:	f04f 0000 	mov.w	r0, #0
 800d758:	f380 8811 	msr	BASEPRI, r0
 800d75c:	bc09      	pop	{r0, r3}
 800d75e:	6819      	ldr	r1, [r3, #0]
 800d760:	6808      	ldr	r0, [r1, #0]
 800d762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d766:	f01e 0f10 	tst.w	lr, #16
 800d76a:	bf08      	it	eq
 800d76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d770:	f380 8809 	msr	PSP, r0
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w

0800d780 <pxCurrentTCBConst>:
 800d780:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop

0800d788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	607b      	str	r3, [r7, #4]
}
 800d7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7a2:	f7ff f91f 	bl	800c9e4 <xTaskIncrementTick>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d003      	beq.n	800d7b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7ac:	4b06      	ldr	r3, [pc, #24]	; (800d7c8 <SysTick_Handler+0x40>)
 800d7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	f383 8811 	msr	BASEPRI, r3
}
 800d7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	e000ed04 	.word	0xe000ed04

0800d7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <vPortSetupTimerInterrupt+0x34>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7d6:	4b0b      	ldr	r3, [pc, #44]	; (800d804 <vPortSetupTimerInterrupt+0x38>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <vPortSetupTimerInterrupt+0x3c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a0a      	ldr	r2, [pc, #40]	; (800d80c <vPortSetupTimerInterrupt+0x40>)
 800d7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e6:	099b      	lsrs	r3, r3, #6
 800d7e8:	4a09      	ldr	r2, [pc, #36]	; (800d810 <vPortSetupTimerInterrupt+0x44>)
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7ee:	4b04      	ldr	r3, [pc, #16]	; (800d800 <vPortSetupTimerInterrupt+0x34>)
 800d7f0:	2207      	movs	r2, #7
 800d7f2:	601a      	str	r2, [r3, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	e000e010 	.word	0xe000e010
 800d804:	e000e018 	.word	0xe000e018
 800d808:	20000000 	.word	0x20000000
 800d80c:	10624dd3 	.word	0x10624dd3
 800d810:	e000e014 	.word	0xe000e014

0800d814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d824 <vPortEnableVFP+0x10>
 800d818:	6801      	ldr	r1, [r0, #0]
 800d81a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d81e:	6001      	str	r1, [r0, #0]
 800d820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d822:	bf00      	nop
 800d824:	e000ed88 	.word	0xe000ed88

0800d828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d82e:	f3ef 8305 	mrs	r3, IPSR
 800d832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b0f      	cmp	r3, #15
 800d838:	d914      	bls.n	800d864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d83a:	4a17      	ldr	r2, [pc, #92]	; (800d898 <vPortValidateInterruptPriority+0x70>)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	4413      	add	r3, r2
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d844:	4b15      	ldr	r3, [pc, #84]	; (800d89c <vPortValidateInterruptPriority+0x74>)
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	7afa      	ldrb	r2, [r7, #11]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d20a      	bcs.n	800d864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	607b      	str	r3, [r7, #4]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <vPortValidateInterruptPriority+0x78>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d86c:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <vPortValidateInterruptPriority+0x7c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	429a      	cmp	r2, r3
 800d872:	d90a      	bls.n	800d88a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	603b      	str	r3, [r7, #0]
}
 800d886:	bf00      	nop
 800d888:	e7fe      	b.n	800d888 <vPortValidateInterruptPriority+0x60>
	}
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	e000e3f0 	.word	0xe000e3f0
 800d89c:	200003c0 	.word	0x200003c0
 800d8a0:	e000ed0c 	.word	0xe000ed0c
 800d8a4:	200003c4 	.word	0x200003c4

0800d8a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b08a      	sub	sp, #40	; 0x28
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8b4:	f7fe ffec 	bl	800c890 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8b8:	4b5b      	ldr	r3, [pc, #364]	; (800da28 <pvPortMalloc+0x180>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8c0:	f000 f920 	bl	800db04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8c4:	4b59      	ldr	r3, [pc, #356]	; (800da2c <pvPortMalloc+0x184>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f040 8093 	bne.w	800d9f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d01d      	beq.n	800d914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d8d8:	2208      	movs	r2, #8
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4413      	add	r3, r2
 800d8de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f003 0307 	and.w	r3, r3, #7
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d014      	beq.n	800d914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f023 0307 	bic.w	r3, r3, #7
 800d8f0:	3308      	adds	r3, #8
 800d8f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00a      	beq.n	800d914 <pvPortMalloc+0x6c>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	617b      	str	r3, [r7, #20]
}
 800d910:	bf00      	nop
 800d912:	e7fe      	b.n	800d912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d06e      	beq.n	800d9f8 <pvPortMalloc+0x150>
 800d91a:	4b45      	ldr	r3, [pc, #276]	; (800da30 <pvPortMalloc+0x188>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	429a      	cmp	r2, r3
 800d922:	d869      	bhi.n	800d9f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d924:	4b43      	ldr	r3, [pc, #268]	; (800da34 <pvPortMalloc+0x18c>)
 800d926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d928:	4b42      	ldr	r3, [pc, #264]	; (800da34 <pvPortMalloc+0x18c>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d92e:	e004      	b.n	800d93a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	429a      	cmp	r2, r3
 800d942:	d903      	bls.n	800d94c <pvPortMalloc+0xa4>
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1f1      	bne.n	800d930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d94c:	4b36      	ldr	r3, [pc, #216]	; (800da28 <pvPortMalloc+0x180>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d952:	429a      	cmp	r2, r3
 800d954:	d050      	beq.n	800d9f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2208      	movs	r2, #8
 800d95c:	4413      	add	r3, r2
 800d95e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	1ad2      	subs	r2, r2, r3
 800d970:	2308      	movs	r3, #8
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	429a      	cmp	r2, r3
 800d976:	d91f      	bls.n	800d9b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4413      	add	r3, r2
 800d97e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	f003 0307 	and.w	r3, r3, #7
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	613b      	str	r3, [r7, #16]
}
 800d99c:	bf00      	nop
 800d99e:	e7fe      	b.n	800d99e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	1ad2      	subs	r2, r2, r3
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9b2:	69b8      	ldr	r0, [r7, #24]
 800d9b4:	f000 f908 	bl	800dbc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9b8:	4b1d      	ldr	r3, [pc, #116]	; (800da30 <pvPortMalloc+0x188>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	4a1b      	ldr	r2, [pc, #108]	; (800da30 <pvPortMalloc+0x188>)
 800d9c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9c6:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <pvPortMalloc+0x188>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	4b1b      	ldr	r3, [pc, #108]	; (800da38 <pvPortMalloc+0x190>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d203      	bcs.n	800d9da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9d2:	4b17      	ldr	r3, [pc, #92]	; (800da30 <pvPortMalloc+0x188>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a18      	ldr	r2, [pc, #96]	; (800da38 <pvPortMalloc+0x190>)
 800d9d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	4b13      	ldr	r3, [pc, #76]	; (800da2c <pvPortMalloc+0x184>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d9ee:	4b13      	ldr	r3, [pc, #76]	; (800da3c <pvPortMalloc+0x194>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	4a11      	ldr	r2, [pc, #68]	; (800da3c <pvPortMalloc+0x194>)
 800d9f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9f8:	f7fe ff58 	bl	800c8ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <pvPortMalloc+0x174>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	60fb      	str	r3, [r7, #12]
}
 800da18:	bf00      	nop
 800da1a:	e7fe      	b.n	800da1a <pvPortMalloc+0x172>
	return pvReturn;
 800da1c:	69fb      	ldr	r3, [r7, #28]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3728      	adds	r7, #40	; 0x28
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	20003fd0 	.word	0x20003fd0
 800da2c:	20003fe4 	.word	0x20003fe4
 800da30:	20003fd4 	.word	0x20003fd4
 800da34:	20003fc8 	.word	0x20003fc8
 800da38:	20003fd8 	.word	0x20003fd8
 800da3c:	20003fdc 	.word	0x20003fdc

0800da40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d04d      	beq.n	800daee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da52:	2308      	movs	r3, #8
 800da54:	425b      	negs	r3, r3
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	4413      	add	r3, r2
 800da5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	685a      	ldr	r2, [r3, #4]
 800da64:	4b24      	ldr	r3, [pc, #144]	; (800daf8 <vPortFree+0xb8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4013      	ands	r3, r2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <vPortFree+0x44>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	60fb      	str	r3, [r7, #12]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00a      	beq.n	800daa2 <vPortFree+0x62>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	60bb      	str	r3, [r7, #8]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	4b14      	ldr	r3, [pc, #80]	; (800daf8 <vPortFree+0xb8>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4013      	ands	r3, r2
 800daac:	2b00      	cmp	r3, #0
 800daae:	d01e      	beq.n	800daee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d11a      	bne.n	800daee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	4b0e      	ldr	r3, [pc, #56]	; (800daf8 <vPortFree+0xb8>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	43db      	mvns	r3, r3
 800dac2:	401a      	ands	r2, r3
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dac8:	f7fe fee2 	bl	800c890 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <vPortFree+0xbc>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4413      	add	r3, r2
 800dad6:	4a09      	ldr	r2, [pc, #36]	; (800dafc <vPortFree+0xbc>)
 800dad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dada:	6938      	ldr	r0, [r7, #16]
 800dadc:	f000 f874 	bl	800dbc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dae0:	4b07      	ldr	r3, [pc, #28]	; (800db00 <vPortFree+0xc0>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3301      	adds	r3, #1
 800dae6:	4a06      	ldr	r2, [pc, #24]	; (800db00 <vPortFree+0xc0>)
 800dae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800daea:	f7fe fedf 	bl	800c8ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800daee:	bf00      	nop
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20003fe4 	.word	0x20003fe4
 800dafc:	20003fd4 	.word	0x20003fd4
 800db00:	20003fe0 	.word	0x20003fe0

0800db04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800db0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db10:	4b27      	ldr	r3, [pc, #156]	; (800dbb0 <prvHeapInit+0xac>)
 800db12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f003 0307 	and.w	r3, r3, #7
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00c      	beq.n	800db38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	3307      	adds	r3, #7
 800db22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f023 0307 	bic.w	r3, r3, #7
 800db2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	4a1f      	ldr	r2, [pc, #124]	; (800dbb0 <prvHeapInit+0xac>)
 800db34:	4413      	add	r3, r2
 800db36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db3c:	4a1d      	ldr	r2, [pc, #116]	; (800dbb4 <prvHeapInit+0xb0>)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db42:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <prvHeapInit+0xb0>)
 800db44:	2200      	movs	r2, #0
 800db46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	4413      	add	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db50:	2208      	movs	r2, #8
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	1a9b      	subs	r3, r3, r2
 800db56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f023 0307 	bic.w	r3, r3, #7
 800db5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4a15      	ldr	r2, [pc, #84]	; (800dbb8 <prvHeapInit+0xb4>)
 800db64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db66:	4b14      	ldr	r3, [pc, #80]	; (800dbb8 <prvHeapInit+0xb4>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2200      	movs	r2, #0
 800db6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db6e:	4b12      	ldr	r3, [pc, #72]	; (800dbb8 <prvHeapInit+0xb4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	1ad2      	subs	r2, r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db84:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <prvHeapInit+0xb4>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	4a0a      	ldr	r2, [pc, #40]	; (800dbbc <prvHeapInit+0xb8>)
 800db92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	4a09      	ldr	r2, [pc, #36]	; (800dbc0 <prvHeapInit+0xbc>)
 800db9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db9c:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <prvHeapInit+0xc0>)
 800db9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dba2:	601a      	str	r2, [r3, #0]
}
 800dba4:	bf00      	nop
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	200003c8 	.word	0x200003c8
 800dbb4:	20003fc8 	.word	0x20003fc8
 800dbb8:	20003fd0 	.word	0x20003fd0
 800dbbc:	20003fd8 	.word	0x20003fd8
 800dbc0:	20003fd4 	.word	0x20003fd4
 800dbc4:	20003fe4 	.word	0x20003fe4

0800dbc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbd0:	4b28      	ldr	r3, [pc, #160]	; (800dc74 <prvInsertBlockIntoFreeList+0xac>)
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	e002      	b.n	800dbdc <prvInsertBlockIntoFreeList+0x14>
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d8f7      	bhi.n	800dbd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d108      	bne.n	800dc0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	441a      	add	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	441a      	add	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d118      	bne.n	800dc50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	4b15      	ldr	r3, [pc, #84]	; (800dc78 <prvInsertBlockIntoFreeList+0xb0>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d00d      	beq.n	800dc46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	441a      	add	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	e008      	b.n	800dc58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc46:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <prvInsertBlockIntoFreeList+0xb0>)
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	e003      	b.n	800dc58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d002      	beq.n	800dc66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc66:	bf00      	nop
 800dc68:	3714      	adds	r7, #20
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20003fc8 	.word	0x20003fc8
 800dc78:	20003fd0 	.word	0x20003fd0

0800dc7c <__libc_init_array>:
 800dc7c:	b570      	push	{r4, r5, r6, lr}
 800dc7e:	4d0d      	ldr	r5, [pc, #52]	; (800dcb4 <__libc_init_array+0x38>)
 800dc80:	4c0d      	ldr	r4, [pc, #52]	; (800dcb8 <__libc_init_array+0x3c>)
 800dc82:	1b64      	subs	r4, r4, r5
 800dc84:	10a4      	asrs	r4, r4, #2
 800dc86:	2600      	movs	r6, #0
 800dc88:	42a6      	cmp	r6, r4
 800dc8a:	d109      	bne.n	800dca0 <__libc_init_array+0x24>
 800dc8c:	4d0b      	ldr	r5, [pc, #44]	; (800dcbc <__libc_init_array+0x40>)
 800dc8e:	4c0c      	ldr	r4, [pc, #48]	; (800dcc0 <__libc_init_array+0x44>)
 800dc90:	f000 f82e 	bl	800dcf0 <_init>
 800dc94:	1b64      	subs	r4, r4, r5
 800dc96:	10a4      	asrs	r4, r4, #2
 800dc98:	2600      	movs	r6, #0
 800dc9a:	42a6      	cmp	r6, r4
 800dc9c:	d105      	bne.n	800dcaa <__libc_init_array+0x2e>
 800dc9e:	bd70      	pop	{r4, r5, r6, pc}
 800dca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dca4:	4798      	blx	r3
 800dca6:	3601      	adds	r6, #1
 800dca8:	e7ee      	b.n	800dc88 <__libc_init_array+0xc>
 800dcaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcae:	4798      	blx	r3
 800dcb0:	3601      	adds	r6, #1
 800dcb2:	e7f2      	b.n	800dc9a <__libc_init_array+0x1e>
 800dcb4:	0800de00 	.word	0x0800de00
 800dcb8:	0800de00 	.word	0x0800de00
 800dcbc:	0800de00 	.word	0x0800de00
 800dcc0:	0800de04 	.word	0x0800de04

0800dcc4 <memcpy>:
 800dcc4:	440a      	add	r2, r1
 800dcc6:	4291      	cmp	r1, r2
 800dcc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dccc:	d100      	bne.n	800dcd0 <memcpy+0xc>
 800dcce:	4770      	bx	lr
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	d1f9      	bne.n	800dcd2 <memcpy+0xe>
 800dcde:	bd10      	pop	{r4, pc}

0800dce0 <memset>:
 800dce0:	4402      	add	r2, r0
 800dce2:	4603      	mov	r3, r0
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d100      	bne.n	800dcea <memset+0xa>
 800dce8:	4770      	bx	lr
 800dcea:	f803 1b01 	strb.w	r1, [r3], #1
 800dcee:	e7f9      	b.n	800dce4 <memset+0x4>

0800dcf0 <_init>:
 800dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcf2:	bf00      	nop
 800dcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf6:	bc08      	pop	{r3}
 800dcf8:	469e      	mov	lr, r3
 800dcfa:	4770      	bx	lr

0800dcfc <_fini>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	bf00      	nop
 800dd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd02:	bc08      	pop	{r3}
 800dd04:	469e      	mov	lr, r3
 800dd06:	4770      	bx	lr
