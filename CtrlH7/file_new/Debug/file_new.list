
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d848  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800dae8  0800dae8  0001dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dbd8  0800dbd8  0001dbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dbe0  0800dbe0  0001dbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dbe4  0800dbe4  0001dbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800dbe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004920  20000014  0800dbfc  00020014  2**2
                  ALLOC
  8 .RAM_D1       00000118  24000000  0800dbfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000604  20004934  20004934  00034934  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cac1  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a64  00000000  00000000  0005cc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a8  00000000  00000000  00061670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001630  00000000  00000000  00062e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000395ee  00000000  00000000  00064448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dbcc  00000000  00000000  0009da36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c1ad  00000000  00000000  000bb602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002277af  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006290  00000000  00000000  00227804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dad0 	.word	0x0800dad0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800dad0 	.word	0x0800dad0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
/**
 * @brief 捕获上位机向下位机发送的指令
 * @return DownDataDef 上位机向下位机发送的指令
 */
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.HeadOfData = (DownDataReceive[0]);
 80005e0:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <CaptureDownData+0x140>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	733b      	strb	r3, [r7, #12]
	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <CaptureDownData+0x140>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <CaptureDownData+0x140>)
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	81fb      	strh	r3, [r7, #14]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <CaptureDownData+0x140>)
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b44      	ldr	r3, [pc, #272]	; (8000718 <CaptureDownData+0x140>)
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	823b      	strh	r3, [r7, #16]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 8000612:	4b41      	ldr	r3, [pc, #260]	; (8000718 <CaptureDownData+0x140>)
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <CaptureDownData+0x140>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	b29b      	uxth	r3, r3
 8000626:	827b      	strh	r3, [r7, #18]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <CaptureDownData+0x140>)
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	4a3a      	ldr	r2, [pc, #232]	; (8000718 <CaptureDownData+0x140>)
 8000630:	7a12      	ldrb	r2, [r2, #8]
 8000632:	4313      	orrs	r3, r2
 8000634:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <CaptureDownData+0x140>)
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	4a36      	ldr	r2, [pc, #216]	; (8000718 <CaptureDownData+0x140>)
 800063e:	7a92      	ldrb	r2, [r2, #10]
 8000640:	4313      	orrs	r3, r2
 8000642:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <CaptureDownData+0x140>)
 8000646:	7adb      	ldrb	r3, [r3, #11]
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <CaptureDownData+0x140>)
 800064c:	7b12      	ldrb	r2, [r2, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <CaptureDownData+0x140>)
 8000654:	7b5b      	ldrb	r3, [r3, #13]
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <CaptureDownData+0x140>)
 800065a:	7b92      	ldrb	r2, [r2, #14]
 800065c:	4313      	orrs	r3, r2
 800065e:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <CaptureDownData+0x140>)
 8000662:	7bdb      	ldrb	r3, [r3, #15]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <CaptureDownData+0x140>)
 8000668:	7c12      	ldrb	r2, [r2, #16]
 800066a:	4313      	orrs	r3, r2
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <CaptureDownData+0x140>)
 8000670:	7c5b      	ldrb	r3, [r3, #17]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <CaptureDownData+0x140>)
 8000676:	7c92      	ldrb	r2, [r2, #18]
 8000678:	4313      	orrs	r3, r2
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <CaptureDownData+0x140>)
 800067e:	7cdb      	ldrb	r3, [r3, #19]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <CaptureDownData+0x140>)
 8000684:	7d12      	ldrb	r2, [r2, #20]
 8000686:	4313      	orrs	r3, r2
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <CaptureDownData+0x140>)
 800068c:	7d5b      	ldrb	r3, [r3, #21]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <CaptureDownData+0x140>)
 8000692:	7d92      	ldrb	r2, [r2, #22]
 8000694:	4313      	orrs	r3, r2
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <CaptureDownData+0x140>)
 800069a:	7ddb      	ldrb	r3, [r3, #23]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <CaptureDownData+0x140>)
 80006a0:	7e12      	ldrb	r2, [r2, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <CaptureDownData+0x140>)
 80006a8:	7e5b      	ldrb	r3, [r3, #25]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <CaptureDownData+0x140>)
 80006ae:	7e92      	ldrb	r2, [r2, #26]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CtrlSide
	CaptureData.Mode = (DownDataReceive[27]); //方便数据下传与中途获取
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <CaptureDownData+0x140>)
 80006b6:	7edb      	ldrb	r3, [r3, #27]
 80006b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27]);
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <CaptureDownData+0x140>)
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
#else
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
#endif
#endif
	CaptureData.IdTest = IdTest(DownDataReceive, 0, 44, 28);
 80006c4:	231c      	movs	r3, #28
 80006c6:	222c      	movs	r2, #44	; 0x2c
 80006c8:	2100      	movs	r1, #0
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <CaptureDownData+0x140>)
 80006cc:	f000 faf4 	bl	8000cb8 <IdTest>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CaptureData.EndOfData = (DownDataReceive[29]);
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <CaptureDownData+0x140>)
 80006d8:	7f5b      	ldrb	r3, [r3, #29]
 80006da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <CaptureDownData+0x144>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <CaptureDownData+0x144>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f042 0210 	orr.w	r2, r2, #16
 80006ec:	601a      	str	r2, [r3, #0]
//	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, 31);
 80006ee:	221f      	movs	r2, #31
 80006f0:	4909      	ldr	r1, [pc, #36]	; (8000718 <CaptureDownData+0x140>)
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <CaptureDownData+0x144>)
 80006f4:	f009 f866 	bl	80097c4 <HAL_UART_Receive_DMA>
	return CaptureData;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	461d      	mov	r5, r3
 80006fc:	f107 040c 	add.w	r4, r7, #12
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	602b      	str	r3, [r5, #0]
}
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	3740      	adds	r7, #64	; 0x40
 8000714:	46bd      	mov	sp, r7
 8000716:	bdb0      	pop	{r4, r5, r7, pc}
 8000718:	24000000 	.word	0x24000000
 800071c:	20004490 	.word	0x20004490

08000720 <SendUpData>:
/**
 * @brief 向上位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendUpData(UpDataDef SendData)
{
 8000720:	b084      	sub	sp, #16
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
 8000726:	f107 0c08 	add.w	ip, r7, #8
 800072a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 800072e:	4b80      	ldr	r3, [pc, #512]	; (8000930 <SendUpData+0x210>)
 8000730:	2225      	movs	r2, #37	; 0x25
 8000732:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = ((SendData.WaterDetect) | (SendData.CabinNum));
 8000734:	7a7a      	ldrb	r2, [r7, #9]
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	4313      	orrs	r3, r2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b7c      	ldr	r3, [pc, #496]	; (8000930 <SendUpData+0x210>)
 800073e:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature >> 8;
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b79      	ldr	r3, [pc, #484]	; (8000930 <SendUpData+0x210>)
 800074a:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature;
 800074c:	897b      	ldrh	r3, [r7, #10]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b77      	ldr	r3, [pc, #476]	; (8000930 <SendUpData+0x210>)
 8000752:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro >> 16;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <SendUpData+0x210>)
 800075c:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 24;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	0e1b      	lsrs	r3, r3, #24
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b72      	ldr	r3, [pc, #456]	; (8000930 <SendUpData+0x210>)
 8000766:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b70      	ldr	r3, [pc, #448]	; (8000930 <SendUpData+0x210>)
 800076e:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro >> 8;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b6e      	ldr	r3, [pc, #440]	; (8000930 <SendUpData+0x210>)
 8000778:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 800077a:	8a3b      	ldrh	r3, [r7, #16]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <SendUpData+0x210>)
 8000780:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000782:	8a3b      	ldrh	r3, [r7, #16]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b69      	ldr	r3, [pc, #420]	; (8000930 <SendUpData+0x210>)
 800078c:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0]; //DEBUG:数据位反转
 800078e:	8a7b      	ldrh	r3, [r7, #18]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b67      	ldr	r3, [pc, #412]	; (8000930 <SendUpData+0x210>)
 8000794:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0] >> 8;
 8000796:	8a7b      	ldrh	r3, [r7, #18]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	b29b      	uxth	r3, r3
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b64      	ldr	r3, [pc, #400]	; (8000930 <SendUpData+0x210>)
 80007a0:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1];
 80007a2:	8abb      	ldrh	r3, [r7, #20]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b62      	ldr	r3, [pc, #392]	; (8000930 <SendUpData+0x210>)
 80007a8:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1] >> 8;
 80007aa:	8abb      	ldrh	r3, [r7, #20]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b5f      	ldr	r3, [pc, #380]	; (8000930 <SendUpData+0x210>)
 80007b4:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2];
 80007b6:	8afb      	ldrh	r3, [r7, #22]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <SendUpData+0x210>)
 80007bc:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2] >> 8;
 80007be:	8afb      	ldrh	r3, [r7, #22]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <SendUpData+0x210>)
 80007c8:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0];
 80007ca:	8b3b      	ldrh	r3, [r7, #24]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b58      	ldr	r3, [pc, #352]	; (8000930 <SendUpData+0x210>)
 80007d0:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0] >> 8;
 80007d2:	8b3b      	ldrh	r3, [r7, #24]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b55      	ldr	r3, [pc, #340]	; (8000930 <SendUpData+0x210>)
 80007dc:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1];
 80007de:	8b7b      	ldrh	r3, [r7, #26]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b53      	ldr	r3, [pc, #332]	; (8000930 <SendUpData+0x210>)
 80007e4:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1] >> 8;
 80007e6:	8b7b      	ldrh	r3, [r7, #26]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <SendUpData+0x210>)
 80007f0:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2];
 80007f2:	8bbb      	ldrh	r3, [r7, #28]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <SendUpData+0x210>)
 80007f8:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2] >> 8;
 80007fa:	8bbb      	ldrh	r3, [r7, #28]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <SendUpData+0x210>)
 8000804:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0];
 8000806:	8bfb      	ldrh	r3, [r7, #30]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b49      	ldr	r3, [pc, #292]	; (8000930 <SendUpData+0x210>)
 800080c:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0] >> 8;
 800080e:	8bfb      	ldrh	r3, [r7, #30]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b46      	ldr	r3, [pc, #280]	; (8000930 <SendUpData+0x210>)
 8000818:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1];
 800081a:	8c3b      	ldrh	r3, [r7, #32]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <SendUpData+0x210>)
 8000820:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1] >> 8;
 8000822:	8c3b      	ldrh	r3, [r7, #32]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <SendUpData+0x210>)
 800082c:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2];
 800082e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <SendUpData+0x210>)
 8000834:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2] >> 8;
 8000836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <SendUpData+0x210>)
 8000840:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0];
 8000842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <SendUpData+0x210>)
 8000848:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0] >> 8;
 800084a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <SendUpData+0x210>)
 8000854:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1];
 8000856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <SendUpData+0x210>)
 800085c:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1] >> 8;
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <SendUpData+0x210>)
 8000868:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2];
 800086a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <SendUpData+0x210>)
 8000870:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2] >> 8;
 8000874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SendUpData+0x210>)
 800087e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.DepthToBottom >> 24;
 8000882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SendUpData+0x210>)
 800088a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.DepthToBottom >> 16;
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	0c1b      	lsrs	r3, r3, #16
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <SendUpData+0x210>)
 8000896:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.DepthToBottom >> 8;
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <SendUpData+0x210>)
 80008a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.DepthToBottom;
 80008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <SendUpData+0x210>)
 80008ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = SendData.Confidence >> 8;
 80008b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <SendUpData+0x210>)
 80008ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = SendData.Confidence;
 80008be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <SendUpData+0x210>)
 80008c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = SendData.WaterTemperature;
 80008c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <SendUpData+0x210>)
 80008ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	UpDataSend[41] = SendData.WaterTemperature >> 8;
 80008d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <SendUpData+0x210>)
 80008dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	UpDataSend[42] = SendData.WaterDepth; //BUG:E2 40
 80008e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <SendUpData+0x210>)
 80008e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	UpDataSend[43] = SendData.WaterDepth >> 8;
 80008ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <SendUpData+0x210>)
 80008f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	UpDataSend[44] = XorCaculate(UpDataSend, 38);
 80008f8:	2126      	movs	r1, #38	; 0x26
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <SendUpData+0x210>)
 80008fc:	f000 f9f0 	bl	8000ce0 <XorCaculate>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <SendUpData+0x210>)
 8000906:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	UpDataSend[45] = 0xff;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <SendUpData+0x210>)
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	UpDataSend[46] = 0xff;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SendUpData+0x210>)
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 800091a:	222f      	movs	r2, #47	; 0x2f
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <SendUpData+0x210>)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <SendUpData+0x214>)
 8000920:	f008 fed0 	bl	80096c4 <HAL_UART_Transmit_DMA>
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800092c:	b004      	add	sp, #16
 800092e:	4770      	bx	lr
 8000930:	24000070 	.word	0x24000070
 8000934:	20004490 	.word	0x20004490

08000938 <SendDownData>:
 * @brief 向下位机发送指令
 * @param  SendData         待发送的指令结构体
 * @note 已完成Debug
 */
void SendDownData(DownDataDef SendData)
{
 8000938:	b084      	sub	sp, #16
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
 800093e:	f107 0c08 	add.w	ip, r7, #8
 8000942:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	if ((SendData.HeadOfData == 0x25) && (SendData.EndOfData == 0x21))
//	{
	DownDataSend[0] = 0x25;
 8000946:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <SendDownData+0x138>)
 8000948:	2225      	movs	r2, #37	; 0x25
 800094a:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 800094c:	897b      	ldrh	r3, [r7, #10]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <SendDownData+0x138>)
 8000956:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 8000958:	897b      	ldrh	r3, [r7, #10]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <SendDownData+0x138>)
 800095e:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 8000960:	89bb      	ldrh	r3, [r7, #12]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <SendDownData+0x138>)
 800096a:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 800096c:	89bb      	ldrh	r3, [r7, #12]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <SendDownData+0x138>)
 8000972:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <SendDownData+0x138>)
 800097e:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <SendDownData+0x138>)
 8000986:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <SendDownData+0x138>)
 8000990:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <SendDownData+0x138>)
 8000998:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <SendDownData+0x138>)
 80009a2:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <SendDownData+0x138>)
 80009aa:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SendDownData+0x138>)
 80009b4:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <SendDownData+0x138>)
 80009bc:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <SendDownData+0x138>)
 80009c6:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SendDownData+0x138>)
 80009ce:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <SendDownData+0x138>)
 80009d8:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <SendDownData+0x138>)
 80009e0:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <SendDownData+0x138>)
 80009ea:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SendDownData+0x138>)
 80009f2:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <SendDownData+0x138>)
 80009fc:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <SendDownData+0x138>)
 8000a04:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <SendDownData+0x138>)
 8000a0e:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <SendDownData+0x138>)
 8000a16:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 8000a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1a:	0a1b      	lsrs	r3, r3, #8
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <SendDownData+0x138>)
 8000a20:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SendDownData+0x138>)
 8000a28:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SendDownData+0x138>)
 8000a32:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <SendDownData+0x138>)
 8000a3a:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = SendData.Relay; //直接下传数据
 8000a3c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <SendDownData+0x138>)
 8000a42:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000a44:	211c      	movs	r1, #28
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <SendDownData+0x138>)
 8000a48:	f000 f94a 	bl	8000ce0 <XorCaculate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <SendDownData+0x138>)
 8000a52:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SendDownData+0x138>)
 8000a56:	2221      	movs	r2, #33	; 0x21
 8000a58:	775a      	strb	r2, [r3, #29]
//	}
	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 8000a5a:	221e      	movs	r2, #30
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <SendDownData+0x138>)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <SendDownData+0x13c>)
 8000a60:	f008 fe30 	bl	80096c4 <HAL_UART_Transmit_DMA>
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr
 8000a70:	24000020 	.word	0x24000020
 8000a74:	200045ac 	.word	0x200045ac

08000a78 <CaptureUpData>:
/**
 * @brief 捕获下位向上位发送的数据
 * @return UpDataDef 下位机上传的数据结构体
 */
UpDataDef CaptureUpData(void)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;

	CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0b0000控制仓，0b0001==1电源仓
 8000a80:	4b8b      	ldr	r3, [pc, #556]	; (8000cb0 <CaptureUpData+0x238>)
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0010); //0b0000正常，0b0010==2漏水
 8000a8c:	4b88      	ldr	r3, [pc, #544]	; (8000cb0 <CaptureUpData+0x238>)
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[3] << 8) | UpDataReceive[2]);
 8000a98:	4b85      	ldr	r3, [pc, #532]	; (8000cb0 <CaptureUpData+0x238>)
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b83      	ldr	r3, [pc, #524]	; (8000cb0 <CaptureUpData+0x238>)
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 8000aae:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <CaptureUpData+0x238>)
 8000ab0:	79db      	ldrb	r3, [r3, #7]
 8000ab2:	061a      	lsls	r2, r3, #24
 8000ab4:	4b7e      	ldr	r3, [pc, #504]	; (8000cb0 <CaptureUpData+0x238>)
 8000ab6:	799b      	ldrb	r3, [r3, #6]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	431a      	orrs	r2, r3
			| (UpDataReceive[5] << 8) | UpDataReceive[4]);
 8000abc:	4b7c      	ldr	r3, [pc, #496]	; (8000cb0 <CaptureUpData+0x238>)
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	4a7a      	ldr	r2, [pc, #488]	; (8000cb0 <CaptureUpData+0x238>)
 8000ac6:	7912      	ldrb	r2, [r2, #4]
 8000ac8:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 8000aca:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[9] << 8) | UpDataReceive[8]);
 8000acc:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <CaptureUpData+0x238>)
 8000ace:	7a5b      	ldrb	r3, [r3, #9]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	4b76      	ldr	r3, [pc, #472]	; (8000cb0 <CaptureUpData+0x238>)
 8000ad6:	7a1b      	ldrb	r3, [r3, #8]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 8000ae2:	4b73      	ldr	r3, [pc, #460]	; (8000cb0 <CaptureUpData+0x238>)
 8000ae4:	7adb      	ldrb	r3, [r3, #11]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	4b71      	ldr	r3, [pc, #452]	; (8000cb0 <CaptureUpData+0x238>)
 8000aec:	7a9b      	ldrb	r3, [r3, #10]
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 8000af8:	4b6d      	ldr	r3, [pc, #436]	; (8000cb0 <CaptureUpData+0x238>)
 8000afa:	7b5b      	ldrb	r3, [r3, #13]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b6b      	ldr	r3, [pc, #428]	; (8000cb0 <CaptureUpData+0x238>)
 8000b02:	7b1b      	ldrb	r3, [r3, #12]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 8000b0e:	4b68      	ldr	r3, [pc, #416]	; (8000cb0 <CaptureUpData+0x238>)
 8000b10:	7bdb      	ldrb	r3, [r3, #15]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	4b66      	ldr	r3, [pc, #408]	; (8000cb0 <CaptureUpData+0x238>)
 8000b18:	7b9b      	ldrb	r3, [r3, #14]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000b24:	4b62      	ldr	r3, [pc, #392]	; (8000cb0 <CaptureUpData+0x238>)
 8000b26:	7c5b      	ldrb	r3, [r3, #17]
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	4b60      	ldr	r3, [pc, #384]	; (8000cb0 <CaptureUpData+0x238>)
 8000b2e:	7c1b      	ldrb	r3, [r3, #16]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 8000b3a:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <CaptureUpData+0x238>)
 8000b3c:	7cdb      	ldrb	r3, [r3, #19]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	4b5b      	ldr	r3, [pc, #364]	; (8000cb0 <CaptureUpData+0x238>)
 8000b44:	7c9b      	ldrb	r3, [r3, #18]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 8000b50:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <CaptureUpData+0x238>)
 8000b52:	7d5b      	ldrb	r3, [r3, #21]
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <CaptureUpData+0x238>)
 8000b5a:	7d1b      	ldrb	r3, [r3, #20]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000b66:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <CaptureUpData+0x238>)
 8000b68:	7ddb      	ldrb	r3, [r3, #23]
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b50      	ldr	r3, [pc, #320]	; (8000cb0 <CaptureUpData+0x238>)
 8000b70:	7d9b      	ldrb	r3, [r3, #22]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 8000b7c:	4b4c      	ldr	r3, [pc, #304]	; (8000cb0 <CaptureUpData+0x238>)
 8000b7e:	7e5b      	ldrb	r3, [r3, #25]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <CaptureUpData+0x238>)
 8000b86:	7e1b      	ldrb	r3, [r3, #24]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <CaptureUpData+0x238>)
 8000b94:	7edb      	ldrb	r3, [r3, #27]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <CaptureUpData+0x238>)
 8000b9c:	7e9b      	ldrb	r3, [r3, #26]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000ba8:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <CaptureUpData+0x238>)
 8000baa:	7f5b      	ldrb	r3, [r3, #29]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <CaptureUpData+0x238>)
 8000bb2:	7f1b      	ldrb	r3, [r3, #28]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <CaptureUpData+0x238>)
 8000bc0:	7fdb      	ldrb	r3, [r3, #31]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <CaptureUpData+0x238>)
 8000bc8:	7f9b      	ldrb	r3, [r3, #30]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <CaptureUpData+0x238>)
 8000bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <CaptureUpData+0x238>)
 8000be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <CaptureUpData+0x238>)
 8000bf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bf4:	061a      	lsls	r2, r3, #24
			| (UpDataReceive[36] << 16) | (UpDataReceive[35] << 8)
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <CaptureUpData+0x238>)
 8000bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bfc:	041b      	lsls	r3, r3, #16
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <CaptureUpData+0x238>)
 8000c02:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	4313      	orrs	r3, r2
			| UpDataReceive[34]);
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <CaptureUpData+0x238>)
 8000c0c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000c10:	4313      	orrs	r3, r2
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.Confidence = ((UpDataReceive[39] << 8) | UpDataReceive[38]);
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <CaptureUpData+0x238>)
 8000c16:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <CaptureUpData+0x238>)
 8000c20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	CaptureData.WaterTemperature =
			((UpDataReceive[40] << 8) | UpDataReceive[41]);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <CaptureUpData+0x238>)
 8000c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <CaptureUpData+0x238>)
 8000c3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 8000c46:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[42] << 8) | UpDataReceive[43]);
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <CaptureUpData+0x238>)
 8000c4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <CaptureUpData+0x238>)
 8000c54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1, 44, 28);
 8000c62:	231c      	movs	r3, #28
 8000c64:	222c      	movs	r2, #44	; 0x2c
 8000c66:	2101      	movs	r1, #1
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <CaptureUpData+0x238>)
 8000c6a:	f000 f825 	bl	8000cb8 <IdTest>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <CaptureUpData+0x23c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <CaptureUpData+0x23c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0210 	orr.w	r2, r2, #16
 8000c82:	601a      	str	r2, [r3, #0]
//	HAL_UART_Receive_DMA(&Down_UART, UpDataReceive, Down_UART_RXLen);
	HAL_UART_Receive_DMA(&Down_UART, UpDataReceive, 48);
 8000c84:	2230      	movs	r2, #48	; 0x30
 8000c86:	490a      	ldr	r1, [pc, #40]	; (8000cb0 <CaptureUpData+0x238>)
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <CaptureUpData+0x23c>)
 8000c8a:	f008 fd9b 	bl	80097c4 <HAL_UART_Receive_DMA>
	return CaptureData;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	461d      	mov	r5, r3
 8000c92:	f107 0408 	add.w	r4, r7, #8
 8000c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ca2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdb0      	pop	{r4, r5, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000040 	.word	0x24000040
 8000cb4:	200045ac 	.word	0x200045ac

08000cb8 <IdTest>:
 * @param  SendUpLength     上传数据长度
 * @param  SendDownLength   下传指令长度
 * @return u8 正确为1；错误为0，如果不开启奇偶校验默认为1
 */
static u8 IdTest(u8 *String, u8 Format, u8 SendUpLength, u8 SendDownLength)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	70fb      	strb	r3, [r7, #3]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70bb      	strb	r3, [r7, #2]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	707b      	strb	r3, [r7, #1]
			return 0;
		}
	}
	return 1;
#else
	return 1; //不开启奇偶校验时默认成功
 8000cd2:	2301      	movs	r3, #1
#endif
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <XorCaculate>:
 * @param  CacString        待校验数据
 * @param  CacStringSize    待校验数据长度
 * @return u8 异或运算结果，如果不开启数据校验则默认返回0
 */
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	{
		CacResult ^= CacString[i];
	}
	return CacResult;
#else
	return 0;
 8000cec:	2300      	movs	r3, #0
#endif
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <InitGY39>:

/**
 * @brief GY39温湿度大气压传感器初始化
 */
void InitGY39(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <InitGY39+0x24>)
 8000d02:	22a5      	movs	r2, #165	; 0xa5
 8000d04:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <InitGY39+0x24>)
 8000d08:	2282      	movs	r2, #130	; 0x82
 8000d0a:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <InitGY39+0x24>)
 8000d0e:	2227      	movs	r2, #39	; 0x27
 8000d10:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000d12:	2203      	movs	r2, #3
 8000d14:	4902      	ldr	r1, [pc, #8]	; (8000d20 <InitGY39+0x24>)
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <InitGY39+0x28>)
 8000d18:	f008 fcd4 	bl	80096c4 <HAL_UART_Transmit_DMA>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	240000cc 	.word	0x240000cc
 8000d24:	200046d8 	.word	0x200046d8

08000d28 <ReceiveGY39>:
/**
 * @brief 接收GY39温湿度大气压传感器数据
 * @return GY39Data GY39传感器数据接收结构体
 */
GY39Data ReceiveGY39(void)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;

	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <ReceiveGY39+0x84>)
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <ReceiveGY39+0x84>)
 8000d3a:	789b      	ldrb	r3, [r3, #2]
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <ReceiveGY39+0x84>)
 8000d48:	79db      	ldrb	r3, [r3, #7]
 8000d4a:	061a      	lsls	r2, r3, #24
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <ReceiveGY39+0x84>)
 8000d4e:	799b      	ldrb	r3, [r3, #6]
 8000d50:	041b      	lsls	r3, r3, #16
 8000d52:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <ReceiveGY39+0x84>)
 8000d56:	795b      	ldrb	r3, [r3, #5]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <ReceiveGY39+0x84>)
 8000d5e:	7912      	ldrb	r2, [r2, #4]
 8000d60:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000d62:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ReceiveGY39+0x84>)
 8000d66:	7a5b      	ldrb	r3, [r3, #9]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <ReceiveGY39+0x84>)
 8000d6e:	7a1b      	ldrb	r3, [r3, #8]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	82bb      	strh	r3, [r7, #20]

	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <ReceiveGY39+0x88>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <ReceiveGY39+0x88>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0210 	orr.w	r2, r2, #16
 8000d88:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000d8a:	2212      	movs	r2, #18
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <ReceiveGY39+0x84>)
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <ReceiveGY39+0x88>)
 8000d90:	f008 fd18 	bl	80097c4 <HAL_UART_Receive_DMA>

	return RevGY39;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	461c      	mov	r4, r3
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	240000d0 	.word	0x240000d0
 8000db0:	200046d8 	.word	0x200046d8

08000db4 <ReceiveWT931>:
/**
 * @brief 接收WT931九轴传感器数据
 * @return WT931Data WT931九轴传感器数据结构体
 */
WT931Data ReceiveWT931(void)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
//		RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
//		RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
//		RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
//	}

	RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <ReceiveWT931+0x158>)
 8000dbe:	78db      	ldrb	r3, [r3, #3]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <ReceiveWT931+0x158>)
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	813b      	strh	r3, [r7, #8]
	RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <ReceiveWT931+0x158>)
 8000dd4:	795b      	ldrb	r3, [r3, #5]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <ReceiveWT931+0x158>)
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	817b      	strh	r3, [r7, #10]
	RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8000de8:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <ReceiveWT931+0x158>)
 8000dea:	79db      	ldrb	r3, [r3, #7]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <ReceiveWT931+0x158>)
 8000df2:	799b      	ldrb	r3, [r3, #6]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	81bb      	strh	r3, [r7, #12]
	RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <ReceiveWT931+0x158>)
 8000e00:	7b9b      	ldrb	r3, [r3, #14]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <ReceiveWT931+0x158>)
 8000e08:	7b5b      	ldrb	r3, [r3, #13]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	81fb      	strh	r3, [r7, #14]
	RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8000e14:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <ReceiveWT931+0x158>)
 8000e16:	7c1b      	ldrb	r3, [r3, #16]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <ReceiveWT931+0x158>)
 8000e1e:	7bdb      	ldrb	r3, [r3, #15]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	823b      	strh	r3, [r7, #16]
	RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <ReceiveWT931+0x158>)
 8000e2c:	7c9b      	ldrb	r3, [r3, #18]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <ReceiveWT931+0x158>)
 8000e34:	7c5b      	ldrb	r3, [r3, #17]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	827b      	strh	r3, [r7, #18]
	RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <ReceiveWT931+0x158>)
 8000e42:	7e5b      	ldrb	r3, [r3, #25]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <ReceiveWT931+0x158>)
 8000e4a:	7e1b      	ldrb	r3, [r3, #24]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	82bb      	strh	r3, [r7, #20]
	RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <ReceiveWT931+0x158>)
 8000e58:	7edb      	ldrb	r3, [r3, #27]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <ReceiveWT931+0x158>)
 8000e60:	7e9b      	ldrb	r3, [r3, #26]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	82fb      	strh	r3, [r7, #22]
	RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <ReceiveWT931+0x158>)
 8000e6e:	7f5b      	ldrb	r3, [r3, #29]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <ReceiveWT931+0x158>)
 8000e76:	7f1b      	ldrb	r3, [r3, #28]
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	833b      	strh	r3, [r7, #24]
	RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <ReceiveWT931+0x158>)
 8000e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <ReceiveWT931+0x158>)
 8000e8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	837b      	strh	r3, [r7, #26]
	RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <ReceiveWT931+0x158>)
 8000e9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <ReceiveWT931+0x158>)
 8000ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	83bb      	strh	r3, [r7, #28]
	RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <ReceiveWT931+0x158>)
 8000eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <ReceiveWT931+0x158>)
 8000ec2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	83fb      	strh	r3, [r7, #30]
	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <ReceiveWT931+0x15c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <ReceiveWT931+0x15c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0210 	orr.w	r2, r2, #16
 8000ede:	601a      	str	r2, [r3, #0]
//	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);

	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, 45);
 8000ee0:	222d      	movs	r2, #45	; 0x2d
 8000ee2:	490a      	ldr	r1, [pc, #40]	; (8000f0c <ReceiveWT931+0x158>)
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <ReceiveWT931+0x15c>)
 8000ee6:	f008 fc6d 	bl	80097c4 <HAL_UART_Receive_DMA>

	return RevWT931;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	461d      	mov	r5, r3
 8000eee:	f107 0408 	add.w	r4, r7, #8
 8000ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef4:	6028      	str	r0, [r5, #0]
 8000ef6:	6069      	str	r1, [r5, #4]
 8000ef8:	60aa      	str	r2, [r5, #8]
 8000efa:	60eb      	str	r3, [r5, #12]
 8000efc:	cc03      	ldmia	r4!, {r0, r1}
 8000efe:	6128      	str	r0, [r5, #16]
 8000f00:	6169      	str	r1, [r5, #20]
}
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	240000a0 	.word	0x240000a0
 8000f10:	2000415c 	.word	0x2000415c

08000f14 <ReceiveDeep>:
/**
 * @brief 接收水深水温传感器数据
 * @return DeepData 水深水温传感器数据结构体
 */
DeepData ReceiveDeep(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	DeepData RevDeep;

	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <ReceiveDeep+0x68>)
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <ReceiveDeep+0x68>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <ReceiveDeep+0x68>)
 8000f32:	78db      	ldrb	r3, [r3, #3]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <ReceiveDeep+0x68>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	803b      	strh	r3, [r7, #0]

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <ReceiveDeep+0x6c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <ReceiveDeep+0x6c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0210 	orr.w	r2, r2, #16
 8000f54:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 8000f56:	2204      	movs	r2, #4
 8000f58:	4908      	ldr	r1, [pc, #32]	; (8000f7c <ReceiveDeep+0x68>)
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <ReceiveDeep+0x6c>)
 8000f5c:	f008 fc32 	bl	80097c4 <HAL_UART_Receive_DMA>
	return RevDeep;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	2300      	movs	r3, #0
 8000f66:	88ba      	ldrh	r2, [r7, #4]
 8000f68:	f362 030f 	bfi	r3, r2, #0, #16
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240000e4 	.word	0x240000e4
 8000f80:	20004640 	.word	0x20004640

08000f84 <InitP30>:

/**
 * @brief 声呐传感器初始化
 */
void InitP30(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	P30Send[0] = 0x42;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <InitP30+0x5c>)
 8000f8a:	2242      	movs	r2, #66	; 0x42
 8000f8c:	701a      	strb	r2, [r3, #0]
	P30Send[1] = 0x52;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <InitP30+0x5c>)
 8000f90:	2252      	movs	r2, #82	; 0x52
 8000f92:	705a      	strb	r2, [r3, #1]
	P30Send[2] = 0x02;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <InitP30+0x5c>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	709a      	strb	r2, [r3, #2]
	P30Send[3] = 0x00;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <InitP30+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	70da      	strb	r2, [r3, #3]
	P30Send[4] = 0x05;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <InitP30+0x5c>)
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	711a      	strb	r2, [r3, #4]
	P30Send[5] = 0x00;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <InitP30+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	715a      	strb	r2, [r3, #5]
	P30Send[6] = 0x00;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <InitP30+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	719a      	strb	r2, [r3, #6]
	P30Send[7] = 0x00;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <InitP30+0x5c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	71da      	strb	r2, [r3, #7]
	P30Send[8] = 0xBB;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <InitP30+0x5c>)
 8000fba:	22bb      	movs	r2, #187	; 0xbb
 8000fbc:	721a      	strb	r2, [r3, #8]
	P30Send[9] = 0x04;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <InitP30+0x5c>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	725a      	strb	r2, [r3, #9]
	P30Send[10] = 0xD2;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <InitP30+0x5c>)
 8000fc6:	22d2      	movs	r2, #210	; 0xd2
 8000fc8:	729a      	strb	r2, [r3, #10]
	P30Send[11] = 0x01;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <InitP30+0x5c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_DMA(&GP30_UART, P30Send, P30_UART_TXLen);
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	4903      	ldr	r1, [pc, #12]	; (8000fe0 <InitP30+0x5c>)
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <InitP30+0x60>)
 8000fd6:	f008 fb75 	bl	80096c4 <HAL_UART_Transmit_DMA>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	240000e8 	.word	0x240000e8
 8000fe4:	20004294 	.word	0x20004294

08000fe8 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
P30Data ReceiveP30(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	P30Data RevP30;

	uint8_t FrameState = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	77fb      	strb	r3, [r7, #31]
	uint8_t Bytenum = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	77bb      	strb	r3, [r7, #30]
	uint8_t CheckSum = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	777b      	strb	r3, [r7, #29]
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	773b      	strb	r3, [r7, #28]
 8001000:	e064      	b.n	80010cc <ReceiveP30+0xe4>
	{
		if (FrameState == 0)
 8001002:	7ffb      	ldrb	r3, [r7, #31]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d121      	bne.n	800104c <ReceiveP30+0x64>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 8001008:	7f3b      	ldrb	r3, [r7, #28]
 800100a:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <ReceiveP30+0x11c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	2b42      	cmp	r3, #66	; 0x42
 8001010:	d109      	bne.n	8001026 <ReceiveP30+0x3e>
 8001012:	7fbb      	ldrb	r3, [r7, #30]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <ReceiveP30+0x3e>
			{
				CheckSum = P30Receive[i];
 8001018:	7f3b      	ldrb	r3, [r7, #28]
 800101a:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <ReceiveP30+0x11c>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	777b      	strb	r3, [r7, #29]
				Bytenum = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	77bb      	strb	r3, [r7, #30]
				continue;
 8001024:	e04f      	b.n	80010c6 <ReceiveP30+0xde>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 8001026:	7f3b      	ldrb	r3, [r7, #28]
 8001028:	4a36      	ldr	r2, [pc, #216]	; (8001104 <ReceiveP30+0x11c>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	2b52      	cmp	r3, #82	; 0x52
 800102e:	d14a      	bne.n	80010c6 <ReceiveP30+0xde>
 8001030:	7fbb      	ldrb	r3, [r7, #30]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d147      	bne.n	80010c6 <ReceiveP30+0xde>
			{
				CheckSum += P30Receive[i];
 8001036:	7f3b      	ldrb	r3, [r7, #28]
 8001038:	4a32      	ldr	r2, [pc, #200]	; (8001104 <ReceiveP30+0x11c>)
 800103a:	5cd2      	ldrb	r2, [r2, r3]
 800103c:	7f7b      	ldrb	r3, [r7, #29]
 800103e:	4413      	add	r3, r2
 8001040:	777b      	strb	r3, [r7, #29]
				Bytenum = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	77bb      	strb	r3, [r7, #30]
				FrameState = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	77fb      	strb	r3, [r7, #31]
				continue;
 800104a:	e03c      	b.n	80010c6 <ReceiveP30+0xde>
			}
		}
		else if (FrameState == 1)
 800104c:	7ffb      	ldrb	r3, [r7, #31]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d139      	bne.n	80010c6 <ReceiveP30+0xde>
		{
			if (Bytenum < 13)
 8001052:	7fbb      	ldrb	r3, [r7, #30]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d813      	bhi.n	8001080 <ReceiveP30+0x98>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 8001058:	7f3a      	ldrb	r2, [r7, #28]
 800105a:	7fbb      	ldrb	r3, [r7, #30]
 800105c:	3b02      	subs	r3, #2
 800105e:	4929      	ldr	r1, [pc, #164]	; (8001104 <ReceiveP30+0x11c>)
 8001060:	5c8a      	ldrb	r2, [r1, r2]
 8001062:	f107 0120 	add.w	r1, r7, #32
 8001066:	440b      	add	r3, r1
 8001068:	f803 2c18 	strb.w	r2, [r3, #-24]
				CheckSum += P30Receive[i];
 800106c:	7f3b      	ldrb	r3, [r7, #28]
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <ReceiveP30+0x11c>)
 8001070:	5cd2      	ldrb	r2, [r2, r3]
 8001072:	7f7b      	ldrb	r3, [r7, #29]
 8001074:	4413      	add	r3, r2
 8001076:	777b      	strb	r3, [r7, #29]
				Bytenum++;
 8001078:	7fbb      	ldrb	r3, [r7, #30]
 800107a:	3301      	adds	r3, #1
 800107c:	77bb      	strb	r3, [r7, #30]
 800107e:	e022      	b.n	80010c6 <ReceiveP30+0xde>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 8001080:	7f3b      	ldrb	r3, [r7, #28]
 8001082:	4a20      	ldr	r2, [pc, #128]	; (8001104 <ReceiveP30+0x11c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	7f7a      	ldrb	r2, [r7, #29]
 8001088:	429a      	cmp	r2, r3
 800108a:	d116      	bne.n	80010ba <ReceiveP30+0xd2>
				{
					RevP30.Confidence = (datahex[10]) | (datahex[11]);
 800108c:	7cba      	ldrb	r2, [r7, #18]
 800108e:	7cfb      	ldrb	r3, [r7, #19]
 8001090:	4313      	orrs	r3, r2
 8001092:	b2db      	uxtb	r3, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	833b      	strh	r3, [r7, #24]
					RevP30.DepthToBottom = (((datahex[6] << 24)
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	061a      	lsls	r2, r3, #24
							| (datahex[7] << 16) | (datahex[8] << 8)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	431a      	orrs	r2, r3
 80010a2:	7c3b      	ldrb	r3, [r7, #16]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	4313      	orrs	r3, r2
							| (datahex[9])) / 1000);
 80010a8:	7c7a      	ldrb	r2, [r7, #17]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <ReceiveP30+0x120>)
 80010ae:	fb82 1203 	smull	r1, r2, r2, r3
 80010b2:	1192      	asrs	r2, r2, #6
 80010b4:	17db      	asrs	r3, r3, #31
 80010b6:	1ad3      	subs	r3, r2, r3
					RevP30.DepthToBottom = (((datahex[6] << 24)
 80010b8:	617b      	str	r3, [r7, #20]
				}
				CheckSum = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	777b      	strb	r3, [r7, #29]
				Bytenum = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	77bb      	strb	r3, [r7, #30]
				FrameState = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 33; i++)
 80010c6:	7f3b      	ldrb	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	773b      	strb	r3, [r7, #28]
 80010cc:	7f3b      	ldrb	r3, [r7, #28]
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	d997      	bls.n	8001002 <ReceiveP30+0x1a>
			}
		}
	}

	__HAL_UART_ENABLE_IT(&GP30_UART, UART_IT_IDLE);
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <ReceiveP30+0x124>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <ReceiveP30+0x124>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0210 	orr.w	r2, r2, #16
 80010e0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GP30_UART, P30Receive, P30_UART_RXLen);
 80010e2:	2221      	movs	r2, #33	; 0x21
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <ReceiveP30+0x11c>)
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <ReceiveP30+0x124>)
 80010e8:	f008 fb6c 	bl	80097c4 <HAL_UART_Receive_DMA>

	return RevP30;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	240000f4 	.word	0x240000f4
 8001108:	10624dd3 	.word	0x10624dd3
 800110c:	20004294 	.word	0x20004294

08001110 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <vApplicationGetIdleTaskMemory+0x2c>)
 8001120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <vApplicationGetIdleTaskMemory+0x30>)
 8001126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000030 	.word	0x20000030
 8001140:	20000084 	.word	0x20000084

08001144 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b0b6      	sub	sp, #216	; 0xd8
 8001148:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800114a:	f002 fa37 	bl	80035bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800114e:	f000 f96b 	bl	8001428 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001152:	f000 f9ef 	bl	8001534 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001156:	f000 fc7f 	bl	8001a58 <MX_GPIO_Init>
	MX_DMA_Init();
 800115a:	f000 fbfd 	bl	8001958 <MX_DMA_Init>
	MX_IWDG1_Init();
 800115e:	f000 fa15 	bl	800158c <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 8001162:	f000 fb15 	bl	8001790 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001166:	f000 fb5f 	bl	8001828 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800116a:	f000 fba9 	bl	80018c0 <MX_USART3_UART_Init>
	MX_UART4_Init();
 800116e:	f000 fa2b 	bl	80015c8 <MX_UART4_Init>
	MX_UART8_Init();
 8001172:	f000 fac1 	bl	80016f8 <MX_UART8_Init>
	MX_UART5_Init();
 8001176:	f000 fa73 	bl	8001660 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 800117a:	4893      	ldr	r0, [pc, #588]	; (80013c8 <main+0x284>)
 800117c:	f005 fbf6 	bl	800696c <HAL_IWDG_Refresh>

	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	4891      	ldr	r0, [pc, #580]	; (80013cc <main+0x288>)
 8001186:	f005 fb6f 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2110      	movs	r1, #16
 800118e:	488f      	ldr	r0, [pc, #572]	; (80013cc <main+0x288>)
 8001190:	f005 fb6a 	bl	8006868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2110      	movs	r1, #16
 8001198:	488c      	ldr	r0, [pc, #560]	; (80013cc <main+0x288>)
 800119a:	f005 fb65 	bl	8006868 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	488a      	ldr	r0, [pc, #552]	; (80013d0 <main+0x28c>)
 80011a6:	f005 fb5f 	bl	8006868 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 80011b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a f8e9 	bl	800b392 <osMutexCreate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a84      	ldr	r2, [pc, #528]	; (80013d4 <main+0x290>)
 80011c4:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 80011d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00a f8db 	bl	800b392 <osMutexCreate>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a7e      	ldr	r2, [pc, #504]	; (80013d8 <main+0x294>)
 80011e0:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 80011ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00a f8cd 	bl	800b392 <osMutexCreate>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a78      	ldr	r2, [pc, #480]	; (80013dc <main+0x298>)
 80011fc:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 800120a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800120e:	4618      	mov	r0, r3
 8001210:	f00a f8bf 	bl	800b392 <osMutexCreate>
 8001214:	4603      	mov	r3, r0
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <main+0x29c>)
 8001218:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 8001226:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800122a:	4618      	mov	r0, r3
 800122c:	f00a f8b1 	bl	800b392 <osMutexCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a6c      	ldr	r2, [pc, #432]	; (80013e4 <main+0x2a0>)
 8001234:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 8001242:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001246:	4618      	mov	r0, r3
 8001248:	f00a f8a3 	bl	800b392 <osMutexCreate>
 800124c:	4603      	mov	r3, r0
 800124e:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <main+0x2a4>)
 8001250:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30SensorDataRWFlag */
	osMutexDef(P30SensorDataRWFlag);
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	P30SensorDataRWFlagHandle = osMutexCreate(osMutex(P30SensorDataRWFlag));
 800125e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001262:	4618      	mov	r0, r3
 8001264:	f00a f895 	bl	800b392 <osMutexCreate>
 8001268:	4603      	mov	r3, r0
 800126a:	4a60      	ldr	r2, [pc, #384]	; (80013ec <main+0x2a8>)
 800126c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 800126e:	4856      	ldr	r0, [pc, #344]	; (80013c8 <main+0x284>)
 8001270:	f005 fb7c 	bl	800696c <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 8001280:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f00a f89b 	bl	800b3c2 <osSemaphoreCreate>
 800128c:	4603      	mov	r3, r0
 800128e:	4a58      	ldr	r2, [pc, #352]	; (80013f0 <main+0x2ac>)
 8001290:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 800129e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012a2:	2101      	movs	r1, #1
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00a f88c 	bl	800b3c2 <osSemaphoreCreate>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <main+0x2b0>)
 80012ae:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 80012bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012c0:	2101      	movs	r1, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a f87d 	bl	800b3c2 <osSemaphoreCreate>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <main+0x2b4>)
 80012cc:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 80012da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00a f86e 	bl	800b3c2 <osSemaphoreCreate>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <main+0x2b8>)
 80012ea:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 80012ec:	2300      	movs	r3, #0
 80012ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80012f0:	2300      	movs	r3, #0
 80012f2:	67fb      	str	r3, [r7, #124]	; 0x7c
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80012f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012f8:	2101      	movs	r1, #1
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00a f861 	bl	800b3c2 <osSemaphoreCreate>
 8001300:	4603      	mov	r3, r0
 8001302:	4a3f      	ldr	r2, [pc, #252]	; (8001400 <main+0x2bc>)
 8001304:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* definition and creation of P30TransFinish */
	osSemaphoreDef(P30TransFinish);
 8001306:	2300      	movs	r3, #0
 8001308:	673b      	str	r3, [r7, #112]	; 0x70
 800130a:	2300      	movs	r3, #0
 800130c:	677b      	str	r3, [r7, #116]	; 0x74
	P30TransFinishHandle = osSemaphoreCreate(osSemaphore(P30TransFinish), 1);
 800130e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f00a f854 	bl	800b3c2 <osSemaphoreCreate>
 800131a:	4603      	mov	r3, r0
 800131c:	4a39      	ldr	r2, [pc, #228]	; (8001404 <main+0x2c0>)
 800131e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 8001320:	4829      	ldr	r0, [pc, #164]	; (80013c8 <main+0x284>)
 8001322:	f005 fb23 	bl	800696c <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <main+0x2c4>)
 8001328:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800132c:	461d      	mov	r5, r3
 800132e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 800133a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f009 ffc6 	bl	800b2d2 <osThreadCreate>
 8001346:	4603      	mov	r3, r0
 8001348:	4a30      	ldr	r2, [pc, #192]	; (800140c <main+0x2c8>)
 800134a:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <main+0x2cc>)
 800134e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001352:	461d      	mov	r5, r3
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f009 ffb3 	bl	800b2d2 <osThreadCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <main+0x2d0>)
 8001370:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <main+0x2d4>)
 8001374:	f107 041c 	add.w	r4, r7, #28
 8001378:	461d      	mov	r5, r3
 800137a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f009 ffa0 	bl	800b2d2 <osThreadCreate>
 8001392:	4603      	mov	r3, r0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <main+0x2d8>)
 8001396:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <main+0x2dc>)
 800139a:	463c      	mov	r4, r7
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 80013aa:	463b      	mov	r3, r7
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f009 ff8f 	bl	800b2d2 <osThreadCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <main+0x2e0>)
 80013b8:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <main+0x284>)
 80013bc:	f005 fad6 	bl	800696c <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80013c0:	f009 ff80 	bl	800b2c4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0x280>
 80013c6:	bf00      	nop
 80013c8:	200040d4 	.word	0x200040d4
 80013cc:	58021000 	.word	0x58021000
 80013d0:	58020800 	.word	0x58020800
 80013d4:	20004520 	.word	0x20004520
 80013d8:	200047e8 	.word	0x200047e8
 80013dc:	20004324 	.word	0x20004324
 80013e0:	200041fc 	.word	0x200041fc
 80013e4:	200041f0 	.word	0x200041f0
 80013e8:	20004218 	.word	0x20004218
 80013ec:	200041ec 	.word	0x200041ec
 80013f0:	20003fdc 	.word	0x20003fdc
 80013f4:	200048e0 	.word	0x200048e0
 80013f8:	200041f4 	.word	0x200041f4
 80013fc:	200045a8 	.word	0x200045a8
 8001400:	200047ec 	.word	0x200047ec
 8001404:	20003fd8 	.word	0x20003fd8
 8001408:	0800db20 	.word	0x0800db20
 800140c:	200041f8 	.word	0x200041f8
 8001410:	0800db3c 	.word	0x0800db3c
 8001414:	20003fe0 	.word	0x20003fe0
 8001418:	0800db58 	.word	0x0800db58
 800141c:	200046d0 	.word	0x200046d0
 8001420:	0800db74 	.word	0x0800db74
 8001424:	200046d4 	.word	0x200046d4

08001428 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09c      	sub	sp, #112	; 0x70
 800142c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	224c      	movs	r2, #76	; 0x4c
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00c fb42 	bl	800dac0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2220      	movs	r2, #32
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f00c fb3c 	bl	800dac0 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001448:	2002      	movs	r0, #2
 800144a:	f005 fa9f 	bl	800698c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <SystemClock_Config+0x100>)
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	4a34      	ldr	r2, [pc, #208]	; (8001528 <SystemClock_Config+0x100>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800145e:	4b32      	ldr	r3, [pc, #200]	; (8001528 <SystemClock_Config+0x100>)
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <SystemClock_Config+0x104>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a2f      	ldr	r2, [pc, #188]	; (800152c <SystemClock_Config+0x104>)
 800146e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <SystemClock_Config+0x104>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001480:	bf00      	nop
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <SystemClock_Config+0x104>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800148e:	d1f8      	bne.n	8001482 <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <SystemClock_Config+0x108>)
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	4a25      	ldr	r2, [pc, #148]	; (8001530 <SystemClock_Config+0x108>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80014a0:	2309      	movs	r3, #9
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014aa:	2301      	movs	r3, #1
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ae:	2302      	movs	r3, #2
 80014b0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b2:	2302      	movs	r3, #2
 80014b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80014b6:	2305      	movs	r3, #5
 80014b8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 80014ba:	23a0      	movs	r3, #160	; 0xa0
 80014bc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014ca:	2308      	movs	r3, #8
 80014cc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fa90 	bl	8006a00 <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80014e6:	f000 fed3 	bl	8002290 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014ea:	233f      	movs	r3, #63	; 0x3f
 80014ec:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2303      	movs	r3, #3
 80014f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014f6:	2308      	movs	r3, #8
 80014f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014fe:	2340      	movs	r3, #64	; 0x40
 8001500:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001506:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2102      	movs	r1, #2
 8001510:	4618      	mov	r0, r3
 8001512:	f005 fe85 	bl	8007220 <HAL_RCC_ClockConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 800151c:	f000 feb8 	bl	8002290 <Error_Handler>
	}
}
 8001520:	bf00      	nop
 8001522:	3770      	adds	r7, #112	; 0x70
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58000400 	.word	0x58000400
 800152c:	58024800 	.word	0x58024800
 8001530:	58024400 	.word	0x58024400

08001534 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0b0      	sub	sp, #192	; 0xc0
 8001538:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	22bc      	movs	r2, #188	; 0xbc
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f00c fabd 	bl	800dac0 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5
 8001546:	2303      	movs	r3, #3
 8001548:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_UART8 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 800154a:	2319      	movs	r3, #25
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800154e:	23c0      	movs	r3, #192	; 0xc0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001552:	2302      	movs	r3, #2
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800155e:	2300      	movs	r3, #0
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001562:	2300      	movs	r3, #0
 8001564:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 800156a:	2302      	movs	r3, #2
 800156c:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800156e:	2310      	movs	r3, #16
 8001570:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f006 fa21 	bl	80079bc <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001580:	f000 fe86 	bl	8002290 <Error_Handler>
	}
}
 8001584:	bf00      	nop
 8001586:	37c0      	adds	r7, #192	; 0xc0
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_IWDG1_Init+0x34>)
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <MX_IWDG1_Init+0x38>)
 8001594:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_IWDG1_Init+0x34>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_IWDG1_Init+0x34>)
 800159e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015a2:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_IWDG1_Init+0x34>)
 80015a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015aa:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_IWDG1_Init+0x34>)
 80015ae:	f005 f98e 	bl	80068ce <HAL_IWDG_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 80015b8:	f000 fe6a 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200040d4 	.word	0x200040d4
 80015c4:	58004800 	.word	0x58004800

080015c8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <MX_UART4_Init+0x90>)
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <MX_UART4_Init+0x94>)
 80015d0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_UART4_Init+0x90>)
 80015d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80015d8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_UART4_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_UART4_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_UART4_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_UART4_Init+0x90>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_UART4_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_UART4_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_UART4_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_UART4_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_UART4_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <MX_UART4_Init+0x90>)
 8001612:	f008 f807 	bl	8009624 <HAL_UART_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 800161c:	f000 fe38 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8001620:	2100      	movs	r1, #0
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_UART4_Init+0x90>)
 8001624:	f009 fd6c 	bl	800b100 <HAL_UARTEx_SetTxFifoThreshold>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800162e:	f000 fe2f 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8001632:	2100      	movs	r1, #0
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_UART4_Init+0x90>)
 8001636:	f009 fda1 	bl	800b17c <HAL_UARTEx_SetRxFifoThreshold>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001640:	f000 fe26 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_UART4_Init+0x90>)
 8001646:	f009 fd22 	bl	800b08e <HAL_UARTEx_DisableFifoMode>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8001650:	f000 fe1e 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20004640 	.word	0x20004640
 800165c:	40004c00 	.word	0x40004c00

08001660 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_UART5_Init+0x90>)
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <MX_UART5_Init+0x94>)
 8001668:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_UART5_Init+0x90>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_UART5_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_UART5_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_UART5_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_UART5_Init+0x90>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_UART5_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_UART5_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_UART5_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_UART5_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_UART5_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <MX_UART5_Init+0x90>)
 80016aa:	f007 ffbb 	bl	8009624 <HAL_UART_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 80016b4:	f000 fdec 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 80016b8:	2100      	movs	r1, #0
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_UART5_Init+0x90>)
 80016bc:	f009 fd20 	bl	800b100 <HAL_UARTEx_SetTxFifoThreshold>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_UART5_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80016c6:	f000 fde3 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <MX_UART5_Init+0x90>)
 80016ce:	f009 fd55 	bl	800b17c <HAL_UARTEx_SetRxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_UART5_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80016d8:	f000 fdda 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_UART5_Init+0x90>)
 80016de:	f009 fcd6 	bl	800b08e <HAL_UARTEx_DisableFifoMode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80016e8:	f000 fdd2 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20004294 	.word	0x20004294
 80016f4:	40005000 	.word	0x40005000

080016f8 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <MX_UART8_Init+0x90>)
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <MX_UART8_Init+0x94>)
 8001700:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <MX_UART8_Init+0x90>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_UART8_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_UART8_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_UART8_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_UART8_Init+0x90>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_UART8_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_UART8_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_UART8_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_UART8_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <MX_UART8_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_UART8_Init+0x90>)
 8001742:	f007 ff6f 	bl	8009624 <HAL_UART_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 800174c:	f000 fda0 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8001750:	2100      	movs	r1, #0
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_UART8_Init+0x90>)
 8001754:	f009 fcd4 	bl	800b100 <HAL_UARTEx_SetTxFifoThreshold>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800175e:	f000 fd97 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8001762:	2100      	movs	r1, #0
 8001764:	4808      	ldr	r0, [pc, #32]	; (8001788 <MX_UART8_Init+0x90>)
 8001766:	f009 fd09 	bl	800b17c <HAL_UARTEx_SetRxFifoThreshold>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001770:	f000 fd8e 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_UART8_Init+0x90>)
 8001776:	f009 fc8a 	bl	800b08e <HAL_UARTEx_DisableFifoMode>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 8001780:	f000 fd86 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200045ac 	.word	0x200045ac
 800178c:	40007c00 	.word	0x40007c00

08001790 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <MX_USART1_UART_Init+0x90>)
 8001796:	4a23      	ldr	r2, [pc, #140]	; (8001824 <MX_USART1_UART_Init+0x94>)
 8001798:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_USART1_UART_Init+0x90>)
 800179c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d8:	4811      	ldr	r0, [pc, #68]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017da:	f007 ff23 	bl	8009624 <HAL_UART_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80017e4:	f000 fd54 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80017e8:	2100      	movs	r1, #0
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017ec:	f009 fc88 	bl	800b100 <HAL_UARTEx_SetTxFifoThreshold>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80017f6:	f000 fd4b 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80017fa:	2100      	movs	r1, #0
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <MX_USART1_UART_Init+0x90>)
 80017fe:	f009 fcbd 	bl	800b17c <HAL_UARTEx_SetRxFifoThreshold>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001808:	f000 fd42 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_USART1_UART_Init+0x90>)
 800180e:	f009 fc3e 	bl	800b08e <HAL_UARTEx_DisableFifoMode>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001818:	f000 fd3a 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20004490 	.word	0x20004490
 8001824:	40011000 	.word	0x40011000

08001828 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 800182e:	4a23      	ldr	r2, [pc, #140]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001830:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001834:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001838:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001870:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001872:	f007 fed7 	bl	8009624 <HAL_UART_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 800187c:	f000 fd08 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001880:	2100      	movs	r1, #0
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001884:	f009 fc3c 	bl	800b100 <HAL_UARTEx_SetTxFifoThreshold>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800188e:	f000 fcff 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001892:	2100      	movs	r1, #0
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 8001896:	f009 fc71 	bl	800b17c <HAL_UARTEx_SetRxFifoThreshold>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80018a0:	f000 fcf6 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_USART2_UART_Init+0x90>)
 80018a6:	f009 fbf2 	bl	800b08e <HAL_UARTEx_DisableFifoMode>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80018b0:	f000 fcee 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200046d8 	.word	0x200046d8
 80018bc:	40004400 	.word	0x40004400

080018c0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MX_USART3_UART_Init+0x94>)
 80018c8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018cc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80018d0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART3_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800190a:	f007 fe8b 	bl	8009624 <HAL_UART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001914:	f000 fcbc 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800191c:	f009 fbf0 	bl	800b100 <HAL_UARTEx_SetTxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001926:	f000 fcb3 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800192e:	f009 fc25 	bl	800b17c <HAL_UARTEx_SetRxFifoThreshold>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001938:	f000 fcaa 	bl	8002290 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800193e:	f009 fba6 	bl	800b08e <HAL_UARTEx_DisableFifoMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001948:	f000 fca2 	bl	8002290 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000415c 	.word	0x2000415c
 8001954:	40004800 	.word	0x40004800

08001958 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <MX_DMA_Init+0xfc>)
 8001960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001964:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <MX_DMA_Init+0xfc>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800196e:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <MX_DMA_Init+0xfc>)
 8001970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <MX_DMA_Init+0xfc>)
 800197e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <MX_DMA_Init+0xfc>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <MX_DMA_Init+0xfc>)
 800198e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	200b      	movs	r0, #11
 80019a0:	f001 ff2c 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019a4:	200b      	movs	r0, #11
 80019a6:	f001 ff43 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2105      	movs	r1, #5
 80019ae:	200c      	movs	r0, #12
 80019b0:	f001 ff24 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019b4:	200c      	movs	r0, #12
 80019b6:	f001 ff3b 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	200d      	movs	r0, #13
 80019c0:	f001 ff1c 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019c4:	200d      	movs	r0, #13
 80019c6:	f001 ff33 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	200e      	movs	r0, #14
 80019d0:	f001 ff14 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019d4:	200e      	movs	r0, #14
 80019d6:	f001 ff2b 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	200f      	movs	r0, #15
 80019e0:	f001 ff0c 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80019e4:	200f      	movs	r0, #15
 80019e6:	f001 ff23 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	2010      	movs	r0, #16
 80019f0:	f001 ff04 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019f4:	2010      	movs	r0, #16
 80019f6:	f001 ff1b 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	2011      	movs	r0, #17
 8001a00:	f001 fefc 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a04:	2011      	movs	r0, #17
 8001a06:	f001 ff13 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	202f      	movs	r0, #47	; 0x2f
 8001a10:	f001 fef4 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a14:	202f      	movs	r0, #47	; 0x2f
 8001a16:	f001 ff0b 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	2038      	movs	r0, #56	; 0x38
 8001a20:	f001 feec 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a24:	2038      	movs	r0, #56	; 0x38
 8001a26:	f001 ff03 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	2039      	movs	r0, #57	; 0x39
 8001a30:	f001 fee4 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a34:	2039      	movs	r0, #57	; 0x39
 8001a36:	f001 fefb 	bl	8003830 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	203a      	movs	r0, #58	; 0x3a
 8001a40:	f001 fedc 	bl	80037fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a44:	203a      	movs	r0, #58	; 0x3a
 8001a46:	f001 fef3 	bl	8003830 <HAL_NVIC_EnableIRQ>

}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	58024400 	.word	0x58024400

08001a58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a48      	ldr	r2, [pc, #288]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	4a2a      	ldr	r2, [pc, #168]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <MX_GPIO_Init+0x140>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2110      	movs	r1, #16
 8001b08:	4824      	ldr	r0, [pc, #144]	; (8001b9c <MX_GPIO_Init+0x144>)
 8001b0a:	f004 fead 	bl	8006868 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b14:	4822      	ldr	r0, [pc, #136]	; (8001ba0 <MX_GPIO_Init+0x148>)
 8001b16:	f004 fea7 	bl	8006868 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481a      	ldr	r0, [pc, #104]	; (8001b9c <MX_GPIO_Init+0x144>)
 8001b32:	f004 fcd1 	bl	80064d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_GPIO_Init+0x144>)
 8001b4a:	f004 fcc5 	bl	80064d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <MX_GPIO_Init+0x148>)
 8001b68:	f004 fcb6 	bl	80064d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_GPIO_Init+0x14c>)
 8001b8a:	f004 fca5 	bl	80064d8 <HAL_GPIO_Init>

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58021000 	.word	0x58021000
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	58020000 	.word	0x58020000

08001ba8 <OpenWrt_Delay>:
/* USER CODE BEGIN 4 */
/**
 * @brief  跳过OpenWrt开机启动信息(dmesg)
 */
void OpenWrt_Delay(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 60; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	e014      	b.n	8001bde <OpenWrt_Delay+0x36>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb8:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <OpenWrt_Delay+0x50>)
 8001bba:	f004 fe6e 	bl	800689a <HAL_GPIO_TogglePin>
		for (int j = 0; j < 1000; j++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	e005      	b.n	8001bd0 <OpenWrt_Delay+0x28>
		{
			osDelay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f009 fbd0 	bl	800b36a <osDelay>
		for (int j = 0; j < 1000; j++)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd6:	dbf5      	blt.n	8001bc4 <OpenWrt_Delay+0x1c>
	for (int i = 0; i < 60; i++)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b3b      	cmp	r3, #59	; 0x3b
 8001be2:	dde7      	ble.n	8001bb4 <OpenWrt_Delay+0xc>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bea:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <OpenWrt_Delay+0x50>)
 8001bec:	f004 fe3c 	bl	8006868 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	58020800 	.word	0x58020800

08001bfc <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		osDelay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f009 fbb0 	bl	800b36a <osDelay>
		HAL_IWDG_Refresh(&hiwdg1);
 8001c0a:	4802      	ldr	r0, [pc, #8]	; (8001c14 <CtrlTaskF+0x18>)
 8001c0c:	f004 feae 	bl	800696c <HAL_IWDG_Refresh>
		osDelay(1);
 8001c10:	e7f8      	b.n	8001c04 <CtrlTaskF+0x8>
 8001c12:	bf00      	nop
 8001c14:	200040d4 	.word	0x200040d4

08001c18 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001c20:	f7ff f86c 	bl	8000cfc <InitGY39>
	InitP30();
 8001c24:	f7ff f9ae 	bl	8000f84 <InitP30>
	osDelay(100);
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f009 fb9e 	bl	800b36a <osDelay>
	ReceiveDeep();
 8001c2e:	f7ff f971 	bl	8000f14 <ReceiveDeep>
	ReceiveGY39();
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f876 	bl	8000d28 <ReceiveGY39>
	ReceiveWT931();
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f8b8 	bl	8000db4 <ReceiveWT931>
	ReceiveP30();
 8001c44:	463b      	mov	r3, r7
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9ce 	bl	8000fe8 <ReceiveP30>
	osDelay(100);
 8001c4c:	2064      	movs	r0, #100	; 0x64
 8001c4e:	f009 fb8c 	bl	800b36a <osDelay>
	DeepSensorData = ReceiveDeep();
 8001c52:	f7ff f95f 	bl	8000f14 <ReceiveDeep>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b76      	ldr	r3, [pc, #472]	; (8001e34 <SensorTaskF+0x21c>)
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	8019      	strh	r1, [r3, #0]
 8001c5e:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001c62:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001c64:	4c74      	ldr	r4, [pc, #464]	; (8001e38 <SensorTaskF+0x220>)
 8001c66:	463b      	mov	r3, r7
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff f85d 	bl	8000d28 <ReceiveGY39>
 8001c6e:	463b      	mov	r3, r7
 8001c70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001c78:	4c70      	ldr	r4, [pc, #448]	; (8001e3c <SensorTaskF+0x224>)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f899 	bl	8000db4 <ReceiveWT931>
 8001c82:	4622      	mov	r2, r4
 8001c84:	463b      	mov	r3, r7
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	689d      	ldr	r5, [r3, #8]
 8001c8c:	68dc      	ldr	r4, [r3, #12]
 8001c8e:	6010      	str	r0, [r2, #0]
 8001c90:	6051      	str	r1, [r2, #4]
 8001c92:	6095      	str	r5, [r2, #8]
 8001c94:	60d4      	str	r4, [r2, #12]
 8001c96:	6918      	ldr	r0, [r3, #16]
 8001c98:	6959      	ldr	r1, [r3, #20]
 8001c9a:	6110      	str	r0, [r2, #16]
 8001c9c:	6151      	str	r1, [r2, #20]
	P30SensorData = ReceiveP30();
 8001c9e:	4c68      	ldr	r4, [pc, #416]	; (8001e40 <SensorTaskF+0x228>)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f9a0 	bl	8000fe8 <ReceiveP30>
 8001ca8:	4622      	mov	r2, r4
 8001caa:	463b      	mov	r3, r7
 8001cac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cb0:	e882 0003 	stmia.w	r2, {r0, r1}
	osDelay(100);
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	f009 fb58 	bl	800b36a <osDelay>
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <SensorTaskF+0x22c>)
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f009 fdea 	bl	800b89c <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <SensorTaskF+0x230>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	f009 fde3 	bl	800b89c <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <SensorTaskF+0x234>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f009 fddc 	bl	800b89c <xQueueGenericSend>
	xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <SensorTaskF+0x238>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	f009 fdd5 	bl	800b89c <xQueueGenericSend>
	vTaskSuspend(SensorTaskHandle);
 8001cf2:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <SensorTaskF+0x23c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00a fb32 	bl	800c360 <vTaskSuspend>
	osDelay(1);
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f009 fb34 	bl	800b36a <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001d02:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <SensorTaskF+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f009 ff53 	bl	800bbb4 <xQueueSemaphoreTake>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d118      	bne.n	8001d46 <SensorTaskF+0x12e>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <SensorTaskF+0x22c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 ff4a 	bl	800bbb4 <xQueueSemaphoreTake>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10f      	bne.n	8001d46 <SensorTaskF+0x12e>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001d26:	f7ff f8f5 	bl	8000f14 <ReceiveDeep>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <SensorTaskF+0x21c>)
 8001d2e:	4611      	mov	r1, r2
 8001d30:	8019      	strh	r1, [r3, #0]
 8001d32:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001d36:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <SensorTaskF+0x22c>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	f009 fdab 	bl	800b89c <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,
 8001d46:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <SensorTaskF+0x244>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f009 ff31 	bl	800bbb4 <xQueueSemaphoreTake>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d122      	bne.n	8001d9e <SensorTaskF+0x186>
				0) == pdTRUE)
		{

			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8001d58:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <SensorTaskF+0x234>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f009 ff28 	bl	800bbb4 <xQueueSemaphoreTake>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d119      	bne.n	8001d9e <SensorTaskF+0x186>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8001d6a:	4c34      	ldr	r4, [pc, #208]	; (8001e3c <SensorTaskF+0x224>)
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f820 	bl	8000db4 <ReceiveWT931>
 8001d74:	4622      	mov	r2, r4
 8001d76:	463b      	mov	r3, r7
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	689d      	ldr	r5, [r3, #8]
 8001d7e:	68dc      	ldr	r4, [r3, #12]
 8001d80:	6010      	str	r0, [r2, #0]
 8001d82:	6051      	str	r1, [r2, #4]
 8001d84:	6095      	str	r5, [r2, #8]
 8001d86:	60d4      	str	r4, [r2, #12]
 8001d88:	6918      	ldr	r0, [r3, #16]
 8001d8a:	6959      	ldr	r1, [r3, #20]
 8001d8c:	6110      	str	r0, [r2, #16]
 8001d8e:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <SensorTaskF+0x234>)
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	f009 fd7f 	bl	800b89c <xQueueGenericSend>
			}
		}
		//收取温湿度数�??????
		if (xSemaphoreTake(GY39TransFinishHandle,
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <SensorTaskF+0x248>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f009 ff05 	bl	800bbb4 <xQueueSemaphoreTake>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d119      	bne.n	8001de4 <SensorTaskF+0x1cc>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <SensorTaskF+0x230>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f009 fefc 	bl	800bbb4 <xQueueSemaphoreTake>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d110      	bne.n	8001de4 <SensorTaskF+0x1cc>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001dc2:	4c1d      	ldr	r4, [pc, #116]	; (8001e38 <SensorTaskF+0x220>)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ffae 	bl	8000d28 <ReceiveGY39>
 8001dcc:	463b      	mov	r3, r7
 8001dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <SensorTaskF+0x230>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	f009 fd5c 	bl	800b89c <xQueueGenericSend>
			}
		}
		//收取声呐数据
		if (xSemaphoreTake(P30TransFinishHandle,0) == pdTRUE)
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <SensorTaskF+0x24c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f009 fee2 	bl	800bbb4 <xQueueSemaphoreTake>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d11a      	bne.n	8001e2c <SensorTaskF+0x214>
		{
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <SensorTaskF+0x238>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f009 fed9 	bl	800bbb4 <xQueueSemaphoreTake>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d111      	bne.n	8001e2c <SensorTaskF+0x214>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				P30SensorData = ReceiveP30();
 8001e08:	4c0d      	ldr	r4, [pc, #52]	; (8001e40 <SensorTaskF+0x228>)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f8eb 	bl	8000fe8 <ReceiveP30>
 8001e12:	4622      	mov	r2, r4
 8001e14:	463b      	mov	r3, r7
 8001e16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e1a:	e882 0003 	stmia.w	r2, {r0, r1}
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <SensorTaskF+0x238>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	f009 fd38 	bl	800b89c <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <SensorTaskF+0x250>)
 8001e2e:	f004 fd9d 	bl	800696c <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001e32:	e766      	b.n	8001d02 <SensorTaskF+0xea>
 8001e34:	2000463c 	.word	0x2000463c
 8001e38:	20004524 	.word	0x20004524
 8001e3c:	20004200 	.word	0x20004200
 8001e40:	200047e0 	.word	0x200047e0
 8001e44:	200041f0 	.word	0x200041f0
 8001e48:	200041fc 	.word	0x200041fc
 8001e4c:	20004324 	.word	0x20004324
 8001e50:	200041ec 	.word	0x200041ec
 8001e54:	20003fe0 	.word	0x20003fe0
 8001e58:	200047ec 	.word	0x200047ec
 8001e5c:	200048e0 	.word	0x200048e0
 8001e60:	200041f4 	.word	0x200041f4
 8001e64:	20003fd8 	.word	0x20003fd8
 8001e68:	200040d4 	.word	0x200040d4

08001e6c <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8001e6c:	b5b0      	push	{r4, r5, r7, lr}
 8001e6e:	b0b6      	sub	sp, #216	; 0xd8
 8001e70:	af0a      	add	r7, sp, #40	; 0x28
 8001e72:	63f8      	str	r0, [r7, #60]	; 0x3c
	/* USER CODE BEGIN UtBF */
	DownDataDef UptoBaseData =
 8001e74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e78:	2234      	movs	r2, #52	; 0x34
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00b fe1f 	bl	800dac0 <memset>
	{ 0 };
	DownDataDef temp_UptoBaseData =
 8001e82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e86:	2234      	movs	r2, #52	; 0x34
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00b fe18 	bl	800dac0 <memset>
	{ 0 };
	u8 DIPFlag = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	u16 DIPStartNum = 0; //PID定向定深预期�???????????
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

	OpenWrt_Delay(); //跳过openwrt�?机时�?
 8001e9c:	f7ff fe84 	bl	8001ba8 <OpenWrt_Delay>

	CaptureDownData();
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fb98 	bl	80005d8 <CaptureDownData>
	osDelay(100);
 8001ea8:	2064      	movs	r0, #100	; 0x64
 8001eaa:	f009 fa5e 	bl	800b36a <osDelay>
	//打开串口接收
	UptoBaseData = CaptureDownData();
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb91 	bl	80005d8 <CaptureDownData>
 8001eb6:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001eba:	463d      	mov	r5, r7
 8001ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	6023      	str	r3, [r4, #0]
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <UtBF+0x134>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f009 fce1 	bl	800b89c <xQueueGenericSend>
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <UtBF+0x138>)
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f009 fcda 	bl	800b89c <xQueueGenericSend>
	vTaskResume(BasetoUpTaskHandle);
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <UtBF+0x13c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00a fafb 	bl	800c4e8 <vTaskResume>
	vTaskResume(SensorTaskHandle);
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <UtBF+0x140>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00a faf6 	bl	800c4e8 <vTaskResume>
	osDelay(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f009 fa34 	bl	800b36a <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//收取上位机指�?????
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <UtBF+0x144>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f009 fe53 	bl	800bbb4 <xQueueSemaphoreTake>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d141      	bne.n	8001f98 <UtBF+0x12c>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <UtBF+0x138>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f009 fe4a 	bl	800bbb4 <xQueueSemaphoreTake>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d115      	bne.n	8001f52 <UtBF+0xe6>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				UptoBaseData = CaptureDownData();
 8001f26:	463b      	mov	r3, r7
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb55 	bl	80005d8 <CaptureDownData>
 8001f2e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001f32:	463d      	mov	r5, r7
 8001f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f40:	682b      	ldr	r3, [r5, #0]
 8001f42:	6023      	str	r3, [r4, #0]
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <UtBF+0x138>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f009 fca5 	bl	800b89c <xQueueGenericSend>
//			{
//				DIPFlag = 0; //不开启定向定�??
//			}

			//下传指令
			if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <UtBF+0x134>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f009 fe2b 	bl	800bbb4 <xQueueSemaphoreTake>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d119      	bne.n	8001f98 <UtBF+0x12c>
					portTICK_PERIOD_MS) == pdTRUE)
			{
//				temp_UptoBaseData = UptoBaseData;
//				SendDownData(temp_UptoBaseData);
				SendDownData(UptoBaseData);
 8001f64:	466d      	mov	r5, sp
 8001f66:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	602b      	str	r3, [r5, #0]
 8001f76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f7c:	f7fe fcdc 	bl	8000938 <SendDownData>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <UtBF+0x148>)
 8001f86:	f004 fc88 	bl	800689a <HAL_GPIO_TogglePin>
				xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <UtBF+0x134>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	f009 fc82 	bl	800b89c <xQueueGenericSend>
			}
		}

		HAL_IWDG_Refresh(&hiwdg1);
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <UtBF+0x14c>)
 8001f9a:	f004 fce7 	bl	800696c <HAL_IWDG_Refresh>
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 8001f9e:	e7b0      	b.n	8001f02 <UtBF+0x96>
 8001fa0:	200047e8 	.word	0x200047e8
 8001fa4:	20004520 	.word	0x20004520
 8001fa8:	200046d4 	.word	0x200046d4
 8001fac:	20003fe0 	.word	0x20003fe0
 8001fb0:	20003fdc 	.word	0x20003fdc
 8001fb4:	58020800 	.word	0x58020800
 8001fb8:	200040d4 	.word	0x200040d4

08001fbc <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 8001fbc:	b5b0      	push	{r4, r5, r7, lr}
 8001fbe:	b0bc      	sub	sp, #240	; 0xf0
 8001fc0:	af08      	add	r7, sp, #32
 8001fc2:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN BtUF */
	//置为1的时候表示推进器控制�???????????
	//置为0的时候表示主控仓
	UpDataDef Power_BasetoUpData =
 8001fc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fc8:	2230      	movs	r2, #48	; 0x30
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00b fd77 	bl	800dac0 <memset>
	{ 0 };
	UpDataDef temp_Power_BasetoUpData =
 8001fd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fd6:	2230      	movs	r2, #48	; 0x30
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00b fd70 	bl	800dac0 <memset>
	{ 0 };
	UpDataDef BasetoUpData =
 8001fe0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fe4:	2230      	movs	r2, #48	; 0x30
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f00b fd69 	bl	800dac0 <memset>
	{ 0 };
	u8 SensorCarbin = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	vTaskSuspend(BasetoUpTaskHandle);
 8001ff4:	4b90      	ldr	r3, [pc, #576]	; (8002238 <BtUF+0x27c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00a f9b1 	bl	800c360 <vTaskSuspend>
	CaptureUpData();
 8001ffe:	463b      	mov	r3, r7
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fd39 	bl	8000a78 <CaptureUpData>
	osDelay(100);
 8002006:	2064      	movs	r0, #100	; 0x64
 8002008:	f009 f9af 	bl	800b36a <osDelay>
	BasetoUpData = CaptureUpData();
 800200c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fd31 	bl	8000a78 <CaptureUpData>
	osDelay(50);
 8002016:	2032      	movs	r0, #50	; 0x32
 8002018:	f009 f9a7 	bl	800b36a <osDelay>
	Power_BasetoUpData = CaptureUpData();
 800201c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd29 	bl	8000a78 <CaptureUpData>
	osDelay(50);
 8002026:	2032      	movs	r0, #50	; 0x32
 8002028:	f009 f99f 	bl	800b36a <osDelay>
	/* Infinite loop */
	for (;;)
	{
		if (SensorCarbin == 1) //发送电源仓数据
 800202c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002030:	2b01      	cmp	r3, #1
 8002032:	d13d      	bne.n	80020b0 <BtUF+0xf4>
		{
			//单独接收下位仓回传的数据
			if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 8002034:	4b81      	ldr	r3, [pc, #516]	; (800223c <BtUF+0x280>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f009 fdba 	bl	800bbb4 <xQueueSemaphoreTake>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d130      	bne.n	80020a8 <BtUF+0xec>
					portTICK_PERIOD_MS) == pdTRUE) //原来是0
			{
//				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
//						portTICK_PERIOD_MS) == pdTRUE)
//				{
				Power_BasetoUpData = CaptureUpData();
 8002046:	463b      	mov	r3, r7
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fd15 	bl	8000a78 <CaptureUpData>
 800204e:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8002052:	463d      	mov	r5, r7
 8002054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800205a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//					temp_Power_BasetoUpData = Power_BasetoUpData;
				//上传数据
//					if (temp_Power_BasetoUpData.CabinNum == 1)
//					{
				if (Power_BasetoUpData.CabinNum == 0b0001)
 8002064:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d11d      	bne.n	80020a8 <BtUF+0xec>
				{
					if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 800206c:	4b74      	ldr	r3, [pc, #464]	; (8002240 <BtUF+0x284>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	4618      	mov	r0, r3
 8002074:	f009 fd9e 	bl	800bbb4 <xQueueSemaphoreTake>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d114      	bne.n	80020a8 <BtUF+0xec>
							portTICK_PERIOD_MS) == pdTRUE)
					{
//							SendUpData(temp_Power_BasetoUpData);
						SendUpData(Power_BasetoUpData);
 800207e:	466d      	mov	r5, sp
 8002080:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800208c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002096:	f7fe fb43 	bl	8000720 <SendUpData>
						xSemaphoreGive(UptoBaseDataRWFlagHandle);
 800209a:	4b69      	ldr	r3, [pc, #420]	; (8002240 <BtUF+0x284>)
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	f009 fbfa 	bl	800b89c <xQueueGenericSend>
					}
				}
//					xSemaphoreGive(BasetoUpDataRWFlagHandle);
//				}
			}
			SensorCarbin = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80020ae:	e0bf      	b.n	8002230 <BtUF+0x274>
		}
		else if (SensorCarbin == 0)	//发�?�主控仓数据
 80020b0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 80bb 	bne.w	8002230 <BtUF+0x274>
		{
			//汇�?�本仓传感器数据
			//仓位数据
			BasetoUpData.CabinNum = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			//漏水�??????�??????
			if (HAL_GPIO_ReadPin(GPIOE,
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	4860      	ldr	r0, [pc, #384]	; (8002244 <BtUF+0x288>)
 80020c4:	f004 fbb8 	bl	8006838 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d103      	bne.n	80020d6 <BtUF+0x11a>
			GPIO_PIN_6) == GPIO_PIN_SET)
			{
				BasetoUpData.WaterDetect = 1 << 1;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80020d4:	e002      	b.n	80020dc <BtUF+0x120>
			}
			else
			{
				BasetoUpData.WaterDetect = 0 << 1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			}
			//九轴数据
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <BtUF+0x28c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	4618      	mov	r0, r3
 80020e4:	f009 fd66 	bl	800bbb4 <xQueueSemaphoreTake>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d136      	bne.n	800215c <BtUF+0x1a0>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <BtUF+0x290>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 80020f6:	4b55      	ldr	r3, [pc, #340]	; (800224c <BtUF+0x290>)
 80020f8:	885b      	ldrh	r3, [r3, #2]
 80020fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 80020fe:	4b53      	ldr	r3, [pc, #332]	; (800224c <BtUF+0x290>)
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <BtUF+0x290>)
 8002108:	88db      	ldrh	r3, [r3, #6]
 800210a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 800210e:	4b4f      	ldr	r3, [pc, #316]	; (800224c <BtUF+0x290>)
 8002110:	891b      	ldrh	r3, [r3, #8]
 8002112:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <BtUF+0x290>)
 8002118:	895b      	ldrh	r3, [r3, #10]
 800211a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 800211e:	4b4b      	ldr	r3, [pc, #300]	; (800224c <BtUF+0x290>)
 8002120:	899b      	ldrh	r3, [r3, #12]
 8002122:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 8002126:	4b49      	ldr	r3, [pc, #292]	; (800224c <BtUF+0x290>)
 8002128:	89db      	ldrh	r3, [r3, #14]
 800212a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <BtUF+0x290>)
 8002130:	8a1b      	ldrh	r3, [r3, #16]
 8002132:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <BtUF+0x290>)
 8002138:	8a5b      	ldrh	r3, [r3, #18]
 800213a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 800213e:	4b43      	ldr	r3, [pc, #268]	; (800224c <BtUF+0x290>)
 8002140:	8a9b      	ldrh	r3, [r3, #20]
 8002142:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <BtUF+0x290>)
 8002148:	8adb      	ldrh	r3, [r3, #22]
 800214a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <BtUF+0x28c>)
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	f009 fba0 	bl	800b89c <xQueueGenericSend>
			}
			//温湿度大气压数据
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <BtUF+0x294>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f009 fd26 	bl	800bbb4 <xQueueSemaphoreTake>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	d110      	bne.n	8002190 <BtUF+0x1d4>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.CabinBaro = GY39SensorData.Baro;
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <BtUF+0x298>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
				BasetoUpData.CabinHum = GY39SensorData.Hum;
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <BtUF+0x298>)
 8002176:	891b      	ldrh	r3, [r3, #8]
 8002178:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <BtUF+0x298>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	87fb      	strh	r3, [r7, #62]	; 0x3e
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <BtUF+0x294>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	f009 fb86 	bl	800b89c <xQueueGenericSend>
			}
			//水深水温数据
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <BtUF+0x29c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	4618      	mov	r0, r3
 8002198:	f009 fd0c 	bl	800bbb4 <xQueueSemaphoreTake>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10e      	bne.n	80021c0 <BtUF+0x204>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 80021a2:	4b2e      	ldr	r3, [pc, #184]	; (800225c <BtUF+0x2a0>)
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
				BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <BtUF+0x2a0>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <BtUF+0x29c>)
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	f009 fb6e 	bl	800b89c <xQueueGenericSend>
			}
			//声呐数据
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <BtUF+0x2a4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f009 fcf4 	bl	800bbb4 <xQueueSemaphoreTake>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10d      	bne.n	80021ee <BtUF+0x232>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.DepthToBottom = P30SensorData.DepthToBottom;
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <BtUF+0x2a8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
				BasetoUpData.Confidence = P30SensorData.Confidence;
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <BtUF+0x2a8>)
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <BtUF+0x2a4>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	f009 fb57 	bl	800b89c <xQueueGenericSend>
			}
			//上传数据
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <BtUF+0x284>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f009 fcdd 	bl	800bbb4 <xQueueSemaphoreTake>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d114      	bne.n	800222a <BtUF+0x26e>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				SendUpData(BasetoUpData);
 8002200:	466d      	mov	r5, sp
 8002202:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800220e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002212:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002218:	f7fe fa82 	bl	8000720 <SendUpData>
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <BtUF+0x284>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	2300      	movs	r3, #0
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	f009 fb39 	bl	800b89c <xQueueGenericSend>
			}
			SensorCarbin = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <BtUF+0x2ac>)
 8002232:	f004 fb9b 	bl	800696c <HAL_IWDG_Refresh>
		if (SensorCarbin == 1) //发送电源仓数据
 8002236:	e6f9      	b.n	800202c <BtUF+0x70>
 8002238:	200046d4 	.word	0x200046d4
 800223c:	200045a8 	.word	0x200045a8
 8002240:	20004520 	.word	0x20004520
 8002244:	58021000 	.word	0x58021000
 8002248:	20004324 	.word	0x20004324
 800224c:	20004200 	.word	0x20004200
 8002250:	200041fc 	.word	0x200041fc
 8002254:	20004524 	.word	0x20004524
 8002258:	200041f0 	.word	0x200041f0
 800225c:	2000463c 	.word	0x2000463c
 8002260:	200041ec 	.word	0x200041ec
 8002264:	200047e0 	.word	0x200047e0
 8002268:	200040d4 	.word	0x200040d4

0800226c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800227e:	f001 f9d9 	bl	8003634 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40001000 	.word	0x40001000

08002290 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002298:	e7fe      	b.n	8002298 <Error_Handler+0x8>
	...

0800229c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_MspInit+0x38>)
 80022a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_MspInit+0x38>)
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_MspInit+0x38>)
 80022b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	210f      	movs	r1, #15
 80022c4:	f06f 0001 	mvn.w	r0, #1
 80022c8:	f001 fa98 	bl	80037fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	58024400 	.word	0x58024400

080022d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	; 0x50
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a96      	ldr	r2, [pc, #600]	; (8002550 <HAL_UART_MspInit+0x278>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f040 8091 	bne.w	800241e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022fc:	4b95      	ldr	r3, [pc, #596]	; (8002554 <HAL_UART_MspInit+0x27c>)
 80022fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002302:	4a94      	ldr	r2, [pc, #592]	; (8002554 <HAL_UART_MspInit+0x27c>)
 8002304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800230c:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800230e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
 8002318:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002320:	4a8c      	ldr	r2, [pc, #560]	; (8002554 <HAL_UART_MspInit+0x27c>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232a:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800232c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002338:	2303      	movs	r3, #3
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002348:	2308      	movs	r3, #8
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002350:	4619      	mov	r1, r3
 8002352:	4881      	ldr	r0, [pc, #516]	; (8002558 <HAL_UART_MspInit+0x280>)
 8002354:	f004 f8c0 	bl	80064d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002358:	4b80      	ldr	r3, [pc, #512]	; (800255c <HAL_UART_MspInit+0x284>)
 800235a:	4a81      	ldr	r2, [pc, #516]	; (8002560 <HAL_UART_MspInit+0x288>)
 800235c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800235e:	4b7f      	ldr	r3, [pc, #508]	; (800255c <HAL_UART_MspInit+0x284>)
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002364:	4b7d      	ldr	r3, [pc, #500]	; (800255c <HAL_UART_MspInit+0x284>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236a:	4b7c      	ldr	r3, [pc, #496]	; (800255c <HAL_UART_MspInit+0x284>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002370:	4b7a      	ldr	r3, [pc, #488]	; (800255c <HAL_UART_MspInit+0x284>)
 8002372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002376:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002378:	4b78      	ldr	r3, [pc, #480]	; (800255c <HAL_UART_MspInit+0x284>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800237e:	4b77      	ldr	r3, [pc, #476]	; (800255c <HAL_UART_MspInit+0x284>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_UART_MspInit+0x284>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800238a:	4b74      	ldr	r3, [pc, #464]	; (800255c <HAL_UART_MspInit+0x284>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002390:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_UART_MspInit+0x284>)
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002396:	4871      	ldr	r0, [pc, #452]	; (800255c <HAL_UART_MspInit+0x284>)
 8002398:	f001 fa58 	bl	800384c <HAL_DMA_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023a2:	f7ff ff75 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a6c      	ldr	r2, [pc, #432]	; (800255c <HAL_UART_MspInit+0x284>)
 80023aa:	67da      	str	r2, [r3, #124]	; 0x7c
 80023ac:	4a6b      	ldr	r2, [pc, #428]	; (800255c <HAL_UART_MspInit+0x284>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 80023b2:	4b6c      	ldr	r3, [pc, #432]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023b4:	4a6c      	ldr	r2, [pc, #432]	; (8002568 <HAL_UART_MspInit+0x290>)
 80023b6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023be:	4b69      	ldr	r3, [pc, #420]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ca:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d2:	4b64      	ldr	r3, [pc, #400]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80023de:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e4:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ea:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80023f0:	485c      	ldr	r0, [pc, #368]	; (8002564 <HAL_UART_MspInit+0x28c>)
 80023f2:	f001 fa2b 	bl	800384c <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80023fc:	f7ff ff48 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_UART_MspInit+0x28c>)
 8002404:	679a      	str	r2, [r3, #120]	; 0x78
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_UART_MspInit+0x28c>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2105      	movs	r1, #5
 8002410:	2034      	movs	r0, #52	; 0x34
 8002412:	f001 f9f3 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002416:	2034      	movs	r0, #52	; 0x34
 8002418:	f001 fa0a 	bl	8003830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800241c:	e2fc      	b.n	8002a18 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==UART5)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_UART_MspInit+0x294>)
 8002424:	4293      	cmp	r3, r2
 8002426:	f040 80ad 	bne.w	8002584 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_UART5_CLK_ENABLE();
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800242c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002430:	4a48      	ldr	r2, [pc, #288]	; (8002554 <HAL_UART_MspInit+0x27c>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	4a41      	ldr	r2, [pc, #260]	; (8002554 <HAL_UART_MspInit+0x27c>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002458:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_UART_MspInit+0x27c>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002466:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002478:	230e      	movs	r3, #14
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002480:	4619      	mov	r1, r3
 8002482:	483b      	ldr	r0, [pc, #236]	; (8002570 <HAL_UART_MspInit+0x298>)
 8002484:	f004 f828 	bl	80064d8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 8002488:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_UART_MspInit+0x29c>)
 800248a:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <HAL_UART_MspInit+0x2a0>)
 800248c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_UART_MspInit+0x29c>)
 8002490:	2241      	movs	r2, #65	; 0x41
 8002492:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002494:	4b37      	ldr	r3, [pc, #220]	; (8002574 <HAL_UART_MspInit+0x29c>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249a:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_UART_MspInit+0x29c>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a8:	4b32      	ldr	r3, [pc, #200]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80024c6:	482b      	ldr	r0, [pc, #172]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024c8:	f001 f9c0 	bl	800384c <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80024d2:	f7ff fedd 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024da:	67da      	str	r2, [r3, #124]	; 0x7c
 80024dc:	4a25      	ldr	r2, [pc, #148]	; (8002574 <HAL_UART_MspInit+0x29c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_UART_MspInit+0x2a4>)
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_UART_MspInit+0x2a8>)
 80024e6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_UART_MspInit+0x2a4>)
 80024ea:	2242      	movs	r2, #66	; 0x42
 80024ec:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_UART_MspInit+0x2a4>)
 80024f0:	2240      	movs	r2, #64	; 0x40
 80024f2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_UART_MspInit+0x2a4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_UART_MspInit+0x2a4>)
 80024fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002500:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_UART_MspInit+0x2a4>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_UART_MspInit+0x2a4>)
 800251c:	2200      	movs	r2, #0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002520:	4816      	ldr	r0, [pc, #88]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002522:	f001 f993 	bl	800384c <HAL_DMA_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800252c:	f7ff feb0 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002534:	679a      	str	r2, [r3, #120]	; 0x78
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_UART_MspInit+0x2a4>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2105      	movs	r1, #5
 8002540:	2035      	movs	r0, #53	; 0x35
 8002542:	f001 f95b 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002546:	2035      	movs	r0, #53	; 0x35
 8002548:	f001 f972 	bl	8003830 <HAL_NVIC_EnableIRQ>
}
 800254c:	e264      	b.n	8002a18 <HAL_UART_MspInit+0x740>
 800254e:	bf00      	nop
 8002550:	40004c00 	.word	0x40004c00
 8002554:	58024400 	.word	0x58024400
 8002558:	58020000 	.word	0x58020000
 800255c:	20003fe4 	.word	0x20003fe4
 8002560:	40020088 	.word	0x40020088
 8002564:	200047f0 	.word	0x200047f0
 8002568:	400200a0 	.word	0x400200a0
 800256c:	40005000 	.word	0x40005000
 8002570:	58020400 	.word	0x58020400
 8002574:	20004768 	.word	0x20004768
 8002578:	40020070 	.word	0x40020070
 800257c:	20004868 	.word	0x20004868
 8002580:	40020440 	.word	0x40020440
  else if(huart->Instance==UART8)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a96      	ldr	r2, [pc, #600]	; (80027e4 <HAL_UART_MspInit+0x50c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	f040 8091 	bne.w	80026b2 <HAL_UART_MspInit+0x3da>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002590:	4b95      	ldr	r3, [pc, #596]	; (80027e8 <HAL_UART_MspInit+0x510>)
 8002592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002596:	4a94      	ldr	r2, [pc, #592]	; (80027e8 <HAL_UART_MspInit+0x510>)
 8002598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800259c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025a0:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80025a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ae:	4b8e      	ldr	r3, [pc, #568]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b4:	4a8c      	ldr	r2, [pc, #560]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025be:	4b8a      	ldr	r3, [pc, #552]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80025c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025cc:	2303      	movs	r3, #3
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80025dc:	2308      	movs	r3, #8
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025e4:	4619      	mov	r1, r3
 80025e6:	4881      	ldr	r0, [pc, #516]	; (80027ec <HAL_UART_MspInit+0x514>)
 80025e8:	f003 ff76 	bl	80064d8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 80025ec:	4b80      	ldr	r3, [pc, #512]	; (80027f0 <HAL_UART_MspInit+0x518>)
 80025ee:	4a81      	ldr	r2, [pc, #516]	; (80027f4 <HAL_UART_MspInit+0x51c>)
 80025f0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80025f2:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_UART_MspInit+0x518>)
 80025f4:	2251      	movs	r2, #81	; 0x51
 80025f6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_UART_MspInit+0x518>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fe:	4b7c      	ldr	r3, [pc, #496]	; (80027f0 <HAL_UART_MspInit+0x518>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002604:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_UART_MspInit+0x518>)
 8002606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260c:	4b78      	ldr	r3, [pc, #480]	; (80027f0 <HAL_UART_MspInit+0x518>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002612:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <HAL_UART_MspInit+0x518>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <HAL_UART_MspInit+0x518>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261e:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_UART_MspInit+0x518>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002624:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <HAL_UART_MspInit+0x518>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800262a:	4871      	ldr	r0, [pc, #452]	; (80027f0 <HAL_UART_MspInit+0x518>)
 800262c:	f001 f90e 	bl	800384c <HAL_DMA_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_UART_MspInit+0x362>
      Error_Handler();
 8002636:	f7ff fe2b 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a6c      	ldr	r2, [pc, #432]	; (80027f0 <HAL_UART_MspInit+0x518>)
 800263e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002640:	4a6b      	ldr	r2, [pc, #428]	; (80027f0 <HAL_UART_MspInit+0x518>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 8002646:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002648:	4a6c      	ldr	r2, [pc, #432]	; (80027fc <HAL_UART_MspInit+0x524>)
 800264a:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_UART_MspInit+0x520>)
 800264e:	2252      	movs	r2, #82	; 0x52
 8002650:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002652:	4b69      	ldr	r3, [pc, #420]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002658:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_UART_MspInit+0x520>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800265e:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002664:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002666:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266c:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <HAL_UART_MspInit+0x520>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002672:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b5f      	ldr	r3, [pc, #380]	; (80027f8 <HAL_UART_MspInit+0x520>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267e:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002684:	485c      	ldr	r0, [pc, #368]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002686:	f001 f8e1 	bl	800384c <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_MspInit+0x3bc>
      Error_Handler();
 8002690:	f7ff fdfe 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_UART_MspInit+0x520>)
 8002698:	679a      	str	r2, [r3, #120]	; 0x78
 800269a:	4a57      	ldr	r2, [pc, #348]	; (80027f8 <HAL_UART_MspInit+0x520>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2105      	movs	r1, #5
 80026a4:	2053      	movs	r0, #83	; 0x53
 80026a6:	f001 f8a9 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80026aa:	2053      	movs	r0, #83	; 0x53
 80026ac:	f001 f8c0 	bl	8003830 <HAL_NVIC_EnableIRQ>
}
 80026b0:	e1b2      	b.n	8002a18 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_UART_MspInit+0x528>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	f040 80ad 	bne.w	8002818 <HAL_UART_MspInit+0x540>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80026c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c4:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80026c6:	f043 0310 	orr.w	r3, r3, #16
 80026ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80026d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e2:	4a41      	ldr	r2, [pc, #260]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ec:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_UART_MspInit+0x510>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800270c:	2304      	movs	r3, #4
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002714:	4619      	mov	r1, r3
 8002716:	483b      	ldr	r0, [pc, #236]	; (8002804 <HAL_UART_MspInit+0x52c>)
 8002718:	f003 fede 	bl	80064d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_UART_MspInit+0x530>)
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_UART_MspInit+0x534>)
 8002720:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002722:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002724:	2229      	movs	r2, #41	; 0x29
 8002726:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_UART_MspInit+0x530>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_UART_MspInit+0x530>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002742:	4b31      	ldr	r3, [pc, #196]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002748:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <HAL_UART_MspInit+0x530>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800275a:	482b      	ldr	r0, [pc, #172]	; (8002808 <HAL_UART_MspInit+0x530>)
 800275c:	f001 f876 	bl	800384c <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x492>
      Error_Handler();
 8002766:	f7ff fd93 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a26      	ldr	r2, [pc, #152]	; (8002808 <HAL_UART_MspInit+0x530>)
 800276e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002770:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_UART_MspInit+0x530>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_UART_MspInit+0x538>)
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <HAL_UART_MspInit+0x53c>)
 800277a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_UART_MspInit+0x538>)
 800277e:	222a      	movs	r2, #42	; 0x2a
 8002780:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_UART_MspInit+0x538>)
 8002784:	2240      	movs	r2, #64	; 0x40
 8002786:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_UART_MspInit+0x538>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_UART_MspInit+0x538>)
 8002790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002794:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_UART_MspInit+0x538>)
 8002798:	2200      	movs	r2, #0
 800279a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_UART_MspInit+0x538>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_UART_MspInit+0x538>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_UART_MspInit+0x538>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_UART_MspInit+0x538>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027b4:	4816      	ldr	r0, [pc, #88]	; (8002810 <HAL_UART_MspInit+0x538>)
 80027b6:	f001 f849 	bl	800384c <HAL_DMA_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 80027c0:	f7ff fd66 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <HAL_UART_MspInit+0x538>)
 80027c8:	679a      	str	r2, [r3, #120]	; 0x78
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_UART_MspInit+0x538>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2105      	movs	r1, #5
 80027d4:	2025      	movs	r0, #37	; 0x25
 80027d6:	f001 f811 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027da:	2025      	movs	r0, #37	; 0x25
 80027dc:	f001 f828 	bl	8003830 <HAL_NVIC_EnableIRQ>
}
 80027e0:	e11a      	b.n	8002a18 <HAL_UART_MspInit+0x740>
 80027e2:	bf00      	nop
 80027e4:	40007c00 	.word	0x40007c00
 80027e8:	58024400 	.word	0x58024400
 80027ec:	58021000 	.word	0x58021000
 80027f0:	20004418 	.word	0x20004418
 80027f4:	400200b8 	.word	0x400200b8
 80027f8:	20004530 	.word	0x20004530
 80027fc:	40020410 	.word	0x40020410
 8002800:	40011000 	.word	0x40011000
 8002804:	58020400 	.word	0x58020400
 8002808:	20004328 	.word	0x20004328
 800280c:	40020010 	.word	0x40020010
 8002810:	2000421c 	.word	0x2000421c
 8002814:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_UART_MspInit+0x748>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f040 8091 	bne.w	8002946 <HAL_UART_MspInit+0x66e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002824:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002834:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b78      	ldr	r3, [pc, #480]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	4a76      	ldr	r2, [pc, #472]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002852:	4b74      	ldr	r3, [pc, #464]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002860:	230c      	movs	r3, #12
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002870:	2307      	movs	r3, #7
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002878:	4619      	mov	r1, r3
 800287a:	486b      	ldr	r0, [pc, #428]	; (8002a28 <HAL_UART_MspInit+0x750>)
 800287c:	f003 fe2c 	bl	80064d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <HAL_UART_MspInit+0x754>)
 8002882:	4a6b      	ldr	r2, [pc, #428]	; (8002a30 <HAL_UART_MspInit+0x758>)
 8002884:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002886:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_UART_MspInit+0x754>)
 8002888:	222b      	movs	r2, #43	; 0x2b
 800288a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288c:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <HAL_UART_MspInit+0x754>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002892:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_UART_MspInit+0x754>)
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002898:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_UART_MspInit+0x754>)
 800289a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800289e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a0:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028ac:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028b2:	4b5e      	ldr	r3, [pc, #376]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028b8:	4b5c      	ldr	r3, [pc, #368]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028be:	485b      	ldr	r0, [pc, #364]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028c0:	f000 ffc4 	bl	800384c <HAL_DMA_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_UART_MspInit+0x5f6>
      Error_Handler();
 80028ca:	f7ff fce1 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a56      	ldr	r2, [pc, #344]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028d2:	67da      	str	r2, [r3, #124]	; 0x7c
 80028d4:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_UART_MspInit+0x754>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 80028dc:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <HAL_UART_MspInit+0x760>)
 80028de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80028e0:	4b54      	ldr	r3, [pc, #336]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 80028e2:	222c      	movs	r2, #44	; 0x2c
 80028e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028e6:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ec:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028f2:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 80028f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028fa:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002906:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 8002908:	2200      	movs	r2, #0
 800290a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002912:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002918:	4846      	ldr	r0, [pc, #280]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 800291a:	f000 ff97 	bl	800384c <HAL_DMA_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_MspInit+0x650>
      Error_Handler();
 8002924:	f7ff fcb4 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a42      	ldr	r2, [pc, #264]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 800292c:	679a      	str	r2, [r3, #120]	; 0x78
 800292e:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <HAL_UART_MspInit+0x75c>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2105      	movs	r1, #5
 8002938:	2026      	movs	r0, #38	; 0x26
 800293a:	f000 ff5f 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800293e:	2026      	movs	r0, #38	; 0x26
 8002940:	f000 ff76 	bl	8003830 <HAL_NVIC_EnableIRQ>
}
 8002944:	e068      	b.n	8002a18 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <HAL_UART_MspInit+0x764>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d163      	bne.n	8002a18 <HAL_UART_MspInit+0x740>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_UART_MspInit+0x74c>)
 8002980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800298c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800299e:	2307      	movs	r3, #7
 80029a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029a6:	4619      	mov	r1, r3
 80029a8:	4825      	ldr	r0, [pc, #148]	; (8002a40 <HAL_UART_MspInit+0x768>)
 80029aa:	f003 fd95 	bl	80064d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 80029ae:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029b0:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <HAL_UART_MspInit+0x770>)
 80029b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029b6:	222d      	movs	r2, #45	; 0x2d
 80029b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029ec:	4815      	ldr	r0, [pc, #84]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 80029ee:	f000 ff2d 	bl	800384c <HAL_DMA_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_MspInit+0x724>
      Error_Handler();
 80029f8:	f7ff fc4a 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 8002a00:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_UART_MspInit+0x76c>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2105      	movs	r1, #5
 8002a0c:	2027      	movs	r0, #39	; 0x27
 8002a0e:	f000 fef5 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a12:	2027      	movs	r0, #39	; 0x27
 8002a14:	f000 ff0c 	bl	8003830 <HAL_NVIC_EnableIRQ>
}
 8002a18:	bf00      	nop
 8002a1a:	3750      	adds	r7, #80	; 0x50
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40004400 	.word	0x40004400
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58020000 	.word	0x58020000
 8002a2c:	2000405c 	.word	0x2000405c
 8002a30:	40020040 	.word	0x40020040
 8002a34:	200043a0 	.word	0x200043a0
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40004800 	.word	0x40004800
 8002a40:	58020400 	.word	0x58020400
 8002a44:	200040e4 	.word	0x200040e4
 8002a48:	40020058 	.word	0x40020058

08002a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b090      	sub	sp, #64	; 0x40
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	d827      	bhi.n	8002aaa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	2036      	movs	r0, #54	; 0x36
 8002a60:	f000 fecc 	bl	80037fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a64:	2036      	movs	r0, #54	; 0x36
 8002a66:	f000 fee3 	bl	8003830 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002a6a:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_InitTick+0xc4>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_InitTick+0xc8>)
 8002a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a76:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_InitTick+0xc8>)
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a80:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_InitTick+0xc8>)
 8002a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a8e:	f107 0210 	add.w	r2, r7, #16
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 ff4d 	bl	8007938 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <HAL_InitTick+0x6a>
 8002aa8:	e001      	b.n	8002aae <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02b      	b.n	8002b06 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002aae:	f004 ff17 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8002ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002ab4:	e004      	b.n	8002ac0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ab6:	f004 ff13 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 8002aba:	4603      	mov	r3, r0
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_InitTick+0xcc>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	3b01      	subs	r3, #1
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_InitTick+0xd0>)
 8002ad0:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_InitTick+0xd4>)
 8002ad2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_InitTick+0xd0>)
 8002ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ada:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002adc:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_InitTick+0xd0>)
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_InitTick+0xd0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_InitTick+0xd0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002aee:	480b      	ldr	r0, [pc, #44]	; (8002b1c <HAL_InitTick+0xd0>)
 8002af0:	f006 fac6 	bl	8009080 <HAL_TIM_Base_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002afa:	4808      	ldr	r0, [pc, #32]	; (8002b1c <HAL_InitTick+0xd0>)
 8002afc:	f006 fb22 	bl	8009144 <HAL_TIM_Base_Start_IT>
 8002b00:	4603      	mov	r3, r0
 8002b02:	e000      	b.n	8002b06 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3740      	adds	r7, #64	; 0x40
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000008 	.word	0x20000008
 8002b14:	58024400 	.word	0x58024400
 8002b18:	431bde83 	.word	0x431bde83
 8002b1c:	200048e4 	.word	0x200048e4
 8002b20:	40001000 	.word	0x40001000

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002b28:	e7fe      	b.n	8002b28 <NMI_Handler+0x4>

08002b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <MemManage_Handler+0x4>

08002b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA1_Stream0_IRQHandler+0x10>)
 8002b56:	f002 f9a1 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20004328 	.word	0x20004328

08002b64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <DMA1_Stream1_IRQHandler+0x10>)
 8002b6a:	f002 f997 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000421c 	.word	0x2000421c

08002b78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <DMA1_Stream2_IRQHandler+0x10>)
 8002b7e:	f002 f98d 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	2000405c 	.word	0x2000405c

08002b8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <DMA1_Stream3_IRQHandler+0x10>)
 8002b92:	f002 f983 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200040e4 	.word	0x200040e4

08002ba0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <DMA1_Stream4_IRQHandler+0x10>)
 8002ba6:	f002 f979 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20004768 	.word	0x20004768

08002bb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA1_Stream5_IRQHandler+0x10>)
 8002bba:	f002 f96f 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20003fe4 	.word	0x20003fe4

08002bc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <DMA1_Stream6_IRQHandler+0x10>)
 8002bce:	f002 f965 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200047f0 	.word	0x200047f0

08002bdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <USART1_IRQHandler+0x10c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d06b      	beq.n	8002cda <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <USART1_IRQHandler+0x10c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002c0a:	4837      	ldr	r0, [pc, #220]	; (8002ce8 <USART1_IRQHandler+0x10c>)
 8002c0c:	f006 fe20 	bl	8009850 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <USART1_IRQHandler+0x114>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04a      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a35      	ldr	r2, [pc, #212]	; (8002cf4 <USART1_IRQHandler+0x118>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d045      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <USART1_IRQHandler+0x11c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d040      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <USART1_IRQHandler+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d03b      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c38:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a30      	ldr	r2, [pc, #192]	; (8002d00 <USART1_IRQHandler+0x124>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d036      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <USART1_IRQHandler+0x128>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d031      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <USART1_IRQHandler+0x12c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02c      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c56:	4b25      	ldr	r3, [pc, #148]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <USART1_IRQHandler+0x130>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d027      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <USART1_IRQHandler+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d022      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <USART1_IRQHandler+0x138>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d01d      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <USART1_IRQHandler+0x13c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d018      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <USART1_IRQHandler+0x140>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <USART1_IRQHandler+0x144>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00e      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <USART1_IRQHandler+0x148>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <USART1_IRQHandler+0x110>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <USART1_IRQHandler+0x14c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <USART1_IRQHandler+0xd4>
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <USART1_IRQHandler+0x110>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <USART1_IRQHandler+0x150>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d103      	bne.n	8002cb8 <USART1_IRQHandler+0xdc>
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <USART1_IRQHandler+0x110>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	e002      	b.n	8002cbe <USART1_IRQHandler+0xe2>
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <USART1_IRQHandler+0x110>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <USART1_IRQHandler+0x10c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <USART1_IRQHandler+0x10c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0210 	bic.w	r2, r2, #16
 8002ccc:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <USART1_IRQHandler+0x154>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f008 fedf 	bl	800ba98 <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cda:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <USART1_IRQHandler+0x10c>)
 8002cdc:	f006 fe28 	bl	8009930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20004490 	.word	0x20004490
 8002cec:	20004328 	.word	0x20004328
 8002cf0:	40020010 	.word	0x40020010
 8002cf4:	40020028 	.word	0x40020028
 8002cf8:	40020040 	.word	0x40020040
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	40020070 	.word	0x40020070
 8002d04:	40020088 	.word	0x40020088
 8002d08:	400200a0 	.word	0x400200a0
 8002d0c:	400200b8 	.word	0x400200b8
 8002d10:	40020410 	.word	0x40020410
 8002d14:	40020428 	.word	0x40020428
 8002d18:	40020440 	.word	0x40020440
 8002d1c:	40020458 	.word	0x40020458
 8002d20:	40020470 	.word	0x40020470
 8002d24:	40020488 	.word	0x40020488
 8002d28:	400204a0 	.word	0x400204a0
 8002d2c:	400204b8 	.word	0x400204b8
 8002d30:	20003fdc 	.word	0x20003fdc

08002d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <USART2_IRQHandler+0x10c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d06b      	beq.n	8002e32 <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002d5a:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <USART2_IRQHandler+0x10c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8002d62:	4837      	ldr	r0, [pc, #220]	; (8002e40 <USART2_IRQHandler+0x10c>)
 8002d64:	f006 fd74 	bl	8009850 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002d68:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <USART2_IRQHandler+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04a      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a35      	ldr	r2, [pc, #212]	; (8002e4c <USART2_IRQHandler+0x118>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d045      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002d7c:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a33      	ldr	r2, [pc, #204]	; (8002e50 <USART2_IRQHandler+0x11c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d040      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <USART2_IRQHandler+0x120>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d03b      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002d90:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a30      	ldr	r2, [pc, #192]	; (8002e58 <USART2_IRQHandler+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d036      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <USART2_IRQHandler+0x128>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d031      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2d      	ldr	r2, [pc, #180]	; (8002e60 <USART2_IRQHandler+0x12c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02c      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002dae:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <USART2_IRQHandler+0x130>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d027      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <USART2_IRQHandler+0x134>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <USART2_IRQHandler+0x138>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01d      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <USART2_IRQHandler+0x13c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <USART2_IRQHandler+0x140>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <USART2_IRQHandler+0x144>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <USART2_IRQHandler+0x148>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <USART2_IRQHandler+0x14c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <USART2_IRQHandler+0xd4>
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <USART2_IRQHandler+0x150>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <USART2_IRQHandler+0xdc>
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	e002      	b.n	8002e16 <USART2_IRQHandler+0xe2>
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <USART2_IRQHandler+0x110>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <USART2_IRQHandler+0x10c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <USART2_IRQHandler+0x10c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0210 	bic.w	r2, r2, #16
 8002e24:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <USART2_IRQHandler+0x154>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f008 fe33 	bl	800ba98 <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e32:	4803      	ldr	r0, [pc, #12]	; (8002e40 <USART2_IRQHandler+0x10c>)
 8002e34:	f006 fd7c 	bl	8009930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200046d8 	.word	0x200046d8
 8002e44:	2000405c 	.word	0x2000405c
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40020028 	.word	0x40020028
 8002e50:	40020040 	.word	0x40020040
 8002e54:	40020058 	.word	0x40020058
 8002e58:	40020070 	.word	0x40020070
 8002e5c:	40020088 	.word	0x40020088
 8002e60:	400200a0 	.word	0x400200a0
 8002e64:	400200b8 	.word	0x400200b8
 8002e68:	40020410 	.word	0x40020410
 8002e6c:	40020428 	.word	0x40020428
 8002e70:	40020440 	.word	0x40020440
 8002e74:	40020458 	.word	0x40020458
 8002e78:	40020470 	.word	0x40020470
 8002e7c:	40020488 	.word	0x40020488
 8002e80:	400204a0 	.word	0x400204a0
 8002e84:	400204b8 	.word	0x400204b8
 8002e88:	200041f4 	.word	0x200041f4

08002e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8002e96:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <USART3_IRQHandler+0x10c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06b      	beq.n	8002f8a <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <USART3_IRQHandler+0x10c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8002eba:	4837      	ldr	r0, [pc, #220]	; (8002f98 <USART3_IRQHandler+0x10c>)
 8002ebc:	f006 fcc8 	bl	8009850 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <USART3_IRQHandler+0x114>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d04a      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <USART3_IRQHandler+0x118>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d045      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <USART3_IRQHandler+0x11c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d040      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002ede:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a32      	ldr	r2, [pc, #200]	; (8002fac <USART3_IRQHandler+0x120>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d03b      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <USART3_IRQHandler+0x124>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d036      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2f      	ldr	r2, [pc, #188]	; (8002fb4 <USART3_IRQHandler+0x128>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d031      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <USART3_IRQHandler+0x12c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02c      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f06:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <USART3_IRQHandler+0x130>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f10:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <USART3_IRQHandler+0x134>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <USART3_IRQHandler+0x138>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <USART3_IRQHandler+0x13c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <USART3_IRQHandler+0x140>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <USART3_IRQHandler+0x144>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <USART3_IRQHandler+0x148>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <USART3_IRQHandler+0x14c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <USART3_IRQHandler+0xd4>
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <USART3_IRQHandler+0x150>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <USART3_IRQHandler+0xdc>
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	e002      	b.n	8002f6e <USART3_IRQHandler+0xe2>
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <USART3_IRQHandler+0x110>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <USART3_IRQHandler+0x10c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <USART3_IRQHandler+0x10c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0210 	bic.w	r2, r2, #16
 8002f7c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <USART3_IRQHandler+0x154>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f008 fd87 	bl	800ba98 <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f8a:	4803      	ldr	r0, [pc, #12]	; (8002f98 <USART3_IRQHandler+0x10c>)
 8002f8c:	f006 fcd0 	bl	8009930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000415c 	.word	0x2000415c
 8002f9c:	200040e4 	.word	0x200040e4
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	200048e0 	.word	0x200048e0

08002fe4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <DMA1_Stream7_IRQHandler+0x10>)
 8002fea:	f001 ff57 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20004418 	.word	0x20004418

08002ff8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <UART4_IRQHandler+0x10c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b10      	cmp	r3, #16
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d06b      	beq.n	80030f6 <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800301e:	4b39      	ldr	r3, [pc, #228]	; (8003104 <UART4_IRQHandler+0x10c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8003026:	4837      	ldr	r0, [pc, #220]	; (8003104 <UART4_IRQHandler+0x10c>)
 8003028:	f006 fc12 	bl	8009850 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <UART4_IRQHandler+0x110>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a36      	ldr	r2, [pc, #216]	; (800310c <UART4_IRQHandler+0x114>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d04a      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <UART4_IRQHandler+0x110>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a35      	ldr	r2, [pc, #212]	; (8003110 <UART4_IRQHandler+0x118>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d045      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003040:	4b31      	ldr	r3, [pc, #196]	; (8003108 <UART4_IRQHandler+0x110>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a33      	ldr	r2, [pc, #204]	; (8003114 <UART4_IRQHandler+0x11c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d040      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <UART4_IRQHandler+0x110>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a32      	ldr	r2, [pc, #200]	; (8003118 <UART4_IRQHandler+0x120>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d03b      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003054:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <UART4_IRQHandler+0x110>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a30      	ldr	r2, [pc, #192]	; (800311c <UART4_IRQHandler+0x124>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d036      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <UART4_IRQHandler+0x110>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <UART4_IRQHandler+0x128>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d031      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <UART4_IRQHandler+0x110>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <UART4_IRQHandler+0x12c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02c      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <UART4_IRQHandler+0x110>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <UART4_IRQHandler+0x130>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d027      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <UART4_IRQHandler+0x110>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <UART4_IRQHandler+0x134>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d022      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <UART4_IRQHandler+0x110>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <UART4_IRQHandler+0x138>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01d      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <UART4_IRQHandler+0x110>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <UART4_IRQHandler+0x13c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d018      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <UART4_IRQHandler+0x110>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a26      	ldr	r2, [pc, #152]	; (8003138 <UART4_IRQHandler+0x140>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 80030a4:	4b18      	ldr	r3, [pc, #96]	; (8003108 <UART4_IRQHandler+0x110>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a24      	ldr	r2, [pc, #144]	; (800313c <UART4_IRQHandler+0x144>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00e      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <UART4_IRQHandler+0x110>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <UART4_IRQHandler+0x148>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d009      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <UART4_IRQHandler+0x110>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <UART4_IRQHandler+0x14c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <UART4_IRQHandler+0xd4>
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <UART4_IRQHandler+0x110>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a20      	ldr	r2, [pc, #128]	; (8003148 <UART4_IRQHandler+0x150>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d103      	bne.n	80030d4 <UART4_IRQHandler+0xdc>
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <UART4_IRQHandler+0x110>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	e002      	b.n	80030da <UART4_IRQHandler+0xe2>
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <UART4_IRQHandler+0x110>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <UART4_IRQHandler+0x10c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <UART4_IRQHandler+0x10c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0210 	bic.w	r2, r2, #16
 80030e8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <UART4_IRQHandler+0x154>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f008 fcd1 	bl	800ba98 <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80030f6:	4803      	ldr	r0, [pc, #12]	; (8003104 <UART4_IRQHandler+0x10c>)
 80030f8:	f006 fc1a 	bl	8009930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20004640 	.word	0x20004640
 8003108:	20003fe4 	.word	0x20003fe4
 800310c:	40020010 	.word	0x40020010
 8003110:	40020028 	.word	0x40020028
 8003114:	40020040 	.word	0x40020040
 8003118:	40020058 	.word	0x40020058
 800311c:	40020070 	.word	0x40020070
 8003120:	40020088 	.word	0x40020088
 8003124:	400200a0 	.word	0x400200a0
 8003128:	400200b8 	.word	0x400200b8
 800312c:	40020410 	.word	0x40020410
 8003130:	40020428 	.word	0x40020428
 8003134:	40020440 	.word	0x40020440
 8003138:	40020458 	.word	0x40020458
 800313c:	40020470 	.word	0x40020470
 8003140:	40020488 	.word	0x40020488
 8003144:	400204a0 	.word	0x400204a0
 8003148:	400204b8 	.word	0x400204b8
 800314c:	200047ec 	.word	0x200047ec

08003150 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <UART5_IRQHandler+0x10c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d06b      	beq.n	800324e <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <UART5_IRQHandler+0x10c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2210      	movs	r2, #16
 800317c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart5);
 800317e:	4837      	ldr	r0, [pc, #220]	; (800325c <UART5_IRQHandler+0x10c>)
 8003180:	f006 fb66 	bl	8009850 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <UART5_IRQHandler+0x110>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a36      	ldr	r2, [pc, #216]	; (8003264 <UART5_IRQHandler+0x114>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 800318e:	4b34      	ldr	r3, [pc, #208]	; (8003260 <UART5_IRQHandler+0x110>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a35      	ldr	r2, [pc, #212]	; (8003268 <UART5_IRQHandler+0x118>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 8003198:	4b31      	ldr	r3, [pc, #196]	; (8003260 <UART5_IRQHandler+0x110>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a33      	ldr	r2, [pc, #204]	; (800326c <UART5_IRQHandler+0x11c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <UART5_IRQHandler+0x110>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a32      	ldr	r2, [pc, #200]	; (8003270 <UART5_IRQHandler+0x120>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <UART5_IRQHandler+0x110>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <UART5_IRQHandler+0x124>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <UART5_IRQHandler+0x110>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <UART5_IRQHandler+0x128>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <UART5_IRQHandler+0x110>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2d      	ldr	r2, [pc, #180]	; (800327c <UART5_IRQHandler+0x12c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031ca:	4b25      	ldr	r3, [pc, #148]	; (8003260 <UART5_IRQHandler+0x110>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <UART5_IRQHandler+0x130>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <UART5_IRQHandler+0x110>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <UART5_IRQHandler+0x134>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <UART5_IRQHandler+0x110>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a29      	ldr	r2, [pc, #164]	; (8003288 <UART5_IRQHandler+0x138>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <UART5_IRQHandler+0x110>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <UART5_IRQHandler+0x13c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <UART5_IRQHandler+0x110>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a26      	ldr	r2, [pc, #152]	; (8003290 <UART5_IRQHandler+0x140>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <UART5_IRQHandler+0x110>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a24      	ldr	r2, [pc, #144]	; (8003294 <UART5_IRQHandler+0x144>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <UART5_IRQHandler+0x110>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a23      	ldr	r2, [pc, #140]	; (8003298 <UART5_IRQHandler+0x148>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <UART5_IRQHandler+0x110>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a21      	ldr	r2, [pc, #132]	; (800329c <UART5_IRQHandler+0x14c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <UART5_IRQHandler+0xd4>
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <UART5_IRQHandler+0x110>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a20      	ldr	r2, [pc, #128]	; (80032a0 <UART5_IRQHandler+0x150>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <UART5_IRQHandler+0xdc>
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <UART5_IRQHandler+0x110>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	e002      	b.n	8003232 <UART5_IRQHandler+0xe2>
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <UART5_IRQHandler+0x110>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart5, UART_IT_IDLE);
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <UART5_IRQHandler+0x10c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <UART5_IRQHandler+0x10c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0210 	bic.w	r2, r2, #16
 8003240:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30TransFinishHandle, pdFALSE);
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <UART5_IRQHandler+0x154>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f008 fc25 	bl	800ba98 <xQueueGiveFromISR>
	}
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <UART5_IRQHandler+0x10c>)
 8003250:	f006 fb6e 	bl	8009930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20004294 	.word	0x20004294
 8003260:	20004768 	.word	0x20004768
 8003264:	40020010 	.word	0x40020010
 8003268:	40020028 	.word	0x40020028
 800326c:	40020040 	.word	0x40020040
 8003270:	40020058 	.word	0x40020058
 8003274:	40020070 	.word	0x40020070
 8003278:	40020088 	.word	0x40020088
 800327c:	400200a0 	.word	0x400200a0
 8003280:	400200b8 	.word	0x400200b8
 8003284:	40020410 	.word	0x40020410
 8003288:	40020428 	.word	0x40020428
 800328c:	40020440 	.word	0x40020440
 8003290:	40020458 	.word	0x40020458
 8003294:	40020470 	.word	0x40020470
 8003298:	40020488 	.word	0x40020488
 800329c:	400204a0 	.word	0x400204a0
 80032a0:	400204b8 	.word	0x400204b8
 80032a4:	20003fd8 	.word	0x20003fd8

080032a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <TIM6_DAC_IRQHandler+0x10>)
 80032ae:	f005 ffb9 	bl	8009224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200048e4 	.word	0x200048e4

080032bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <DMA2_Stream0_IRQHandler+0x10>)
 80032c2:	f001 fdeb 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20004530 	.word	0x20004530

080032d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <DMA2_Stream1_IRQHandler+0x10>)
 80032d6:	f001 fde1 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200043a0 	.word	0x200043a0

080032e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <DMA2_Stream2_IRQHandler+0x10>)
 80032ea:	f001 fdd7 	bl	8004e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20004868 	.word	0x20004868

080032f8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <UART8_IRQHandler+0x10c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d06b      	beq.n	80033f6 <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <UART8_IRQHandler+0x10c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2210      	movs	r2, #16
 8003324:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8003326:	4837      	ldr	r0, [pc, #220]	; (8003404 <UART8_IRQHandler+0x10c>)
 8003328:	f006 fa92 	bl	8009850 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <UART8_IRQHandler+0x110>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a36      	ldr	r2, [pc, #216]	; (800340c <UART8_IRQHandler+0x114>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d04a      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <UART8_IRQHandler+0x110>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a35      	ldr	r2, [pc, #212]	; (8003410 <UART8_IRQHandler+0x118>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d045      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <UART8_IRQHandler+0x110>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a33      	ldr	r2, [pc, #204]	; (8003414 <UART8_IRQHandler+0x11c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d040      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <UART8_IRQHandler+0x110>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a32      	ldr	r2, [pc, #200]	; (8003418 <UART8_IRQHandler+0x120>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d03b      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <UART8_IRQHandler+0x110>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a30      	ldr	r2, [pc, #192]	; (800341c <UART8_IRQHandler+0x124>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d036      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <UART8_IRQHandler+0x110>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <UART8_IRQHandler+0x128>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d031      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <UART8_IRQHandler+0x110>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <UART8_IRQHandler+0x12c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02c      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003372:	4b25      	ldr	r3, [pc, #148]	; (8003408 <UART8_IRQHandler+0x110>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <UART8_IRQHandler+0x130>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d027      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <UART8_IRQHandler+0x110>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2a      	ldr	r2, [pc, #168]	; (800342c <UART8_IRQHandler+0x134>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d022      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <UART8_IRQHandler+0x110>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a29      	ldr	r2, [pc, #164]	; (8003430 <UART8_IRQHandler+0x138>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d01d      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <UART8_IRQHandler+0x110>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a27      	ldr	r2, [pc, #156]	; (8003434 <UART8_IRQHandler+0x13c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <UART8_IRQHandler+0x110>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a26      	ldr	r2, [pc, #152]	; (8003438 <UART8_IRQHandler+0x140>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 80033a4:	4b18      	ldr	r3, [pc, #96]	; (8003408 <UART8_IRQHandler+0x110>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a24      	ldr	r2, [pc, #144]	; (800343c <UART8_IRQHandler+0x144>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <UART8_IRQHandler+0x110>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a23      	ldr	r2, [pc, #140]	; (8003440 <UART8_IRQHandler+0x148>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <UART8_IRQHandler+0x110>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <UART8_IRQHandler+0x14c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <UART8_IRQHandler+0xd4>
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <UART8_IRQHandler+0x110>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <UART8_IRQHandler+0x150>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <UART8_IRQHandler+0xdc>
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <UART8_IRQHandler+0x110>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	e002      	b.n	80033da <UART8_IRQHandler+0xe2>
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <UART8_IRQHandler+0x110>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <UART8_IRQHandler+0x10c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <UART8_IRQHandler+0x10c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0210 	bic.w	r2, r2, #16
 80033e8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <UART8_IRQHandler+0x154>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f008 fb51 	bl	800ba98 <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80033f6:	4803      	ldr	r0, [pc, #12]	; (8003404 <UART8_IRQHandler+0x10c>)
 80033f8:	f006 fa9a 	bl	8009930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200045ac 	.word	0x200045ac
 8003408:	20004418 	.word	0x20004418
 800340c:	40020010 	.word	0x40020010
 8003410:	40020028 	.word	0x40020028
 8003414:	40020040 	.word	0x40020040
 8003418:	40020058 	.word	0x40020058
 800341c:	40020070 	.word	0x40020070
 8003420:	40020088 	.word	0x40020088
 8003424:	400200a0 	.word	0x400200a0
 8003428:	400200b8 	.word	0x400200b8
 800342c:	40020410 	.word	0x40020410
 8003430:	40020428 	.word	0x40020428
 8003434:	40020440 	.word	0x40020440
 8003438:	40020458 	.word	0x40020458
 800343c:	40020470 	.word	0x40020470
 8003440:	40020488 	.word	0x40020488
 8003444:	400204a0 	.word	0x400204a0
 8003448:	400204b8 	.word	0x400204b8
 800344c:	200045a8 	.word	0x200045a8

08003450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <SystemInit+0xec>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	4a38      	ldr	r2, [pc, #224]	; (800353c <SystemInit+0xec>)
 800345c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <SystemInit+0xf0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	2b06      	cmp	r3, #6
 800346e:	d807      	bhi.n	8003480 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <SystemInit+0xf0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 030f 	bic.w	r3, r3, #15
 8003478:	4a31      	ldr	r2, [pc, #196]	; (8003540 <SystemInit+0xf0>)
 800347a:	f043 0307 	orr.w	r3, r3, #7
 800347e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003480:	4b30      	ldr	r3, [pc, #192]	; (8003544 <SystemInit+0xf4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <SystemInit+0xf4>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <SystemInit+0xf4>)
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <SystemInit+0xf4>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	492b      	ldr	r1, [pc, #172]	; (8003544 <SystemInit+0xf4>)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <SystemInit+0xf8>)
 800349a:	4013      	ands	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800349e:	4b28      	ldr	r3, [pc, #160]	; (8003540 <SystemInit+0xf0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034aa:	4b25      	ldr	r3, [pc, #148]	; (8003540 <SystemInit+0xf0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 030f 	bic.w	r3, r3, #15
 80034b2:	4a23      	ldr	r2, [pc, #140]	; (8003540 <SystemInit+0xf0>)
 80034b4:	f043 0307 	orr.w	r3, r3, #7
 80034b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <SystemInit+0xf4>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034c0:	4b20      	ldr	r3, [pc, #128]	; (8003544 <SystemInit+0xf4>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <SystemInit+0xf4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <SystemInit+0xf4>)
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <SystemInit+0xfc>)
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <SystemInit+0xf4>)
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <SystemInit+0x100>)
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <SystemInit+0xf4>)
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <SystemInit+0x104>)
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <SystemInit+0xf4>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <SystemInit+0xf4>)
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <SystemInit+0x104>)
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <SystemInit+0xf4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <SystemInit+0xf4>)
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <SystemInit+0x104>)
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <SystemInit+0xf4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <SystemInit+0xf4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a10      	ldr	r2, [pc, #64]	; (8003544 <SystemInit+0xf4>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003506:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <SystemInit+0xf4>)
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <SystemInit+0x108>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <SystemInit+0x10c>)
 8003514:	4013      	ands	r3, r2
 8003516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351a:	d202      	bcs.n	8003522 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <SystemInit+0x110>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <SystemInit+0x114>)
 8003524:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003528:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SystemInit+0xec>)
 800352c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003530:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00
 8003540:	52002000 	.word	0x52002000
 8003544:	58024400 	.word	0x58024400
 8003548:	eaf6ed7f 	.word	0xeaf6ed7f
 800354c:	02020200 	.word	0x02020200
 8003550:	01ff0000 	.word	0x01ff0000
 8003554:	01010280 	.word	0x01010280
 8003558:	5c001000 	.word	0x5c001000
 800355c:	ffff0000 	.word	0xffff0000
 8003560:	51008108 	.word	0x51008108
 8003564:	52004000 	.word	0x52004000

08003568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800356c:	f7ff ff70 	bl	8003450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003572:	490d      	ldr	r1, [pc, #52]	; (80035a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003578:	e002      	b.n	8003580 <LoopCopyDataInit>

0800357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357e:	3304      	adds	r3, #4

08003580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003584:	d3f9      	bcc.n	800357a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003588:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800358c:	e001      	b.n	8003592 <LoopFillZerobss>

0800358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003590:	3204      	adds	r2, #4

08003592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003594:	d3fb      	bcc.n	800358e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003596:	f00a fa61 	bl	800da5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359a:	f7fd fdd3 	bl	8001144 <main>
  bx  lr
 800359e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80035ac:	0800dbe8 	.word	0x0800dbe8
  ldr r2, =_sbss
 80035b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80035b4:	20004934 	.word	0x20004934

080035b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b8:	e7fe      	b.n	80035b8 <ADC3_IRQHandler>
	...

080035bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c2:	2003      	movs	r0, #3
 80035c4:	f000 f90f 	bl	80037e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035c8:	f003 ffe0 	bl	800758c <HAL_RCC_GetSysClockFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_Init+0x68>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	4913      	ldr	r1, [pc, #76]	; (8003628 <HAL_Init+0x6c>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_Init+0x68>)
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <HAL_Init+0x6c>)
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	4a0b      	ldr	r2, [pc, #44]	; (800362c <HAL_Init+0x70>)
 80035fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003600:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <HAL_Init+0x74>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003606:	2000      	movs	r0, #0
 8003608:	f7ff fa20 	bl	8002a4c <HAL_InitTick>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e002      	b.n	800361c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003616:	f7fe fe41 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	0800db98 	.word	0x0800db98
 800362c:	20000004 	.word	0x20000004
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_IncTick+0x20>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x24>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_IncTick+0x24>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c
 8003658:	20004930 	.word	0x20004930

0800365c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return uwTick;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_GetTick+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20004930 	.word	0x20004930

08003674 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <HAL_GetREVID+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0c1b      	lsrs	r3, r3, #16
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	5c001000 	.word	0x5c001000

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <__NVIC_SetPriorityGrouping+0x40>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <__NVIC_SetPriorityGrouping+0x40>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	60d3      	str	r3, [r2, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00
 80036d0:	05fa0000 	.word	0x05fa0000

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff4c 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800380a:	f7ff ff63 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 800380e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	6978      	ldr	r0, [r7, #20]
 8003816:	f7ff ffb3 	bl	8003780 <NVIC_EncodePriority>
 800381a:	4602      	mov	r2, r0
 800381c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff82 	bl	800372c <__NVIC_SetPriority>
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff56 	bl	80036f0 <__NVIC_EnableIRQ>
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7ff ff02 	bl	800365c <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e316      	b.n	8003e92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a66      	ldr	r2, [pc, #408]	; (8003a04 <HAL_DMA_Init+0x1b8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04a      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a65      	ldr	r2, [pc, #404]	; (8003a08 <HAL_DMA_Init+0x1bc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d045      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <HAL_DMA_Init+0x1c0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d040      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a62      	ldr	r2, [pc, #392]	; (8003a10 <HAL_DMA_Init+0x1c4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d03b      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <HAL_DMA_Init+0x1c8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d036      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5f      	ldr	r2, [pc, #380]	; (8003a18 <HAL_DMA_Init+0x1cc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d031      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_DMA_Init+0x1d0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02c      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a5c      	ldr	r2, [pc, #368]	; (8003a20 <HAL_DMA_Init+0x1d4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d027      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5a      	ldr	r2, [pc, #360]	; (8003a24 <HAL_DMA_Init+0x1d8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a59      	ldr	r2, [pc, #356]	; (8003a28 <HAL_DMA_Init+0x1dc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01d      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a57      	ldr	r2, [pc, #348]	; (8003a2c <HAL_DMA_Init+0x1e0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_DMA_Init+0x1e4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a54      	ldr	r2, [pc, #336]	; (8003a34 <HAL_DMA_Init+0x1e8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a53      	ldr	r2, [pc, #332]	; (8003a38 <HAL_DMA_Init+0x1ec>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a51      	ldr	r2, [pc, #324]	; (8003a3c <HAL_DMA_Init+0x1f0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_Init+0xb8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a50      	ldr	r2, [pc, #320]	; (8003a40 <HAL_DMA_Init+0x1f4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <HAL_DMA_Init+0xbc>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_DMA_Init+0xbe>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 813b 	beq.w	8003b86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a37      	ldr	r2, [pc, #220]	; (8003a04 <HAL_DMA_Init+0x1b8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a36      	ldr	r2, [pc, #216]	; (8003a08 <HAL_DMA_Init+0x1bc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <HAL_DMA_Init+0x1c0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a33      	ldr	r2, [pc, #204]	; (8003a10 <HAL_DMA_Init+0x1c4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <HAL_DMA_Init+0x1c8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a30      	ldr	r2, [pc, #192]	; (8003a18 <HAL_DMA_Init+0x1cc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2e      	ldr	r2, [pc, #184]	; (8003a1c <HAL_DMA_Init+0x1d0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <HAL_DMA_Init+0x1d4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2b      	ldr	r2, [pc, #172]	; (8003a24 <HAL_DMA_Init+0x1d8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2a      	ldr	r2, [pc, #168]	; (8003a28 <HAL_DMA_Init+0x1dc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_DMA_Init+0x1e0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a27      	ldr	r2, [pc, #156]	; (8003a30 <HAL_DMA_Init+0x1e4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <HAL_DMA_Init+0x1e8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <HAL_DMA_Init+0x1ec>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <HAL_DMA_Init+0x1f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Init+0x174>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <HAL_DMA_Init+0x1f4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <HAL_DMA_Init+0x186>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e007      	b.n	80039e2 <HAL_DMA_Init+0x196>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039e2:	e02f      	b.n	8003a44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e4:	f7ff fe3a 	bl	800365c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d928      	bls.n	8003a44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2203      	movs	r2, #3
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e246      	b.n	8003e92 <HAL_DMA_Init+0x646>
 8003a04:	40020010 	.word	0x40020010
 8003a08:	40020028 	.word	0x40020028
 8003a0c:	40020040 	.word	0x40020040
 8003a10:	40020058 	.word	0x40020058
 8003a14:	40020070 	.word	0x40020070
 8003a18:	40020088 	.word	0x40020088
 8003a1c:	400200a0 	.word	0x400200a0
 8003a20:	400200b8 	.word	0x400200b8
 8003a24:	40020410 	.word	0x40020410
 8003a28:	40020428 	.word	0x40020428
 8003a2c:	40020440 	.word	0x40020440
 8003a30:	40020458 	.word	0x40020458
 8003a34:	40020470 	.word	0x40020470
 8003a38:	40020488 	.word	0x40020488
 8003a3c:	400204a0 	.word	0x400204a0
 8003a40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1c8      	bne.n	80039e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4b83      	ldr	r3, [pc, #524]	; (8003c6c <HAL_DMA_Init+0x420>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003aa8:	4b71      	ldr	r3, [pc, #452]	; (8003c70 <HAL_DMA_Init+0x424>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b71      	ldr	r3, [pc, #452]	; (8003c74 <HAL_DMA_Init+0x428>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab4:	d328      	bcc.n	8003b08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b28      	cmp	r3, #40	; 0x28
 8003abc:	d903      	bls.n	8003ac6 <HAL_DMA_Init+0x27a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ac4:	d917      	bls.n	8003af6 <HAL_DMA_Init+0x2aa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b3e      	cmp	r3, #62	; 0x3e
 8003acc:	d903      	bls.n	8003ad6 <HAL_DMA_Init+0x28a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b42      	cmp	r3, #66	; 0x42
 8003ad4:	d90f      	bls.n	8003af6 <HAL_DMA_Init+0x2aa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b46      	cmp	r3, #70	; 0x46
 8003adc:	d903      	bls.n	8003ae6 <HAL_DMA_Init+0x29a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b48      	cmp	r3, #72	; 0x48
 8003ae4:	d907      	bls.n	8003af6 <HAL_DMA_Init+0x2aa>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b4e      	cmp	r3, #78	; 0x4e
 8003aec:	d905      	bls.n	8003afa <HAL_DMA_Init+0x2ae>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b52      	cmp	r3, #82	; 0x52
 8003af4:	d801      	bhi.n	8003afa <HAL_DMA_Init+0x2ae>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_DMA_Init+0x2b0>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d117      	bne.n	8003b62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f002 fb3d 	bl	80061c4 <DMA_CheckFifoParam>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e197      	b.n	8003e92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f002 fa78 	bl	8006060 <DMA_CalcBaseAndBitshift>
 8003b70:	4603      	mov	r3, r0
 8003b72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	223f      	movs	r2, #63	; 0x3f
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	e0cd      	b.n	8003d22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3b      	ldr	r2, [pc, #236]	; (8003c78 <HAL_DMA_Init+0x42c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a39      	ldr	r2, [pc, #228]	; (8003c7c <HAL_DMA_Init+0x430>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01d      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a38      	ldr	r2, [pc, #224]	; (8003c80 <HAL_DMA_Init+0x434>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a36      	ldr	r2, [pc, #216]	; (8003c84 <HAL_DMA_Init+0x438>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a35      	ldr	r2, [pc, #212]	; (8003c88 <HAL_DMA_Init+0x43c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a33      	ldr	r2, [pc, #204]	; (8003c8c <HAL_DMA_Init+0x440>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a32      	ldr	r2, [pc, #200]	; (8003c90 <HAL_DMA_Init+0x444>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_DMA_Init+0x38a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a30      	ldr	r2, [pc, #192]	; (8003c94 <HAL_DMA_Init+0x448>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_DMA_Init+0x38e>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_DMA_Init+0x390>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8097 	beq.w	8003d10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <HAL_DMA_Init+0x42c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d021      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_DMA_Init+0x430>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01c      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_DMA_Init+0x434>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d017      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_DMA_Init+0x438>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d012      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <HAL_DMA_Init+0x43c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00d      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <HAL_DMA_Init+0x440>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d008      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_DMA_Init+0x444>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <HAL_DMA_Init+0x3e4>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_DMA_Init+0x448>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_DMA_Init+0x44c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d020      	beq.n	8003c9c <HAL_DMA_Init+0x450>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d102      	bne.n	8003c68 <HAL_DMA_Init+0x41c>
 8003c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c66:	e01a      	b.n	8003c9e <HAL_DMA_Init+0x452>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e018      	b.n	8003c9e <HAL_DMA_Init+0x452>
 8003c6c:	fe10803f 	.word	0xfe10803f
 8003c70:	5c001000 	.word	0x5c001000
 8003c74:	ffff0000 	.word	0xffff0000
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	5802541c 	.word	0x5802541c
 8003c80:	58025430 	.word	0x58025430
 8003c84:	58025444 	.word	0x58025444
 8003c88:	58025458 	.word	0x58025458
 8003c8c:	5802546c 	.word	0x5802546c
 8003c90:	58025480 	.word	0x58025480
 8003c94:	58025494 	.word	0x58025494
 8003c98:	fffe000f 	.word	0xfffe000f
 8003c9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ccc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <HAL_DMA_Init+0x650>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4a6e      	ldr	r2, [pc, #440]	; (8003ea0 <HAL_DMA_Init+0x654>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f002 f9b3 	bl	8006060 <DMA_CalcBaseAndBitshift>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	2201      	movs	r2, #1
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	e008      	b.n	8003d22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2240      	movs	r2, #64	; 0x40
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0b7      	b.n	8003e92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a5f      	ldr	r2, [pc, #380]	; (8003ea4 <HAL_DMA_Init+0x658>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d072      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a5d      	ldr	r2, [pc, #372]	; (8003ea8 <HAL_DMA_Init+0x65c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d06d      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a5c      	ldr	r2, [pc, #368]	; (8003eac <HAL_DMA_Init+0x660>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d068      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5a      	ldr	r2, [pc, #360]	; (8003eb0 <HAL_DMA_Init+0x664>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d063      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a59      	ldr	r2, [pc, #356]	; (8003eb4 <HAL_DMA_Init+0x668>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d05e      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a57      	ldr	r2, [pc, #348]	; (8003eb8 <HAL_DMA_Init+0x66c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d059      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a56      	ldr	r2, [pc, #344]	; (8003ebc <HAL_DMA_Init+0x670>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d054      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a54      	ldr	r2, [pc, #336]	; (8003ec0 <HAL_DMA_Init+0x674>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04f      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a53      	ldr	r2, [pc, #332]	; (8003ec4 <HAL_DMA_Init+0x678>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <HAL_DMA_Init+0x67c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a50      	ldr	r2, [pc, #320]	; (8003ecc <HAL_DMA_Init+0x680>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a4e      	ldr	r2, [pc, #312]	; (8003ed0 <HAL_DMA_Init+0x684>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <HAL_DMA_Init+0x688>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a4b      	ldr	r2, [pc, #300]	; (8003ed8 <HAL_DMA_Init+0x68c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <HAL_DMA_Init+0x690>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a48      	ldr	r2, [pc, #288]	; (8003ee0 <HAL_DMA_Init+0x694>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a47      	ldr	r2, [pc, #284]	; (8003ee4 <HAL_DMA_Init+0x698>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a45      	ldr	r2, [pc, #276]	; (8003ee8 <HAL_DMA_Init+0x69c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a44      	ldr	r2, [pc, #272]	; (8003eec <HAL_DMA_Init+0x6a0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a42      	ldr	r2, [pc, #264]	; (8003ef0 <HAL_DMA_Init+0x6a4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <HAL_DMA_Init+0x6a8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_DMA_Init+0x6ac>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3e      	ldr	r2, [pc, #248]	; (8003efc <HAL_DMA_Init+0x6b0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_Init+0x5c6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <HAL_DMA_Init+0x6b4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_Init+0x5ca>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_DMA_Init+0x5cc>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d032      	beq.n	8003e82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f002 fa4d 	bl	80062bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d102      	bne.n	8003e30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d010      	beq.n	8003e70 <HAL_DMA_Init+0x624>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d80c      	bhi.n	8003e70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f002 faca 	bl	80063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	e008      	b.n	8003e82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	a7fdabf8 	.word	0xa7fdabf8
 8003ea0:	cccccccd 	.word	0xcccccccd
 8003ea4:	40020010 	.word	0x40020010
 8003ea8:	40020028 	.word	0x40020028
 8003eac:	40020040 	.word	0x40020040
 8003eb0:	40020058 	.word	0x40020058
 8003eb4:	40020070 	.word	0x40020070
 8003eb8:	40020088 	.word	0x40020088
 8003ebc:	400200a0 	.word	0x400200a0
 8003ec0:	400200b8 	.word	0x400200b8
 8003ec4:	40020410 	.word	0x40020410
 8003ec8:	40020428 	.word	0x40020428
 8003ecc:	40020440 	.word	0x40020440
 8003ed0:	40020458 	.word	0x40020458
 8003ed4:	40020470 	.word	0x40020470
 8003ed8:	40020488 	.word	0x40020488
 8003edc:	400204a0 	.word	0x400204a0
 8003ee0:	400204b8 	.word	0x400204b8
 8003ee4:	58025408 	.word	0x58025408
 8003ee8:	5802541c 	.word	0x5802541c
 8003eec:	58025430 	.word	0x58025430
 8003ef0:	58025444 	.word	0x58025444
 8003ef4:	58025458 	.word	0x58025458
 8003ef8:	5802546c 	.word	0x5802546c
 8003efc:	58025480 	.word	0x58025480
 8003f00:	58025494 	.word	0x58025494

08003f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e226      	b.n	800436e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_DMA_Start_IT+0x2a>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e21f      	b.n	800436e <HAL_DMA_Start_IT+0x46a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	f040 820a 	bne.w	8004358 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a68      	ldr	r2, [pc, #416]	; (80040f8 <HAL_DMA_Start_IT+0x1f4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d04a      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a66      	ldr	r2, [pc, #408]	; (80040fc <HAL_DMA_Start_IT+0x1f8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d045      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a65      	ldr	r2, [pc, #404]	; (8004100 <HAL_DMA_Start_IT+0x1fc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d040      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a63      	ldr	r2, [pc, #396]	; (8004104 <HAL_DMA_Start_IT+0x200>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d03b      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a62      	ldr	r2, [pc, #392]	; (8004108 <HAL_DMA_Start_IT+0x204>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d036      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a60      	ldr	r2, [pc, #384]	; (800410c <HAL_DMA_Start_IT+0x208>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d031      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5f      	ldr	r2, [pc, #380]	; (8004110 <HAL_DMA_Start_IT+0x20c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d02c      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5d      	ldr	r2, [pc, #372]	; (8004114 <HAL_DMA_Start_IT+0x210>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d027      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5c      	ldr	r2, [pc, #368]	; (8004118 <HAL_DMA_Start_IT+0x214>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d022      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a5a      	ldr	r2, [pc, #360]	; (800411c <HAL_DMA_Start_IT+0x218>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a59      	ldr	r2, [pc, #356]	; (8004120 <HAL_DMA_Start_IT+0x21c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d018      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_DMA_Start_IT+0x220>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_DMA_Start_IT+0x224>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a54      	ldr	r2, [pc, #336]	; (800412c <HAL_DMA_Start_IT+0x228>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a53      	ldr	r2, [pc, #332]	; (8004130 <HAL_DMA_Start_IT+0x22c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_DMA_Start_IT+0xee>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a51      	ldr	r2, [pc, #324]	; (8004134 <HAL_DMA_Start_IT+0x230>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <HAL_DMA_Start_IT+0x100>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e007      	b.n	8004014 <HAL_DMA_Start_IT+0x110>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f001 fe74 	bl	8005d08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <HAL_DMA_Start_IT+0x1f4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d04a      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a33      	ldr	r2, [pc, #204]	; (80040fc <HAL_DMA_Start_IT+0x1f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d045      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_DMA_Start_IT+0x1fc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d040      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_DMA_Start_IT+0x200>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d03b      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_DMA_Start_IT+0x204>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d036      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2d      	ldr	r2, [pc, #180]	; (800410c <HAL_DMA_Start_IT+0x208>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d031      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <HAL_DMA_Start_IT+0x20c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d02c      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_DMA_Start_IT+0x210>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d027      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_DMA_Start_IT+0x214>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d022      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <HAL_DMA_Start_IT+0x218>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d01d      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <HAL_DMA_Start_IT+0x21c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_DMA_Start_IT+0x220>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_DMA_Start_IT+0x224>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_DMA_Start_IT+0x228>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_DMA_Start_IT+0x22c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_DMA_Start_IT+0x1bc>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1e      	ldr	r2, [pc, #120]	; (8004134 <HAL_DMA_Start_IT+0x230>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Start_IT+0x1c0>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_Start_IT+0x1c2>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d036      	beq.n	8004138 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 021e 	bic.w	r2, r3, #30
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0216 	orr.w	r2, r2, #22
 80040dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03e      	beq.n	8004164 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0208 	orr.w	r2, r2, #8
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e035      	b.n	8004164 <HAL_DMA_Start_IT+0x260>
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020e 	bic.w	r2, r3, #14
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 020a 	orr.w	r2, r2, #10
 800414a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0204 	orr.w	r2, r2, #4
 8004162:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a83      	ldr	r2, [pc, #524]	; (8004378 <HAL_DMA_Start_IT+0x474>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d072      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a82      	ldr	r2, [pc, #520]	; (800437c <HAL_DMA_Start_IT+0x478>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d06d      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a80      	ldr	r2, [pc, #512]	; (8004380 <HAL_DMA_Start_IT+0x47c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d068      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7f      	ldr	r2, [pc, #508]	; (8004384 <HAL_DMA_Start_IT+0x480>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d063      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a7d      	ldr	r2, [pc, #500]	; (8004388 <HAL_DMA_Start_IT+0x484>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d05e      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7c      	ldr	r2, [pc, #496]	; (800438c <HAL_DMA_Start_IT+0x488>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d059      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7a      	ldr	r2, [pc, #488]	; (8004390 <HAL_DMA_Start_IT+0x48c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d054      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a79      	ldr	r2, [pc, #484]	; (8004394 <HAL_DMA_Start_IT+0x490>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04f      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a77      	ldr	r2, [pc, #476]	; (8004398 <HAL_DMA_Start_IT+0x494>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d04a      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a76      	ldr	r2, [pc, #472]	; (800439c <HAL_DMA_Start_IT+0x498>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d045      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <HAL_DMA_Start_IT+0x49c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d040      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a73      	ldr	r2, [pc, #460]	; (80043a4 <HAL_DMA_Start_IT+0x4a0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d03b      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a71      	ldr	r2, [pc, #452]	; (80043a8 <HAL_DMA_Start_IT+0x4a4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d036      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a70      	ldr	r2, [pc, #448]	; (80043ac <HAL_DMA_Start_IT+0x4a8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d031      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6e      	ldr	r2, [pc, #440]	; (80043b0 <HAL_DMA_Start_IT+0x4ac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d02c      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6d      	ldr	r2, [pc, #436]	; (80043b4 <HAL_DMA_Start_IT+0x4b0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d027      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6b      	ldr	r2, [pc, #428]	; (80043b8 <HAL_DMA_Start_IT+0x4b4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6a      	ldr	r2, [pc, #424]	; (80043bc <HAL_DMA_Start_IT+0x4b8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a68      	ldr	r2, [pc, #416]	; (80043c0 <HAL_DMA_Start_IT+0x4bc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a67      	ldr	r2, [pc, #412]	; (80043c4 <HAL_DMA_Start_IT+0x4c0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a65      	ldr	r2, [pc, #404]	; (80043c8 <HAL_DMA_Start_IT+0x4c4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a64      	ldr	r2, [pc, #400]	; (80043cc <HAL_DMA_Start_IT+0x4c8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a62      	ldr	r2, [pc, #392]	; (80043d0 <HAL_DMA_Start_IT+0x4cc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_DMA_Start_IT+0x350>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a61      	ldr	r2, [pc, #388]	; (80043d4 <HAL_DMA_Start_IT+0x4d0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <HAL_DMA_Start_IT+0x354>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_DMA_Start_IT+0x356>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01a      	beq.n	8004294 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004292:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a37      	ldr	r2, [pc, #220]	; (8004378 <HAL_DMA_Start_IT+0x474>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a36      	ldr	r2, [pc, #216]	; (800437c <HAL_DMA_Start_IT+0x478>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a34      	ldr	r2, [pc, #208]	; (8004380 <HAL_DMA_Start_IT+0x47c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a33      	ldr	r2, [pc, #204]	; (8004384 <HAL_DMA_Start_IT+0x480>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a31      	ldr	r2, [pc, #196]	; (8004388 <HAL_DMA_Start_IT+0x484>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a30      	ldr	r2, [pc, #192]	; (800438c <HAL_DMA_Start_IT+0x488>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <HAL_DMA_Start_IT+0x48c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2d      	ldr	r2, [pc, #180]	; (8004394 <HAL_DMA_Start_IT+0x490>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_DMA_Start_IT+0x494>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <HAL_DMA_Start_IT+0x498>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <HAL_DMA_Start_IT+0x49c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <HAL_DMA_Start_IT+0x4a0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <HAL_DMA_Start_IT+0x4a4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a24      	ldr	r2, [pc, #144]	; (80043ac <HAL_DMA_Start_IT+0x4a8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <HAL_DMA_Start_IT+0x4ac>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_Start_IT+0x430>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <HAL_DMA_Start_IT+0x4b0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d108      	bne.n	8004346 <HAL_DMA_Start_IT+0x442>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e012      	b.n	800436c <HAL_DMA_Start_IT+0x468>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e009      	b.n	800436c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40020010 	.word	0x40020010
 800437c:	40020028 	.word	0x40020028
 8004380:	40020040 	.word	0x40020040
 8004384:	40020058 	.word	0x40020058
 8004388:	40020070 	.word	0x40020070
 800438c:	40020088 	.word	0x40020088
 8004390:	400200a0 	.word	0x400200a0
 8004394:	400200b8 	.word	0x400200b8
 8004398:	40020410 	.word	0x40020410
 800439c:	40020428 	.word	0x40020428
 80043a0:	40020440 	.word	0x40020440
 80043a4:	40020458 	.word	0x40020458
 80043a8:	40020470 	.word	0x40020470
 80043ac:	40020488 	.word	0x40020488
 80043b0:	400204a0 	.word	0x400204a0
 80043b4:	400204b8 	.word	0x400204b8
 80043b8:	58025408 	.word	0x58025408
 80043bc:	5802541c 	.word	0x5802541c
 80043c0:	58025430 	.word	0x58025430
 80043c4:	58025444 	.word	0x58025444
 80043c8:	58025458 	.word	0x58025458
 80043cc:	5802546c 	.word	0x5802546c
 80043d0:	58025480 	.word	0x58025480
 80043d4:	58025494 	.word	0x58025494

080043d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7ff f93c 	bl	800365c <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e2dc      	b.n	80049aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d008      	beq.n	800440e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e2cd      	b.n	80049aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a76      	ldr	r2, [pc, #472]	; (80045ec <HAL_DMA_Abort+0x214>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d04a      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a74      	ldr	r2, [pc, #464]	; (80045f0 <HAL_DMA_Abort+0x218>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d045      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a73      	ldr	r2, [pc, #460]	; (80045f4 <HAL_DMA_Abort+0x21c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d040      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a71      	ldr	r2, [pc, #452]	; (80045f8 <HAL_DMA_Abort+0x220>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d03b      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a70      	ldr	r2, [pc, #448]	; (80045fc <HAL_DMA_Abort+0x224>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d036      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6e      	ldr	r2, [pc, #440]	; (8004600 <HAL_DMA_Abort+0x228>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d031      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6d      	ldr	r2, [pc, #436]	; (8004604 <HAL_DMA_Abort+0x22c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d02c      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a6b      	ldr	r2, [pc, #428]	; (8004608 <HAL_DMA_Abort+0x230>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d027      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6a      	ldr	r2, [pc, #424]	; (800460c <HAL_DMA_Abort+0x234>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d022      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a68      	ldr	r2, [pc, #416]	; (8004610 <HAL_DMA_Abort+0x238>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01d      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a67      	ldr	r2, [pc, #412]	; (8004614 <HAL_DMA_Abort+0x23c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d018      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a65      	ldr	r2, [pc, #404]	; (8004618 <HAL_DMA_Abort+0x240>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a64      	ldr	r2, [pc, #400]	; (800461c <HAL_DMA_Abort+0x244>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a62      	ldr	r2, [pc, #392]	; (8004620 <HAL_DMA_Abort+0x248>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a61      	ldr	r2, [pc, #388]	; (8004624 <HAL_DMA_Abort+0x24c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_DMA_Abort+0xd6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5f      	ldr	r2, [pc, #380]	; (8004628 <HAL_DMA_Abort+0x250>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_DMA_Abort+0xda>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_DMA_Abort+0xdc>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 021e 	bic.w	r2, r2, #30
 80044c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e00a      	b.n	80044f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 020e 	bic.w	r2, r2, #14
 80044ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <HAL_DMA_Abort+0x214>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d072      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <HAL_DMA_Abort+0x218>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d06d      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_DMA_Abort+0x21c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d068      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a37      	ldr	r2, [pc, #220]	; (80045f8 <HAL_DMA_Abort+0x220>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d063      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a36      	ldr	r2, [pc, #216]	; (80045fc <HAL_DMA_Abort+0x224>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d05e      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_DMA_Abort+0x228>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d059      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a33      	ldr	r2, [pc, #204]	; (8004604 <HAL_DMA_Abort+0x22c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d054      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a31      	ldr	r2, [pc, #196]	; (8004608 <HAL_DMA_Abort+0x230>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d04f      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a30      	ldr	r2, [pc, #192]	; (800460c <HAL_DMA_Abort+0x234>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d04a      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_DMA_Abort+0x238>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d045      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_DMA_Abort+0x23c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d040      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_DMA_Abort+0x240>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d03b      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <HAL_DMA_Abort+0x244>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d036      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a28      	ldr	r2, [pc, #160]	; (8004620 <HAL_DMA_Abort+0x248>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d031      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a27      	ldr	r2, [pc, #156]	; (8004624 <HAL_DMA_Abort+0x24c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d02c      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_DMA_Abort+0x250>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d027      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a24      	ldr	r2, [pc, #144]	; (800462c <HAL_DMA_Abort+0x254>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d022      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_Abort+0x258>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01d      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <HAL_DMA_Abort+0x25c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d018      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <HAL_DMA_Abort+0x260>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1e      	ldr	r2, [pc, #120]	; (800463c <HAL_DMA_Abort+0x264>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00e      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_DMA_Abort+0x268>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <HAL_DMA_Abort+0x26c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_DMA_Abort+0x20e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_DMA_Abort+0x270>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d132      	bne.n	800464c <HAL_DMA_Abort+0x274>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e031      	b.n	800464e <HAL_DMA_Abort+0x276>
 80045ea:	bf00      	nop
 80045ec:	40020010 	.word	0x40020010
 80045f0:	40020028 	.word	0x40020028
 80045f4:	40020040 	.word	0x40020040
 80045f8:	40020058 	.word	0x40020058
 80045fc:	40020070 	.word	0x40020070
 8004600:	40020088 	.word	0x40020088
 8004604:	400200a0 	.word	0x400200a0
 8004608:	400200b8 	.word	0x400200b8
 800460c:	40020410 	.word	0x40020410
 8004610:	40020428 	.word	0x40020428
 8004614:	40020440 	.word	0x40020440
 8004618:	40020458 	.word	0x40020458
 800461c:	40020470 	.word	0x40020470
 8004620:	40020488 	.word	0x40020488
 8004624:	400204a0 	.word	0x400204a0
 8004628:	400204b8 	.word	0x400204b8
 800462c:	58025408 	.word	0x58025408
 8004630:	5802541c 	.word	0x5802541c
 8004634:	58025430 	.word	0x58025430
 8004638:	58025444 	.word	0x58025444
 800463c:	58025458 	.word	0x58025458
 8004640:	5802546c 	.word	0x5802546c
 8004644:	58025480 	.word	0x58025480
 8004648:	58025494 	.word	0x58025494
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6d      	ldr	r2, [pc, #436]	; (800481c <HAL_DMA_Abort+0x444>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a6b      	ldr	r2, [pc, #428]	; (8004820 <HAL_DMA_Abort+0x448>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6a      	ldr	r2, [pc, #424]	; (8004824 <HAL_DMA_Abort+0x44c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a68      	ldr	r2, [pc, #416]	; (8004828 <HAL_DMA_Abort+0x450>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a67      	ldr	r2, [pc, #412]	; (800482c <HAL_DMA_Abort+0x454>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_DMA_Abort+0x458>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a64      	ldr	r2, [pc, #400]	; (8004834 <HAL_DMA_Abort+0x45c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a62      	ldr	r2, [pc, #392]	; (8004838 <HAL_DMA_Abort+0x460>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a61      	ldr	r2, [pc, #388]	; (800483c <HAL_DMA_Abort+0x464>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5f      	ldr	r2, [pc, #380]	; (8004840 <HAL_DMA_Abort+0x468>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a5e      	ldr	r2, [pc, #376]	; (8004844 <HAL_DMA_Abort+0x46c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5c      	ldr	r2, [pc, #368]	; (8004848 <HAL_DMA_Abort+0x470>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5b      	ldr	r2, [pc, #364]	; (800484c <HAL_DMA_Abort+0x474>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a59      	ldr	r2, [pc, #356]	; (8004850 <HAL_DMA_Abort+0x478>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a58      	ldr	r2, [pc, #352]	; (8004854 <HAL_DMA_Abort+0x47c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_Abort+0x32a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a56      	ldr	r2, [pc, #344]	; (8004858 <HAL_DMA_Abort+0x480>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <HAL_DMA_Abort+0x33c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e007      	b.n	8004724 <HAL_DMA_Abort+0x34c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004724:	e013      	b.n	800474e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004726:	f7fe ff99 	bl	800365c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b05      	cmp	r3, #5
 8004732:	d90c      	bls.n	800474e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e12d      	b.n	80049aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2f      	ldr	r2, [pc, #188]	; (800481c <HAL_DMA_Abort+0x444>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d04a      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <HAL_DMA_Abort+0x448>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d045      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <HAL_DMA_Abort+0x44c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d040      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <HAL_DMA_Abort+0x450>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d03b      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a29      	ldr	r2, [pc, #164]	; (800482c <HAL_DMA_Abort+0x454>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d036      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a27      	ldr	r2, [pc, #156]	; (8004830 <HAL_DMA_Abort+0x458>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d031      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <HAL_DMA_Abort+0x45c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d02c      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a24      	ldr	r2, [pc, #144]	; (8004838 <HAL_DMA_Abort+0x460>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d027      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_DMA_Abort+0x464>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a21      	ldr	r2, [pc, #132]	; (8004840 <HAL_DMA_Abort+0x468>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01d      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_DMA_Abort+0x46c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <HAL_DMA_Abort+0x470>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_DMA_Abort+0x474>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_DMA_Abort+0x478>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_DMA_Abort+0x47c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_DMA_Abort+0x422>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_DMA_Abort+0x480>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d101      	bne.n	80047fe <HAL_DMA_Abort+0x426>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_DMA_Abort+0x428>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02b      	beq.n	800485c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	223f      	movs	r2, #63	; 0x3f
 8004814:	409a      	lsls	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	e02a      	b.n	8004872 <HAL_DMA_Abort+0x49a>
 800481c:	40020010 	.word	0x40020010
 8004820:	40020028 	.word	0x40020028
 8004824:	40020040 	.word	0x40020040
 8004828:	40020058 	.word	0x40020058
 800482c:	40020070 	.word	0x40020070
 8004830:	40020088 	.word	0x40020088
 8004834:	400200a0 	.word	0x400200a0
 8004838:	400200b8 	.word	0x400200b8
 800483c:	40020410 	.word	0x40020410
 8004840:	40020428 	.word	0x40020428
 8004844:	40020440 	.word	0x40020440
 8004848:	40020458 	.word	0x40020458
 800484c:	40020470 	.word	0x40020470
 8004850:	40020488 	.word	0x40020488
 8004854:	400204a0 	.word	0x400204a0
 8004858:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2201      	movs	r2, #1
 800486c:	409a      	lsls	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4f      	ldr	r2, [pc, #316]	; (80049b4 <HAL_DMA_Abort+0x5dc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d072      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a4d      	ldr	r2, [pc, #308]	; (80049b8 <HAL_DMA_Abort+0x5e0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d06d      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a4c      	ldr	r2, [pc, #304]	; (80049bc <HAL_DMA_Abort+0x5e4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d068      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <HAL_DMA_Abort+0x5e8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d063      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a49      	ldr	r2, [pc, #292]	; (80049c4 <HAL_DMA_Abort+0x5ec>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d05e      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a47      	ldr	r2, [pc, #284]	; (80049c8 <HAL_DMA_Abort+0x5f0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d059      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a46      	ldr	r2, [pc, #280]	; (80049cc <HAL_DMA_Abort+0x5f4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d054      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a44      	ldr	r2, [pc, #272]	; (80049d0 <HAL_DMA_Abort+0x5f8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d04f      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a43      	ldr	r2, [pc, #268]	; (80049d4 <HAL_DMA_Abort+0x5fc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d04a      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a41      	ldr	r2, [pc, #260]	; (80049d8 <HAL_DMA_Abort+0x600>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d045      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a40      	ldr	r2, [pc, #256]	; (80049dc <HAL_DMA_Abort+0x604>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d040      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3e      	ldr	r2, [pc, #248]	; (80049e0 <HAL_DMA_Abort+0x608>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d03b      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a3d      	ldr	r2, [pc, #244]	; (80049e4 <HAL_DMA_Abort+0x60c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d036      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a3b      	ldr	r2, [pc, #236]	; (80049e8 <HAL_DMA_Abort+0x610>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d031      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3a      	ldr	r2, [pc, #232]	; (80049ec <HAL_DMA_Abort+0x614>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d02c      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <HAL_DMA_Abort+0x618>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d027      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a37      	ldr	r2, [pc, #220]	; (80049f4 <HAL_DMA_Abort+0x61c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d022      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a35      	ldr	r2, [pc, #212]	; (80049f8 <HAL_DMA_Abort+0x620>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01d      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <HAL_DMA_Abort+0x624>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d018      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a32      	ldr	r2, [pc, #200]	; (8004a00 <HAL_DMA_Abort+0x628>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a31      	ldr	r2, [pc, #196]	; (8004a04 <HAL_DMA_Abort+0x62c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00e      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <HAL_DMA_Abort+0x630>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d009      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2e      	ldr	r2, [pc, #184]	; (8004a0c <HAL_DMA_Abort+0x634>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_DMA_Abort+0x58a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2c      	ldr	r2, [pc, #176]	; (8004a10 <HAL_DMA_Abort+0x638>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_DMA_Abort+0x58e>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <HAL_DMA_Abort+0x590>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004974:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004996:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40020010 	.word	0x40020010
 80049b8:	40020028 	.word	0x40020028
 80049bc:	40020040 	.word	0x40020040
 80049c0:	40020058 	.word	0x40020058
 80049c4:	40020070 	.word	0x40020070
 80049c8:	40020088 	.word	0x40020088
 80049cc:	400200a0 	.word	0x400200a0
 80049d0:	400200b8 	.word	0x400200b8
 80049d4:	40020410 	.word	0x40020410
 80049d8:	40020428 	.word	0x40020428
 80049dc:	40020440 	.word	0x40020440
 80049e0:	40020458 	.word	0x40020458
 80049e4:	40020470 	.word	0x40020470
 80049e8:	40020488 	.word	0x40020488
 80049ec:	400204a0 	.word	0x400204a0
 80049f0:	400204b8 	.word	0x400204b8
 80049f4:	58025408 	.word	0x58025408
 80049f8:	5802541c 	.word	0x5802541c
 80049fc:	58025430 	.word	0x58025430
 8004a00:	58025444 	.word	0x58025444
 8004a04:	58025458 	.word	0x58025458
 8004a08:	5802546c 	.word	0x5802546c
 8004a0c:	58025480 	.word	0x58025480
 8004a10:	58025494 	.word	0x58025494

08004a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e205      	b.n	8004e32 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d004      	beq.n	8004a3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e1fa      	b.n	8004e32 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a8c      	ldr	r2, [pc, #560]	; (8004c74 <HAL_DMA_Abort_IT+0x260>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d04a      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a8b      	ldr	r2, [pc, #556]	; (8004c78 <HAL_DMA_Abort_IT+0x264>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a89      	ldr	r2, [pc, #548]	; (8004c7c <HAL_DMA_Abort_IT+0x268>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d040      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a88      	ldr	r2, [pc, #544]	; (8004c80 <HAL_DMA_Abort_IT+0x26c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a86      	ldr	r2, [pc, #536]	; (8004c84 <HAL_DMA_Abort_IT+0x270>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a85      	ldr	r2, [pc, #532]	; (8004c88 <HAL_DMA_Abort_IT+0x274>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a83      	ldr	r2, [pc, #524]	; (8004c8c <HAL_DMA_Abort_IT+0x278>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a82      	ldr	r2, [pc, #520]	; (8004c90 <HAL_DMA_Abort_IT+0x27c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_DMA_Abort_IT+0x280>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a7f      	ldr	r2, [pc, #508]	; (8004c98 <HAL_DMA_Abort_IT+0x284>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a7d      	ldr	r2, [pc, #500]	; (8004c9c <HAL_DMA_Abort_IT+0x288>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7c      	ldr	r2, [pc, #496]	; (8004ca0 <HAL_DMA_Abort_IT+0x28c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_DMA_Abort_IT+0x290>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a79      	ldr	r2, [pc, #484]	; (8004ca8 <HAL_DMA_Abort_IT+0x294>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a77      	ldr	r2, [pc, #476]	; (8004cac <HAL_DMA_Abort_IT+0x298>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_DMA_Abort_IT+0xc8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a76      	ldr	r2, [pc, #472]	; (8004cb0 <HAL_DMA_Abort_IT+0x29c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <HAL_DMA_Abort_IT+0xcc>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_DMA_Abort_IT+0xce>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d065      	beq.n	8004bb2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a60      	ldr	r2, [pc, #384]	; (8004c74 <HAL_DMA_Abort_IT+0x260>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04a      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a5e      	ldr	r2, [pc, #376]	; (8004c78 <HAL_DMA_Abort_IT+0x264>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d045      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5d      	ldr	r2, [pc, #372]	; (8004c7c <HAL_DMA_Abort_IT+0x268>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d040      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <HAL_DMA_Abort_IT+0x26c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5a      	ldr	r2, [pc, #360]	; (8004c84 <HAL_DMA_Abort_IT+0x270>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d036      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a58      	ldr	r2, [pc, #352]	; (8004c88 <HAL_DMA_Abort_IT+0x274>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_DMA_Abort_IT+0x278>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d02c      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a55      	ldr	r2, [pc, #340]	; (8004c90 <HAL_DMA_Abort_IT+0x27c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a54      	ldr	r2, [pc, #336]	; (8004c94 <HAL_DMA_Abort_IT+0x280>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <HAL_DMA_Abort_IT+0x284>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_DMA_Abort_IT+0x288>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	; (8004ca0 <HAL_DMA_Abort_IT+0x28c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <HAL_DMA_Abort_IT+0x290>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a4c      	ldr	r2, [pc, #304]	; (8004ca8 <HAL_DMA_Abort_IT+0x294>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <HAL_DMA_Abort_IT+0x298>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x17a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a49      	ldr	r2, [pc, #292]	; (8004cb0 <HAL_DMA_Abort_IT+0x29c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <HAL_DMA_Abort_IT+0x18c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e147      	b.n	8004e30 <HAL_DMA_Abort_IT+0x41c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e13e      	b.n	8004e30 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 020e 	bic.w	r2, r2, #14
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <HAL_DMA_Abort_IT+0x260>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d04a      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <HAL_DMA_Abort_IT+0x264>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d045      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <HAL_DMA_Abort_IT+0x268>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d040      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <HAL_DMA_Abort_IT+0x26c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <HAL_DMA_Abort_IT+0x270>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d036      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_DMA_Abort_IT+0x274>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <HAL_DMA_Abort_IT+0x278>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02c      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <HAL_DMA_Abort_IT+0x27c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d027      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_DMA_Abort_IT+0x280>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_DMA_Abort_IT+0x284>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_DMA_Abort_IT+0x288>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_DMA_Abort_IT+0x28c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_DMA_Abort_IT+0x290>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_DMA_Abort_IT+0x294>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a16      	ldr	r2, [pc, #88]	; (8004cac <HAL_DMA_Abort_IT+0x298>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x24e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <HAL_DMA_Abort_IT+0x29c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d128      	bne.n	8004cb4 <HAL_DMA_Abort_IT+0x2a0>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e027      	b.n	8004cc4 <HAL_DMA_Abort_IT+0x2b0>
 8004c74:	40020010 	.word	0x40020010
 8004c78:	40020028 	.word	0x40020028
 8004c7c:	40020040 	.word	0x40020040
 8004c80:	40020058 	.word	0x40020058
 8004c84:	40020070 	.word	0x40020070
 8004c88:	40020088 	.word	0x40020088
 8004c8c:	400200a0 	.word	0x400200a0
 8004c90:	400200b8 	.word	0x400200b8
 8004c94:	40020410 	.word	0x40020410
 8004c98:	40020428 	.word	0x40020428
 8004c9c:	40020440 	.word	0x40020440
 8004ca0:	40020458 	.word	0x40020458
 8004ca4:	40020470 	.word	0x40020470
 8004ca8:	40020488 	.word	0x40020488
 8004cac:	400204a0 	.word	0x400204a0
 8004cb0:	400204b8 	.word	0x400204b8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5c      	ldr	r2, [pc, #368]	; (8004e3c <HAL_DMA_Abort_IT+0x428>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d072      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a5b      	ldr	r2, [pc, #364]	; (8004e40 <HAL_DMA_Abort_IT+0x42c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d06d      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a59      	ldr	r2, [pc, #356]	; (8004e44 <HAL_DMA_Abort_IT+0x430>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d068      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_DMA_Abort_IT+0x434>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d063      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_DMA_Abort_IT+0x438>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d05e      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a55      	ldr	r2, [pc, #340]	; (8004e50 <HAL_DMA_Abort_IT+0x43c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d059      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a53      	ldr	r2, [pc, #332]	; (8004e54 <HAL_DMA_Abort_IT+0x440>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d054      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a52      	ldr	r2, [pc, #328]	; (8004e58 <HAL_DMA_Abort_IT+0x444>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d04f      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a50      	ldr	r2, [pc, #320]	; (8004e5c <HAL_DMA_Abort_IT+0x448>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d04a      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4f      	ldr	r2, [pc, #316]	; (8004e60 <HAL_DMA_Abort_IT+0x44c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d045      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a4d      	ldr	r2, [pc, #308]	; (8004e64 <HAL_DMA_Abort_IT+0x450>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d040      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4c      	ldr	r2, [pc, #304]	; (8004e68 <HAL_DMA_Abort_IT+0x454>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d03b      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_DMA_Abort_IT+0x458>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d036      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a49      	ldr	r2, [pc, #292]	; (8004e70 <HAL_DMA_Abort_IT+0x45c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a47      	ldr	r2, [pc, #284]	; (8004e74 <HAL_DMA_Abort_IT+0x460>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02c      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a46      	ldr	r2, [pc, #280]	; (8004e78 <HAL_DMA_Abort_IT+0x464>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d027      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a44      	ldr	r2, [pc, #272]	; (8004e7c <HAL_DMA_Abort_IT+0x468>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a43      	ldr	r2, [pc, #268]	; (8004e80 <HAL_DMA_Abort_IT+0x46c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01d      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a41      	ldr	r2, [pc, #260]	; (8004e84 <HAL_DMA_Abort_IT+0x470>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a40      	ldr	r2, [pc, #256]	; (8004e88 <HAL_DMA_Abort_IT+0x474>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3e      	ldr	r2, [pc, #248]	; (8004e8c <HAL_DMA_Abort_IT+0x478>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a3d      	ldr	r2, [pc, #244]	; (8004e90 <HAL_DMA_Abort_IT+0x47c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3b      	ldr	r2, [pc, #236]	; (8004e94 <HAL_DMA_Abort_IT+0x480>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x3a0>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a3a      	ldr	r2, [pc, #232]	; (8004e98 <HAL_DMA_Abort_IT+0x484>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_DMA_Abort_IT+0x3a4>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_DMA_Abort_IT+0x3a6>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d028      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dcc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2201      	movs	r2, #1
 8004dde:	409a      	lsls	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004dec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40020010 	.word	0x40020010
 8004e40:	40020028 	.word	0x40020028
 8004e44:	40020040 	.word	0x40020040
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	40020070 	.word	0x40020070
 8004e50:	40020088 	.word	0x40020088
 8004e54:	400200a0 	.word	0x400200a0
 8004e58:	400200b8 	.word	0x400200b8
 8004e5c:	40020410 	.word	0x40020410
 8004e60:	40020428 	.word	0x40020428
 8004e64:	40020440 	.word	0x40020440
 8004e68:	40020458 	.word	0x40020458
 8004e6c:	40020470 	.word	0x40020470
 8004e70:	40020488 	.word	0x40020488
 8004e74:	400204a0 	.word	0x400204a0
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	58025408 	.word	0x58025408
 8004e80:	5802541c 	.word	0x5802541c
 8004e84:	58025430 	.word	0x58025430
 8004e88:	58025444 	.word	0x58025444
 8004e8c:	58025458 	.word	0x58025458
 8004e90:	5802546c 	.word	0x5802546c
 8004e94:	58025480 	.word	0x58025480
 8004e98:	58025494 	.word	0x58025494

08004e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ea8:	4b67      	ldr	r3, [pc, #412]	; (8005048 <HAL_DMA_IRQHandler+0x1ac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a67      	ldr	r2, [pc, #412]	; (800504c <HAL_DMA_IRQHandler+0x1b0>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0a9b      	lsrs	r3, r3, #10
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a5f      	ldr	r2, [pc, #380]	; (8005050 <HAL_DMA_IRQHandler+0x1b4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d04a      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a5d      	ldr	r2, [pc, #372]	; (8005054 <HAL_DMA_IRQHandler+0x1b8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d045      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5c      	ldr	r2, [pc, #368]	; (8005058 <HAL_DMA_IRQHandler+0x1bc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d040      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5a      	ldr	r2, [pc, #360]	; (800505c <HAL_DMA_IRQHandler+0x1c0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d03b      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a59      	ldr	r2, [pc, #356]	; (8005060 <HAL_DMA_IRQHandler+0x1c4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d036      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a57      	ldr	r2, [pc, #348]	; (8005064 <HAL_DMA_IRQHandler+0x1c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d031      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a56      	ldr	r2, [pc, #344]	; (8005068 <HAL_DMA_IRQHandler+0x1cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d02c      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a54      	ldr	r2, [pc, #336]	; (800506c <HAL_DMA_IRQHandler+0x1d0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d027      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a53      	ldr	r2, [pc, #332]	; (8005070 <HAL_DMA_IRQHandler+0x1d4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d022      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a51      	ldr	r2, [pc, #324]	; (8005074 <HAL_DMA_IRQHandler+0x1d8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01d      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a50      	ldr	r2, [pc, #320]	; (8005078 <HAL_DMA_IRQHandler+0x1dc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d018      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a4e      	ldr	r2, [pc, #312]	; (800507c <HAL_DMA_IRQHandler+0x1e0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a4d      	ldr	r2, [pc, #308]	; (8005080 <HAL_DMA_IRQHandler+0x1e4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a4b      	ldr	r2, [pc, #300]	; (8005084 <HAL_DMA_IRQHandler+0x1e8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a4a      	ldr	r2, [pc, #296]	; (8005088 <HAL_DMA_IRQHandler+0x1ec>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xd2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a48      	ldr	r2, [pc, #288]	; (800508c <HAL_DMA_IRQHandler+0x1f0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <HAL_DMA_IRQHandler+0xd6>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_DMA_IRQHandler+0xd8>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 842b 	beq.w	80057d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2208      	movs	r2, #8
 8004f84:	409a      	lsls	r2, r3
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80a2 	beq.w	80050d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2e      	ldr	r2, [pc, #184]	; (8005050 <HAL_DMA_IRQHandler+0x1b4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04a      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <HAL_DMA_IRQHandler+0x1b8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d045      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <HAL_DMA_IRQHandler+0x1bc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d040      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	; (800505c <HAL_DMA_IRQHandler+0x1c0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d03b      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_DMA_IRQHandler+0x1c4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d036      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a27      	ldr	r2, [pc, #156]	; (8005064 <HAL_DMA_IRQHandler+0x1c8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d031      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a25      	ldr	r2, [pc, #148]	; (8005068 <HAL_DMA_IRQHandler+0x1cc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02c      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a24      	ldr	r2, [pc, #144]	; (800506c <HAL_DMA_IRQHandler+0x1d0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d027      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_DMA_IRQHandler+0x1d4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a21      	ldr	r2, [pc, #132]	; (8005074 <HAL_DMA_IRQHandler+0x1d8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d01d      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <HAL_DMA_IRQHandler+0x1dc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_DMA_IRQHandler+0x1e0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <HAL_DMA_IRQHandler+0x1e4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <HAL_DMA_IRQHandler+0x1e8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_DMA_IRQHandler+0x1ec>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_DMA_IRQHandler+0x194>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_DMA_IRQHandler+0x1f0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d12f      	bne.n	8005090 <HAL_DMA_IRQHandler+0x1f4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e02e      	b.n	80050a4 <HAL_DMA_IRQHandler+0x208>
 8005046:	bf00      	nop
 8005048:	20000000 	.word	0x20000000
 800504c:	1b4e81b5 	.word	0x1b4e81b5
 8005050:	40020010 	.word	0x40020010
 8005054:	40020028 	.word	0x40020028
 8005058:	40020040 	.word	0x40020040
 800505c:	40020058 	.word	0x40020058
 8005060:	40020070 	.word	0x40020070
 8005064:	40020088 	.word	0x40020088
 8005068:	400200a0 	.word	0x400200a0
 800506c:	400200b8 	.word	0x400200b8
 8005070:	40020410 	.word	0x40020410
 8005074:	40020428 	.word	0x40020428
 8005078:	40020440 	.word	0x40020440
 800507c:	40020458 	.word	0x40020458
 8005080:	40020470 	.word	0x40020470
 8005084:	40020488 	.word	0x40020488
 8005088:	400204a0 	.word	0x400204a0
 800508c:	400204b8 	.word	0x400204b8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d015      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2208      	movs	r2, #8
 80050c2:	409a      	lsls	r2, r3
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d06e      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a69      	ldr	r2, [pc, #420]	; (8005294 <HAL_DMA_IRQHandler+0x3f8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d04a      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a67      	ldr	r2, [pc, #412]	; (8005298 <HAL_DMA_IRQHandler+0x3fc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d045      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a66      	ldr	r2, [pc, #408]	; (800529c <HAL_DMA_IRQHandler+0x400>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d040      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a64      	ldr	r2, [pc, #400]	; (80052a0 <HAL_DMA_IRQHandler+0x404>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d03b      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a63      	ldr	r2, [pc, #396]	; (80052a4 <HAL_DMA_IRQHandler+0x408>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d036      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a61      	ldr	r2, [pc, #388]	; (80052a8 <HAL_DMA_IRQHandler+0x40c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d031      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a60      	ldr	r2, [pc, #384]	; (80052ac <HAL_DMA_IRQHandler+0x410>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d02c      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <HAL_DMA_IRQHandler+0x414>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d027      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a5d      	ldr	r2, [pc, #372]	; (80052b4 <HAL_DMA_IRQHandler+0x418>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d022      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a5b      	ldr	r2, [pc, #364]	; (80052b8 <HAL_DMA_IRQHandler+0x41c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01d      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5a      	ldr	r2, [pc, #360]	; (80052bc <HAL_DMA_IRQHandler+0x420>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a58      	ldr	r2, [pc, #352]	; (80052c0 <HAL_DMA_IRQHandler+0x424>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a57      	ldr	r2, [pc, #348]	; (80052c4 <HAL_DMA_IRQHandler+0x428>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a55      	ldr	r2, [pc, #340]	; (80052c8 <HAL_DMA_IRQHandler+0x42c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a54      	ldr	r2, [pc, #336]	; (80052cc <HAL_DMA_IRQHandler+0x430>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_DMA_IRQHandler+0x2ee>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a52      	ldr	r2, [pc, #328]	; (80052d0 <HAL_DMA_IRQHandler+0x434>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10a      	bne.n	80051a0 <HAL_DMA_IRQHandler+0x304>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e003      	b.n	80051a8 <HAL_DMA_IRQHandler+0x30c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00d      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2201      	movs	r2, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f043 0202 	orr.w	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2204      	movs	r2, #4
 80051d2:	409a      	lsls	r2, r3
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 808f 	beq.w	80052fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <HAL_DMA_IRQHandler+0x3f8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d04a      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a2a      	ldr	r2, [pc, #168]	; (8005298 <HAL_DMA_IRQHandler+0x3fc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d045      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a29      	ldr	r2, [pc, #164]	; (800529c <HAL_DMA_IRQHandler+0x400>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d040      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <HAL_DMA_IRQHandler+0x404>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d03b      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a26      	ldr	r2, [pc, #152]	; (80052a4 <HAL_DMA_IRQHandler+0x408>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d036      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <HAL_DMA_IRQHandler+0x40c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d031      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a23      	ldr	r2, [pc, #140]	; (80052ac <HAL_DMA_IRQHandler+0x410>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d02c      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <HAL_DMA_IRQHandler+0x414>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d027      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <HAL_DMA_IRQHandler+0x418>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d022      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_DMA_IRQHandler+0x41c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1d      	ldr	r2, [pc, #116]	; (80052bc <HAL_DMA_IRQHandler+0x420>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_DMA_IRQHandler+0x424>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <HAL_DMA_IRQHandler+0x428>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_DMA_IRQHandler+0x42c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_DMA_IRQHandler+0x430>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_DMA_IRQHandler+0x3e2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <HAL_DMA_IRQHandler+0x434>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d12a      	bne.n	80052d4 <HAL_DMA_IRQHandler+0x438>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e023      	b.n	80052dc <HAL_DMA_IRQHandler+0x440>
 8005294:	40020010 	.word	0x40020010
 8005298:	40020028 	.word	0x40020028
 800529c:	40020040 	.word	0x40020040
 80052a0:	40020058 	.word	0x40020058
 80052a4:	40020070 	.word	0x40020070
 80052a8:	40020088 	.word	0x40020088
 80052ac:	400200a0 	.word	0x400200a0
 80052b0:	400200b8 	.word	0x400200b8
 80052b4:	40020410 	.word	0x40020410
 80052b8:	40020428 	.word	0x40020428
 80052bc:	40020440 	.word	0x40020440
 80052c0:	40020458 	.word	0x40020458
 80052c4:	40020470 	.word	0x40020470
 80052c8:	40020488 	.word	0x40020488
 80052cc:	400204a0 	.word	0x400204a0
 80052d0:	400204b8 	.word	0x400204b8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	2204      	movs	r2, #4
 80052ea:	409a      	lsls	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	f043 0204 	orr.w	r2, r3, #4
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2210      	movs	r2, #16
 8005306:	409a      	lsls	r2, r3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80a6 	beq.w	800545e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a85      	ldr	r2, [pc, #532]	; (800552c <HAL_DMA_IRQHandler+0x690>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d04a      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a83      	ldr	r2, [pc, #524]	; (8005530 <HAL_DMA_IRQHandler+0x694>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d045      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a82      	ldr	r2, [pc, #520]	; (8005534 <HAL_DMA_IRQHandler+0x698>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d040      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a80      	ldr	r2, [pc, #512]	; (8005538 <HAL_DMA_IRQHandler+0x69c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d03b      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7f      	ldr	r2, [pc, #508]	; (800553c <HAL_DMA_IRQHandler+0x6a0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d036      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a7d      	ldr	r2, [pc, #500]	; (8005540 <HAL_DMA_IRQHandler+0x6a4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d031      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a7c      	ldr	r2, [pc, #496]	; (8005544 <HAL_DMA_IRQHandler+0x6a8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d02c      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a7a      	ldr	r2, [pc, #488]	; (8005548 <HAL_DMA_IRQHandler+0x6ac>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d027      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a79      	ldr	r2, [pc, #484]	; (800554c <HAL_DMA_IRQHandler+0x6b0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d022      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a77      	ldr	r2, [pc, #476]	; (8005550 <HAL_DMA_IRQHandler+0x6b4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01d      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a76      	ldr	r2, [pc, #472]	; (8005554 <HAL_DMA_IRQHandler+0x6b8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d018      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a74      	ldr	r2, [pc, #464]	; (8005558 <HAL_DMA_IRQHandler+0x6bc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a73      	ldr	r2, [pc, #460]	; (800555c <HAL_DMA_IRQHandler+0x6c0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a71      	ldr	r2, [pc, #452]	; (8005560 <HAL_DMA_IRQHandler+0x6c4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a70      	ldr	r2, [pc, #448]	; (8005564 <HAL_DMA_IRQHandler+0x6c8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x516>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6e      	ldr	r2, [pc, #440]	; (8005568 <HAL_DMA_IRQHandler+0x6cc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10a      	bne.n	80053c8 <HAL_DMA_IRQHandler+0x52c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e009      	b.n	80053dc <HAL_DMA_IRQHandler+0x540>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d03e      	beq.n	800545e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2210      	movs	r2, #16
 80053ea:	409a      	lsls	r2, r3
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d108      	bne.n	800541e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d024      	beq.n	800545e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
 800541c:	e01f      	b.n	800545e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01b      	beq.n	800545e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
 800542e:	e016      	b.n	800545e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0208 	bic.w	r2, r2, #8
 800544c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2220      	movs	r2, #32
 8005468:	409a      	lsls	r2, r3
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8110 	beq.w	8005694 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2c      	ldr	r2, [pc, #176]	; (800552c <HAL_DMA_IRQHandler+0x690>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d04a      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <HAL_DMA_IRQHandler+0x694>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d045      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a29      	ldr	r2, [pc, #164]	; (8005534 <HAL_DMA_IRQHandler+0x698>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d040      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a28      	ldr	r2, [pc, #160]	; (8005538 <HAL_DMA_IRQHandler+0x69c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d03b      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a26      	ldr	r2, [pc, #152]	; (800553c <HAL_DMA_IRQHandler+0x6a0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d036      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a25      	ldr	r2, [pc, #148]	; (8005540 <HAL_DMA_IRQHandler+0x6a4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d031      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_DMA_IRQHandler+0x6a8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02c      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a22      	ldr	r2, [pc, #136]	; (8005548 <HAL_DMA_IRQHandler+0x6ac>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d027      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_DMA_IRQHandler+0x6b0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_DMA_IRQHandler+0x6b4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01d      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <HAL_DMA_IRQHandler+0x6b8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_DMA_IRQHandler+0x6bc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <HAL_DMA_IRQHandler+0x6c0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_DMA_IRQHandler+0x6c4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a17      	ldr	r2, [pc, #92]	; (8005564 <HAL_DMA_IRQHandler+0x6c8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_DMA_IRQHandler+0x678>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a16      	ldr	r2, [pc, #88]	; (8005568 <HAL_DMA_IRQHandler+0x6cc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d12b      	bne.n	800556c <HAL_DMA_IRQHandler+0x6d0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf14      	ite	ne
 8005522:	2301      	movne	r3, #1
 8005524:	2300      	moveq	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e02a      	b.n	8005580 <HAL_DMA_IRQHandler+0x6e4>
 800552a:	bf00      	nop
 800552c:	40020010 	.word	0x40020010
 8005530:	40020028 	.word	0x40020028
 8005534:	40020040 	.word	0x40020040
 8005538:	40020058 	.word	0x40020058
 800553c:	40020070 	.word	0x40020070
 8005540:	40020088 	.word	0x40020088
 8005544:	400200a0 	.word	0x400200a0
 8005548:	400200b8 	.word	0x400200b8
 800554c:	40020410 	.word	0x40020410
 8005550:	40020428 	.word	0x40020428
 8005554:	40020440 	.word	0x40020440
 8005558:	40020458 	.word	0x40020458
 800555c:	40020470 	.word	0x40020470
 8005560:	40020488 	.word	0x40020488
 8005564:	400204a0 	.word	0x400204a0
 8005568:	400204b8 	.word	0x400204b8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8087 	beq.w	8005694 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2220      	movs	r2, #32
 8005590:	409a      	lsls	r2, r3
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d139      	bne.n	8005616 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0216 	bic.w	r2, r2, #22
 80055b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <HAL_DMA_IRQHandler+0x736>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0208 	bic.w	r2, r2, #8
 80055e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	223f      	movs	r2, #63	; 0x3f
 80055ec:	409a      	lsls	r2, r3
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 834a 	beq.w	8005ca0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
          }
          return;
 8005614:	e344      	b.n	8005ca0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d018      	beq.n	8005656 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d108      	bne.n	8005644 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02c      	beq.n	8005694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
 8005642:	e027      	b.n	8005694 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d023      	beq.n	8005694 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
 8005654:	e01e      	b.n	8005694 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10f      	bne.n	8005684 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0210 	bic.w	r2, r2, #16
 8005672:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8306 	beq.w	8005caa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8088 	beq.w	80057bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2204      	movs	r2, #4
 80056b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a7a      	ldr	r2, [pc, #488]	; (80058a4 <HAL_DMA_IRQHandler+0xa08>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d04a      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a79      	ldr	r2, [pc, #484]	; (80058a8 <HAL_DMA_IRQHandler+0xa0c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d045      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a77      	ldr	r2, [pc, #476]	; (80058ac <HAL_DMA_IRQHandler+0xa10>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d040      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a76      	ldr	r2, [pc, #472]	; (80058b0 <HAL_DMA_IRQHandler+0xa14>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d03b      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a74      	ldr	r2, [pc, #464]	; (80058b4 <HAL_DMA_IRQHandler+0xa18>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d036      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a73      	ldr	r2, [pc, #460]	; (80058b8 <HAL_DMA_IRQHandler+0xa1c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d031      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a71      	ldr	r2, [pc, #452]	; (80058bc <HAL_DMA_IRQHandler+0xa20>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02c      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a70      	ldr	r2, [pc, #448]	; (80058c0 <HAL_DMA_IRQHandler+0xa24>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d027      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a6e      	ldr	r2, [pc, #440]	; (80058c4 <HAL_DMA_IRQHandler+0xa28>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d022      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6d      	ldr	r2, [pc, #436]	; (80058c8 <HAL_DMA_IRQHandler+0xa2c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d01d      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6b      	ldr	r2, [pc, #428]	; (80058cc <HAL_DMA_IRQHandler+0xa30>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d018      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6a      	ldr	r2, [pc, #424]	; (80058d0 <HAL_DMA_IRQHandler+0xa34>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a68      	ldr	r2, [pc, #416]	; (80058d4 <HAL_DMA_IRQHandler+0xa38>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a67      	ldr	r2, [pc, #412]	; (80058d8 <HAL_DMA_IRQHandler+0xa3c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d009      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a65      	ldr	r2, [pc, #404]	; (80058dc <HAL_DMA_IRQHandler+0xa40>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_DMA_IRQHandler+0x8b8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a64      	ldr	r2, [pc, #400]	; (80058e0 <HAL_DMA_IRQHandler+0xa44>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <HAL_DMA_IRQHandler+0x8ca>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e007      	b.n	8005776 <HAL_DMA_IRQHandler+0x8da>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577e:	429a      	cmp	r2, r3
 8005780:	d307      	bcc.n	8005792 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f2      	bne.n	8005776 <HAL_DMA_IRQHandler+0x8da>
 8005790:	e000      	b.n	8005794 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005792:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057b2:	e003      	b.n	80057bc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8272 	beq.w	8005caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e26c      	b.n	8005caa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a43      	ldr	r2, [pc, #268]	; (80058e4 <HAL_DMA_IRQHandler+0xa48>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d022      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a42      	ldr	r2, [pc, #264]	; (80058e8 <HAL_DMA_IRQHandler+0xa4c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d01d      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a40      	ldr	r2, [pc, #256]	; (80058ec <HAL_DMA_IRQHandler+0xa50>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a3f      	ldr	r2, [pc, #252]	; (80058f0 <HAL_DMA_IRQHandler+0xa54>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3d      	ldr	r2, [pc, #244]	; (80058f4 <HAL_DMA_IRQHandler+0xa58>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <HAL_DMA_IRQHandler+0xa5c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_DMA_IRQHandler+0xa60>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_DMA_IRQHandler+0x984>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a39      	ldr	r2, [pc, #228]	; (8005900 <HAL_DMA_IRQHandler+0xa64>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d101      	bne.n	8005824 <HAL_DMA_IRQHandler+0x988>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <HAL_DMA_IRQHandler+0x98a>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 823f 	beq.w	8005caa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2204      	movs	r2, #4
 800583e:	409a      	lsls	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80cd 	beq.w	80059e4 <HAL_DMA_IRQHandler+0xb48>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80c7 	beq.w	80059e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2204      	movs	r2, #4
 8005860:	409a      	lsls	r2, r3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d049      	beq.n	8005904 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8210 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800588c:	e20a      	b.n	8005ca4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8206 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058a0:	e200      	b.n	8005ca4 <HAL_DMA_IRQHandler+0xe08>
 80058a2:	bf00      	nop
 80058a4:	40020010 	.word	0x40020010
 80058a8:	40020028 	.word	0x40020028
 80058ac:	40020040 	.word	0x40020040
 80058b0:	40020058 	.word	0x40020058
 80058b4:	40020070 	.word	0x40020070
 80058b8:	40020088 	.word	0x40020088
 80058bc:	400200a0 	.word	0x400200a0
 80058c0:	400200b8 	.word	0x400200b8
 80058c4:	40020410 	.word	0x40020410
 80058c8:	40020428 	.word	0x40020428
 80058cc:	40020440 	.word	0x40020440
 80058d0:	40020458 	.word	0x40020458
 80058d4:	40020470 	.word	0x40020470
 80058d8:	40020488 	.word	0x40020488
 80058dc:	400204a0 	.word	0x400204a0
 80058e0:	400204b8 	.word	0x400204b8
 80058e4:	58025408 	.word	0x58025408
 80058e8:	5802541c 	.word	0x5802541c
 80058ec:	58025430 	.word	0x58025430
 80058f0:	58025444 	.word	0x58025444
 80058f4:	58025458 	.word	0x58025458
 80058f8:	5802546c 	.word	0x5802546c
 80058fc:	58025480 	.word	0x58025480
 8005900:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d160      	bne.n	80059d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a8c      	ldr	r2, [pc, #560]	; (8005b44 <HAL_DMA_IRQHandler+0xca8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d04a      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a8a      	ldr	r2, [pc, #552]	; (8005b48 <HAL_DMA_IRQHandler+0xcac>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d045      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a89      	ldr	r2, [pc, #548]	; (8005b4c <HAL_DMA_IRQHandler+0xcb0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d040      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a87      	ldr	r2, [pc, #540]	; (8005b50 <HAL_DMA_IRQHandler+0xcb4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d03b      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a86      	ldr	r2, [pc, #536]	; (8005b54 <HAL_DMA_IRQHandler+0xcb8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d036      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a84      	ldr	r2, [pc, #528]	; (8005b58 <HAL_DMA_IRQHandler+0xcbc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d031      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a83      	ldr	r2, [pc, #524]	; (8005b5c <HAL_DMA_IRQHandler+0xcc0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d02c      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a81      	ldr	r2, [pc, #516]	; (8005b60 <HAL_DMA_IRQHandler+0xcc4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d027      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a80      	ldr	r2, [pc, #512]	; (8005b64 <HAL_DMA_IRQHandler+0xcc8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a7e      	ldr	r2, [pc, #504]	; (8005b68 <HAL_DMA_IRQHandler+0xccc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01d      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7d      	ldr	r2, [pc, #500]	; (8005b6c <HAL_DMA_IRQHandler+0xcd0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a7b      	ldr	r2, [pc, #492]	; (8005b70 <HAL_DMA_IRQHandler+0xcd4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_DMA_IRQHandler+0xcd8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a78      	ldr	r2, [pc, #480]	; (8005b78 <HAL_DMA_IRQHandler+0xcdc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a77      	ldr	r2, [pc, #476]	; (8005b7c <HAL_DMA_IRQHandler+0xce0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_DMA_IRQHandler+0xb12>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a75      	ldr	r2, [pc, #468]	; (8005b80 <HAL_DMA_IRQHandler+0xce4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <HAL_DMA_IRQHandler+0xb24>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0208 	bic.w	r2, r2, #8
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e007      	b.n	80059d0 <HAL_DMA_IRQHandler+0xb34>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0204 	bic.w	r2, r2, #4
 80059ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8165 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059e2:	e15f      	b.n	8005ca4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2202      	movs	r2, #2
 80059ee:	409a      	lsls	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80c5 	beq.w	8005b84 <HAL_DMA_IRQHandler+0xce8>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80bf 	beq.w	8005b84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	2202      	movs	r2, #2
 8005a10:	409a      	lsls	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d018      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 813a 	beq.w	8005ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a3c:	e134      	b.n	8005ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8130 	beq.w	8005ca8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a50:	e12a      	b.n	8005ca8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d168      	bne.n	8005b2e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a38      	ldr	r2, [pc, #224]	; (8005b44 <HAL_DMA_IRQHandler+0xca8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d04a      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a37      	ldr	r2, [pc, #220]	; (8005b48 <HAL_DMA_IRQHandler+0xcac>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d045      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <HAL_DMA_IRQHandler+0xcb0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d040      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a34      	ldr	r2, [pc, #208]	; (8005b50 <HAL_DMA_IRQHandler+0xcb4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d03b      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a32      	ldr	r2, [pc, #200]	; (8005b54 <HAL_DMA_IRQHandler+0xcb8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d036      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a31      	ldr	r2, [pc, #196]	; (8005b58 <HAL_DMA_IRQHandler+0xcbc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d031      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <HAL_DMA_IRQHandler+0xcc0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d02c      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a2e      	ldr	r2, [pc, #184]	; (8005b60 <HAL_DMA_IRQHandler+0xcc4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d027      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2c      	ldr	r2, [pc, #176]	; (8005b64 <HAL_DMA_IRQHandler+0xcc8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d022      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2b      	ldr	r2, [pc, #172]	; (8005b68 <HAL_DMA_IRQHandler+0xccc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d01d      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a29      	ldr	r2, [pc, #164]	; (8005b6c <HAL_DMA_IRQHandler+0xcd0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d018      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a28      	ldr	r2, [pc, #160]	; (8005b70 <HAL_DMA_IRQHandler+0xcd4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <HAL_DMA_IRQHandler+0xcd8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00e      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a25      	ldr	r2, [pc, #148]	; (8005b78 <HAL_DMA_IRQHandler+0xcdc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d009      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <HAL_DMA_IRQHandler+0xce0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d004      	beq.n	8005afc <HAL_DMA_IRQHandler+0xc60>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <HAL_DMA_IRQHandler+0xce4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d108      	bne.n	8005b0e <HAL_DMA_IRQHandler+0xc72>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0214 	bic.w	r2, r2, #20
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e007      	b.n	8005b1e <HAL_DMA_IRQHandler+0xc82>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 020a 	bic.w	r2, r2, #10
 8005b1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80b8 	beq.w	8005ca8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b40:	e0b2      	b.n	8005ca8 <HAL_DMA_IRQHandler+0xe0c>
 8005b42:	bf00      	nop
 8005b44:	40020010 	.word	0x40020010
 8005b48:	40020028 	.word	0x40020028
 8005b4c:	40020040 	.word	0x40020040
 8005b50:	40020058 	.word	0x40020058
 8005b54:	40020070 	.word	0x40020070
 8005b58:	40020088 	.word	0x40020088
 8005b5c:	400200a0 	.word	0x400200a0
 8005b60:	400200b8 	.word	0x400200b8
 8005b64:	40020410 	.word	0x40020410
 8005b68:	40020428 	.word	0x40020428
 8005b6c:	40020440 	.word	0x40020440
 8005b70:	40020458 	.word	0x40020458
 8005b74:	40020470 	.word	0x40020470
 8005b78:	40020488 	.word	0x40020488
 8005b7c:	400204a0 	.word	0x400204a0
 8005b80:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8088 	beq.w	8005caa <HAL_DMA_IRQHandler+0xe0e>
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8082 	beq.w	8005caa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a41      	ldr	r2, [pc, #260]	; (8005cb0 <HAL_DMA_IRQHandler+0xe14>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d04a      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a3f      	ldr	r2, [pc, #252]	; (8005cb4 <HAL_DMA_IRQHandler+0xe18>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d045      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a3e      	ldr	r2, [pc, #248]	; (8005cb8 <HAL_DMA_IRQHandler+0xe1c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d040      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	; (8005cbc <HAL_DMA_IRQHandler+0xe20>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d03b      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a3b      	ldr	r2, [pc, #236]	; (8005cc0 <HAL_DMA_IRQHandler+0xe24>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d036      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a39      	ldr	r2, [pc, #228]	; (8005cc4 <HAL_DMA_IRQHandler+0xe28>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a38      	ldr	r2, [pc, #224]	; (8005cc8 <HAL_DMA_IRQHandler+0xe2c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d02c      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a36      	ldr	r2, [pc, #216]	; (8005ccc <HAL_DMA_IRQHandler+0xe30>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d027      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a35      	ldr	r2, [pc, #212]	; (8005cd0 <HAL_DMA_IRQHandler+0xe34>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a33      	ldr	r2, [pc, #204]	; (8005cd4 <HAL_DMA_IRQHandler+0xe38>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01d      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a32      	ldr	r2, [pc, #200]	; (8005cd8 <HAL_DMA_IRQHandler+0xe3c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a30      	ldr	r2, [pc, #192]	; (8005cdc <HAL_DMA_IRQHandler+0xe40>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2f      	ldr	r2, [pc, #188]	; (8005ce0 <HAL_DMA_IRQHandler+0xe44>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ce4 <HAL_DMA_IRQHandler+0xe48>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <HAL_DMA_IRQHandler+0xe4c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_IRQHandler+0xdaa>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2a      	ldr	r2, [pc, #168]	; (8005cec <HAL_DMA_IRQHandler+0xe50>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <HAL_DMA_IRQHandler+0xdbc>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 021c 	bic.w	r2, r2, #28
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e007      	b.n	8005c68 <HAL_DMA_IRQHandler+0xdcc>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 020e 	bic.w	r2, r2, #14
 8005c66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	2201      	movs	r2, #1
 8005c72:	409a      	lsls	r2, r3
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
 8005c9e:	e004      	b.n	8005caa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ca0:	bf00      	nop
 8005ca2:	e002      	b.n	8005caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ca4:	bf00      	nop
 8005ca6:	e000      	b.n	8005caa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ca8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005caa:	3728      	adds	r7, #40	; 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40020010 	.word	0x40020010
 8005cb4:	40020028 	.word	0x40020028
 8005cb8:	40020040 	.word	0x40020040
 8005cbc:	40020058 	.word	0x40020058
 8005cc0:	40020070 	.word	0x40020070
 8005cc4:	40020088 	.word	0x40020088
 8005cc8:	400200a0 	.word	0x400200a0
 8005ccc:	400200b8 	.word	0x400200b8
 8005cd0:	40020410 	.word	0x40020410
 8005cd4:	40020428 	.word	0x40020428
 8005cd8:	40020440 	.word	0x40020440
 8005cdc:	40020458 	.word	0x40020458
 8005ce0:	40020470 	.word	0x40020470
 8005ce4:	40020488 	.word	0x40020488
 8005ce8:	400204a0 	.word	0x400204a0
 8005cec:	400204b8 	.word	0x400204b8

08005cf0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a84      	ldr	r2, [pc, #528]	; (8005f38 <DMA_SetConfig+0x230>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d072      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a82      	ldr	r2, [pc, #520]	; (8005f3c <DMA_SetConfig+0x234>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d06d      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a81      	ldr	r2, [pc, #516]	; (8005f40 <DMA_SetConfig+0x238>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d068      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a7f      	ldr	r2, [pc, #508]	; (8005f44 <DMA_SetConfig+0x23c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d063      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a7e      	ldr	r2, [pc, #504]	; (8005f48 <DMA_SetConfig+0x240>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d05e      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a7c      	ldr	r2, [pc, #496]	; (8005f4c <DMA_SetConfig+0x244>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d059      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a7b      	ldr	r2, [pc, #492]	; (8005f50 <DMA_SetConfig+0x248>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d054      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a79      	ldr	r2, [pc, #484]	; (8005f54 <DMA_SetConfig+0x24c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d04f      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a78      	ldr	r2, [pc, #480]	; (8005f58 <DMA_SetConfig+0x250>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d04a      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a76      	ldr	r2, [pc, #472]	; (8005f5c <DMA_SetConfig+0x254>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d045      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a75      	ldr	r2, [pc, #468]	; (8005f60 <DMA_SetConfig+0x258>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d040      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a73      	ldr	r2, [pc, #460]	; (8005f64 <DMA_SetConfig+0x25c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d03b      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a72      	ldr	r2, [pc, #456]	; (8005f68 <DMA_SetConfig+0x260>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d036      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a70      	ldr	r2, [pc, #448]	; (8005f6c <DMA_SetConfig+0x264>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d031      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6f      	ldr	r2, [pc, #444]	; (8005f70 <DMA_SetConfig+0x268>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d02c      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a6d      	ldr	r2, [pc, #436]	; (8005f74 <DMA_SetConfig+0x26c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d027      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6c      	ldr	r2, [pc, #432]	; (8005f78 <DMA_SetConfig+0x270>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a6a      	ldr	r2, [pc, #424]	; (8005f7c <DMA_SetConfig+0x274>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01d      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a69      	ldr	r2, [pc, #420]	; (8005f80 <DMA_SetConfig+0x278>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a67      	ldr	r2, [pc, #412]	; (8005f84 <DMA_SetConfig+0x27c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a66      	ldr	r2, [pc, #408]	; (8005f88 <DMA_SetConfig+0x280>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a64      	ldr	r2, [pc, #400]	; (8005f8c <DMA_SetConfig+0x284>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a63      	ldr	r2, [pc, #396]	; (8005f90 <DMA_SetConfig+0x288>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <DMA_SetConfig+0x10a>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a61      	ldr	r2, [pc, #388]	; (8005f94 <DMA_SetConfig+0x28c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d101      	bne.n	8005e16 <DMA_SetConfig+0x10e>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <DMA_SetConfig+0x110>
 8005e16:	2300      	movs	r3, #0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00d      	beq.n	8005e38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3e      	ldr	r2, [pc, #248]	; (8005f38 <DMA_SetConfig+0x230>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d04a      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a3d      	ldr	r2, [pc, #244]	; (8005f3c <DMA_SetConfig+0x234>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d045      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a3b      	ldr	r2, [pc, #236]	; (8005f40 <DMA_SetConfig+0x238>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d040      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a3a      	ldr	r2, [pc, #232]	; (8005f44 <DMA_SetConfig+0x23c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d03b      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a38      	ldr	r2, [pc, #224]	; (8005f48 <DMA_SetConfig+0x240>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d036      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a37      	ldr	r2, [pc, #220]	; (8005f4c <DMA_SetConfig+0x244>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d031      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <DMA_SetConfig+0x248>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02c      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a34      	ldr	r2, [pc, #208]	; (8005f54 <DMA_SetConfig+0x24c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d027      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a32      	ldr	r2, [pc, #200]	; (8005f58 <DMA_SetConfig+0x250>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d022      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a31      	ldr	r2, [pc, #196]	; (8005f5c <DMA_SetConfig+0x254>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d01d      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2f      	ldr	r2, [pc, #188]	; (8005f60 <DMA_SetConfig+0x258>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d018      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2e      	ldr	r2, [pc, #184]	; (8005f64 <DMA_SetConfig+0x25c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d013      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <DMA_SetConfig+0x260>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2b      	ldr	r2, [pc, #172]	; (8005f6c <DMA_SetConfig+0x264>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d009      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a29      	ldr	r2, [pc, #164]	; (8005f70 <DMA_SetConfig+0x268>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <DMA_SetConfig+0x1d0>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a28      	ldr	r2, [pc, #160]	; (8005f74 <DMA_SetConfig+0x26c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d101      	bne.n	8005edc <DMA_SetConfig+0x1d4>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <DMA_SetConfig+0x1d6>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d05a      	beq.n	8005f98 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	223f      	movs	r2, #63	; 0x3f
 8005eec:	409a      	lsls	r2, r3
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d108      	bne.n	8005f24 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f22:	e087      	b.n	8006034 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]
}
 8005f34:	e07e      	b.n	8006034 <DMA_SetConfig+0x32c>
 8005f36:	bf00      	nop
 8005f38:	40020010 	.word	0x40020010
 8005f3c:	40020028 	.word	0x40020028
 8005f40:	40020040 	.word	0x40020040
 8005f44:	40020058 	.word	0x40020058
 8005f48:	40020070 	.word	0x40020070
 8005f4c:	40020088 	.word	0x40020088
 8005f50:	400200a0 	.word	0x400200a0
 8005f54:	400200b8 	.word	0x400200b8
 8005f58:	40020410 	.word	0x40020410
 8005f5c:	40020428 	.word	0x40020428
 8005f60:	40020440 	.word	0x40020440
 8005f64:	40020458 	.word	0x40020458
 8005f68:	40020470 	.word	0x40020470
 8005f6c:	40020488 	.word	0x40020488
 8005f70:	400204a0 	.word	0x400204a0
 8005f74:	400204b8 	.word	0x400204b8
 8005f78:	58025408 	.word	0x58025408
 8005f7c:	5802541c 	.word	0x5802541c
 8005f80:	58025430 	.word	0x58025430
 8005f84:	58025444 	.word	0x58025444
 8005f88:	58025458 	.word	0x58025458
 8005f8c:	5802546c 	.word	0x5802546c
 8005f90:	58025480 	.word	0x58025480
 8005f94:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a28      	ldr	r2, [pc, #160]	; (8006040 <DMA_SetConfig+0x338>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a27      	ldr	r2, [pc, #156]	; (8006044 <DMA_SetConfig+0x33c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01d      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a25      	ldr	r2, [pc, #148]	; (8006048 <DMA_SetConfig+0x340>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a24      	ldr	r2, [pc, #144]	; (800604c <DMA_SetConfig+0x344>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <DMA_SetConfig+0x348>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a21      	ldr	r2, [pc, #132]	; (8006054 <DMA_SetConfig+0x34c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1f      	ldr	r2, [pc, #124]	; (8006058 <DMA_SetConfig+0x350>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <DMA_SetConfig+0x2e0>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1e      	ldr	r2, [pc, #120]	; (800605c <DMA_SetConfig+0x354>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d101      	bne.n	8005fec <DMA_SetConfig+0x2e4>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <DMA_SetConfig+0x2e6>
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d108      	bne.n	8006024 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	60da      	str	r2, [r3, #12]
}
 8006022:	e007      	b.n	8006034 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	58025408 	.word	0x58025408
 8006044:	5802541c 	.word	0x5802541c
 8006048:	58025430 	.word	0x58025430
 800604c:	58025444 	.word	0x58025444
 8006050:	58025458 	.word	0x58025458
 8006054:	5802546c 	.word	0x5802546c
 8006058:	58025480 	.word	0x58025480
 800605c:	58025494 	.word	0x58025494

08006060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a42      	ldr	r2, [pc, #264]	; (8006178 <DMA_CalcBaseAndBitshift+0x118>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d04a      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a41      	ldr	r2, [pc, #260]	; (800617c <DMA_CalcBaseAndBitshift+0x11c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d045      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a3f      	ldr	r2, [pc, #252]	; (8006180 <DMA_CalcBaseAndBitshift+0x120>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d040      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a3e      	ldr	r2, [pc, #248]	; (8006184 <DMA_CalcBaseAndBitshift+0x124>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d03b      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a3c      	ldr	r2, [pc, #240]	; (8006188 <DMA_CalcBaseAndBitshift+0x128>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d036      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a3b      	ldr	r2, [pc, #236]	; (800618c <DMA_CalcBaseAndBitshift+0x12c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d031      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a39      	ldr	r2, [pc, #228]	; (8006190 <DMA_CalcBaseAndBitshift+0x130>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d02c      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a38      	ldr	r2, [pc, #224]	; (8006194 <DMA_CalcBaseAndBitshift+0x134>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d027      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a36      	ldr	r2, [pc, #216]	; (8006198 <DMA_CalcBaseAndBitshift+0x138>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d022      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a35      	ldr	r2, [pc, #212]	; (800619c <DMA_CalcBaseAndBitshift+0x13c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01d      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a33      	ldr	r2, [pc, #204]	; (80061a0 <DMA_CalcBaseAndBitshift+0x140>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d018      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a32      	ldr	r2, [pc, #200]	; (80061a4 <DMA_CalcBaseAndBitshift+0x144>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <DMA_CalcBaseAndBitshift+0x148>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2f      	ldr	r2, [pc, #188]	; (80061ac <DMA_CalcBaseAndBitshift+0x14c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d009      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2d      	ldr	r2, [pc, #180]	; (80061b0 <DMA_CalcBaseAndBitshift+0x150>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <DMA_CalcBaseAndBitshift+0xa8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2c      	ldr	r2, [pc, #176]	; (80061b4 <DMA_CalcBaseAndBitshift+0x154>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d101      	bne.n	800610c <DMA_CalcBaseAndBitshift+0xac>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <DMA_CalcBaseAndBitshift+0xae>
 800610c:	2300      	movs	r3, #0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d024      	beq.n	800615c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	3b10      	subs	r3, #16
 800611a:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <DMA_CalcBaseAndBitshift+0x158>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	4a24      	ldr	r2, [pc, #144]	; (80061bc <DMA_CalcBaseAndBitshift+0x15c>)
 800612c:	5cd3      	ldrb	r3, [r2, r3]
 800612e:	461a      	mov	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d908      	bls.n	800614c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <DMA_CalcBaseAndBitshift+0x160>)
 8006142:	4013      	ands	r3, r2
 8006144:	1d1a      	adds	r2, r3, #4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	659a      	str	r2, [r3, #88]	; 0x58
 800614a:	e00d      	b.n	8006168 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <DMA_CalcBaseAndBitshift+0x160>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6593      	str	r3, [r2, #88]	; 0x58
 800615a:	e005      	b.n	8006168 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40020010 	.word	0x40020010
 800617c:	40020028 	.word	0x40020028
 8006180:	40020040 	.word	0x40020040
 8006184:	40020058 	.word	0x40020058
 8006188:	40020070 	.word	0x40020070
 800618c:	40020088 	.word	0x40020088
 8006190:	400200a0 	.word	0x400200a0
 8006194:	400200b8 	.word	0x400200b8
 8006198:	40020410 	.word	0x40020410
 800619c:	40020428 	.word	0x40020428
 80061a0:	40020440 	.word	0x40020440
 80061a4:	40020458 	.word	0x40020458
 80061a8:	40020470 	.word	0x40020470
 80061ac:	40020488 	.word	0x40020488
 80061b0:	400204a0 	.word	0x400204a0
 80061b4:	400204b8 	.word	0x400204b8
 80061b8:	aaaaaaab 	.word	0xaaaaaaab
 80061bc:	0800dba8 	.word	0x0800dba8
 80061c0:	fffffc00 	.word	0xfffffc00

080061c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d120      	bne.n	800621a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d858      	bhi.n	8006292 <DMA_CheckFifoParam+0xce>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <DMA_CheckFifoParam+0x24>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	0800620b 	.word	0x0800620b
 80061f0:	080061f9 	.word	0x080061f9
 80061f4:	08006293 	.word	0x08006293
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d048      	beq.n	8006296 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006208:	e045      	b.n	8006296 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006212:	d142      	bne.n	800629a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006218:	e03f      	b.n	800629a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006222:	d123      	bne.n	800626c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	2b03      	cmp	r3, #3
 800622a:	d838      	bhi.n	800629e <DMA_CheckFifoParam+0xda>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <DMA_CheckFifoParam+0x70>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006245 	.word	0x08006245
 8006238:	0800624b 	.word	0x0800624b
 800623c:	08006245 	.word	0x08006245
 8006240:	0800625d 	.word	0x0800625d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	73fb      	strb	r3, [r7, #15]
        break;
 8006248:	e030      	b.n	80062ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d025      	beq.n	80062a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800625a:	e022      	b.n	80062a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006264:	d11f      	bne.n	80062a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800626a:	e01c      	b.n	80062a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	2b02      	cmp	r3, #2
 8006272:	d902      	bls.n	800627a <DMA_CheckFifoParam+0xb6>
 8006274:	2b03      	cmp	r3, #3
 8006276:	d003      	beq.n	8006280 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006278:	e018      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
        break;
 800627e:	e015      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
    break;
 8006290:	e00b      	b.n	80062aa <DMA_CheckFifoParam+0xe6>
        break;
 8006292:	bf00      	nop
 8006294:	e00a      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        break;
 8006296:	bf00      	nop
 8006298:	e008      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        break;
 800629a:	bf00      	nop
 800629c:	e006      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        break;
 800629e:	bf00      	nop
 80062a0:	e004      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        break;
 80062a2:	bf00      	nop
 80062a4:	e002      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
        break;
 80062a6:	bf00      	nop
 80062a8:	e000      	b.n	80062ac <DMA_CheckFifoParam+0xe8>
    break;
 80062aa:	bf00      	nop
    }
  }

  return status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop

080062bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a38      	ldr	r2, [pc, #224]	; (80063b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a36      	ldr	r2, [pc, #216]	; (80063b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01d      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a33      	ldr	r2, [pc, #204]	; (80063bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a32      	ldr	r2, [pc, #200]	; (80063c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a30      	ldr	r2, [pc, #192]	; (80063c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2d      	ldr	r2, [pc, #180]	; (80063cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01a      	beq.n	800635a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	3b08      	subs	r3, #8
 800632c:	4a28      	ldr	r2, [pc, #160]	; (80063d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800632e:	fba2 2303 	umull	r2, r3, r2, r3
 8006332:	091b      	lsrs	r3, r3, #4
 8006334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	461a      	mov	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006348:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	2201      	movs	r2, #1
 8006352:	409a      	lsls	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006358:	e024      	b.n	80063a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	3b10      	subs	r3, #16
 8006362:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006364:	fba2 2303 	umull	r2, r3, r2, r3
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d806      	bhi.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d902      	bls.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a16      	ldr	r2, [pc, #88]	; (80063ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006394:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2201      	movs	r2, #1
 800639e:	409a      	lsls	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	58025408 	.word	0x58025408
 80063b4:	5802541c 	.word	0x5802541c
 80063b8:	58025430 	.word	0x58025430
 80063bc:	58025444 	.word	0x58025444
 80063c0:	58025458 	.word	0x58025458
 80063c4:	5802546c 	.word	0x5802546c
 80063c8:	58025480 	.word	0x58025480
 80063cc:	58025494 	.word	0x58025494
 80063d0:	cccccccd 	.word	0xcccccccd
 80063d4:	16009600 	.word	0x16009600
 80063d8:	58025880 	.word	0x58025880
 80063dc:	aaaaaaab 	.word	0xaaaaaaab
 80063e0:	400204b8 	.word	0x400204b8
 80063e4:	4002040f 	.word	0x4002040f
 80063e8:	10008200 	.word	0x10008200
 80063ec:	40020880 	.word	0x40020880

080063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04a      	beq.n	800649c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d847      	bhi.n	800649c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a25      	ldr	r2, [pc, #148]	; (80064a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d022      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a24      	ldr	r2, [pc, #144]	; (80064ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d01d      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d018      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00e      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d009      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d101      	bne.n	8006460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006460:	2300      	movs	r3, #0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a15      	ldr	r2, [pc, #84]	; (80064cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006478:	671a      	str	r2, [r3, #112]	; 0x70
 800647a:	e009      	b.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a11      	ldr	r2, [pc, #68]	; (80064d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800648e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3b01      	subs	r3, #1
 8006494:	2201      	movs	r2, #1
 8006496:	409a      	lsls	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	58025408 	.word	0x58025408
 80064ac:	5802541c 	.word	0x5802541c
 80064b0:	58025430 	.word	0x58025430
 80064b4:	58025444 	.word	0x58025444
 80064b8:	58025458 	.word	0x58025458
 80064bc:	5802546c 	.word	0x5802546c
 80064c0:	58025480 	.word	0x58025480
 80064c4:	58025494 	.word	0x58025494
 80064c8:	1600963f 	.word	0x1600963f
 80064cc:	58025940 	.word	0x58025940
 80064d0:	1000823f 	.word	0x1000823f
 80064d4:	40020940 	.word	0x40020940

080064d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d8:	b480      	push	{r7}
 80064da:	b089      	sub	sp, #36	; 0x24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064e6:	4b89      	ldr	r3, [pc, #548]	; (800670c <HAL_GPIO_Init+0x234>)
 80064e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064ea:	e194      	b.n	8006816 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	2101      	movs	r1, #1
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	fa01 f303 	lsl.w	r3, r1, r3
 80064f8:	4013      	ands	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8186 	beq.w	8006810 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d00b      	beq.n	8006524 <HAL_GPIO_Init+0x4c>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b02      	cmp	r3, #2
 8006512:	d007      	beq.n	8006524 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006518:	2b11      	cmp	r3, #17
 800651a:	d003      	beq.n	8006524 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b12      	cmp	r3, #18
 8006522:	d130      	bne.n	8006586 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	2203      	movs	r2, #3
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	4013      	ands	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4313      	orrs	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800655a:	2201      	movs	r2, #1
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	43db      	mvns	r3, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	091b      	lsrs	r3, r3, #4
 8006570:	f003 0201 	and.w	r2, r3, #1
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	4313      	orrs	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	2203      	movs	r2, #3
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4013      	ands	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d003      	beq.n	80065c6 <HAL_GPIO_Init+0xee>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b12      	cmp	r3, #18
 80065c4:	d123      	bne.n	800660e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	08da      	lsrs	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3208      	adds	r2, #8
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	220f      	movs	r2, #15
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	08da      	lsrs	r2, r3, #3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3208      	adds	r2, #8
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	2203      	movs	r2, #3
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	43db      	mvns	r3, r3
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	4013      	ands	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80e0 	beq.w	8006810 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006650:	4b2f      	ldr	r3, [pc, #188]	; (8006710 <HAL_GPIO_Init+0x238>)
 8006652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006656:	4a2e      	ldr	r2, [pc, #184]	; (8006710 <HAL_GPIO_Init+0x238>)
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006660:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <HAL_GPIO_Init+0x238>)
 8006662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800666e:	4a29      	ldr	r2, [pc, #164]	; (8006714 <HAL_GPIO_Init+0x23c>)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	3302      	adds	r3, #2
 8006676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	220f      	movs	r2, #15
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	43db      	mvns	r3, r3
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4013      	ands	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_GPIO_Init+0x240>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d052      	beq.n	8006740 <HAL_GPIO_Init+0x268>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <HAL_GPIO_Init+0x244>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d031      	beq.n	8006706 <HAL_GPIO_Init+0x22e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_GPIO_Init+0x248>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <HAL_GPIO_Init+0x22a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_GPIO_Init+0x24c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d025      	beq.n	80066fe <HAL_GPIO_Init+0x226>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <HAL_GPIO_Init+0x250>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <HAL_GPIO_Init+0x222>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1b      	ldr	r2, [pc, #108]	; (800672c <HAL_GPIO_Init+0x254>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_Init+0x21e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <HAL_GPIO_Init+0x258>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_Init+0x21a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a19      	ldr	r2, [pc, #100]	; (8006734 <HAL_GPIO_Init+0x25c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_Init+0x216>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <HAL_GPIO_Init+0x260>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_Init+0x212>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a17      	ldr	r2, [pc, #92]	; (800673c <HAL_GPIO_Init+0x264>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_Init+0x20e>
 80066e2:	2309      	movs	r3, #9
 80066e4:	e02d      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066e6:	230a      	movs	r3, #10
 80066e8:	e02b      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066ea:	2308      	movs	r3, #8
 80066ec:	e029      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066ee:	2307      	movs	r3, #7
 80066f0:	e027      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e025      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066f6:	2305      	movs	r3, #5
 80066f8:	e023      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066fa:	2304      	movs	r3, #4
 80066fc:	e021      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 80066fe:	2303      	movs	r3, #3
 8006700:	e01f      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 8006702:	2302      	movs	r3, #2
 8006704:	e01d      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 8006706:	2301      	movs	r3, #1
 8006708:	e01b      	b.n	8006742 <HAL_GPIO_Init+0x26a>
 800670a:	bf00      	nop
 800670c:	58000080 	.word	0x58000080
 8006710:	58024400 	.word	0x58024400
 8006714:	58000400 	.word	0x58000400
 8006718:	58020000 	.word	0x58020000
 800671c:	58020400 	.word	0x58020400
 8006720:	58020800 	.word	0x58020800
 8006724:	58020c00 	.word	0x58020c00
 8006728:	58021000 	.word	0x58021000
 800672c:	58021400 	.word	0x58021400
 8006730:	58021800 	.word	0x58021800
 8006734:	58021c00 	.word	0x58021c00
 8006738:	58022000 	.word	0x58022000
 800673c:	58022400 	.word	0x58022400
 8006740:	2300      	movs	r3, #0
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	f002 0203 	and.w	r2, r2, #3
 8006748:	0092      	lsls	r2, r2, #2
 800674a:	4093      	lsls	r3, r2
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006752:	4938      	ldr	r1, [pc, #224]	; (8006834 <HAL_GPIO_Init+0x35c>)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	089b      	lsrs	r3, r3, #2
 8006758:	3302      	adds	r3, #2
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	43db      	mvns	r3, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4013      	ands	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	43db      	mvns	r3, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4013      	ands	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	f47f ae63 	bne.w	80064ec <HAL_GPIO_Init+0x14>
  }
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	3724      	adds	r7, #36	; 0x24
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	58000400 	.word	0x58000400

08006838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	887b      	ldrh	r3, [r7, #2]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e001      	b.n	800685a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
 8006874:	4613      	mov	r3, r2
 8006876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006878:	787b      	ldrb	r3, [r7, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800687e:	887a      	ldrh	r2, [r7, #2]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006884:	e003      	b.n	800688e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	041a      	lsls	r2, r3, #16
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	619a      	str	r2, [r3, #24]
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068ac:	887a      	ldrh	r2, [r7, #2]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4013      	ands	r3, r2
 80068b2:	041a      	lsls	r2, r3, #16
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	43d9      	mvns	r1, r3
 80068b8:	887b      	ldrh	r3, [r7, #2]
 80068ba:	400b      	ands	r3, r1
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	619a      	str	r2, [r3, #24]
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e041      	b.n	8006964 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80068e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f245 5255 	movw	r2, #21845	; 0x5555
 80068f2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6852      	ldr	r2, [r2, #4]
 80068fc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6892      	ldr	r2, [r2, #8]
 8006906:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006908:	f7fc fea8 	bl	800365c <HAL_GetTick>
 800690c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800690e:	e00f      	b.n	8006930 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006910:	f7fc fea4 	bl	800365c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b30      	cmp	r3, #48	; 0x30
 800691c:	d908      	bls.n	8006930 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e019      	b.n	8006964 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e8      	bne.n	8006910 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d005      	beq.n	8006958 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68d2      	ldr	r2, [r2, #12]
 8006954:	611a      	str	r2, [r3, #16]
 8006956:	e004      	b.n	8006962 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800697c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006994:	4b19      	ldr	r3, [pc, #100]	; (80069fc <HAL_PWREx_ConfigSupply+0x70>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b04      	cmp	r3, #4
 800699e:	d00a      	beq.n	80069b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069a0:	4b16      	ldr	r3, [pc, #88]	; (80069fc <HAL_PWREx_ConfigSupply+0x70>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d001      	beq.n	80069b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e01f      	b.n	80069f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e01d      	b.n	80069f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069b6:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_PWREx_ConfigSupply+0x70>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f023 0207 	bic.w	r2, r3, #7
 80069be:	490f      	ldr	r1, [pc, #60]	; (80069fc <HAL_PWREx_ConfigSupply+0x70>)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069c6:	f7fc fe49 	bl	800365c <HAL_GetTick>
 80069ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069cc:	e009      	b.n	80069e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069ce:	f7fc fe45 	bl	800365c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069dc:	d901      	bls.n	80069e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e007      	b.n	80069f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_PWREx_ConfigSupply+0x70>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ee:	d1ee      	bne.n	80069ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	58024800 	.word	0x58024800

08006a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08c      	sub	sp, #48	; 0x30
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e3ff      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8087 	beq.w	8006b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a20:	4b99      	ldr	r3, [pc, #612]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a2a:	4b97      	ldr	r3, [pc, #604]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d007      	beq.n	8006a46 <HAL_RCC_OscConfig+0x46>
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	2b18      	cmp	r3, #24
 8006a3a:	d110      	bne.n	8006a5e <HAL_RCC_OscConfig+0x5e>
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d10b      	bne.n	8006a5e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a46:	4b90      	ldr	r3, [pc, #576]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d06c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x12c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d168      	bne.n	8006b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e3d9      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d106      	bne.n	8006a76 <HAL_RCC_OscConfig+0x76>
 8006a68:	4b87      	ldr	r3, [pc, #540]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a86      	ldr	r2, [pc, #536]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e02e      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd4>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCC_OscConfig+0x98>
 8006a7e:	4b82      	ldr	r3, [pc, #520]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a81      	ldr	r2, [pc, #516]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4b7f      	ldr	r3, [pc, #508]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a7e      	ldr	r2, [pc, #504]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e01d      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd4>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0xbc>
 8006aa2:	4b79      	ldr	r3, [pc, #484]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a78      	ldr	r2, [pc, #480]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b76      	ldr	r3, [pc, #472]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a75      	ldr	r2, [pc, #468]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00b      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd4>
 8006abc:	4b72      	ldr	r3, [pc, #456]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a71      	ldr	r2, [pc, #452]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	4b6f      	ldr	r3, [pc, #444]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a6e      	ldr	r2, [pc, #440]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fc fdbe 	bl	800365c <HAL_GetTick>
 8006ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7fc fdba 	bl	800365c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e38d      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006af6:	4b64      	ldr	r3, [pc, #400]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xe4>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fc fdaa 	bl	800365c <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7fc fda6 	bl	800365c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	; 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e379      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b1e:	4b5a      	ldr	r3, [pc, #360]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x10c>
 8006b2a:	e000      	b.n	8006b2e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80ae 	beq.w	8006c98 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3c:	4b52      	ldr	r3, [pc, #328]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b46:	4b50      	ldr	r3, [pc, #320]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <HAL_RCC_OscConfig+0x162>
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	2b18      	cmp	r3, #24
 8006b56:	d13a      	bne.n	8006bce <HAL_RCC_OscConfig+0x1ce>
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d135      	bne.n	8006bce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b62:	4b49      	ldr	r3, [pc, #292]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_RCC_OscConfig+0x17a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e34b      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7a:	f7fc fd7b 	bl	8003674 <HAL_GetREVID>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d817      	bhi.n	8006bb8 <HAL_RCC_OscConfig+0x1b8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d108      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x1a2>
 8006b90:	4b3d      	ldr	r3, [pc, #244]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b98:	4a3b      	ldr	r2, [pc, #236]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ba0:	e07a      	b.n	8006c98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba2:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	031b      	lsls	r3, r3, #12
 8006bb0:	4935      	ldr	r1, [pc, #212]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bb6:	e06f      	b.n	8006c98 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb8:	4b33      	ldr	r3, [pc, #204]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	061b      	lsls	r3, r3, #24
 8006bc6:	4930      	ldr	r1, [pc, #192]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bcc:	e064      	b.n	8006c98 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d045      	beq.n	8006c62 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bd6:	4b2c      	ldr	r3, [pc, #176]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 0219 	bic.w	r2, r3, #25
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	4929      	ldr	r1, [pc, #164]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be8:	f7fc fd38 	bl	800365c <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bf0:	f7fc fd34 	bl	800365c <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e307      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c02:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0e:	f7fc fd31 	bl	8003674 <HAL_GetREVID>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d817      	bhi.n	8006c4c <HAL_RCC_OscConfig+0x24c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d108      	bne.n	8006c36 <HAL_RCC_OscConfig+0x236>
 8006c24:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c2c:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c32:	6053      	str	r3, [r2, #4]
 8006c34:	e030      	b.n	8006c98 <HAL_RCC_OscConfig+0x298>
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	031b      	lsls	r3, r3, #12
 8006c44:	4910      	ldr	r1, [pc, #64]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	604b      	str	r3, [r1, #4]
 8006c4a:	e025      	b.n	8006c98 <HAL_RCC_OscConfig+0x298>
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	061b      	lsls	r3, r3, #24
 8006c5a:	490b      	ldr	r1, [pc, #44]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	604b      	str	r3, [r1, #4]
 8006c60:	e01a      	b.n	8006c98 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <HAL_RCC_OscConfig+0x288>)
 8006c68:	f023 0301 	bic.w	r3, r3, #1
 8006c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6e:	f7fc fcf5 	bl	800365c <HAL_GetTick>
 8006c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c74:	e00a      	b.n	8006c8c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c76:	f7fc fcf1 	bl	800365c <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d903      	bls.n	8006c8c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e2c4      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
 8006c88:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c8c:	4ba4      	ldr	r3, [pc, #656]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ee      	bne.n	8006c76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80a9 	beq.w	8006df8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ca6:	4b9e      	ldr	r3, [pc, #632]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cb0:	4b9b      	ldr	r3, [pc, #620]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d007      	beq.n	8006ccc <HAL_RCC_OscConfig+0x2cc>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b18      	cmp	r3, #24
 8006cc0:	d13a      	bne.n	8006d38 <HAL_RCC_OscConfig+0x338>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d135      	bne.n	8006d38 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ccc:	4b94      	ldr	r3, [pc, #592]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x2e4>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e296      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ce4:	f7fc fcc6 	bl	8003674 <HAL_GetREVID>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d817      	bhi.n	8006d22 <HAL_RCC_OscConfig+0x322>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d108      	bne.n	8006d0c <HAL_RCC_OscConfig+0x30c>
 8006cfa:	4b89      	ldr	r3, [pc, #548]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d02:	4a87      	ldr	r2, [pc, #540]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d0a:	e075      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d0c:	4b84      	ldr	r3, [pc, #528]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	069b      	lsls	r3, r3, #26
 8006d1a:	4981      	ldr	r1, [pc, #516]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d20:	e06a      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d22:	4b7f      	ldr	r3, [pc, #508]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	497b      	ldr	r1, [pc, #492]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d36:	e05f      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d042      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d40:	4b77      	ldr	r3, [pc, #476]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a76      	ldr	r2, [pc, #472]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7fc fc86 	bl	800365c <HAL_GetTick>
 8006d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d54:	f7fc fc82 	bl	800365c <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e255      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d66:	4b6e      	ldr	r3, [pc, #440]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0f0      	beq.n	8006d54 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d72:	f7fc fc7f 	bl	8003674 <HAL_GetREVID>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d817      	bhi.n	8006db0 <HAL_RCC_OscConfig+0x3b0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d108      	bne.n	8006d9a <HAL_RCC_OscConfig+0x39a>
 8006d88:	4b65      	ldr	r3, [pc, #404]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d90:	4a63      	ldr	r2, [pc, #396]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d96:	6053      	str	r3, [r2, #4]
 8006d98:	e02e      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f8>
 8006d9a:	4b61      	ldr	r3, [pc, #388]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	069b      	lsls	r3, r3, #26
 8006da8:	495d      	ldr	r1, [pc, #372]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	604b      	str	r3, [r1, #4]
 8006dae:	e023      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f8>
 8006db0:	4b5b      	ldr	r3, [pc, #364]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	4958      	ldr	r1, [pc, #352]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60cb      	str	r3, [r1, #12]
 8006dc4:	e018      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006dc6:	4b56      	ldr	r3, [pc, #344]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a55      	ldr	r2, [pc, #340]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fc fc43 	bl	800365c <HAL_GetTick>
 8006dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006dda:	f7fc fc3f 	bl	800365c <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e212      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006dec:	4b4c      	ldr	r3, [pc, #304]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d036      	beq.n	8006e72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d019      	beq.n	8006e40 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e0c:	4b44      	ldr	r3, [pc, #272]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e10:	4a43      	ldr	r2, [pc, #268]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e18:	f7fc fc20 	bl	800365c <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e20:	f7fc fc1c 	bl	800365c <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e1ef      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e32:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x420>
 8006e3e:	e018      	b.n	8006e72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e40:	4b37      	ldr	r3, [pc, #220]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e44:	4a36      	ldr	r2, [pc, #216]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4c:	f7fc fc06 	bl	800365c <HAL_GetTick>
 8006e50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e54:	f7fc fc02 	bl	800365c <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e1d5      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e66:	4b2e      	ldr	r3, [pc, #184]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d036      	beq.n	8006eec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d019      	beq.n	8006eba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e86:	4b26      	ldr	r3, [pc, #152]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006e92:	f7fc fbe3 	bl	800365c <HAL_GetTick>
 8006e96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006e9a:	f7fc fbdf 	bl	800365c <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e1b2      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006eac:	4b1c      	ldr	r3, [pc, #112]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCC_OscConfig+0x49a>
 8006eb8:	e018      	b.n	8006eec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006eba:	4b19      	ldr	r3, [pc, #100]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ec6:	f7fc fbc9 	bl	800365c <HAL_GetTick>
 8006eca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ece:	f7fc fbc5 	bl	800365c <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e198      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <HAL_RCC_OscConfig+0x520>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8085 	beq.w	8007004 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006efa:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <HAL_RCC_OscConfig+0x524>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <HAL_RCC_OscConfig+0x524>)
 8006f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f06:	f7fc fba9 	bl	800365c <HAL_GetTick>
 8006f0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f0c:	e00c      	b.n	8006f28 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f0e:	f7fc fba5 	bl	800365c <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b64      	cmp	r3, #100	; 0x64
 8006f1a:	d905      	bls.n	8006f28 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e178      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
 8006f20:	58024400 	.word	0x58024400
 8006f24:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f28:	4b96      	ldr	r3, [pc, #600]	; (8007184 <HAL_RCC_OscConfig+0x784>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0ec      	beq.n	8006f0e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d106      	bne.n	8006f4a <HAL_RCC_OscConfig+0x54a>
 8006f3c:	4b92      	ldr	r3, [pc, #584]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4a91      	ldr	r2, [pc, #580]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	6713      	str	r3, [r2, #112]	; 0x70
 8006f48:	e02d      	b.n	8006fa6 <HAL_RCC_OscConfig+0x5a6>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x56c>
 8006f52:	4b8d      	ldr	r3, [pc, #564]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	4a8c      	ldr	r2, [pc, #560]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f58:	f023 0301 	bic.w	r3, r3, #1
 8006f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f5e:	4b8a      	ldr	r3, [pc, #552]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	4a89      	ldr	r2, [pc, #548]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f64:	f023 0304 	bic.w	r3, r3, #4
 8006f68:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6a:	e01c      	b.n	8006fa6 <HAL_RCC_OscConfig+0x5a6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b05      	cmp	r3, #5
 8006f72:	d10c      	bne.n	8006f8e <HAL_RCC_OscConfig+0x58e>
 8006f74:	4b84      	ldr	r3, [pc, #528]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4a83      	ldr	r2, [pc, #524]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f7a:	f043 0304 	orr.w	r3, r3, #4
 8006f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f80:	4b81      	ldr	r3, [pc, #516]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f84:	4a80      	ldr	r2, [pc, #512]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f8c:	e00b      	b.n	8006fa6 <HAL_RCC_OscConfig+0x5a6>
 8006f8e:	4b7e      	ldr	r3, [pc, #504]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	4a7d      	ldr	r2, [pc, #500]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6713      	str	r3, [r2, #112]	; 0x70
 8006f9a:	4b7b      	ldr	r3, [pc, #492]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	4a7a      	ldr	r2, [pc, #488]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006fa0:	f023 0304 	bic.w	r3, r3, #4
 8006fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d015      	beq.n	8006fda <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fae:	f7fc fb55 	bl	800365c <HAL_GetTick>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fb6:	f7fc fb51 	bl	800365c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e122      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fcc:	4b6e      	ldr	r3, [pc, #440]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0ee      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x5b6>
 8006fd8:	e014      	b.n	8007004 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fda:	f7fc fb3f 	bl	800365c <HAL_GetTick>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe2:	f7fc fb3b 	bl	800365c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e10c      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ff8:	4b63      	ldr	r3, [pc, #396]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ee      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8101 	beq.w	8007210 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800700e:	4b5e      	ldr	r3, [pc, #376]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007016:	2b18      	cmp	r3, #24
 8007018:	f000 80bc 	beq.w	8007194 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b02      	cmp	r3, #2
 8007022:	f040 8095 	bne.w	8007150 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007026:	4b58      	ldr	r3, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a57      	ldr	r2, [pc, #348]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 800702c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007032:	f7fc fb13 	bl	800365c <HAL_GetTick>
 8007036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007038:	e008      	b.n	800704c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800703a:	f7fc fb0f 	bl	800365c <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e0e2      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800704c:	4b4e      	ldr	r3, [pc, #312]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1f0      	bne.n	800703a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007058:	4b4b      	ldr	r3, [pc, #300]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 800705a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800705c:	4b4b      	ldr	r3, [pc, #300]	; (800718c <HAL_RCC_OscConfig+0x78c>)
 800705e:	4013      	ands	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007068:	0112      	lsls	r2, r2, #4
 800706a:	430a      	orrs	r2, r1
 800706c:	4946      	ldr	r1, [pc, #280]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 800706e:	4313      	orrs	r3, r2
 8007070:	628b      	str	r3, [r1, #40]	; 0x28
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	3b01      	subs	r3, #1
 8007078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	3b01      	subs	r3, #1
 8007082:	025b      	lsls	r3, r3, #9
 8007084:	b29b      	uxth	r3, r3
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	3b01      	subs	r3, #1
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	3b01      	subs	r3, #1
 800709c:	061b      	lsls	r3, r3, #24
 800709e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070a2:	4939      	ldr	r1, [pc, #228]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80070a8:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4a36      	ldr	r2, [pc, #216]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070b4:	4b34      	ldr	r3, [pc, #208]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b8:	4b35      	ldr	r3, [pc, #212]	; (8007190 <HAL_RCC_OscConfig+0x790>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070c0:	00d2      	lsls	r2, r2, #3
 80070c2:	4931      	ldr	r1, [pc, #196]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070c8:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	f023 020c 	bic.w	r2, r3, #12
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	492c      	ldr	r1, [pc, #176]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070da:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	f023 0202 	bic.w	r2, r3, #2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e6:	4928      	ldr	r1, [pc, #160]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070ec:	4b26      	ldr	r3, [pc, #152]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4a25      	ldr	r2, [pc, #148]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f8:	4b23      	ldr	r3, [pc, #140]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	4a22      	ldr	r2, [pc, #136]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 80070fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007104:	4b20      	ldr	r3, [pc, #128]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a1f      	ldr	r2, [pc, #124]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 800710a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800710e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007110:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007116:	f043 0301 	orr.w	r3, r3, #1
 800711a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800711c:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a19      	ldr	r2, [pc, #100]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007128:	f7fc fa98 	bl	800365c <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007130:	f7fc fa94 	bl	800365c <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e067      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007142:	4b11      	ldr	r3, [pc, #68]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0f0      	beq.n	8007130 <HAL_RCC_OscConfig+0x730>
 800714e:	e05f      	b.n	8007210 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800715a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715c:	f7fc fa7e 	bl	800365c <HAL_GetTick>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007164:	f7fc fa7a 	bl	800365c <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e04d      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007176:	4b04      	ldr	r3, [pc, #16]	; (8007188 <HAL_RCC_OscConfig+0x788>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x764>
 8007182:	e045      	b.n	8007210 <HAL_RCC_OscConfig+0x810>
 8007184:	58024800 	.word	0x58024800
 8007188:	58024400 	.word	0x58024400
 800718c:	fffffc0c 	.word	0xfffffc0c
 8007190:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007194:	4b21      	ldr	r3, [pc, #132]	; (800721c <HAL_RCC_OscConfig+0x81c>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800719a:	4b20      	ldr	r3, [pc, #128]	; (800721c <HAL_RCC_OscConfig+0x81c>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d031      	beq.n	800720c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f003 0203 	and.w	r2, r3, #3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d12a      	bne.n	800720c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d122      	bne.n	800720c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d11a      	bne.n	800720c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	0a5b      	lsrs	r3, r3, #9
 80071da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d111      	bne.n	800720c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	0c1b      	lsrs	r3, r3, #16
 80071ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d108      	bne.n	800720c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	0e1b      	lsrs	r3, r3, #24
 80071fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007208:	429a      	cmp	r2, r3
 800720a:	d001      	beq.n	8007210 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3730      	adds	r7, #48	; 0x30
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	58024400 	.word	0x58024400

08007220 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e19c      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007234:	4b8a      	ldr	r3, [pc, #552]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d910      	bls.n	8007264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007242:	4b87      	ldr	r3, [pc, #540]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 020f 	bic.w	r2, r3, #15
 800724a:	4985      	ldr	r1, [pc, #532]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	4313      	orrs	r3, r2
 8007250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b83      	ldr	r3, [pc, #524]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e184      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d010      	beq.n	8007292 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	4b7b      	ldr	r3, [pc, #492]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727c:	429a      	cmp	r2, r3
 800727e:	d908      	bls.n	8007292 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007280:	4b78      	ldr	r3, [pc, #480]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	4975      	ldr	r1, [pc, #468]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 800728e:	4313      	orrs	r3, r2
 8007290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d010      	beq.n	80072c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	4b70      	ldr	r3, [pc, #448]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d908      	bls.n	80072c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072ae:	4b6d      	ldr	r3, [pc, #436]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	496a      	ldr	r1, [pc, #424]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	4b64      	ldr	r3, [pc, #400]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072d8:	429a      	cmp	r2, r3
 80072da:	d908      	bls.n	80072ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072dc:	4b61      	ldr	r3, [pc, #388]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	495e      	ldr	r1, [pc, #376]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	4b59      	ldr	r3, [pc, #356]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007306:	429a      	cmp	r2, r3
 8007308:	d908      	bls.n	800731c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800730a:	4b56      	ldr	r3, [pc, #344]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	4953      	ldr	r1, [pc, #332]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007318:	4313      	orrs	r3, r2
 800731a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	4b4d      	ldr	r3, [pc, #308]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	429a      	cmp	r2, r3
 8007336:	d908      	bls.n	800734a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007338:	4b4a      	ldr	r3, [pc, #296]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f023 020f 	bic.w	r2, r3, #15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	4947      	ldr	r1, [pc, #284]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007346:	4313      	orrs	r3, r2
 8007348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d055      	beq.n	8007402 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007356:	4b43      	ldr	r3, [pc, #268]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	4940      	ldr	r1, [pc, #256]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007364:	4313      	orrs	r3, r2
 8007366:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d107      	bne.n	8007380 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007370:	4b3c      	ldr	r3, [pc, #240]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d121      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0f6      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b03      	cmp	r3, #3
 8007386:	d107      	bne.n	8007398 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007388:	4b36      	ldr	r3, [pc, #216]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d115      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0ea      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d107      	bne.n	80073b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073a0:	4b30      	ldr	r3, [pc, #192]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e0de      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073b0:	4b2c      	ldr	r3, [pc, #176]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e0d6      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073c0:	4b28      	ldr	r3, [pc, #160]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	f023 0207 	bic.w	r2, r3, #7
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4925      	ldr	r1, [pc, #148]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d2:	f7fc f943 	bl	800365c <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d8:	e00a      	b.n	80073f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073da:	f7fc f93f 	bl	800365c <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e0be      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073f0:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	429a      	cmp	r2, r3
 8007400:	d1eb      	bne.n	80073da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d010      	beq.n	8007430 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	4b14      	ldr	r3, [pc, #80]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	429a      	cmp	r2, r3
 800741c:	d208      	bcs.n	8007430 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800741e:	4b11      	ldr	r3, [pc, #68]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f023 020f 	bic.w	r2, r3, #15
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	490e      	ldr	r1, [pc, #56]	; (8007464 <HAL_RCC_ClockConfig+0x244>)
 800742c:	4313      	orrs	r3, r2
 800742e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d214      	bcs.n	8007468 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b08      	ldr	r3, [pc, #32]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 020f 	bic.w	r2, r3, #15
 8007446:	4906      	ldr	r1, [pc, #24]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800744e:	4b04      	ldr	r3, [pc, #16]	; (8007460 <HAL_RCC_ClockConfig+0x240>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d005      	beq.n	8007468 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e086      	b.n	800756e <HAL_RCC_ClockConfig+0x34e>
 8007460:	52002000 	.word	0x52002000
 8007464:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	4b3f      	ldr	r3, [pc, #252]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007480:	429a      	cmp	r2, r3
 8007482:	d208      	bcs.n	8007496 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007484:	4b3c      	ldr	r3, [pc, #240]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	4939      	ldr	r1, [pc, #228]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 8007492:	4313      	orrs	r3, r2
 8007494:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d010      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695a      	ldr	r2, [r3, #20]
 80074a6:	4b34      	ldr	r3, [pc, #208]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d208      	bcs.n	80074c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074b2:	4b31      	ldr	r3, [pc, #196]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	492e      	ldr	r1, [pc, #184]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d010      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	4b28      	ldr	r3, [pc, #160]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074dc:	429a      	cmp	r2, r3
 80074de:	d208      	bcs.n	80074f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80074e0:	4b25      	ldr	r3, [pc, #148]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	4922      	ldr	r1, [pc, #136]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69da      	ldr	r2, [r3, #28]
 8007502:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800750a:	429a      	cmp	r2, r3
 800750c:	d208      	bcs.n	8007520 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800750e:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	4917      	ldr	r1, [pc, #92]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 800751c:	4313      	orrs	r3, r2
 800751e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007520:	f000 f834 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007524:	4602      	mov	r2, r0
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	4912      	ldr	r1, [pc, #72]	; (800757c <HAL_RCC_ClockConfig+0x35c>)
 8007532:	5ccb      	ldrb	r3, [r1, r3]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800753e:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <HAL_RCC_ClockConfig+0x358>)
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	4a0d      	ldr	r2, [pc, #52]	; (800757c <HAL_RCC_ClockConfig+0x35c>)
 8007548:	5cd3      	ldrb	r3, [r2, r3]
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
 8007554:	4a0a      	ldr	r2, [pc, #40]	; (8007580 <HAL_RCC_ClockConfig+0x360>)
 8007556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007558:	4a0a      	ldr	r2, [pc, #40]	; (8007584 <HAL_RCC_ClockConfig+0x364>)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <HAL_RCC_ClockConfig+0x368>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7fb fa72 	bl	8002a4c <HAL_InitTick>
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
 800757c:	0800db98 	.word	0x0800db98
 8007580:	20000004 	.word	0x20000004
 8007584:	20000000 	.word	0x20000000
 8007588:	20000008 	.word	0x20000008

0800758c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800758c:	b480      	push	{r7}
 800758e:	b089      	sub	sp, #36	; 0x24
 8007590:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007592:	4bb3      	ldr	r3, [pc, #716]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800759a:	2b18      	cmp	r3, #24
 800759c:	f200 8155 	bhi.w	800784a <HAL_RCC_GetSysClockFreq+0x2be>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	0800760d 	.word	0x0800760d
 80075ac:	0800784b 	.word	0x0800784b
 80075b0:	0800784b 	.word	0x0800784b
 80075b4:	0800784b 	.word	0x0800784b
 80075b8:	0800784b 	.word	0x0800784b
 80075bc:	0800784b 	.word	0x0800784b
 80075c0:	0800784b 	.word	0x0800784b
 80075c4:	0800784b 	.word	0x0800784b
 80075c8:	08007633 	.word	0x08007633
 80075cc:	0800784b 	.word	0x0800784b
 80075d0:	0800784b 	.word	0x0800784b
 80075d4:	0800784b 	.word	0x0800784b
 80075d8:	0800784b 	.word	0x0800784b
 80075dc:	0800784b 	.word	0x0800784b
 80075e0:	0800784b 	.word	0x0800784b
 80075e4:	0800784b 	.word	0x0800784b
 80075e8:	08007639 	.word	0x08007639
 80075ec:	0800784b 	.word	0x0800784b
 80075f0:	0800784b 	.word	0x0800784b
 80075f4:	0800784b 	.word	0x0800784b
 80075f8:	0800784b 	.word	0x0800784b
 80075fc:	0800784b 	.word	0x0800784b
 8007600:	0800784b 	.word	0x0800784b
 8007604:	0800784b 	.word	0x0800784b
 8007608:	0800763f 	.word	0x0800763f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800760c:	4b94      	ldr	r3, [pc, #592]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007618:	4b91      	ldr	r3, [pc, #580]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	08db      	lsrs	r3, r3, #3
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	4a90      	ldr	r2, [pc, #576]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
 8007628:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800762a:	e111      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800762c:	4b8d      	ldr	r3, [pc, #564]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800762e:	61bb      	str	r3, [r7, #24]
    break;
 8007630:	e10e      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007632:	4b8d      	ldr	r3, [pc, #564]	; (8007868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007634:	61bb      	str	r3, [r7, #24]
    break;
 8007636:	e10b      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007638:	4b8c      	ldr	r3, [pc, #560]	; (800786c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800763a:	61bb      	str	r3, [r7, #24]
    break;
 800763c:	e108      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800763e:	4b88      	ldr	r3, [pc, #544]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007648:	4b85      	ldr	r3, [pc, #532]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764c:	091b      	lsrs	r3, r3, #4
 800764e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007652:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007654:	4b82      	ldr	r3, [pc, #520]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800765e:	4b80      	ldr	r3, [pc, #512]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	08db      	lsrs	r3, r3, #3
 8007664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80e1 	beq.w	8007844 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b02      	cmp	r3, #2
 8007686:	f000 8083 	beq.w	8007790 <HAL_RCC_GetSysClockFreq+0x204>
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b02      	cmp	r3, #2
 800768e:	f200 80a1 	bhi.w	80077d4 <HAL_RCC_GetSysClockFreq+0x248>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <HAL_RCC_GetSysClockFreq+0x114>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d056      	beq.n	800774c <HAL_RCC_GetSysClockFreq+0x1c0>
 800769e:	e099      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a0:	4b6f      	ldr	r3, [pc, #444]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d02d      	beq.n	8007708 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076ac:	4b6c      	ldr	r3, [pc, #432]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	08db      	lsrs	r3, r3, #3
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	4a6b      	ldr	r2, [pc, #428]	; (8007864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
 80076bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b62      	ldr	r3, [pc, #392]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007706:	e087      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007874 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b51      	ldr	r3, [pc, #324]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a02 	vldr	s12, [r7, #8]
 800772e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	e065      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007878 <HAL_RCC_GetSysClockFreq+0x2ec>
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b40      	ldr	r3, [pc, #256]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007772:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778e:	e043      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800787c <HAL_RCC_GetSysClockFreq+0x2f0>
 800779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a2:	4b2f      	ldr	r3, [pc, #188]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d2:	e021      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007878 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b1e      	ldr	r3, [pc, #120]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007816:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	0a5b      	lsrs	r3, r3, #9
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	3301      	adds	r3, #1
 8007824:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007830:	edd7 6a07 	vldr	s13, [r7, #28]
 8007834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783c:	ee17 3a90 	vmov	r3, s15
 8007840:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007842:	e005      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]
    break;
 8007848:	e002      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800784c:	61bb      	str	r3, [r7, #24]
    break;
 800784e:	bf00      	nop
  }

  return sysclockfreq;
 8007850:	69bb      	ldr	r3, [r7, #24]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3724      	adds	r7, #36	; 0x24
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
 8007864:	03d09000 	.word	0x03d09000
 8007868:	003d0900 	.word	0x003d0900
 800786c:	017d7840 	.word	0x017d7840
 8007870:	46000000 	.word	0x46000000
 8007874:	4c742400 	.word	0x4c742400
 8007878:	4a742400 	.word	0x4a742400
 800787c:	4bbebc20 	.word	0x4bbebc20

08007880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007886:	f7ff fe81 	bl	800758c <HAL_RCC_GetSysClockFreq>
 800788a:	4602      	mov	r2, r0
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	0a1b      	lsrs	r3, r3, #8
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	490f      	ldr	r1, [pc, #60]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007898:	5ccb      	ldrb	r3, [r1, r3]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	fa22 f303 	lsr.w	r3, r2, r3
 80078a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80078ae:	5cd3      	ldrb	r3, [r2, r3]
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ba:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80078bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078be:	4a07      	ldr	r2, [pc, #28]	; (80078dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078c4:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80078c6:	681b      	ldr	r3, [r3, #0]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	58024400 	.word	0x58024400
 80078d4:	0800db98 	.word	0x0800db98
 80078d8:	20000004 	.word	0x20000004
 80078dc:	20000000 	.word	0x20000000

080078e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80078e4:	f7ff ffcc 	bl	8007880 <HAL_RCC_GetHCLKFreq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4b06      	ldr	r3, [pc, #24]	; (8007904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	4904      	ldr	r1, [pc, #16]	; (8007908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078f6:	5ccb      	ldrb	r3, [r1, r3]
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	58024400 	.word	0x58024400
 8007908:	0800db98 	.word	0x0800db98

0800790c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007910:	f7ff ffb6 	bl	8007880 <HAL_RCC_GetHCLKFreq>
 8007914:	4602      	mov	r2, r0
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	0a1b      	lsrs	r3, r3, #8
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	4904      	ldr	r1, [pc, #16]	; (8007934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007922:	5ccb      	ldrb	r3, [r1, r3]
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}
 8007930:	58024400 	.word	0x58024400
 8007934:	0800db98 	.word	0x0800db98

08007938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	223f      	movs	r2, #63	; 0x3f
 8007946:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007948:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0207 	and.w	r2, r3, #7
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007954:	4b17      	ldr	r3, [pc, #92]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007960:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 020f 	and.w	r2, r3, #15
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007990:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <HAL_RCC_GetClockConfig+0x7c>)
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <HAL_RCC_GetClockConfig+0x80>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 020f 	and.w	r2, r3, #15
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	601a      	str	r2, [r3, #0]
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	58024400 	.word	0x58024400
 80079b8:	52002000 	.word	0x52002000

080079bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079c8:	2300      	movs	r3, #0
 80079ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d03f      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079e0:	d02a      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079e6:	d824      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079ec:	d018      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f2:	d81e      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079fc:	d007      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80079fe:	e018      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a00:	4bab      	ldr	r3, [pc, #684]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4aaa      	ldr	r2, [pc, #680]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a0c:	e015      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2102      	movs	r1, #2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 f9cf 	bl	8008db8 <RCCEx_PLL2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a1e:	e00c      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	2102      	movs	r1, #2
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fa78 	bl	8008f1c <RCCEx_PLL3_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a30:	e003      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
      break;
 8007a36:	e000      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d109      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a40:	4b9b      	ldr	r3, [pc, #620]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4c:	4998      	ldr	r1, [pc, #608]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	650b      	str	r3, [r1, #80]	; 0x50
 8007a52:	e001      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d03d      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d826      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a89 	.word	0x08007a89
 8007a78:	08007a97 	.word	0x08007a97
 8007a7c:	08007aa9 	.word	0x08007aa9
 8007a80:	08007ac1 	.word	0x08007ac1
 8007a84:	08007ac1 	.word	0x08007ac1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a88:	4b89      	ldr	r3, [pc, #548]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	4a88      	ldr	r2, [pc, #544]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a94:	e015      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 f98b 	bl	8008db8 <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aa6:	e00c      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3324      	adds	r3, #36	; 0x24
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 fa34 	bl	8008f1c <RCCEx_PLL3_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
      break;
 8007abe:	e000      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ac8:	4b79      	ldr	r3, [pc, #484]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007acc:	f023 0207 	bic.w	r2, r3, #7
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad4:	4976      	ldr	r1, [pc, #472]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	650b      	str	r3, [r1, #80]	; 0x50
 8007ada:	e001      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d042      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af4:	d02b      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afa:	d825      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007afc:	2bc0      	cmp	r3, #192	; 0xc0
 8007afe:	d028      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b00:	2bc0      	cmp	r3, #192	; 0xc0
 8007b02:	d821      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b04:	2b80      	cmp	r3, #128	; 0x80
 8007b06:	d016      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d81d      	bhi.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	d007      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007b14:	e018      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b16:	4b66      	ldr	r3, [pc, #408]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	4a65      	ldr	r2, [pc, #404]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b22:	e017      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3304      	adds	r3, #4
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 f944 	bl	8008db8 <RCCEx_PLL2_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b34:	e00e      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3324      	adds	r3, #36	; 0x24
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 f9ed 	bl	8008f1c <RCCEx_PLL3_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b46:	e005      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b5a:	4b55      	ldr	r3, [pc, #340]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	4952      	ldr	r1, [pc, #328]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	650b      	str	r3, [r1, #80]	; 0x50
 8007b6c:	e001      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d049      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b88:	d030      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007b8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b8e:	d82a      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b94:	d02c      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007b96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b9a:	d824      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba0:	d018      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba6:	d81e      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb0:	d007      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bb2:	e018      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb4:	4b3e      	ldr	r3, [pc, #248]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a3d      	ldr	r2, [pc, #244]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bc0:	e017      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f8f5 	bl	8008db8 <RCCEx_PLL2_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007bd2:	e00e      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 f99e 	bl	8008f1c <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007be4:	e005      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	e002      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007bec:	bf00      	nop
 8007bee:	e000      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bf8:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c06:	492a      	ldr	r1, [pc, #168]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	658b      	str	r3, [r1, #88]	; 0x58
 8007c0c:	e001      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d04c      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c28:	d030      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007c2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c2e:	d82a      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c34:	d02c      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007c36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c3a:	d824      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c40:	d018      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c46:	d81e      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c50:	d007      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c52:	e018      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c54:	4b16      	ldr	r3, [pc, #88]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c60:	e017      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3304      	adds	r3, #4
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 f8a5 	bl	8008db8 <RCCEx_PLL2_Config>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c72:	e00e      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3324      	adds	r3, #36	; 0x24
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f94e 	bl	8008f1c <RCCEx_PLL3_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c84:	e005      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8a:	e002      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007c8c:	bf00      	nop
 8007c8e:	e000      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10d      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ca6:	4902      	ldr	r1, [pc, #8]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	658b      	str	r3, [r1, #88]	; 0x58
 8007cac:	e004      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007cae:	bf00      	nop
 8007cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d032      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc8:	2b30      	cmp	r3, #48	; 0x30
 8007cca:	d01c      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d817      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d00c      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d813      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d016      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d10f      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce0:	4baf      	ldr	r3, [pc, #700]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4aae      	ldr	r2, [pc, #696]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007cec:	e00e      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2102      	movs	r1, #2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 f85f 	bl	8008db8 <RCCEx_PLL2_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007cfe:	e005      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
      break;
 8007d04:	e002      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d12:	4ba3      	ldr	r3, [pc, #652]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1e:	49a0      	ldr	r1, [pc, #640]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d24:	e001      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d047      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d3e:	d030      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d44:	d82a      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d4a:	d02c      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d50:	d824      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d56:	d018      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5c:	d81e      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	d007      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007d68:	e018      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6a:	4b8d      	ldr	r3, [pc, #564]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	4a8c      	ldr	r2, [pc, #560]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d76:	e017      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 f81a 	bl	8008db8 <RCCEx_PLL2_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d88:	e00e      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3324      	adds	r3, #36	; 0x24
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f8c3 	bl	8008f1c <RCCEx_PLL3_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d9a:	e005      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007da0:	e002      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007dae:	4b7c      	ldr	r3, [pc, #496]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dba:	4979      	ldr	r1, [pc, #484]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	650b      	str	r3, [r1, #80]	; 0x50
 8007dc0:	e001      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d049      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dda:	d02e      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de0:	d828      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007de6:	d02a      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dec:	d822      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007df2:	d026      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007df8:	d81c      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dfe:	d010      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e04:	d816      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01d      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0e:	d111      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	2101      	movs	r1, #1
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 ffce 	bl	8008db8 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e20:	e012      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3324      	adds	r3, #36	; 0x24
 8007e26:	2101      	movs	r1, #1
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 f877 	bl	8008f1c <RCCEx_PLL3_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e32:	e009      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
      break;
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e004      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e4e:	4b54      	ldr	r3, [pc, #336]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5a:	4951      	ldr	r1, [pc, #324]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	650b      	str	r3, [r1, #80]	; 0x50
 8007e60:	e001      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04b      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e7c:	d02e      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e82:	d828      	bhi.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e88:	d02a      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8e:	d822      	bhi.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e94:	d026      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e9a:	d81c      	bhi.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea0:	d010      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea6:	d816      	bhi.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01d      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb0:	d111      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 ff7d 	bl	8008db8 <RCCEx_PLL2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ec2:	e012      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3324      	adds	r3, #36	; 0x24
 8007ec8:	2101      	movs	r1, #1
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 f826 	bl	8008f1c <RCCEx_PLL3_Config>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ed4:	e009      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eda:	e006      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007edc:	bf00      	nop
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ef0:	4b2b      	ldr	r3, [pc, #172]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007efe:	4928      	ldr	r1, [pc, #160]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	658b      	str	r3, [r1, #88]	; 0x58
 8007f04:	e001      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02f      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1e:	d00e      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f24:	d814      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d015      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f2e:	d10f      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f30:	4b1b      	ldr	r3, [pc, #108]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f3c:	e00c      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2101      	movs	r1, #1
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 ff37 	bl	8008db8 <RCCEx_PLL2_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f4e:	e003      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
      break;
 8007f54:	e000      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6a:	490d      	ldr	r1, [pc, #52]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	650b      	str	r3, [r1, #80]	; 0x50
 8007f70:	e001      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d033      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d81c      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fcb 	.word	0x08007fcb
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007fb3 	.word	0x08007fb3
 8007f9c:	08007fcb 	.word	0x08007fcb
 8007fa0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa4:	4bb8      	ldr	r3, [pc, #736]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4ab7      	ldr	r2, [pc, #732]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fb0:	e00c      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	2102      	movs	r1, #2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fefd 	bl	8008db8 <RCCEx_PLL2_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fc2:	e003      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc8:	e000      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fd2:	4bad      	ldr	r3, [pc, #692]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd6:	f023 0203 	bic.w	r2, r3, #3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fde:	49aa      	ldr	r1, [pc, #680]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fe4:	e001      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8086 	beq.w	8008104 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ff8:	4ba4      	ldr	r3, [pc, #656]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4aa3      	ldr	r2, [pc, #652]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008002:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008004:	f7fb fb2a 	bl	800365c <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800800a:	e009      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800800c:	f7fb fb26 	bl	800365c <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b64      	cmp	r3, #100	; 0x64
 8008018:	d902      	bls.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	75fb      	strb	r3, [r7, #23]
        break;
 800801e:	e005      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008020:	4b9a      	ldr	r3, [pc, #616]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0ef      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d166      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008032:	4b95      	ldr	r3, [pc, #596]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800803c:	4053      	eors	r3, r2
 800803e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008042:	2b00      	cmp	r3, #0
 8008044:	d013      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008046:	4b90      	ldr	r3, [pc, #576]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800804e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008050:	4b8d      	ldr	r3, [pc, #564]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	4a8c      	ldr	r2, [pc, #560]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800805a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800805c:	4b8a      	ldr	r3, [pc, #552]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008060:	4a89      	ldr	r2, [pc, #548]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008066:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008068:	4a87      	ldr	r2, [pc, #540]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008078:	d115      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807a:	f7fb faef 	bl	800365c <HAL_GetTick>
 800807e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008080:	e00b      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008082:	f7fb faeb 	bl	800365c <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008090:	4293      	cmp	r3, r2
 8008092:	d902      	bls.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	75fb      	strb	r3, [r7, #23]
            break;
 8008098:	e005      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809a:	4b7b      	ldr	r3, [pc, #492]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0ed      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d126      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ba:	d10d      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80080bc:	4b72      	ldr	r3, [pc, #456]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ca:	0919      	lsrs	r1, r3, #4
 80080cc:	4b70      	ldr	r3, [pc, #448]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80080ce:	400b      	ands	r3, r1
 80080d0:	496d      	ldr	r1, [pc, #436]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	610b      	str	r3, [r1, #16]
 80080d6:	e005      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80080d8:	4b6b      	ldr	r3, [pc, #428]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	4a6a      	ldr	r2, [pc, #424]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080e2:	6113      	str	r3, [r2, #16]
 80080e4:	4b68      	ldr	r3, [pc, #416]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f2:	4965      	ldr	r1, [pc, #404]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	670b      	str	r3, [r1, #112]	; 0x70
 80080f8:	e004      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	75bb      	strb	r3, [r7, #22]
 80080fe:	e001      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d07e      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008114:	2b28      	cmp	r3, #40	; 0x28
 8008116:	d867      	bhi.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008118:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	080081ef 	.word	0x080081ef
 8008124:	080081e9 	.word	0x080081e9
 8008128:	080081e9 	.word	0x080081e9
 800812c:	080081e9 	.word	0x080081e9
 8008130:	080081e9 	.word	0x080081e9
 8008134:	080081e9 	.word	0x080081e9
 8008138:	080081e9 	.word	0x080081e9
 800813c:	080081e9 	.word	0x080081e9
 8008140:	080081c5 	.word	0x080081c5
 8008144:	080081e9 	.word	0x080081e9
 8008148:	080081e9 	.word	0x080081e9
 800814c:	080081e9 	.word	0x080081e9
 8008150:	080081e9 	.word	0x080081e9
 8008154:	080081e9 	.word	0x080081e9
 8008158:	080081e9 	.word	0x080081e9
 800815c:	080081e9 	.word	0x080081e9
 8008160:	080081d7 	.word	0x080081d7
 8008164:	080081e9 	.word	0x080081e9
 8008168:	080081e9 	.word	0x080081e9
 800816c:	080081e9 	.word	0x080081e9
 8008170:	080081e9 	.word	0x080081e9
 8008174:	080081e9 	.word	0x080081e9
 8008178:	080081e9 	.word	0x080081e9
 800817c:	080081e9 	.word	0x080081e9
 8008180:	080081ef 	.word	0x080081ef
 8008184:	080081e9 	.word	0x080081e9
 8008188:	080081e9 	.word	0x080081e9
 800818c:	080081e9 	.word	0x080081e9
 8008190:	080081e9 	.word	0x080081e9
 8008194:	080081e9 	.word	0x080081e9
 8008198:	080081e9 	.word	0x080081e9
 800819c:	080081e9 	.word	0x080081e9
 80081a0:	080081ef 	.word	0x080081ef
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081e9 	.word	0x080081e9
 80081ac:	080081e9 	.word	0x080081e9
 80081b0:	080081e9 	.word	0x080081e9
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	080081e9 	.word	0x080081e9
 80081bc:	080081e9 	.word	0x080081e9
 80081c0:	080081ef 	.word	0x080081ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3304      	adds	r3, #4
 80081c8:	2101      	movs	r1, #1
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fdf4 	bl	8008db8 <RCCEx_PLL2_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081d4:	e00c      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3324      	adds	r3, #36	; 0x24
 80081da:	2101      	movs	r1, #1
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fe9d 	bl	8008f1c <RCCEx_PLL3_Config>
 80081e2:	4603      	mov	r3, r0
 80081e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081e6:	e003      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
      break;
 80081ec:	e000      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80081ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008202:	4921      	ldr	r1, [pc, #132]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008204:	4313      	orrs	r3, r2
 8008206:	654b      	str	r3, [r1, #84]	; 0x54
 8008208:	e001      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d03e      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821e:	2b05      	cmp	r3, #5
 8008220:	d820      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	0800826b 	.word	0x0800826b
 800822c:	08008241 	.word	0x08008241
 8008230:	08008253 	.word	0x08008253
 8008234:	0800826b 	.word	0x0800826b
 8008238:	0800826b 	.word	0x0800826b
 800823c:	0800826b 	.word	0x0800826b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	2101      	movs	r1, #1
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fdb6 	bl	8008db8 <RCCEx_PLL2_Config>
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008250:	e00c      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3324      	adds	r3, #36	; 0x24
 8008256:	2101      	movs	r1, #1
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fe5f 	bl	8008f1c <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008262:	e003      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	75fb      	strb	r3, [r7, #23]
      break;
 8008268:	e000      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800826a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d110      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	f023 0207 	bic.w	r2, r3, #7
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827e:	4902      	ldr	r1, [pc, #8]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008280:	4313      	orrs	r3, r2
 8008282:	654b      	str	r3, [r1, #84]	; 0x54
 8008284:	e008      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008286:	bf00      	nop
 8008288:	58024400 	.word	0x58024400
 800828c:	58024800 	.word	0x58024800
 8008290:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d039      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d820      	bhi.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082f7 	.word	0x080082f7
 80082b8:	080082cd 	.word	0x080082cd
 80082bc:	080082df 	.word	0x080082df
 80082c0:	080082f7 	.word	0x080082f7
 80082c4:	080082f7 	.word	0x080082f7
 80082c8:	080082f7 	.word	0x080082f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	2101      	movs	r1, #1
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fd70 	bl	8008db8 <RCCEx_PLL2_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082dc:	e00c      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3324      	adds	r3, #36	; 0x24
 80082e2:	2101      	movs	r1, #1
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fe19 	bl	8008f1c <RCCEx_PLL3_Config>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082ee:	e003      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]
      break;
 80082f4:	e000      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80082f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10a      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082fe:	4bb7      	ldr	r3, [pc, #732]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	f023 0207 	bic.w	r2, r3, #7
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830c:	49b3      	ldr	r1, [pc, #716]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800830e:	4313      	orrs	r3, r2
 8008310:	658b      	str	r3, [r1, #88]	; 0x58
 8008312:	e001      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d04b      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800832e:	d02e      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008334:	d828      	bhi.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833a:	d02a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008340:	d822      	bhi.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008342:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008346:	d026      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800834c:	d81c      	bhi.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008352:	d010      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008358:	d816      	bhi.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01d      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800835e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008362:	d111      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fd24 	bl	8008db8 <RCCEx_PLL2_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008374:	e012      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3324      	adds	r3, #36	; 0x24
 800837a:	2102      	movs	r1, #2
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fdcd 	bl	8008f1c <RCCEx_PLL3_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008386:	e009      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
      break;
 800838c:	e006      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800838e:	bf00      	nop
 8008390:	e004      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008392:	bf00      	nop
 8008394:	e002      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008396:	bf00      	nop
 8008398:	e000      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800839a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083a2:	4b8e      	ldr	r3, [pc, #568]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b0:	498a      	ldr	r1, [pc, #552]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	654b      	str	r3, [r1, #84]	; 0x54
 80083b6:	e001      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d04b      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083d2:	d02e      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80083d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083d8:	d828      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d02a      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80083e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e4:	d822      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083ea:	d026      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80083ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083f0:	d81c      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f6:	d010      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80083f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fc:	d816      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01d      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008406:	d111      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fcd2 	bl	8008db8 <RCCEx_PLL2_Config>
 8008414:	4603      	mov	r3, r0
 8008416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008418:	e012      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3324      	adds	r3, #36	; 0x24
 800841e:	2102      	movs	r1, #2
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fd7b 	bl	8008f1c <RCCEx_PLL3_Config>
 8008426:	4603      	mov	r3, r0
 8008428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800842a:	e009      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
      break;
 8008430:	e006      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008432:	bf00      	nop
 8008434:	e004      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800843e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008446:	4b65      	ldr	r3, [pc, #404]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008454:	4961      	ldr	r1, [pc, #388]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008456:	4313      	orrs	r3, r2
 8008458:	658b      	str	r3, [r1, #88]	; 0x58
 800845a:	e001      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008468:	2b00      	cmp	r3, #0
 800846a:	d04b      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008472:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008476:	d02e      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008478:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800847c:	d828      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800847e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008482:	d02a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008488:	d822      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800848a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800848e:	d026      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008490:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008494:	d81c      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800849a:	d010      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800849c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084a0:	d816      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01d      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084aa:	d111      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3304      	adds	r3, #4
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fc80 	bl	8008db8 <RCCEx_PLL2_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084bc:	e012      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3324      	adds	r3, #36	; 0x24
 80084c2:	2102      	movs	r1, #2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fd29 	bl	8008f1c <RCCEx_PLL3_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084ce:	e009      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
      break;
 80084d4:	e006      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084d6:	bf00      	nop
 80084d8:	e004      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084da:	bf00      	nop
 80084dc:	e002      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80084e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084ea:	4b3c      	ldr	r3, [pc, #240]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084f8:	4938      	ldr	r1, [pc, #224]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	658b      	str	r3, [r1, #88]	; 0x58
 80084fe:	e001      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01a      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851a:	d10a      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3324      	adds	r3, #36	; 0x24
 8008520:	2102      	movs	r1, #2
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fcfa 	bl	8008f1c <RCCEx_PLL3_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008532:	4b2a      	ldr	r3, [pc, #168]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008540:	4926      	ldr	r1, [pc, #152]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008542:	4313      	orrs	r3, r2
 8008544:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0310 	and.w	r3, r3, #16
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855c:	d10a      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3324      	adds	r3, #36	; 0x24
 8008562:	2102      	movs	r1, #2
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fcd9 	bl	8008f1c <RCCEx_PLL3_Config>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008574:	4b19      	ldr	r3, [pc, #100]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008582:	4916      	ldr	r1, [pc, #88]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008584:	4313      	orrs	r3, r2
 8008586:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d036      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800859a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859e:	d01f      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80085a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a4:	d817      	bhi.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80085aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ae:	d009      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80085b0:	e011      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3304      	adds	r3, #4
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fbfd 	bl	8008db8 <RCCEx_PLL2_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085c2:	e00e      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3324      	adds	r3, #36	; 0x24
 80085c8:	2102      	movs	r1, #2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fca6 	bl	8008f1c <RCCEx_PLL3_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085d4:	e005      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]
      break;
 80085da:	e002      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80085dc:	58024400 	.word	0x58024400
      break;
 80085e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085e8:	4b93      	ldr	r3, [pc, #588]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085f6:	4990      	ldr	r1, [pc, #576]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	658b      	str	r3, [r1, #88]	; 0x58
 80085fc:	e001      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d033      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008618:	d01c      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800861a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800861e:	d816      	bhi.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008624:	d003      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800862a:	d007      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800862c:	e00f      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800862e:	4b82      	ldr	r3, [pc, #520]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	4a81      	ldr	r2, [pc, #516]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800863a:	e00c      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3324      	adds	r3, #36	; 0x24
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fc6a 	bl	8008f1c <RCCEx_PLL3_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800864c:	e003      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]
      break;
 8008652:	e000      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10a      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800865c:	4b76      	ldr	r3, [pc, #472]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800865e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866a:	4973      	ldr	r1, [pc, #460]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800866c:	4313      	orrs	r3, r2
 800866e:	654b      	str	r3, [r1, #84]	; 0x54
 8008670:	e001      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d029      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800868a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868e:	d007      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008690:	e00f      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008692:	4b69      	ldr	r3, [pc, #420]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	4a68      	ldr	r2, [pc, #416]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800869c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800869e:	e00b      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3304      	adds	r3, #4
 80086a4:	2102      	movs	r1, #2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fb86 	bl	8008db8 <RCCEx_PLL2_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086b0:	e002      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
      break;
 80086b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086be:	4b5e      	ldr	r3, [pc, #376]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ca:	495b      	ldr	r1, [pc, #364]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086d0:	e001      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3324      	adds	r3, #36	; 0x24
 80086e6:	2102      	movs	r1, #2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fc17 	bl	8008f1c <RCCEx_PLL3_Config>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d030      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800870c:	d017      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800870e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008712:	d811      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008718:	d013      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800871a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800871e:	d80b      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008728:	d106      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800872a:	4b43      	ldr	r3, [pc, #268]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	4a42      	ldr	r2, [pc, #264]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008736:	e007      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
      break;
 800873c:	e004      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800873e:	bf00      	nop
 8008740:	e002      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008742:	bf00      	nop
 8008744:	e000      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800874e:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875a:	4937      	ldr	r1, [pc, #220]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800875c:	4313      	orrs	r3, r2
 800875e:	654b      	str	r3, [r1, #84]	; 0x54
 8008760:	e001      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008772:	4b31      	ldr	r3, [pc, #196]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	492e      	ldr	r1, [pc, #184]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d009      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008790:	4b29      	ldr	r3, [pc, #164]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800879e:	4926      	ldr	r1, [pc, #152]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087bc:	491e      	ldr	r1, [pc, #120]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00d      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	4a19      	ldr	r2, [pc, #100]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087d8:	6113      	str	r3, [r2, #16]
 80087da:	4b17      	ldr	r3, [pc, #92]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087e4:	4914      	ldr	r1, [pc, #80]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da08      	bge.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087f2:	4b11      	ldr	r3, [pc, #68]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fe:	490e      	ldr	r1, [pc, #56]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008800:	4313      	orrs	r3, r2
 8008802:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008810:	4b09      	ldr	r3, [pc, #36]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008814:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	4906      	ldr	r1, [pc, #24]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008820:	4313      	orrs	r3, r2
 8008822:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008824:	7dbb      	ldrb	r3, [r7, #22]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	58024400 	.word	0x58024400

0800883c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008840:	f7ff f81e 	bl	8007880 <HAL_RCC_GetHCLKFreq>
 8008844:	4602      	mov	r2, r0
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	091b      	lsrs	r3, r3, #4
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008852:	5ccb      	ldrb	r3, [r1, r3]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800885c:	4618      	mov	r0, r3
 800885e:	bd80      	pop	{r7, pc}
 8008860:	58024400 	.word	0x58024400
 8008864:	0800db98 	.word	0x0800db98

08008868 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	; 0x24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008870:	4ba1      	ldr	r3, [pc, #644]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800887a:	4b9f      	ldr	r3, [pc, #636]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	0b1b      	lsrs	r3, r3, #12
 8008880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008884:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008886:	4b9c      	ldr	r3, [pc, #624]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	091b      	lsrs	r3, r3, #4
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008892:	4b99      	ldr	r3, [pc, #612]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	08db      	lsrs	r3, r3, #3
 8008898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	fb02 f303 	mul.w	r3, r2, r3
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8111 	beq.w	8008ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	f000 8083 	beq.w	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	f200 80a1 	bhi.w	8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d056      	beq.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80088d2:	e099      	b.n	8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088d4:	4b88      	ldr	r3, [pc, #544]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d02d      	beq.n	800893c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088e0:	4b85      	ldr	r3, [pc, #532]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	08db      	lsrs	r3, r3, #3
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	4a84      	ldr	r2, [pc, #528]	; (8008afc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80088ec:	fa22 f303 	lsr.w	r3, r2, r3
 80088f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	ee07 3a90 	vmov	s15, r3
 80088f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890a:	4b7b      	ldr	r3, [pc, #492]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891a:	ed97 6a03 	vldr	s12, [r7, #12]
 800891e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008936:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800893a:	e087      	b.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b6a      	ldr	r3, [pc, #424]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800897e:	e065      	b.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800898e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008992:	4b59      	ldr	r3, [pc, #356]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c2:	e043      	b.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80089d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d6:	4b48      	ldr	r3, [pc, #288]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a06:	e021      	b.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1a:	4b37      	ldr	r3, [pc, #220]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008a4c:	4b2a      	ldr	r3, [pc, #168]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	0a5b      	lsrs	r3, r3, #9
 8008a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a72:	ee17 2a90 	vmov	r2, s15
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008a7a:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a84:	ee07 3a90 	vmov	s15, r3
 8008a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa0:	ee17 2a90 	vmov	r2, s15
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008aa8:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	0e1b      	lsrs	r3, r3, #24
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ace:	ee17 2a90 	vmov	r2, s15
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ad6:	e008      	b.n	8008aea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	609a      	str	r2, [r3, #8]
}
 8008aea:	bf00      	nop
 8008aec:	3724      	adds	r7, #36	; 0x24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	58024400 	.word	0x58024400
 8008afc:	03d09000 	.word	0x03d09000
 8008b00:	46000000 	.word	0x46000000
 8008b04:	4c742400 	.word	0x4c742400
 8008b08:	4a742400 	.word	0x4a742400
 8008b0c:	4bbebc20 	.word	0x4bbebc20

08008b10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b089      	sub	sp, #36	; 0x24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b18:	4ba1      	ldr	r3, [pc, #644]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008b22:	4b9f      	ldr	r3, [pc, #636]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b26:	0d1b      	lsrs	r3, r3, #20
 8008b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b2e:	4b9c      	ldr	r3, [pc, #624]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008b3a:	4b99      	ldr	r3, [pc, #612]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	08db      	lsrs	r3, r3, #3
 8008b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	fb02 f303 	mul.w	r3, r2, r3
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8111 	beq.w	8008d80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	f000 8083 	beq.w	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	f200 80a1 	bhi.w	8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d056      	beq.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b7a:	e099      	b.n	8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b7c:	4b88      	ldr	r3, [pc, #544]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d02d      	beq.n	8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b88:	4b85      	ldr	r3, [pc, #532]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	08db      	lsrs	r3, r3, #3
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	4a84      	ldr	r2, [pc, #528]	; (8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb2:	4b7b      	ldr	r3, [pc, #492]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008be2:	e087      	b.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b6a      	ldr	r3, [pc, #424]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c26:	e065      	b.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	4b59      	ldr	r3, [pc, #356]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c6a:	e043      	b.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b48      	ldr	r3, [pc, #288]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cae:	e021      	b.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b37      	ldr	r3, [pc, #220]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008cf4:	4b2a      	ldr	r3, [pc, #168]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	0a5b      	lsrs	r3, r3, #9
 8008cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1a:	ee17 2a90 	vmov	r2, s15
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008d22:	4b1f      	ldr	r3, [pc, #124]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	0c1b      	lsrs	r3, r3, #16
 8008d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d48:	ee17 2a90 	vmov	r2, s15
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008d50:	4b13      	ldr	r3, [pc, #76]	; (8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d54:	0e1b      	lsrs	r3, r3, #24
 8008d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d76:	ee17 2a90 	vmov	r2, s15
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d7e:	e008      	b.n	8008d92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	609a      	str	r2, [r3, #8]
}
 8008d92:	bf00      	nop
 8008d94:	3724      	adds	r7, #36	; 0x24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	58024400 	.word	0x58024400
 8008da4:	03d09000 	.word	0x03d09000
 8008da8:	46000000 	.word	0x46000000
 8008dac:	4c742400 	.word	0x4c742400
 8008db0:	4a742400 	.word	0x4a742400
 8008db4:	4bbebc20 	.word	0x4bbebc20

08008db8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dc6:	4b53      	ldr	r3, [pc, #332]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d101      	bne.n	8008dd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e099      	b.n	8008f0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008dd6:	4b4f      	ldr	r3, [pc, #316]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a4e      	ldr	r2, [pc, #312]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008de2:	f7fa fc3b 	bl	800365c <HAL_GetTick>
 8008de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008de8:	e008      	b.n	8008dfc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dea:	f7fa fc37 	bl	800365c <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e086      	b.n	8008f0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dfc:	4b45      	ldr	r3, [pc, #276]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1f0      	bne.n	8008dea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e08:	4b42      	ldr	r3, [pc, #264]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	031b      	lsls	r3, r3, #12
 8008e16:	493f      	ldr	r1, [pc, #252]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	025b      	lsls	r3, r3, #9
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	431a      	orrs	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	061b      	lsls	r3, r3, #24
 8008e48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e4c:	4931      	ldr	r1, [pc, #196]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e52:	4b30      	ldr	r3, [pc, #192]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	492d      	ldr	r1, [pc, #180]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e64:	4b2b      	ldr	r3, [pc, #172]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	f023 0220 	bic.w	r2, r3, #32
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	4928      	ldr	r1, [pc, #160]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e76:	4b27      	ldr	r3, [pc, #156]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e7c:	f023 0310 	bic.w	r3, r3, #16
 8008e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e86:	4b24      	ldr	r3, [pc, #144]	; (8008f18 <RCCEx_PLL2_Config+0x160>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	69d2      	ldr	r2, [r2, #28]
 8008e8e:	00d2      	lsls	r2, r2, #3
 8008e90:	4920      	ldr	r1, [pc, #128]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e96:	4b1f      	ldr	r3, [pc, #124]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	4a1e      	ldr	r2, [pc, #120]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008e9c:	f043 0310 	orr.w	r3, r3, #16
 8008ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d106      	bne.n	8008eb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	4a19      	ldr	r2, [pc, #100]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008eb4:	e00f      	b.n	8008ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d106      	bne.n	8008eca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ebc:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	4a14      	ldr	r2, [pc, #80]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ec8:	e005      	b.n	8008ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	4a11      	ldr	r2, [pc, #68]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a0e      	ldr	r2, [pc, #56]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ee2:	f7fa fbbb 	bl	800365c <HAL_GetTick>
 8008ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ee8:	e008      	b.n	8008efc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008eea:	f7fa fbb7 	bl	800365c <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d901      	bls.n	8008efc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e006      	b.n	8008f0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <RCCEx_PLL2_Config+0x15c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0f0      	beq.n	8008eea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	58024400 	.word	0x58024400
 8008f18:	ffff0007 	.word	0xffff0007

08008f1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f2a:	4b53      	ldr	r3, [pc, #332]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d101      	bne.n	8008f3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e099      	b.n	800906e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f3a:	4b4f      	ldr	r3, [pc, #316]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a4e      	ldr	r2, [pc, #312]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f46:	f7fa fb89 	bl	800365c <HAL_GetTick>
 8008f4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f4c:	e008      	b.n	8008f60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f4e:	f7fa fb85 	bl	800365c <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e086      	b.n	800906e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f60:	4b45      	ldr	r3, [pc, #276]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f0      	bne.n	8008f4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f6c:	4b42      	ldr	r3, [pc, #264]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	051b      	lsls	r3, r3, #20
 8008f7a:	493f      	ldr	r1, [pc, #252]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	628b      	str	r3, [r1, #40]	; 0x28
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	025b      	lsls	r3, r3, #9
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	431a      	orrs	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	061b      	lsls	r3, r3, #24
 8008fac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fb0:	4931      	ldr	r1, [pc, #196]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fb6:	4b30      	ldr	r3, [pc, #192]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	492d      	ldr	r1, [pc, #180]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008fc8:	4b2b      	ldr	r3, [pc, #172]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	4928      	ldr	r1, [pc, #160]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008fda:	4b27      	ldr	r3, [pc, #156]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	4a26      	ldr	r2, [pc, #152]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fe6:	4b24      	ldr	r3, [pc, #144]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fea:	4b24      	ldr	r3, [pc, #144]	; (800907c <RCCEx_PLL3_Config+0x160>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	69d2      	ldr	r2, [r2, #28]
 8008ff2:	00d2      	lsls	r2, r2, #3
 8008ff4:	4920      	ldr	r1, [pc, #128]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ffa:	4b1f      	ldr	r3, [pc, #124]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	4a1e      	ldr	r2, [pc, #120]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800900c:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	4a19      	ldr	r2, [pc, #100]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009012:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009018:	e00f      	b.n	800903a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d106      	bne.n	800902e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009020:	4b15      	ldr	r3, [pc, #84]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	4a14      	ldr	r2, [pc, #80]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009026:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800902a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800902c:	e005      	b.n	800903a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	4a11      	ldr	r2, [pc, #68]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009038:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800903a:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0e      	ldr	r2, [pc, #56]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009046:	f7fa fb09 	bl	800365c <HAL_GetTick>
 800904a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800904c:	e008      	b.n	8009060 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800904e:	f7fa fb05 	bl	800365c <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e006      	b.n	800906e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <RCCEx_PLL3_Config+0x15c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0f0      	beq.n	800904e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	58024400 	.word	0x58024400
 800907c:	ffff0007 	.word	0xffff0007

08009080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e049      	b.n	8009126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f841 	bl	800912e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f000 f9f8 	bl	80094b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
	...

08009144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	d001      	beq.n	800915c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e04f      	b.n	80091fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a23      	ldr	r2, [pc, #140]	; (8009208 <HAL_TIM_Base_Start_IT+0xc4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d01d      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0x76>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009186:	d018      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0x76>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <HAL_TIM_Base_Start_IT+0xc8>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0x76>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1e      	ldr	r2, [pc, #120]	; (8009210 <HAL_TIM_Base_Start_IT+0xcc>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d00e      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0x76>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1c      	ldr	r2, [pc, #112]	; (8009214 <HAL_TIM_Base_Start_IT+0xd0>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d009      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0x76>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1b      	ldr	r2, [pc, #108]	; (8009218 <HAL_TIM_Base_Start_IT+0xd4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d004      	beq.n	80091ba <HAL_TIM_Base_Start_IT+0x76>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a19      	ldr	r2, [pc, #100]	; (800921c <HAL_TIM_Base_Start_IT+0xd8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d115      	bne.n	80091e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	4b17      	ldr	r3, [pc, #92]	; (8009220 <HAL_TIM_Base_Start_IT+0xdc>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	d015      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0xb4>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d2:	d011      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0201 	orr.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e4:	e008      	b.n	80091f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0201 	orr.w	r2, r2, #1
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	e000      	b.n	80091fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	40010000 	.word	0x40010000
 800920c:	40000400 	.word	0x40000400
 8009210:	40000800 	.word	0x40000800
 8009214:	40000c00 	.word	0x40000c00
 8009218:	40010400 	.word	0x40010400
 800921c:	40001800 	.word	0x40001800
 8009220:	00010007 	.word	0x00010007

08009224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b02      	cmp	r3, #2
 8009238:	d122      	bne.n	8009280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b02      	cmp	r3, #2
 8009246:	d11b      	bne.n	8009280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0202 	mvn.w	r2, #2
 8009250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f905 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 800926c:	e005      	b.n	800927a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f8f7 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f908 	bl	800948a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b04      	cmp	r3, #4
 800928c:	d122      	bne.n	80092d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b04      	cmp	r3, #4
 800929a:	d11b      	bne.n	80092d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f06f 0204 	mvn.w	r2, #4
 80092a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2202      	movs	r2, #2
 80092aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f8db 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 80092c0:	e005      	b.n	80092ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f8cd 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f8de 	bl	800948a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d122      	bne.n	8009328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d11b      	bne.n	8009328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0208 	mvn.w	r2, #8
 80092f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2204      	movs	r2, #4
 80092fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f8b1 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 8009314:	e005      	b.n	8009322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f8a3 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8b4 	bl	800948a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	2b10      	cmp	r3, #16
 8009334:	d122      	bne.n	800937c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b10      	cmp	r3, #16
 8009342:	d11b      	bne.n	800937c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0210 	mvn.w	r2, #16
 800934c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2208      	movs	r2, #8
 8009352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f887 	bl	8009476 <HAL_TIM_IC_CaptureCallback>
 8009368:	e005      	b.n	8009376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f879 	bl	8009462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f88a 	bl	800948a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b01      	cmp	r3, #1
 8009388:	d10e      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b01      	cmp	r3, #1
 8009396:	d107      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f06f 0201 	mvn.w	r2, #1
 80093a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7f8 ff62 	bl	800226c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b2:	2b80      	cmp	r3, #128	; 0x80
 80093b4:	d10e      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c0:	2b80      	cmp	r3, #128	; 0x80
 80093c2:	d107      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f914 	bl	80095fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093e2:	d10e      	bne.n	8009402 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ee:	2b80      	cmp	r3, #128	; 0x80
 80093f0:	d107      	bne.n	8009402 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f907 	bl	8009610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	d10e      	bne.n	800942e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d107      	bne.n	800942e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f838 	bl	800949e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f003 0320 	and.w	r3, r3, #32
 8009438:	2b20      	cmp	r3, #32
 800943a:	d10e      	bne.n	800945a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b20      	cmp	r3, #32
 8009448:	d107      	bne.n	800945a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f06f 0220 	mvn.w	r2, #32
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f8c7 	bl	80095e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800945a:	bf00      	nop
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a40      	ldr	r2, [pc, #256]	; (80095c8 <TIM_Base_SetConfig+0x114>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d013      	beq.n	80094f4 <TIM_Base_SetConfig+0x40>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d2:	d00f      	beq.n	80094f4 <TIM_Base_SetConfig+0x40>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a3d      	ldr	r2, [pc, #244]	; (80095cc <TIM_Base_SetConfig+0x118>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00b      	beq.n	80094f4 <TIM_Base_SetConfig+0x40>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a3c      	ldr	r2, [pc, #240]	; (80095d0 <TIM_Base_SetConfig+0x11c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d007      	beq.n	80094f4 <TIM_Base_SetConfig+0x40>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a3b      	ldr	r2, [pc, #236]	; (80095d4 <TIM_Base_SetConfig+0x120>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d003      	beq.n	80094f4 <TIM_Base_SetConfig+0x40>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a3a      	ldr	r2, [pc, #232]	; (80095d8 <TIM_Base_SetConfig+0x124>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d108      	bne.n	8009506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a2f      	ldr	r2, [pc, #188]	; (80095c8 <TIM_Base_SetConfig+0x114>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d01f      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009514:	d01b      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a2c      	ldr	r2, [pc, #176]	; (80095cc <TIM_Base_SetConfig+0x118>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d017      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a2b      	ldr	r2, [pc, #172]	; (80095d0 <TIM_Base_SetConfig+0x11c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d013      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a2a      	ldr	r2, [pc, #168]	; (80095d4 <TIM_Base_SetConfig+0x120>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d00f      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a29      	ldr	r2, [pc, #164]	; (80095d8 <TIM_Base_SetConfig+0x124>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d00b      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a28      	ldr	r2, [pc, #160]	; (80095dc <TIM_Base_SetConfig+0x128>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d007      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a27      	ldr	r2, [pc, #156]	; (80095e0 <TIM_Base_SetConfig+0x12c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d003      	beq.n	800954e <TIM_Base_SetConfig+0x9a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a26      	ldr	r2, [pc, #152]	; (80095e4 <TIM_Base_SetConfig+0x130>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d108      	bne.n	8009560 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a10      	ldr	r2, [pc, #64]	; (80095c8 <TIM_Base_SetConfig+0x114>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d00f      	beq.n	80095ac <TIM_Base_SetConfig+0xf8>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a12      	ldr	r2, [pc, #72]	; (80095d8 <TIM_Base_SetConfig+0x124>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <TIM_Base_SetConfig+0xf8>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a11      	ldr	r2, [pc, #68]	; (80095dc <TIM_Base_SetConfig+0x128>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d007      	beq.n	80095ac <TIM_Base_SetConfig+0xf8>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a10      	ldr	r2, [pc, #64]	; (80095e0 <TIM_Base_SetConfig+0x12c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_Base_SetConfig+0xf8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a0f      	ldr	r2, [pc, #60]	; (80095e4 <TIM_Base_SetConfig+0x130>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d103      	bne.n	80095b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	691a      	ldr	r2, [r3, #16]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	615a      	str	r2, [r3, #20]
}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	40010400 	.word	0x40010400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40014400 	.word	0x40014400
 80095e4:	40014800 	.word	0x40014800

080095e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e042      	b.n	80096bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800963c:	2b00      	cmp	r3, #0
 800963e:	d106      	bne.n	800964e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7f8 fe45 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2224      	movs	r2, #36	; 0x24
 8009652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0201 	bic.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc5a 	bl	8009f20 <UART_SetConfig>
 800966c:	4603      	mov	r3, r0
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e022      	b.n	80096bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 f9ae 	bl	800a9e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0201 	orr.w	r2, r2, #1
 80096b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 fa35 	bl	800ab24 <UART_CheckIdleState>
 80096ba:	4603      	mov	r3, r0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d168      	bne.n	80097ae <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_UART_Transmit_DMA+0x24>
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e061      	b.n	80097b0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_UART_Transmit_DMA+0x36>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e05a      	b.n	80097b0 <HAL_UART_Transmit_DMA+0xec>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	88fa      	ldrh	r2, [r7, #6]
 800970c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	88fa      	ldrh	r2, [r7, #6]
 8009714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2221      	movs	r2, #33	; 0x21
 8009724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800972c:	2b00      	cmp	r3, #0
 800972e:	d02c      	beq.n	800978a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009734:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <HAL_UART_Transmit_DMA+0xf4>)
 8009736:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800973c:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_UART_Transmit_DMA+0xf8>)
 800973e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009744:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <HAL_UART_Transmit_DMA+0xfc>)
 8009746:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800974c:	2200      	movs	r2, #0
 800974e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009758:	4619      	mov	r1, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3328      	adds	r3, #40	; 0x28
 8009760:	461a      	mov	r2, r3
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	f7fa fbce 	bl	8003f04 <HAL_DMA_Start_IT>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00d      	beq.n	800978a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2210      	movs	r2, #16
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e012      	b.n	80097b0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2240      	movs	r2, #64	; 0x40
 8009790:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097a8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e000      	b.n	80097b0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80097ae:	2302      	movs	r3, #2
  }
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	0800ae39 	.word	0x0800ae39
 80097bc:	0800ae89 	.word	0x0800ae89
 80097c0:	0800af73 	.word	0x0800af73

080097c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d131      	bne.n	8009840 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <HAL_UART_Receive_DMA+0x24>
 80097e2:	88fb      	ldrh	r3, [r7, #6]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e02a      	b.n	8009842 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <HAL_UART_Receive_DMA+0x36>
 80097f6:	2302      	movs	r3, #2
 80097f8:	e023      	b.n	8009842 <HAL_UART_Receive_DMA+0x7e>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0f      	ldr	r2, [pc, #60]	; (800984c <HAL_UART_Receive_DMA+0x88>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00e      	beq.n	8009830 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d007      	beq.n	8009830 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800982e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	461a      	mov	r2, r3
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f001 fa40 	bl	800acbc <UART_Start_Receive_DMA>
 800983c:	4603      	mov	r3, r0
 800983e:	e000      	b.n	8009842 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	58000c00 	.word	0x58000c00

08009850 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800985e:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009866:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009872:	2b80      	cmp	r3, #128	; 0x80
 8009874:	d127      	bne.n	80098c6 <HAL_UART_DMAStop+0x76>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b21      	cmp	r3, #33	; 0x21
 800987a:	d124      	bne.n	80098c6 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800988a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009890:	2b00      	cmp	r3, #0
 8009892:	d015      	beq.n	80098c0 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009898:	4618      	mov	r0, r3
 800989a:	f7fa fd9d 	bl	80043d8 <HAL_DMA_Abort>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00d      	beq.n	80098c0 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fc fa21 	bl	8005cf0 <HAL_DMA_GetError>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d105      	bne.n	80098c0 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2210      	movs	r2, #16
 80098b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e032      	b.n	8009926 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f001 fa69 	bl	800ad98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d0:	2b40      	cmp	r3, #64	; 0x40
 80098d2:	d127      	bne.n	8009924 <HAL_UART_DMAStop+0xd4>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b22      	cmp	r3, #34	; 0x22
 80098d8:	d124      	bne.n	8009924 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098e8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d015      	beq.n	800991e <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fa fd6e 	bl	80043d8 <HAL_DMA_Abort>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00d      	beq.n	800991e <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009906:	4618      	mov	r0, r3
 8009908:	f7fc f9f2 	bl	8005cf0 <HAL_DMA_GetError>
 800990c:	4603      	mov	r3, r0
 800990e:	2b20      	cmp	r3, #32
 8009910:	d105      	bne.n	800991e <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2210      	movs	r2, #16
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e003      	b.n	8009926 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 fa58 	bl	800add4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	f640 030f 	movw	r3, #2063	; 0x80f
 8009956:	4013      	ands	r3, r2
 8009958:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d118      	bne.n	8009992 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d013      	beq.n	8009992 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8282 	beq.w	8009e8c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
      }
      return;
 8009990:	e27c      	b.n	8009e8c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 80ef 	beq.w	8009b78 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4b73      	ldr	r3, [pc, #460]	; (8009b6c <HAL_UART_IRQHandler+0x23c>)
 800999e:	4013      	ands	r3, r2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d105      	bne.n	80099b0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	4b72      	ldr	r3, [pc, #456]	; (8009b70 <HAL_UART_IRQHandler+0x240>)
 80099a8:	4013      	ands	r3, r2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80e4 	beq.w	8009b78 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <HAL_UART_IRQHandler+0xac>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2201      	movs	r2, #1
 80099ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d2:	f043 0201 	orr.w	r2, r3, #1
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d010      	beq.n	8009a08 <HAL_UART_IRQHandler+0xd8>
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2202      	movs	r2, #2
 80099f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fe:	f043 0204 	orr.w	r2, r3, #4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d010      	beq.n	8009a34 <HAL_UART_IRQHandler+0x104>
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00b      	beq.n	8009a34 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2204      	movs	r2, #4
 8009a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a2a:	f043 0202 	orr.w	r2, r3, #2
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d015      	beq.n	8009a6a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	4b48      	ldr	r3, [pc, #288]	; (8009b6c <HAL_UART_IRQHandler+0x23c>)
 8009a4c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2208      	movs	r2, #8
 8009a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a60:	f043 0208 	orr.w	r2, r3, #8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d011      	beq.n	8009a98 <HAL_UART_IRQHandler+0x168>
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00c      	beq.n	8009a98 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a8e:	f043 0220 	orr.w	r2, r3, #32
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 81f6 	beq.w	8009e90 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d104      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d007      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b40      	cmp	r3, #64	; 0x40
 8009ae6:	d004      	beq.n	8009af2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d031      	beq.n	8009b56 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 f96e 	bl	800add4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b02:	2b40      	cmp	r3, #64	; 0x40
 8009b04:	d123      	bne.n	8009b4e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b14:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d013      	beq.n	8009b46 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b22:	4a14      	ldr	r2, [pc, #80]	; (8009b74 <HAL_UART_IRQHandler+0x244>)
 8009b24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fa ff72 	bl	8004a14 <HAL_DMA_Abort_IT>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d017      	beq.n	8009b66 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b44:	e00f      	b.n	8009b66 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f9d4 	bl	8009ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4c:	e00b      	b.n	8009b66 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f9d0 	bl	8009ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b54:	e007      	b.n	8009b66 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f9cc 	bl	8009ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009b64:	e194      	b.n	8009e90 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b66:	bf00      	nop
    return;
 8009b68:	e192      	b.n	8009e90 <HAL_UART_IRQHandler+0x560>
 8009b6a:	bf00      	nop
 8009b6c:	10000001 	.word	0x10000001
 8009b70:	04000120 	.word	0x04000120
 8009b74:	0800aff3 	.word	0x0800aff3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	f040 810f 	bne.w	8009da0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 8109 	beq.w	8009da0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	f003 0310 	and.w	r3, r3, #16
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8103 	beq.w	8009da0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2210      	movs	r2, #16
 8009ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bac:	2b40      	cmp	r3, #64	; 0x40
 8009bae:	f040 80bb 	bne.w	8009d28 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a96      	ldr	r2, [pc, #600]	; (8009e14 <HAL_UART_IRQHandler+0x4e4>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d059      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a94      	ldr	r2, [pc, #592]	; (8009e18 <HAL_UART_IRQHandler+0x4e8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d053      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a92      	ldr	r2, [pc, #584]	; (8009e1c <HAL_UART_IRQHandler+0x4ec>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d04d      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a90      	ldr	r2, [pc, #576]	; (8009e20 <HAL_UART_IRQHandler+0x4f0>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d047      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a8e      	ldr	r2, [pc, #568]	; (8009e24 <HAL_UART_IRQHandler+0x4f4>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d041      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a8c      	ldr	r2, [pc, #560]	; (8009e28 <HAL_UART_IRQHandler+0x4f8>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d03b      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a8a      	ldr	r2, [pc, #552]	; (8009e2c <HAL_UART_IRQHandler+0x4fc>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d035      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a88      	ldr	r2, [pc, #544]	; (8009e30 <HAL_UART_IRQHandler+0x500>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d02f      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a86      	ldr	r2, [pc, #536]	; (8009e34 <HAL_UART_IRQHandler+0x504>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d029      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a84      	ldr	r2, [pc, #528]	; (8009e38 <HAL_UART_IRQHandler+0x508>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d023      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a82      	ldr	r2, [pc, #520]	; (8009e3c <HAL_UART_IRQHandler+0x50c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d01d      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a80      	ldr	r2, [pc, #512]	; (8009e40 <HAL_UART_IRQHandler+0x510>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d017      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a7e      	ldr	r2, [pc, #504]	; (8009e44 <HAL_UART_IRQHandler+0x514>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d011      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a7c      	ldr	r2, [pc, #496]	; (8009e48 <HAL_UART_IRQHandler+0x518>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00b      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a7a      	ldr	r2, [pc, #488]	; (8009e4c <HAL_UART_IRQHandler+0x51c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d005      	beq.n	8009c72 <HAL_UART_IRQHandler+0x342>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a78      	ldr	r2, [pc, #480]	; (8009e50 <HAL_UART_IRQHandler+0x520>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d105      	bne.n	8009c7e <HAL_UART_IRQHandler+0x34e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	e004      	b.n	8009c88 <HAL_UART_IRQHandler+0x358>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009c8a:	893b      	ldrh	r3, [r7, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 8101 	beq.w	8009e94 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c98:	893a      	ldrh	r2, [r7, #8]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	f080 80fa 	bcs.w	8009e94 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	893a      	ldrh	r2, [r7, #8]
 8009ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb2:	d02b      	beq.n	8009d0c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f022 0201 	bic.w	r2, r2, #1
 8009cd2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ce2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 0210 	bic.w	r2, r2, #16
 8009d00:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fa fb66 	bl	80043d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f8f1 	bl	8009f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d26:	e0b5      	b.n	8009e94 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 80a8 	beq.w	8009e98 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009d48:	897b      	ldrh	r3, [r7, #10]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80a4 	beq.w	8009e98 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d5e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6899      	ldr	r1, [r3, #8]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b3a      	ldr	r3, [pc, #232]	; (8009e54 <HAL_UART_IRQHandler+0x524>)
 8009d6c:	400b      	ands	r3, r1
 8009d6e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0210 	bic.w	r2, r2, #16
 8009d92:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d94:	897b      	ldrh	r3, [r7, #10]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8b5 	bl	8009f08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d9e:	e07b      	b.n	8009e98 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00d      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x496>
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d008      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009dbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 f947 	bl	800b052 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dc4:	e06b      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d012      	beq.n	8009df6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d104      	bne.n	8009de4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d008      	beq.n	8009df6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d057      	beq.n	8009e9c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	4798      	blx	r3
    }
    return;
 8009df4:	e052      	b.n	8009e9c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d02b      	beq.n	8009e58 <HAL_UART_IRQHandler+0x528>
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d026      	beq.n	8009e58 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 f907 	bl	800b01e <UART_EndTransmit_IT>
    return;
 8009e10:	e045      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
 8009e12:	bf00      	nop
 8009e14:	40020010 	.word	0x40020010
 8009e18:	40020028 	.word	0x40020028
 8009e1c:	40020040 	.word	0x40020040
 8009e20:	40020058 	.word	0x40020058
 8009e24:	40020070 	.word	0x40020070
 8009e28:	40020088 	.word	0x40020088
 8009e2c:	400200a0 	.word	0x400200a0
 8009e30:	400200b8 	.word	0x400200b8
 8009e34:	40020410 	.word	0x40020410
 8009e38:	40020428 	.word	0x40020428
 8009e3c:	40020440 	.word	0x40020440
 8009e40:	40020458 	.word	0x40020458
 8009e44:	40020470 	.word	0x40020470
 8009e48:	40020488 	.word	0x40020488
 8009e4c:	400204a0 	.word	0x400204a0
 8009e50:	400204b8 	.word	0x400204b8
 8009e54:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d008      	beq.n	8009e74 <HAL_UART_IRQHandler+0x544>
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 f904 	bl	800b07a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e72:	e014      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00f      	beq.n	8009e9e <HAL_UART_IRQHandler+0x56e>
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	da0c      	bge.n	8009e9e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f8ee 	bl	800b066 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e8a:	e008      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
      return;
 8009e8c:	bf00      	nop
 8009e8e:	e006      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
    return;
 8009e90:	bf00      	nop
 8009e92:	e004      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
      return;
 8009e94:	bf00      	nop
 8009e96:	e002      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
      return;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <HAL_UART_IRQHandler+0x56e>
    return;
 8009e9c:	bf00      	nop
  }
}
 8009e9e:	3720      	adds	r7, #32
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f20:	b5b0      	push	{r4, r5, r7, lr}
 8009f22:	b08e      	sub	sp, #56	; 0x38
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4bbf      	ldr	r3, [pc, #764]	; (800a24c <UART_SetConfig+0x32c>)
 8009f4e:	4013      	ands	r3, r2
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f56:	430b      	orrs	r3, r1
 8009f58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4ab5      	ldr	r2, [pc, #724]	; (800a250 <UART_SetConfig+0x330>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d004      	beq.n	8009f8a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f86:	4313      	orrs	r3, r2
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	4bb0      	ldr	r3, [pc, #704]	; (800a254 <UART_SetConfig+0x334>)
 8009f92:	4013      	ands	r3, r2
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6812      	ldr	r2, [r2, #0]
 8009f98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f9a:	430b      	orrs	r3, r1
 8009f9c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	f023 010f 	bic.w	r1, r3, #15
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4aa7      	ldr	r2, [pc, #668]	; (800a258 <UART_SetConfig+0x338>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d176      	bne.n	800a0ac <UART_SetConfig+0x18c>
 8009fbe:	4ba7      	ldr	r3, [pc, #668]	; (800a25c <UART_SetConfig+0x33c>)
 8009fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fc6:	2b28      	cmp	r3, #40	; 0x28
 8009fc8:	d86c      	bhi.n	800a0a4 <UART_SetConfig+0x184>
 8009fca:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0xb0>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	0800a075 	.word	0x0800a075
 8009fd4:	0800a0a5 	.word	0x0800a0a5
 8009fd8:	0800a0a5 	.word	0x0800a0a5
 8009fdc:	0800a0a5 	.word	0x0800a0a5
 8009fe0:	0800a0a5 	.word	0x0800a0a5
 8009fe4:	0800a0a5 	.word	0x0800a0a5
 8009fe8:	0800a0a5 	.word	0x0800a0a5
 8009fec:	0800a0a5 	.word	0x0800a0a5
 8009ff0:	0800a07d 	.word	0x0800a07d
 8009ff4:	0800a0a5 	.word	0x0800a0a5
 8009ff8:	0800a0a5 	.word	0x0800a0a5
 8009ffc:	0800a0a5 	.word	0x0800a0a5
 800a000:	0800a0a5 	.word	0x0800a0a5
 800a004:	0800a0a5 	.word	0x0800a0a5
 800a008:	0800a0a5 	.word	0x0800a0a5
 800a00c:	0800a0a5 	.word	0x0800a0a5
 800a010:	0800a085 	.word	0x0800a085
 800a014:	0800a0a5 	.word	0x0800a0a5
 800a018:	0800a0a5 	.word	0x0800a0a5
 800a01c:	0800a0a5 	.word	0x0800a0a5
 800a020:	0800a0a5 	.word	0x0800a0a5
 800a024:	0800a0a5 	.word	0x0800a0a5
 800a028:	0800a0a5 	.word	0x0800a0a5
 800a02c:	0800a0a5 	.word	0x0800a0a5
 800a030:	0800a08d 	.word	0x0800a08d
 800a034:	0800a0a5 	.word	0x0800a0a5
 800a038:	0800a0a5 	.word	0x0800a0a5
 800a03c:	0800a0a5 	.word	0x0800a0a5
 800a040:	0800a0a5 	.word	0x0800a0a5
 800a044:	0800a0a5 	.word	0x0800a0a5
 800a048:	0800a0a5 	.word	0x0800a0a5
 800a04c:	0800a0a5 	.word	0x0800a0a5
 800a050:	0800a095 	.word	0x0800a095
 800a054:	0800a0a5 	.word	0x0800a0a5
 800a058:	0800a0a5 	.word	0x0800a0a5
 800a05c:	0800a0a5 	.word	0x0800a0a5
 800a060:	0800a0a5 	.word	0x0800a0a5
 800a064:	0800a0a5 	.word	0x0800a0a5
 800a068:	0800a0a5 	.word	0x0800a0a5
 800a06c:	0800a0a5 	.word	0x0800a0a5
 800a070:	0800a09d 	.word	0x0800a09d
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07a:	e222      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a07c:	2304      	movs	r3, #4
 800a07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a082:	e21e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a084:	2308      	movs	r3, #8
 800a086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08a:	e21a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a092:	e216      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a094:	2320      	movs	r3, #32
 800a096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09a:	e212      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a2:	e20e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a0a4:	2380      	movs	r3, #128	; 0x80
 800a0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0aa:	e20a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a6b      	ldr	r2, [pc, #428]	; (800a260 <UART_SetConfig+0x340>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d130      	bne.n	800a118 <UART_SetConfig+0x1f8>
 800a0b6:	4b69      	ldr	r3, [pc, #420]	; (800a25c <UART_SetConfig+0x33c>)
 800a0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b05      	cmp	r3, #5
 800a0c0:	d826      	bhi.n	800a110 <UART_SetConfig+0x1f0>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <UART_SetConfig+0x1a8>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0e1 	.word	0x0800a0e1
 800a0cc:	0800a0e9 	.word	0x0800a0e9
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a0f9 	.word	0x0800a0f9
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e6:	e1ec      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ee:	e1e8      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f6:	e1e4      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fe:	e1e0      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a100:	2320      	movs	r3, #32
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a106:	e1dc      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10e:	e1d8      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a110:	2380      	movs	r3, #128	; 0x80
 800a112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a116:	e1d4      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a51      	ldr	r2, [pc, #324]	; (800a264 <UART_SetConfig+0x344>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d130      	bne.n	800a184 <UART_SetConfig+0x264>
 800a122:	4b4e      	ldr	r3, [pc, #312]	; (800a25c <UART_SetConfig+0x33c>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d826      	bhi.n	800a17c <UART_SetConfig+0x25c>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <UART_SetConfig+0x214>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a14d 	.word	0x0800a14d
 800a138:	0800a155 	.word	0x0800a155
 800a13c:	0800a15d 	.word	0x0800a15d
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a152:	e1b6      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a154:	2304      	movs	r3, #4
 800a156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15a:	e1b2      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a15c:	2308      	movs	r3, #8
 800a15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a162:	e1ae      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a164:	2310      	movs	r3, #16
 800a166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a16a:	e1aa      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a16c:	2320      	movs	r3, #32
 800a16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a172:	e1a6      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a17a:	e1a2      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a17c:	2380      	movs	r3, #128	; 0x80
 800a17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a182:	e19e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a37      	ldr	r2, [pc, #220]	; (800a268 <UART_SetConfig+0x348>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d130      	bne.n	800a1f0 <UART_SetConfig+0x2d0>
 800a18e:	4b33      	ldr	r3, [pc, #204]	; (800a25c <UART_SetConfig+0x33c>)
 800a190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b05      	cmp	r3, #5
 800a198:	d826      	bhi.n	800a1e8 <UART_SetConfig+0x2c8>
 800a19a:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x280>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1d9 	.word	0x0800a1d9
 800a1b4:	0800a1e1 	.word	0x0800a1e1
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1be:	e180      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c6:	e17c      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ce:	e178      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d6:	e174      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1de:	e170      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1e0:	2340      	movs	r3, #64	; 0x40
 800a1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e6:	e16c      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1e8:	2380      	movs	r3, #128	; 0x80
 800a1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ee:	e168      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a1d      	ldr	r2, [pc, #116]	; (800a26c <UART_SetConfig+0x34c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d142      	bne.n	800a280 <UART_SetConfig+0x360>
 800a1fa:	4b18      	ldr	r3, [pc, #96]	; (800a25c <UART_SetConfig+0x33c>)
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	2b05      	cmp	r3, #5
 800a204:	d838      	bhi.n	800a278 <UART_SetConfig+0x358>
 800a206:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <UART_SetConfig+0x2ec>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a225 	.word	0x0800a225
 800a210:	0800a22d 	.word	0x0800a22d
 800a214:	0800a235 	.word	0x0800a235
 800a218:	0800a23d 	.word	0x0800a23d
 800a21c:	0800a245 	.word	0x0800a245
 800a220:	0800a271 	.word	0x0800a271
 800a224:	2300      	movs	r3, #0
 800a226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22a:	e14a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a22c:	2304      	movs	r3, #4
 800a22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a232:	e146      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a234:	2308      	movs	r3, #8
 800a236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23a:	e142      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a23c:	2310      	movs	r3, #16
 800a23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a242:	e13e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a244:	2320      	movs	r3, #32
 800a246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24a:	e13a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a24c:	cfff69f3 	.word	0xcfff69f3
 800a250:	58000c00 	.word	0x58000c00
 800a254:	11fff4ff 	.word	0x11fff4ff
 800a258:	40011000 	.word	0x40011000
 800a25c:	58024400 	.word	0x58024400
 800a260:	40004400 	.word	0x40004400
 800a264:	40004800 	.word	0x40004800
 800a268:	40004c00 	.word	0x40004c00
 800a26c:	40005000 	.word	0x40005000
 800a270:	2340      	movs	r3, #64	; 0x40
 800a272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a276:	e124      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a278:	2380      	movs	r3, #128	; 0x80
 800a27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a27e:	e120      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4acc      	ldr	r2, [pc, #816]	; (800a5b8 <UART_SetConfig+0x698>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d176      	bne.n	800a378 <UART_SetConfig+0x458>
 800a28a:	4bcc      	ldr	r3, [pc, #816]	; (800a5bc <UART_SetConfig+0x69c>)
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a292:	2b28      	cmp	r3, #40	; 0x28
 800a294:	d86c      	bhi.n	800a370 <UART_SetConfig+0x450>
 800a296:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <UART_SetConfig+0x37c>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a341 	.word	0x0800a341
 800a2a0:	0800a371 	.word	0x0800a371
 800a2a4:	0800a371 	.word	0x0800a371
 800a2a8:	0800a371 	.word	0x0800a371
 800a2ac:	0800a371 	.word	0x0800a371
 800a2b0:	0800a371 	.word	0x0800a371
 800a2b4:	0800a371 	.word	0x0800a371
 800a2b8:	0800a371 	.word	0x0800a371
 800a2bc:	0800a349 	.word	0x0800a349
 800a2c0:	0800a371 	.word	0x0800a371
 800a2c4:	0800a371 	.word	0x0800a371
 800a2c8:	0800a371 	.word	0x0800a371
 800a2cc:	0800a371 	.word	0x0800a371
 800a2d0:	0800a371 	.word	0x0800a371
 800a2d4:	0800a371 	.word	0x0800a371
 800a2d8:	0800a371 	.word	0x0800a371
 800a2dc:	0800a351 	.word	0x0800a351
 800a2e0:	0800a371 	.word	0x0800a371
 800a2e4:	0800a371 	.word	0x0800a371
 800a2e8:	0800a371 	.word	0x0800a371
 800a2ec:	0800a371 	.word	0x0800a371
 800a2f0:	0800a371 	.word	0x0800a371
 800a2f4:	0800a371 	.word	0x0800a371
 800a2f8:	0800a371 	.word	0x0800a371
 800a2fc:	0800a359 	.word	0x0800a359
 800a300:	0800a371 	.word	0x0800a371
 800a304:	0800a371 	.word	0x0800a371
 800a308:	0800a371 	.word	0x0800a371
 800a30c:	0800a371 	.word	0x0800a371
 800a310:	0800a371 	.word	0x0800a371
 800a314:	0800a371 	.word	0x0800a371
 800a318:	0800a371 	.word	0x0800a371
 800a31c:	0800a361 	.word	0x0800a361
 800a320:	0800a371 	.word	0x0800a371
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a371 	.word	0x0800a371
 800a32c:	0800a371 	.word	0x0800a371
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a371 	.word	0x0800a371
 800a33c:	0800a369 	.word	0x0800a369
 800a340:	2301      	movs	r3, #1
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a346:	e0bc      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a348:	2304      	movs	r3, #4
 800a34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34e:	e0b8      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a350:	2308      	movs	r3, #8
 800a352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a356:	e0b4      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a358:	2310      	movs	r3, #16
 800a35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a35e:	e0b0      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a360:	2320      	movs	r3, #32
 800a362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a366:	e0ac      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a368:	2340      	movs	r3, #64	; 0x40
 800a36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36e:	e0a8      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a376:	e0a4      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a90      	ldr	r2, [pc, #576]	; (800a5c0 <UART_SetConfig+0x6a0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d130      	bne.n	800a3e4 <UART_SetConfig+0x4c4>
 800a382:	4b8e      	ldr	r3, [pc, #568]	; (800a5bc <UART_SetConfig+0x69c>)
 800a384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	d826      	bhi.n	800a3dc <UART_SetConfig+0x4bc>
 800a38e:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <UART_SetConfig+0x474>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a3ad 	.word	0x0800a3ad
 800a398:	0800a3b5 	.word	0x0800a3b5
 800a39c:	0800a3bd 	.word	0x0800a3bd
 800a3a0:	0800a3c5 	.word	0x0800a3c5
 800a3a4:	0800a3cd 	.word	0x0800a3cd
 800a3a8:	0800a3d5 	.word	0x0800a3d5
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b2:	e086      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ba:	e082      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3bc:	2308      	movs	r3, #8
 800a3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c2:	e07e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ca:	e07a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e076      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e072      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3dc:	2380      	movs	r3, #128	; 0x80
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e06e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a76      	ldr	r2, [pc, #472]	; (800a5c4 <UART_SetConfig+0x6a4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d130      	bne.n	800a450 <UART_SetConfig+0x530>
 800a3ee:	4b73      	ldr	r3, [pc, #460]	; (800a5bc <UART_SetConfig+0x69c>)
 800a3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b05      	cmp	r3, #5
 800a3f8:	d826      	bhi.n	800a448 <UART_SetConfig+0x528>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <UART_SetConfig+0x4e0>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a419 	.word	0x0800a419
 800a404:	0800a421 	.word	0x0800a421
 800a408:	0800a429 	.word	0x0800a429
 800a40c:	0800a431 	.word	0x0800a431
 800a410:	0800a439 	.word	0x0800a439
 800a414:	0800a441 	.word	0x0800a441
 800a418:	2300      	movs	r3, #0
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e050      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	e04c      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42e:	e048      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	e044      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a438:	2320      	movs	r3, #32
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e040      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e03c      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a448:	2380      	movs	r3, #128	; 0x80
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	e038      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a5c      	ldr	r2, [pc, #368]	; (800a5c8 <UART_SetConfig+0x6a8>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d130      	bne.n	800a4bc <UART_SetConfig+0x59c>
 800a45a:	4b58      	ldr	r3, [pc, #352]	; (800a5bc <UART_SetConfig+0x69c>)
 800a45c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b05      	cmp	r3, #5
 800a464:	d826      	bhi.n	800a4b4 <UART_SetConfig+0x594>
 800a466:	a201      	add	r2, pc, #4	; (adr r2, 800a46c <UART_SetConfig+0x54c>)
 800a468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46c:	0800a485 	.word	0x0800a485
 800a470:	0800a48d 	.word	0x0800a48d
 800a474:	0800a495 	.word	0x0800a495
 800a478:	0800a49d 	.word	0x0800a49d
 800a47c:	0800a4a5 	.word	0x0800a4a5
 800a480:	0800a4ad 	.word	0x0800a4ad
 800a484:	2302      	movs	r3, #2
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e01a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a48c:	2304      	movs	r3, #4
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e016      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a494:	2308      	movs	r3, #8
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e012      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a49c:	2310      	movs	r3, #16
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e00e      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e00a      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a4ac:	2340      	movs	r3, #64	; 0x40
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e006      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a4b4:	2380      	movs	r3, #128	; 0x80
 800a4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ba:	e002      	b.n	800a4c2 <UART_SetConfig+0x5a2>
 800a4bc:	2380      	movs	r3, #128	; 0x80
 800a4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a40      	ldr	r2, [pc, #256]	; (800a5c8 <UART_SetConfig+0x6a8>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	f040 80ef 	bne.w	800a6ac <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4d2:	2b20      	cmp	r3, #32
 800a4d4:	dc46      	bgt.n	800a564 <UART_SetConfig+0x644>
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	f2c0 8081 	blt.w	800a5de <UART_SetConfig+0x6be>
 800a4dc:	3b02      	subs	r3, #2
 800a4de:	2b1e      	cmp	r3, #30
 800a4e0:	d87d      	bhi.n	800a5de <UART_SetConfig+0x6be>
 800a4e2:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <UART_SetConfig+0x5c8>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a56b 	.word	0x0800a56b
 800a4ec:	0800a5df 	.word	0x0800a5df
 800a4f0:	0800a573 	.word	0x0800a573
 800a4f4:	0800a5df 	.word	0x0800a5df
 800a4f8:	0800a5df 	.word	0x0800a5df
 800a4fc:	0800a5df 	.word	0x0800a5df
 800a500:	0800a583 	.word	0x0800a583
 800a504:	0800a5df 	.word	0x0800a5df
 800a508:	0800a5df 	.word	0x0800a5df
 800a50c:	0800a5df 	.word	0x0800a5df
 800a510:	0800a5df 	.word	0x0800a5df
 800a514:	0800a5df 	.word	0x0800a5df
 800a518:	0800a5df 	.word	0x0800a5df
 800a51c:	0800a5df 	.word	0x0800a5df
 800a520:	0800a593 	.word	0x0800a593
 800a524:	0800a5df 	.word	0x0800a5df
 800a528:	0800a5df 	.word	0x0800a5df
 800a52c:	0800a5df 	.word	0x0800a5df
 800a530:	0800a5df 	.word	0x0800a5df
 800a534:	0800a5df 	.word	0x0800a5df
 800a538:	0800a5df 	.word	0x0800a5df
 800a53c:	0800a5df 	.word	0x0800a5df
 800a540:	0800a5df 	.word	0x0800a5df
 800a544:	0800a5df 	.word	0x0800a5df
 800a548:	0800a5df 	.word	0x0800a5df
 800a54c:	0800a5df 	.word	0x0800a5df
 800a550:	0800a5df 	.word	0x0800a5df
 800a554:	0800a5df 	.word	0x0800a5df
 800a558:	0800a5df 	.word	0x0800a5df
 800a55c:	0800a5df 	.word	0x0800a5df
 800a560:	0800a5d1 	.word	0x0800a5d1
 800a564:	2b40      	cmp	r3, #64	; 0x40
 800a566:	d036      	beq.n	800a5d6 <UART_SetConfig+0x6b6>
 800a568:	e039      	b.n	800a5de <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a56a:	f7fe f967 	bl	800883c <HAL_RCCEx_GetD3PCLK1Freq>
 800a56e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a570:	e03b      	b.n	800a5ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a572:	f107 0314 	add.w	r3, r7, #20
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe f976 	bl	8008868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a580:	e033      	b.n	800a5ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a582:	f107 0308 	add.w	r3, r7, #8
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fac2 	bl	8008b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a590:	e02b      	b.n	800a5ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a592:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <UART_SetConfig+0x69c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a59e:	4b07      	ldr	r3, [pc, #28]	; (800a5bc <UART_SetConfig+0x69c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	08db      	lsrs	r3, r3, #3
 800a5a4:	f003 0303 	and.w	r3, r3, #3
 800a5a8:	4a08      	ldr	r2, [pc, #32]	; (800a5cc <UART_SetConfig+0x6ac>)
 800a5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5b0:	e01b      	b.n	800a5ea <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a5b2:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <UART_SetConfig+0x6ac>)
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5b6:	e018      	b.n	800a5ea <UART_SetConfig+0x6ca>
 800a5b8:	40011400 	.word	0x40011400
 800a5bc:	58024400 	.word	0x58024400
 800a5c0:	40007800 	.word	0x40007800
 800a5c4:	40007c00 	.word	0x40007c00
 800a5c8:	58000c00 	.word	0x58000c00
 800a5cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5d0:	4bc4      	ldr	r3, [pc, #784]	; (800a8e4 <UART_SetConfig+0x9c4>)
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5d4:	e009      	b.n	800a5ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5dc:	e005      	b.n	800a5ea <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a5e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 81da 	beq.w	800a9a6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	4abc      	ldr	r2, [pc, #752]	; (800a8e8 <UART_SetConfig+0x9c8>)
 800a5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	fbb3 f3f2 	udiv	r3, r3, r2
 800a604:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	4613      	mov	r3, r2
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	4413      	add	r3, r2
 800a610:	6a3a      	ldr	r2, [r7, #32]
 800a612:	429a      	cmp	r2, r3
 800a614:	d305      	bcc.n	800a622 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a61c:	6a3a      	ldr	r2, [r7, #32]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d903      	bls.n	800a62a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a628:	e1bd      	b.n	800a9a6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62c:	4618      	mov	r0, r3
 800a62e:	f04f 0100 	mov.w	r1, #0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	4aac      	ldr	r2, [pc, #688]	; (800a8e8 <UART_SetConfig+0x9c8>)
 800a638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	f04f 0300 	mov.w	r3, #0
 800a642:	f7f5 fe4d 	bl	80002e0 <__aeabi_uldivmod>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4610      	mov	r0, r2
 800a64c:	4619      	mov	r1, r3
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	020b      	lsls	r3, r1, #8
 800a658:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a65c:	0202      	lsls	r2, r0, #8
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	6849      	ldr	r1, [r1, #4]
 800a662:	0849      	lsrs	r1, r1, #1
 800a664:	4608      	mov	r0, r1
 800a666:	f04f 0100 	mov.w	r1, #0
 800a66a:	1814      	adds	r4, r2, r0
 800a66c:	eb43 0501 	adc.w	r5, r3, r1
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	461a      	mov	r2, r3
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	4620      	mov	r0, r4
 800a67c:	4629      	mov	r1, r5
 800a67e:	f7f5 fe2f 	bl	80002e0 <__aeabi_uldivmod>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4613      	mov	r3, r2
 800a688:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a690:	d308      	bcc.n	800a6a4 <UART_SetConfig+0x784>
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a698:	d204      	bcs.n	800a6a4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a0:	60da      	str	r2, [r3, #12]
 800a6a2:	e180      	b.n	800a9a6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a6aa:	e17c      	b.n	800a9a6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b4:	f040 80bf 	bne.w	800a836 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a6b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	dc49      	bgt.n	800a754 <UART_SetConfig+0x834>
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	db7c      	blt.n	800a7be <UART_SetConfig+0x89e>
 800a6c4:	2b20      	cmp	r3, #32
 800a6c6:	d87a      	bhi.n	800a7be <UART_SetConfig+0x89e>
 800a6c8:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <UART_SetConfig+0x7b0>)
 800a6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ce:	bf00      	nop
 800a6d0:	0800a75b 	.word	0x0800a75b
 800a6d4:	0800a763 	.word	0x0800a763
 800a6d8:	0800a7bf 	.word	0x0800a7bf
 800a6dc:	0800a7bf 	.word	0x0800a7bf
 800a6e0:	0800a76b 	.word	0x0800a76b
 800a6e4:	0800a7bf 	.word	0x0800a7bf
 800a6e8:	0800a7bf 	.word	0x0800a7bf
 800a6ec:	0800a7bf 	.word	0x0800a7bf
 800a6f0:	0800a77b 	.word	0x0800a77b
 800a6f4:	0800a7bf 	.word	0x0800a7bf
 800a6f8:	0800a7bf 	.word	0x0800a7bf
 800a6fc:	0800a7bf 	.word	0x0800a7bf
 800a700:	0800a7bf 	.word	0x0800a7bf
 800a704:	0800a7bf 	.word	0x0800a7bf
 800a708:	0800a7bf 	.word	0x0800a7bf
 800a70c:	0800a7bf 	.word	0x0800a7bf
 800a710:	0800a78b 	.word	0x0800a78b
 800a714:	0800a7bf 	.word	0x0800a7bf
 800a718:	0800a7bf 	.word	0x0800a7bf
 800a71c:	0800a7bf 	.word	0x0800a7bf
 800a720:	0800a7bf 	.word	0x0800a7bf
 800a724:	0800a7bf 	.word	0x0800a7bf
 800a728:	0800a7bf 	.word	0x0800a7bf
 800a72c:	0800a7bf 	.word	0x0800a7bf
 800a730:	0800a7bf 	.word	0x0800a7bf
 800a734:	0800a7bf 	.word	0x0800a7bf
 800a738:	0800a7bf 	.word	0x0800a7bf
 800a73c:	0800a7bf 	.word	0x0800a7bf
 800a740:	0800a7bf 	.word	0x0800a7bf
 800a744:	0800a7bf 	.word	0x0800a7bf
 800a748:	0800a7bf 	.word	0x0800a7bf
 800a74c:	0800a7bf 	.word	0x0800a7bf
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	2b40      	cmp	r3, #64	; 0x40
 800a756:	d02e      	beq.n	800a7b6 <UART_SetConfig+0x896>
 800a758:	e031      	b.n	800a7be <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a75a:	f7fd f8c1 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 800a75e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a760:	e033      	b.n	800a7ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a762:	f7fd f8d3 	bl	800790c <HAL_RCC_GetPCLK2Freq>
 800a766:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a768:	e02f      	b.n	800a7ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76a:	f107 0314 	add.w	r3, r7, #20
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe f87a 	bl	8008868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a778:	e027      	b.n	800a7ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a77a:	f107 0308 	add.w	r3, r7, #8
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe f9c6 	bl	8008b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a788:	e01f      	b.n	800a7ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a78a:	4b58      	ldr	r3, [pc, #352]	; (800a8ec <UART_SetConfig+0x9cc>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a796:	4b55      	ldr	r3, [pc, #340]	; (800a8ec <UART_SetConfig+0x9cc>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	08db      	lsrs	r3, r3, #3
 800a79c:	f003 0303 	and.w	r3, r3, #3
 800a7a0:	4a53      	ldr	r2, [pc, #332]	; (800a8f0 <UART_SetConfig+0x9d0>)
 800a7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7a8:	e00f      	b.n	800a7ca <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a7aa:	4b51      	ldr	r3, [pc, #324]	; (800a8f0 <UART_SetConfig+0x9d0>)
 800a7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ae:	e00c      	b.n	800a7ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7b0:	4b4c      	ldr	r3, [pc, #304]	; (800a8e4 <UART_SetConfig+0x9c4>)
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7b4:	e009      	b.n	800a7ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7bc:	e005      	b.n	800a7ca <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 80ea 	beq.w	800a9a6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	4a44      	ldr	r2, [pc, #272]	; (800a8e8 <UART_SetConfig+0x9c8>)
 800a7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	2b0f      	cmp	r3, #15
 800a7fe:	d916      	bls.n	800a82e <UART_SetConfig+0x90e>
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a806:	d212      	bcs.n	800a82e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f023 030f 	bic.w	r3, r3, #15
 800a810:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	085b      	lsrs	r3, r3, #1
 800a816:	b29b      	uxth	r3, r3
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a820:	4313      	orrs	r3, r2
 800a822:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a82a:	60da      	str	r2, [r3, #12]
 800a82c:	e0bb      	b.n	800a9a6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a834:	e0b7      	b.n	800a9a6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	dc4a      	bgt.n	800a8d4 <UART_SetConfig+0x9b4>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f2c0 8086 	blt.w	800a950 <UART_SetConfig+0xa30>
 800a844:	2b20      	cmp	r3, #32
 800a846:	f200 8083 	bhi.w	800a950 <UART_SetConfig+0xa30>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <UART_SetConfig+0x930>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a8db 	.word	0x0800a8db
 800a854:	0800a8f5 	.word	0x0800a8f5
 800a858:	0800a951 	.word	0x0800a951
 800a85c:	0800a951 	.word	0x0800a951
 800a860:	0800a8fd 	.word	0x0800a8fd
 800a864:	0800a951 	.word	0x0800a951
 800a868:	0800a951 	.word	0x0800a951
 800a86c:	0800a951 	.word	0x0800a951
 800a870:	0800a90d 	.word	0x0800a90d
 800a874:	0800a951 	.word	0x0800a951
 800a878:	0800a951 	.word	0x0800a951
 800a87c:	0800a951 	.word	0x0800a951
 800a880:	0800a951 	.word	0x0800a951
 800a884:	0800a951 	.word	0x0800a951
 800a888:	0800a951 	.word	0x0800a951
 800a88c:	0800a951 	.word	0x0800a951
 800a890:	0800a91d 	.word	0x0800a91d
 800a894:	0800a951 	.word	0x0800a951
 800a898:	0800a951 	.word	0x0800a951
 800a89c:	0800a951 	.word	0x0800a951
 800a8a0:	0800a951 	.word	0x0800a951
 800a8a4:	0800a951 	.word	0x0800a951
 800a8a8:	0800a951 	.word	0x0800a951
 800a8ac:	0800a951 	.word	0x0800a951
 800a8b0:	0800a951 	.word	0x0800a951
 800a8b4:	0800a951 	.word	0x0800a951
 800a8b8:	0800a951 	.word	0x0800a951
 800a8bc:	0800a951 	.word	0x0800a951
 800a8c0:	0800a951 	.word	0x0800a951
 800a8c4:	0800a951 	.word	0x0800a951
 800a8c8:	0800a951 	.word	0x0800a951
 800a8cc:	0800a951 	.word	0x0800a951
 800a8d0:	0800a943 	.word	0x0800a943
 800a8d4:	2b40      	cmp	r3, #64	; 0x40
 800a8d6:	d037      	beq.n	800a948 <UART_SetConfig+0xa28>
 800a8d8:	e03a      	b.n	800a950 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8da:	f7fd f801 	bl	80078e0 <HAL_RCC_GetPCLK1Freq>
 800a8de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8e0:	e03c      	b.n	800a95c <UART_SetConfig+0xa3c>
 800a8e2:	bf00      	nop
 800a8e4:	003d0900 	.word	0x003d0900
 800a8e8:	0800dbb0 	.word	0x0800dbb0
 800a8ec:	58024400 	.word	0x58024400
 800a8f0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f4:	f7fd f80a 	bl	800790c <HAL_RCC_GetPCLK2Freq>
 800a8f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8fa:	e02f      	b.n	800a95c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fc:	f107 0314 	add.w	r3, r7, #20
 800a900:	4618      	mov	r0, r3
 800a902:	f7fd ffb1 	bl	8008868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a90a:	e027      	b.n	800a95c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a90c:	f107 0308 	add.w	r3, r7, #8
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe f8fd 	bl	8008b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a91a:	e01f      	b.n	800a95c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a91c:	4b2c      	ldr	r3, [pc, #176]	; (800a9d0 <UART_SetConfig+0xab0>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d009      	beq.n	800a93c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a928:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <UART_SetConfig+0xab0>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	08db      	lsrs	r3, r3, #3
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	4a28      	ldr	r2, [pc, #160]	; (800a9d4 <UART_SetConfig+0xab4>)
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
 800a938:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a93a:	e00f      	b.n	800a95c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a93c:	4b25      	ldr	r3, [pc, #148]	; (800a9d4 <UART_SetConfig+0xab4>)
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a940:	e00c      	b.n	800a95c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a942:	4b25      	ldr	r3, [pc, #148]	; (800a9d8 <UART_SetConfig+0xab8>)
 800a944:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a946:	e009      	b.n	800a95c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a94c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a94e:	e005      	b.n	800a95c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a95a:	bf00      	nop
    }

    if (pclk != 0U)
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d021      	beq.n	800a9a6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	4a1d      	ldr	r2, [pc, #116]	; (800a9dc <UART_SetConfig+0xabc>)
 800a968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	fbb3 f2f2 	udiv	r2, r3, r2
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	085b      	lsrs	r3, r3, #1
 800a97a:	441a      	add	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	fbb2 f3f3 	udiv	r3, r2, r3
 800a984:	b29b      	uxth	r3, r3
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	2b0f      	cmp	r3, #15
 800a98c:	d908      	bls.n	800a9a0 <UART_SetConfig+0xa80>
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a994:	d204      	bcs.n	800a9a0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a99c:	60da      	str	r2, [r3, #12]
 800a99e:	e002      	b.n	800a9a6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a9c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3738      	adds	r7, #56	; 0x38
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	58024400 	.word	0x58024400
 800a9d4:	03d09000 	.word	0x03d09000
 800a9d8:	003d0900 	.word	0x003d0900
 800a9dc:	0800dbb0 	.word	0x0800dbb0

0800a9e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00a      	beq.n	800aa0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00a      	beq.n	800aa2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00a      	beq.n	800aa4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	f003 0308 	and.w	r3, r3, #8
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa74:	f003 0310 	and.w	r3, r3, #16
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00a      	beq.n	800aa92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	430a      	orrs	r2, r1
 800aab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01a      	beq.n	800aaf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aade:	d10a      	bne.n	800aaf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	430a      	orrs	r2, r1
 800ab16:	605a      	str	r2, [r3, #4]
  }
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af02      	add	r7, sp, #8
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab34:	f7f8 fd92 	bl	800365c <HAL_GetTick>
 800ab38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0308 	and.w	r3, r3, #8
 800ab44:	2b08      	cmp	r3, #8
 800ab46:	d10e      	bne.n	800ab66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f82f 	bl	800abba <UART_WaitOnFlagUntilTimeout>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e025      	b.n	800abb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d10e      	bne.n	800ab92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f819 	bl	800abba <UART_WaitOnFlagUntilTimeout>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e00f      	b.n	800abb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2220      	movs	r2, #32
 800ab96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	60b9      	str	r1, [r7, #8]
 800abc4:	603b      	str	r3, [r7, #0]
 800abc6:	4613      	mov	r3, r2
 800abc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abca:	e062      	b.n	800ac92 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd2:	d05e      	beq.n	800ac92 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abd4:	f7f8 fd42 	bl	800365c <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d302      	bcc.n	800abea <UART_WaitOnFlagUntilTimeout+0x30>
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d11d      	bne.n	800ac26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abf8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 0201 	bic.w	r2, r2, #1
 800ac08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e045      	b.n	800acb2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d02e      	beq.n	800ac92 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac42:	d126      	bne.n	800ac92 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f022 0201 	bic.w	r2, r2, #1
 800ac6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2220      	movs	r2, #32
 800ac72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2220      	movs	r2, #32
 800ac82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e00f      	b.n	800acb2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69da      	ldr	r2, [r3, #28]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	bf0c      	ite	eq
 800aca2:	2301      	moveq	r3, #1
 800aca4:	2300      	movne	r3, #0
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	429a      	cmp	r2, r3
 800acae:	d08d      	beq.n	800abcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	4613      	mov	r3, r2
 800acc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	88fa      	ldrh	r2, [r7, #6]
 800acd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2222      	movs	r2, #34	; 0x22
 800ace4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02c      	beq.n	800ad4a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acf4:	4a25      	ldr	r2, [pc, #148]	; (800ad8c <UART_Start_Receive_DMA+0xd0>)
 800acf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acfc:	4a24      	ldr	r2, [pc, #144]	; (800ad90 <UART_Start_Receive_DMA+0xd4>)
 800acfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad04:	4a23      	ldr	r2, [pc, #140]	; (800ad94 <UART_Start_Receive_DMA+0xd8>)
 800ad06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3324      	adds	r3, #36	; 0x24
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad20:	461a      	mov	r2, r3
 800ad22:	88fb      	ldrh	r3, [r7, #6]
 800ad24:	f7f9 f8ee 	bl	8003f04 <HAL_DMA_Start_IT>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00d      	beq.n	800ad4a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2210      	movs	r2, #16
 800ad32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e01c      	b.n	800ad84 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad60:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689a      	ldr	r2, [r3, #8]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0201 	orr.w	r2, r2, #1
 800ad70:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad80:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	0800aea5 	.word	0x0800aea5
 800ad90:	0800af3b 	.word	0x0800af3b
 800ad94:	0800af73 	.word	0x0800af73

0800ad98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800adae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800adbe:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800adea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6899      	ldr	r1, [r3, #8]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <UART_EndRxTransfer+0x60>)
 800adf8:	400b      	ands	r3, r1
 800adfa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d107      	bne.n	800ae14 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 0210 	bic.w	r2, r2, #16
 800ae12:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2220      	movs	r2, #32
 800ae18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	effffffe 	.word	0xeffffffe

0800ae38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69db      	ldr	r3, [r3, #28]
 800ae4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4e:	d014      	beq.n	800ae7a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689a      	ldr	r2, [r3, #8]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae66:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae76:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae78:	e002      	b.n	800ae80 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff f812 	bl	8009ea4 <HAL_UART_TxCpltCallback>
}
 800ae80:	bf00      	nop
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae94:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff f80e 	bl	8009eb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9c:	bf00      	nop
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeba:	d02b      	beq.n	800af14 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aed2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0201 	bic.w	r2, r2, #1
 800aee2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aef2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af00:	2b01      	cmp	r3, #1
 800af02:	d107      	bne.n	800af14 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 0210 	bic.w	r2, r2, #16
 800af12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d107      	bne.n	800af2c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af22:	4619      	mov	r1, r3
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7fe ffef 	bl	8009f08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af2a:	e002      	b.n	800af32 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7fe ffcd 	bl	8009ecc <HAL_UART_RxCpltCallback>
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d109      	bne.n	800af64 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af56:	085b      	lsrs	r3, r3, #1
 800af58:	b29b      	uxth	r3, r3
 800af5a:	4619      	mov	r1, r3
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f7fe ffd3 	bl	8009f08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af62:	e002      	b.n	800af6a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7fe ffbb 	bl	8009ee0 <HAL_UART_RxHalfCpltCallback>
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b086      	sub	sp, #24
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9a:	2b80      	cmp	r3, #128	; 0x80
 800af9c:	d109      	bne.n	800afb2 <UART_DMAError+0x40>
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b21      	cmp	r3, #33	; 0x21
 800afa2:	d106      	bne.n	800afb2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800afac:	6978      	ldr	r0, [r7, #20]
 800afae:	f7ff fef3 	bl	800ad98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbc:	2b40      	cmp	r3, #64	; 0x40
 800afbe:	d109      	bne.n	800afd4 <UART_DMAError+0x62>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b22      	cmp	r3, #34	; 0x22
 800afc4:	d106      	bne.n	800afd4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2200      	movs	r2, #0
 800afca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800afce:	6978      	ldr	r0, [r7, #20]
 800afd0:	f7ff ff00 	bl	800add4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afda:	f043 0210 	orr.w	r2, r3, #16
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afe4:	6978      	ldr	r0, [r7, #20]
 800afe6:	f7fe ff85 	bl	8009ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afea:	bf00      	nop
 800afec:	3718      	adds	r7, #24
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7fe ff6f 	bl	8009ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b034:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2220      	movs	r2, #32
 800b03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7fe ff2d 	bl	8009ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b05a:	bf00      	nop
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b06e:	bf00      	nop
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b082:	bf00      	nop
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e027      	b.n	800b0f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2224      	movs	r2, #36	; 0x24
 800b0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0201 	bic.w	r2, r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b0d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b110:	2b01      	cmp	r3, #1
 800b112:	d101      	bne.n	800b118 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b114:	2302      	movs	r3, #2
 800b116:	e02d      	b.n	800b174 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2224      	movs	r2, #36	; 0x24
 800b124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f022 0201 	bic.w	r2, r2, #1
 800b13e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f84f 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b190:	2302      	movs	r3, #2
 800b192:	e02d      	b.n	800b1f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2224      	movs	r2, #36	; 0x24
 800b1a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f022 0201 	bic.w	r2, r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f811 	bl	800b1f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b218:	e031      	b.n	800b27e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b21a:	2310      	movs	r3, #16
 800b21c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b21e:	2310      	movs	r3, #16
 800b220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	0e5b      	lsrs	r3, r3, #25
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	0f5b      	lsrs	r3, r3, #29
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	7b3a      	ldrb	r2, [r7, #12]
 800b246:	4911      	ldr	r1, [pc, #68]	; (800b28c <UARTEx_SetNbDataToProcess+0x94>)
 800b248:	5c8a      	ldrb	r2, [r1, r2]
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b24e:	7b3a      	ldrb	r2, [r7, #12]
 800b250:	490f      	ldr	r1, [pc, #60]	; (800b290 <UARTEx_SetNbDataToProcess+0x98>)
 800b252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b254:	fb93 f3f2 	sdiv	r3, r3, r2
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	7b7a      	ldrb	r2, [r7, #13]
 800b264:	4909      	ldr	r1, [pc, #36]	; (800b28c <UARTEx_SetNbDataToProcess+0x94>)
 800b266:	5c8a      	ldrb	r2, [r1, r2]
 800b268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b26c:	7b7a      	ldrb	r2, [r7, #13]
 800b26e:	4908      	ldr	r1, [pc, #32]	; (800b290 <UARTEx_SetNbDataToProcess+0x98>)
 800b270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b272:	fb93 f3f2 	sdiv	r3, r3, r2
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b27e:	bf00      	nop
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	0800dbc8 	.word	0x0800dbc8
 800b290:	0800dbd0 	.word	0x0800dbd0

0800b294 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2a6:	2b84      	cmp	r3, #132	; 0x84
 800b2a8:	d005      	beq.n	800b2b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b2aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3303      	adds	r3, #3
 800b2b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2c8:	f001 f96c 	bl	800c5a4 <vTaskStartScheduler>
  
  return osOK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2d4:	b089      	sub	sp, #36	; 0x24
 800b2d6:	af04      	add	r7, sp, #16
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d020      	beq.n	800b326 <osThreadCreate+0x54>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d01c      	beq.n	800b326 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685c      	ldr	r4, [r3, #4]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681d      	ldr	r5, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691e      	ldr	r6, [r3, #16]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff ffc8 	bl	800b294 <makeFreeRtosPriority>
 800b304:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b30e:	9202      	str	r2, [sp, #8]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	9100      	str	r1, [sp, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	4632      	mov	r2, r6
 800b318:	4629      	mov	r1, r5
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fe58 	bl	800bfd0 <xTaskCreateStatic>
 800b320:	4603      	mov	r3, r0
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	e01c      	b.n	800b360 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685c      	ldr	r4, [r3, #4]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b332:	b29e      	uxth	r6, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff ffaa 	bl	800b294 <makeFreeRtosPriority>
 800b340:	4602      	mov	r2, r0
 800b342:	f107 030c 	add.w	r3, r7, #12
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	9200      	str	r2, [sp, #0]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	4632      	mov	r2, r6
 800b34e:	4629      	mov	r1, r5
 800b350:	4620      	mov	r0, r4
 800b352:	f000 fe9a 	bl	800c08a <xTaskCreate>
 800b356:	4603      	mov	r3, r0
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d001      	beq.n	800b360 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b35c:	2300      	movs	r3, #0
 800b35e:	e000      	b.n	800b362 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b360:	68fb      	ldr	r3, [r7, #12]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b36a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <osDelay+0x16>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	e000      	b.n	800b382 <osDelay+0x18>
 800b380:	2301      	movs	r3, #1
 800b382:	4618      	mov	r0, r3
 800b384:	f000 ffb8 	bl	800c2f8 <vTaskDelay>
  
  return osOK;
 800b388:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	2001      	movs	r0, #1
 800b3aa:	f000 fa5c 	bl	800b866 <xQueueCreateMutexStatic>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	e003      	b.n	800b3ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	f000 fa3f 	bl	800b836 <xQueueCreateMutex>
 800b3b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b086      	sub	sp, #24
 800b3c6:	af02      	add	r7, sp, #8
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00f      	beq.n	800b3f4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d10a      	bne.n	800b3f0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2203      	movs	r2, #3
 800b3e0:	9200      	str	r2, [sp, #0]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	f000 f93a 	bl	800b660 <xQueueGenericCreateStatic>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	e016      	b.n	800b41e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e014      	b.n	800b41e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d110      	bne.n	800b41c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	2001      	movs	r0, #1
 800b400:	f000 f9a6 	bl	800b750 <xQueueGenericCreate>
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d005      	beq.n	800b418 <osSemaphoreCreate+0x56>
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	2100      	movs	r1, #0
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 fa42 	bl	800b89c <xQueueGenericSend>
      return sema;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e000      	b.n	800b41e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b41c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f103 0208 	add.w	r2, r3, #8
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f04f 32ff 	mov.w	r2, #4294967295
 800b43e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f103 0208 	add.w	r2, r3, #8
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f103 0208 	add.w	r2, r3, #8
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b45a:	bf00      	nop
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	601a      	str	r2, [r3, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4de:	d103      	bne.n	800b4e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	e00c      	b.n	800b502 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	e002      	b.n	800b4f6 <vListInsert+0x2e>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d2f6      	bcs.n	800b4f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
}
 800b52e:	bf00      	nop
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b53a:	b480      	push	{r7}
 800b53c:	b085      	sub	sp, #20
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6892      	ldr	r2, [r2, #8]
 800b550:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	6852      	ldr	r2, [r2, #4]
 800b55a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d103      	bne.n	800b56e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	1e5a      	subs	r2, r3, #1
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
	...

0800b590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b5ba:	f001 ff43 	bl	800d444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5ca:	fb01 f303 	mul.w	r3, r1, r3
 800b5ce:	441a      	add	r2, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	68f9      	ldr	r1, [r7, #12]
 800b5ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	441a      	add	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	22ff      	movs	r2, #255	; 0xff
 800b5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	22ff      	movs	r2, #255	; 0xff
 800b606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d114      	bne.n	800b63a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d01a      	beq.n	800b64e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3310      	adds	r3, #16
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 fa03 	bl	800ca28 <xTaskRemoveFromEventList>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d012      	beq.n	800b64e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b628:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <xQueueGenericReset+0xcc>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	e009      	b.n	800b64e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3310      	adds	r3, #16
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fef1 	bl	800b426 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3324      	adds	r3, #36	; 0x24
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff feec 	bl	800b426 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b64e:	f001 ff29 	bl	800d4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b652:	2301      	movs	r3, #1
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	e000ed04 	.word	0xe000ed04

0800b660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08e      	sub	sp, #56	; 0x38
 800b664:	af02      	add	r7, sp, #8
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10a      	bne.n	800b68a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10a      	bne.n	800b6a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6a2:	bf00      	nop
 800b6a4:	e7fe      	b.n	800b6a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <xQueueGenericCreateStatic+0x52>
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <xQueueGenericCreateStatic+0x56>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e000      	b.n	800b6b8 <xQueueGenericCreateStatic+0x58>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	623b      	str	r3, [r7, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <xQueueGenericCreateStatic+0x7e>
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <xQueueGenericCreateStatic+0x82>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e000      	b.n	800b6e4 <xQueueGenericCreateStatic+0x84>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	61fb      	str	r3, [r7, #28]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6fe:	2348      	movs	r3, #72	; 0x48
 800b700:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2b48      	cmp	r3, #72	; 0x48
 800b706:	d00a      	beq.n	800b71e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	61bb      	str	r3, [r7, #24]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b71e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00d      	beq.n	800b746 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b732:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	4613      	mov	r3, r2
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f83f 	bl	800b7c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b748:	4618      	mov	r0, r3
 800b74a:	3730      	adds	r7, #48	; 0x30
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af02      	add	r7, sp, #8
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	613b      	str	r3, [r7, #16]
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	fb02 f303 	mul.w	r3, r2, r3
 800b782:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	3348      	adds	r3, #72	; 0x48
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 ff7d 	bl	800d688 <pvPortMalloc>
 800b78e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d011      	beq.n	800b7ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	3348      	adds	r3, #72	; 0x48
 800b79e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7a8:	79fa      	ldrb	r2, [r7, #7]
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	68b9      	ldr	r1, [r7, #8]
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 f805 	bl	800b7c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	e002      	b.n	800b7e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	69b8      	ldr	r0, [r7, #24]
 800b7f6:	f7ff fecb 	bl	800b590 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00e      	beq.n	800b82e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	2100      	movs	r1, #0
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f837 	bl	800b89c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b836:	b580      	push	{r7, lr}
 800b838:	b086      	sub	sp, #24
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	4603      	mov	r3, r0
 800b83e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b840:	2301      	movs	r3, #1
 800b842:	617b      	str	r3, [r7, #20]
 800b844:	2300      	movs	r3, #0
 800b846:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b848:	79fb      	ldrb	r3, [r7, #7]
 800b84a:	461a      	mov	r2, r3
 800b84c:	6939      	ldr	r1, [r7, #16]
 800b84e:	6978      	ldr	r0, [r7, #20]
 800b850:	f7ff ff7e 	bl	800b750 <xQueueGenericCreate>
 800b854:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f7ff ffd3 	bl	800b802 <prvInitialiseMutex>

		return xNewQueue;
 800b85c:	68fb      	ldr	r3, [r7, #12]
	}
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b866:	b580      	push	{r7, lr}
 800b868:	b088      	sub	sp, #32
 800b86a:	af02      	add	r7, sp, #8
 800b86c:	4603      	mov	r3, r0
 800b86e:	6039      	str	r1, [r7, #0]
 800b870:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b872:	2301      	movs	r3, #1
 800b874:	617b      	str	r3, [r7, #20]
 800b876:	2300      	movs	r3, #0
 800b878:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2200      	movs	r2, #0
 800b882:	6939      	ldr	r1, [r7, #16]
 800b884:	6978      	ldr	r0, [r7, #20]
 800b886:	f7ff feeb 	bl	800b660 <xQueueGenericCreateStatic>
 800b88a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f7ff ffb8 	bl	800b802 <prvInitialiseMutex>

		return xNewQueue;
 800b892:	68fb      	ldr	r3, [r7, #12]
	}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08e      	sub	sp, #56	; 0x38
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <xQueueGenericSend+0x32>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d103      	bne.n	800b8dc <xQueueGenericSend+0x40>
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <xQueueGenericSend+0x44>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e000      	b.n	800b8e2 <xQueueGenericSend+0x46>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10a      	bne.n	800b8fc <xQueueGenericSend+0x60>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8f8:	bf00      	nop
 800b8fa:	e7fe      	b.n	800b8fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d103      	bne.n	800b90a <xQueueGenericSend+0x6e>
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b906:	2b01      	cmp	r3, #1
 800b908:	d101      	bne.n	800b90e <xQueueGenericSend+0x72>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <xQueueGenericSend+0x74>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xQueueGenericSend+0x8e>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	623b      	str	r3, [r7, #32]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b92a:	f001 fa39 	bl	800cda0 <xTaskGetSchedulerState>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <xQueueGenericSend+0x9e>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <xQueueGenericSend+0xa2>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <xQueueGenericSend+0xa4>
 800b93e:	2300      	movs	r3, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xQueueGenericSend+0xbe>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	61fb      	str	r3, [r7, #28]
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b95a:	f001 fd73 	bl	800d444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b966:	429a      	cmp	r2, r3
 800b968:	d302      	bcc.n	800b970 <xQueueGenericSend+0xd4>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d129      	bne.n	800b9c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b976:	f000 fa41 	bl	800bdfc <prvCopyDataToQueue>
 800b97a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	2b00      	cmp	r3, #0
 800b982:	d010      	beq.n	800b9a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	3324      	adds	r3, #36	; 0x24
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 f84d 	bl	800ca28 <xTaskRemoveFromEventList>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d013      	beq.n	800b9bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b994:	4b3f      	ldr	r3, [pc, #252]	; (800ba94 <xQueueGenericSend+0x1f8>)
 800b996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b99a:	601a      	str	r2, [r3, #0]
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	e00a      	b.n	800b9bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9ac:	4b39      	ldr	r3, [pc, #228]	; (800ba94 <xQueueGenericSend+0x1f8>)
 800b9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9bc:	f001 fd72 	bl	800d4a4 <vPortExitCritical>
				return pdPASS;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e063      	b.n	800ba8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d103      	bne.n	800b9d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9ca:	f001 fd6b 	bl	800d4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e05c      	b.n	800ba8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9d8:	f107 0314 	add.w	r3, r7, #20
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f001 f885 	bl	800caec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9e6:	f001 fd5d 	bl	800d4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9ea:	f000 fe3b 	bl	800c664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9ee:	f001 fd29 	bl	800d444 <vPortEnterCritical>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9f8:	b25b      	sxtb	r3, r3
 800b9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fe:	d103      	bne.n	800ba08 <xQueueGenericSend+0x16c>
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0e:	b25b      	sxtb	r3, r3
 800ba10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba14:	d103      	bne.n	800ba1e <xQueueGenericSend+0x182>
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba1e:	f001 fd41 	bl	800d4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba22:	1d3a      	adds	r2, r7, #4
 800ba24:	f107 0314 	add.w	r3, r7, #20
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 f874 	bl	800cb18 <xTaskCheckForTimeOut>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d124      	bne.n	800ba80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba38:	f000 fab2 	bl	800bfa0 <prvIsQueueFull>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d018      	beq.n	800ba74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	3310      	adds	r3, #16
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	4611      	mov	r1, r2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 ffc8 	bl	800c9e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba52:	f000 fa3d 	bl	800bed0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba56:	f000 fe13 	bl	800c680 <xTaskResumeAll>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f47f af7c 	bne.w	800b95a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba62:	4b0c      	ldr	r3, [pc, #48]	; (800ba94 <xQueueGenericSend+0x1f8>)
 800ba64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	e772      	b.n	800b95a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba76:	f000 fa2b 	bl	800bed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba7a:	f000 fe01 	bl	800c680 <xTaskResumeAll>
 800ba7e:	e76c      	b.n	800b95a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba82:	f000 fa25 	bl	800bed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba86:	f000 fdfb 	bl	800c680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3738      	adds	r7, #56	; 0x38
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	e000ed04 	.word	0xe000ed04

0800ba98 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08e      	sub	sp, #56	; 0x38
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	623b      	str	r3, [r7, #32]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	61fb      	str	r3, [r7, #28]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <xQueueGiveFromISR+0x58>
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <xQueueGiveFromISR+0x5c>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <xQueueGiveFromISR+0x5e>
 800baf4:	2300      	movs	r3, #0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	61bb      	str	r3, [r7, #24]
}
 800bb0c:	bf00      	nop
 800bb0e:	e7fe      	b.n	800bb0e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb10:	f001 fd7a 	bl	800d608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb14:	f3ef 8211 	mrs	r2, BASEPRI
 800bb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	617a      	str	r2, [r7, #20]
 800bb2a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb2c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d22b      	bcs.n	800bb98 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d112      	bne.n	800bb82 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d016      	beq.n	800bb92 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	3324      	adds	r3, #36	; 0x24
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 ff5d 	bl	800ca28 <xTaskRemoveFromEventList>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00b      	beq.n	800bb92 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	e007      	b.n	800bb92 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb86:	3301      	adds	r3, #1
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	b25a      	sxtb	r2, r3
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb92:	2301      	movs	r3, #1
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
 800bb96:	e001      	b.n	800bb9c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bba6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3738      	adds	r7, #56	; 0x38
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08e      	sub	sp, #56	; 0x38
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	623b      	str	r3, [r7, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	61fb      	str	r3, [r7, #28]
}
 800bc00:	bf00      	nop
 800bc02:	e7fe      	b.n	800bc02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc04:	f001 f8cc 	bl	800cda0 <xTaskGetSchedulerState>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d102      	bne.n	800bc14 <xQueueSemaphoreTake+0x60>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <xQueueSemaphoreTake+0x64>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e000      	b.n	800bc1a <xQueueSemaphoreTake+0x66>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	61bb      	str	r3, [r7, #24]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc34:	f001 fc06 	bl	800d444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d024      	beq.n	800bc8e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc46:	1e5a      	subs	r2, r3, #1
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc54:	f001 fa4c 	bl	800d0f0 <pvTaskIncrementMutexHeldCount>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00f      	beq.n	800bc86 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc68:	3310      	adds	r3, #16
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 fedc 	bl	800ca28 <xTaskRemoveFromEventList>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc76:	4b54      	ldr	r3, [pc, #336]	; (800bdc8 <xQueueSemaphoreTake+0x214>)
 800bc78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc86:	f001 fc0d 	bl	800d4a4 <vPortExitCritical>
				return pdPASS;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e097      	b.n	800bdbe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d111      	bne.n	800bcb8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	617b      	str	r3, [r7, #20]
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bcb0:	f001 fbf8 	bl	800d4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e082      	b.n	800bdbe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcbe:	f107 030c 	add.w	r3, r7, #12
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 ff12 	bl	800caec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bccc:	f001 fbea 	bl	800d4a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcd0:	f000 fcc8 	bl	800c664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcd4:	f001 fbb6 	bl	800d444 <vPortEnterCritical>
 800bcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcde:	b25b      	sxtb	r3, r3
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d103      	bne.n	800bcee <xQueueSemaphoreTake+0x13a>
 800bce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d103      	bne.n	800bd04 <xQueueSemaphoreTake+0x150>
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd04:	f001 fbce 	bl	800d4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd08:	463a      	mov	r2, r7
 800bd0a:	f107 030c 	add.w	r3, r7, #12
 800bd0e:	4611      	mov	r1, r2
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 ff01 	bl	800cb18 <xTaskCheckForTimeOut>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d132      	bne.n	800bd82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd1e:	f000 f929 	bl	800bf74 <prvIsQueueEmpty>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d026      	beq.n	800bd76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d109      	bne.n	800bd44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bd30:	f001 fb88 	bl	800d444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f001 f84f 	bl	800cddc <xTaskPriorityInherit>
 800bd3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bd40:	f001 fbb0 	bl	800d4a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	3324      	adds	r3, #36	; 0x24
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fe47 	bl	800c9e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd54:	f000 f8bc 	bl	800bed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd58:	f000 fc92 	bl	800c680 <xTaskResumeAll>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f47f af68 	bne.w	800bc34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bd64:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <xQueueSemaphoreTake+0x214>)
 800bd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	e75e      	b.n	800bc34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bd76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd78:	f000 f8aa 	bl	800bed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd7c:	f000 fc80 	bl	800c680 <xTaskResumeAll>
 800bd80:	e758      	b.n	800bc34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd84:	f000 f8a4 	bl	800bed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd88:	f000 fc7a 	bl	800c680 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd8e:	f000 f8f1 	bl	800bf74 <prvIsQueueEmpty>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f43f af4d 	beq.w	800bc34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00d      	beq.n	800bdbc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bda0:	f001 fb50 	bl	800d444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bda6:	f000 f811 	bl	800bdcc <prvGetDisinheritPriorityAfterTimeout>
 800bdaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 f90e 	bl	800cfd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bdb8:	f001 fb74 	bl	800d4a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3738      	adds	r7, #56	; 0x38
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	e000ed04 	.word	0xe000ed04

0800bdcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d006      	beq.n	800bdea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f1c3 0307 	rsb	r3, r3, #7
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e001      	b.n	800bdee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bdee:	68fb      	ldr	r3, [r7, #12]
	}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be08:	2300      	movs	r3, #0
 800be0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10d      	bne.n	800be36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d14d      	bne.n	800bebe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	4618      	mov	r0, r3
 800be28:	f001 f84e 	bl	800cec8 <xTaskPriorityDisinherit>
 800be2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	609a      	str	r2, [r3, #8]
 800be34:	e043      	b.n	800bebe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d119      	bne.n	800be70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6858      	ldr	r0, [r3, #4]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be44:	461a      	mov	r2, r3
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	f001 fe2c 	bl	800daa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	685a      	ldr	r2, [r3, #4]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be54:	441a      	add	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	429a      	cmp	r2, r3
 800be64:	d32b      	bcc.n	800bebe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	605a      	str	r2, [r3, #4]
 800be6e:	e026      	b.n	800bebe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	68d8      	ldr	r0, [r3, #12]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be78:	461a      	mov	r2, r3
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	f001 fe12 	bl	800daa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be88:	425b      	negs	r3, r3
 800be8a:	441a      	add	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	68da      	ldr	r2, [r3, #12]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d207      	bcs.n	800beac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	689a      	ldr	r2, [r3, #8]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea4:	425b      	negs	r3, r3
 800bea6:	441a      	add	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d105      	bne.n	800bebe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	3b01      	subs	r3, #1
 800bebc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bec6:	697b      	ldr	r3, [r7, #20]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bed8:	f001 fab4 	bl	800d444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bee2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bee4:	e011      	b.n	800bf0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	d012      	beq.n	800bf14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	3324      	adds	r3, #36	; 0x24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 fd98 	bl	800ca28 <xTaskRemoveFromEventList>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800befe:	f000 fe6d 	bl	800cbdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dce9      	bgt.n	800bee6 <prvUnlockQueue+0x16>
 800bf12:	e000      	b.n	800bf16 <prvUnlockQueue+0x46>
					break;
 800bf14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	22ff      	movs	r2, #255	; 0xff
 800bf1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf1e:	f001 fac1 	bl	800d4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf22:	f001 fa8f 	bl	800d444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf2e:	e011      	b.n	800bf54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d012      	beq.n	800bf5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3310      	adds	r3, #16
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 fd73 	bl	800ca28 <xTaskRemoveFromEventList>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf48:	f000 fe48 	bl	800cbdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dce9      	bgt.n	800bf30 <prvUnlockQueue+0x60>
 800bf5c:	e000      	b.n	800bf60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	22ff      	movs	r2, #255	; 0xff
 800bf64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bf68:	f001 fa9c 	bl	800d4a4 <vPortExitCritical>
}
 800bf6c:	bf00      	nop
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf7c:	f001 fa62 	bl	800d444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e001      	b.n	800bf92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf92:	f001 fa87 	bl	800d4a4 <vPortExitCritical>

	return xReturn;
 800bf96:	68fb      	ldr	r3, [r7, #12]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfa8:	f001 fa4c 	bl	800d444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d102      	bne.n	800bfbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	e001      	b.n	800bfc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfc2:	f001 fa6f 	bl	800d4a4 <vPortExitCritical>

	return xReturn;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08e      	sub	sp, #56	; 0x38
 800bfd4:	af04      	add	r7, sp, #16
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10a      	bne.n	800bffa <xTaskCreateStatic+0x2a>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	623b      	str	r3, [r7, #32]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <xTaskCreateStatic+0x46>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	61fb      	str	r3, [r7, #28]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c016:	2354      	movs	r3, #84	; 0x54
 800c018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	2b54      	cmp	r3, #84	; 0x54
 800c01e:	d00a      	beq.n	800c036 <xTaskCreateStatic+0x66>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	61bb      	str	r3, [r7, #24]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c036:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01e      	beq.n	800c07c <xTaskCreateStatic+0xac>
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	2b00      	cmp	r3, #0
 800c042:	d01b      	beq.n	800c07c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c04c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	2202      	movs	r2, #2
 800c052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c056:	2300      	movs	r3, #0
 800c058:	9303      	str	r3, [sp, #12]
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	9302      	str	r3, [sp, #8]
 800c05e:	f107 0314 	add.w	r3, r7, #20
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	68b9      	ldr	r1, [r7, #8]
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f000 f850 	bl	800c114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c076:	f000 f8d5 	bl	800c224 <prvAddNewTaskToReadyList>
 800c07a:	e001      	b.n	800c080 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c07c:	2300      	movs	r3, #0
 800c07e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c080:	697b      	ldr	r3, [r7, #20]
	}
 800c082:	4618      	mov	r0, r3
 800c084:	3728      	adds	r7, #40	; 0x28
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b08c      	sub	sp, #48	; 0x30
 800c08e:	af04      	add	r7, sp, #16
 800c090:	60f8      	str	r0, [r7, #12]
 800c092:	60b9      	str	r1, [r7, #8]
 800c094:	603b      	str	r3, [r7, #0]
 800c096:	4613      	mov	r3, r2
 800c098:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c09a:	88fb      	ldrh	r3, [r7, #6]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f001 faf2 	bl	800d688 <pvPortMalloc>
 800c0a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00e      	beq.n	800c0ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0ac:	2054      	movs	r0, #84	; 0x54
 800c0ae:	f001 faeb 	bl	800d688 <pvPortMalloc>
 800c0b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	631a      	str	r2, [r3, #48]	; 0x30
 800c0c0:	e005      	b.n	800c0ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0c2:	6978      	ldr	r0, [r7, #20]
 800c0c4:	f001 fbac 	bl	800d820 <vPortFree>
 800c0c8:	e001      	b.n	800c0ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d017      	beq.n	800c104 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0dc:	88fa      	ldrh	r2, [r7, #6]
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	9302      	str	r3, [sp, #8]
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	68b9      	ldr	r1, [r7, #8]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 f80e 	bl	800c114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0f8:	69f8      	ldr	r0, [r7, #28]
 800c0fa:	f000 f893 	bl	800c224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0fe:	2301      	movs	r3, #1
 800c100:	61bb      	str	r3, [r7, #24]
 800c102:	e002      	b.n	800c10a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c104:	f04f 33ff 	mov.w	r3, #4294967295
 800c108:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c10a:	69bb      	ldr	r3, [r7, #24]
	}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c12c:	440b      	add	r3, r1
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	f003 0307 	and.w	r3, r3, #7
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00a      	beq.n	800c15c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	617b      	str	r3, [r7, #20]
}
 800c158:	bf00      	nop
 800c15a:	e7fe      	b.n	800c15a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d01f      	beq.n	800c1a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c162:	2300      	movs	r3, #0
 800c164:	61fb      	str	r3, [r7, #28]
 800c166:	e012      	b.n	800c18e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	4413      	add	r3, r2
 800c16e:	7819      	ldrb	r1, [r3, #0]
 800c170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	4413      	add	r3, r2
 800c176:	3334      	adds	r3, #52	; 0x34
 800c178:	460a      	mov	r2, r1
 800c17a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	4413      	add	r3, r2
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d006      	beq.n	800c196 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	3301      	adds	r3, #1
 800c18c:	61fb      	str	r3, [r7, #28]
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	2b0f      	cmp	r3, #15
 800c192:	d9e9      	bls.n	800c168 <prvInitialiseNewTask+0x54>
 800c194:	e000      	b.n	800c198 <prvInitialiseNewTask+0x84>
			{
				break;
 800c196:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1a0:	e003      	b.n	800c1aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	2b06      	cmp	r3, #6
 800c1ae:	d901      	bls.n	800c1b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1b0:	2306      	movs	r3, #6
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7ff f94b 	bl	800b466 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	3318      	adds	r3, #24
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff f946 	bl	800b466 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	f1c3 0207 	rsb	r2, r3, #7
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	68f9      	ldr	r1, [r7, #12]
 800c202:	69b8      	ldr	r0, [r7, #24]
 800c204:	f000 ffee 	bl	800d1e4 <pxPortInitialiseStack>
 800c208:	4602      	mov	r2, r0
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c21a:	bf00      	nop
 800c21c:	3720      	adds	r7, #32
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c22c:	f001 f90a 	bl	800d444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c230:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <prvAddNewTaskToReadyList+0xb8>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3301      	adds	r3, #1
 800c236:	4a29      	ldr	r2, [pc, #164]	; (800c2dc <prvAddNewTaskToReadyList+0xb8>)
 800c238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c23a:	4b29      	ldr	r3, [pc, #164]	; (800c2e0 <prvAddNewTaskToReadyList+0xbc>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d109      	bne.n	800c256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c242:	4a27      	ldr	r2, [pc, #156]	; (800c2e0 <prvAddNewTaskToReadyList+0xbc>)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <prvAddNewTaskToReadyList+0xb8>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d110      	bne.n	800c272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c250:	f000 fce8 	bl	800cc24 <prvInitialiseTaskLists>
 800c254:	e00d      	b.n	800c272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c256:	4b23      	ldr	r3, [pc, #140]	; (800c2e4 <prvAddNewTaskToReadyList+0xc0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d109      	bne.n	800c272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c25e:	4b20      	ldr	r3, [pc, #128]	; (800c2e0 <prvAddNewTaskToReadyList+0xbc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	429a      	cmp	r2, r3
 800c26a:	d802      	bhi.n	800c272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c26c:	4a1c      	ldr	r2, [pc, #112]	; (800c2e0 <prvAddNewTaskToReadyList+0xbc>)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c272:	4b1d      	ldr	r3, [pc, #116]	; (800c2e8 <prvAddNewTaskToReadyList+0xc4>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3301      	adds	r3, #1
 800c278:	4a1b      	ldr	r2, [pc, #108]	; (800c2e8 <prvAddNewTaskToReadyList+0xc4>)
 800c27a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	2201      	movs	r2, #1
 800c282:	409a      	lsls	r2, r3
 800c284:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <prvAddNewTaskToReadyList+0xc8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4313      	orrs	r3, r2
 800c28a:	4a18      	ldr	r2, [pc, #96]	; (800c2ec <prvAddNewTaskToReadyList+0xc8>)
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c292:	4613      	mov	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4a15      	ldr	r2, [pc, #84]	; (800c2f0 <prvAddNewTaskToReadyList+0xcc>)
 800c29c:	441a      	add	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	f7ff f8eb 	bl	800b480 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2aa:	f001 f8fb 	bl	800d4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2ae:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <prvAddNewTaskToReadyList+0xc0>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00e      	beq.n	800c2d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	; (800c2e0 <prvAddNewTaskToReadyList+0xbc>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d207      	bcs.n	800c2d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2c4:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <prvAddNewTaskToReadyList+0xd0>)
 800c2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ca:	601a      	str	r2, [r3, #0]
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20000384 	.word	0x20000384
 800c2e0:	20000284 	.word	0x20000284
 800c2e4:	20000390 	.word	0x20000390
 800c2e8:	200003a0 	.word	0x200003a0
 800c2ec:	2000038c 	.word	0x2000038c
 800c2f0:	20000288 	.word	0x20000288
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c300:	2300      	movs	r3, #0
 800c302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d017      	beq.n	800c33a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c30a:	4b13      	ldr	r3, [pc, #76]	; (800c358 <vTaskDelay+0x60>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <vTaskDelay+0x30>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	60bb      	str	r3, [r7, #8]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c328:	f000 f99c 	bl	800c664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c32c:	2100      	movs	r1, #0
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fef2 	bl	800d118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c334:	f000 f9a4 	bl	800c680 <xTaskResumeAll>
 800c338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d107      	bne.n	800c350 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <vTaskDelay+0x64>)
 800c342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c346:	601a      	str	r2, [r3, #0]
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c350:	bf00      	nop
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	200003ac 	.word	0x200003ac
 800c35c:	e000ed04 	.word	0xe000ed04

0800c360 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c368:	f001 f86c 	bl	800d444 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <vTaskSuspend+0x18>
 800c372:	4b3c      	ldr	r3, [pc, #240]	; (800c464 <vTaskSuspend+0x104>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	e000      	b.n	800c37a <vTaskSuspend+0x1a>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3304      	adds	r3, #4
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff f8da 	bl	800b53a <uxListRemove>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d115      	bne.n	800c3b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c390:	4935      	ldr	r1, [pc, #212]	; (800c468 <vTaskSuspend+0x108>)
 800c392:	4613      	mov	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4413      	add	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	440b      	add	r3, r1
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10a      	bne.n	800c3b8 <vTaskSuspend+0x58>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ac:	43da      	mvns	r2, r3
 800c3ae:	4b2f      	ldr	r3, [pc, #188]	; (800c46c <vTaskSuspend+0x10c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	4a2d      	ldr	r2, [pc, #180]	; (800c46c <vTaskSuspend+0x10c>)
 800c3b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3318      	adds	r3, #24
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff f8b8 	bl	800b53a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4827      	ldr	r0, [pc, #156]	; (800c470 <vTaskSuspend+0x110>)
 800c3d2:	f7ff f855 	bl	800b480 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d103      	bne.n	800c3ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c3ea:	f001 f85b 	bl	800d4a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c3ee:	4b21      	ldr	r3, [pc, #132]	; (800c474 <vTaskSuspend+0x114>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c3f6:	f001 f825 	bl	800d444 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c3fa:	f000 fcb1 	bl	800cd60 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c3fe:	f001 f851 	bl	800d4a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c402:	4b18      	ldr	r3, [pc, #96]	; (800c464 <vTaskSuspend+0x104>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d127      	bne.n	800c45c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800c40c:	4b19      	ldr	r3, [pc, #100]	; (800c474 <vTaskSuspend+0x114>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d017      	beq.n	800c444 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c414:	4b18      	ldr	r3, [pc, #96]	; (800c478 <vTaskSuspend+0x118>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <vTaskSuspend+0xd2>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60bb      	str	r3, [r7, #8]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800c432:	4b12      	ldr	r3, [pc, #72]	; (800c47c <vTaskSuspend+0x11c>)
 800c434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c442:	e00b      	b.n	800c45c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c444:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <vTaskSuspend+0x110>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <vTaskSuspend+0x120>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d103      	bne.n	800c458 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800c450:	4b04      	ldr	r3, [pc, #16]	; (800c464 <vTaskSuspend+0x104>)
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
	}
 800c456:	e001      	b.n	800c45c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800c458:	f000 fa66 	bl	800c928 <vTaskSwitchContext>
	}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	20000284 	.word	0x20000284
 800c468:	20000288 	.word	0x20000288
 800c46c:	2000038c 	.word	0x2000038c
 800c470:	20000370 	.word	0x20000370
 800c474:	20000390 	.word	0x20000390
 800c478:	200003ac 	.word	0x200003ac
 800c47c:	e000ed04 	.word	0xe000ed04
 800c480:	20000384 	.word	0x20000384

0800c484 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c48c:	2300      	movs	r3, #0
 800c48e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10a      	bne.n	800c4b0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49e:	f383 8811 	msr	BASEPRI, r3
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	60fb      	str	r3, [r7, #12]
}
 800c4ac:	bf00      	nop
 800c4ae:	e7fe      	b.n	800c4ae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	4a0a      	ldr	r2, [pc, #40]	; (800c4e0 <prvTaskIsTaskSuspended+0x5c>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d10a      	bne.n	800c4d0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4be:	4a09      	ldr	r2, [pc, #36]	; (800c4e4 <prvTaskIsTaskSuspended+0x60>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d005      	beq.n	800c4d0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4d0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	20000370 	.word	0x20000370
 800c4e4:	20000344 	.word	0x20000344

0800c4e8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10a      	bne.n	800c510 <vTaskResume+0x28>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	60bb      	str	r3, [r7, #8]
}
 800c50c:	bf00      	nop
 800c50e:	e7fe      	b.n	800c50e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c510:	4b20      	ldr	r3, [pc, #128]	; (800c594 <vTaskResume+0xac>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	429a      	cmp	r2, r3
 800c518:	d037      	beq.n	800c58a <vTaskResume+0xa2>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d034      	beq.n	800c58a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800c520:	f000 ff90 	bl	800d444 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff ffad 	bl	800c484 <prvTaskIsTaskSuspended>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d02a      	beq.n	800c586 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3304      	adds	r3, #4
 800c534:	4618      	mov	r0, r3
 800c536:	f7ff f800 	bl	800b53a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	2201      	movs	r2, #1
 800c540:	409a      	lsls	r2, r3
 800c542:	4b15      	ldr	r3, [pc, #84]	; (800c598 <vTaskResume+0xb0>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4313      	orrs	r3, r2
 800c548:	4a13      	ldr	r2, [pc, #76]	; (800c598 <vTaskResume+0xb0>)
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c550:	4613      	mov	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4a10      	ldr	r2, [pc, #64]	; (800c59c <vTaskResume+0xb4>)
 800c55a:	441a      	add	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3304      	adds	r3, #4
 800c560:	4619      	mov	r1, r3
 800c562:	4610      	mov	r0, r2
 800c564:	f7fe ff8c 	bl	800b480 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <vTaskResume+0xac>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	429a      	cmp	r2, r3
 800c574:	d307      	bcc.n	800c586 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c576:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <vTaskResume+0xb8>)
 800c578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c586:	f000 ff8d 	bl	800d4a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c58a:	bf00      	nop
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20000284 	.word	0x20000284
 800c598:	2000038c 	.word	0x2000038c
 800c59c:	20000288 	.word	0x20000288
 800c5a0:	e000ed04 	.word	0xe000ed04

0800c5a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08a      	sub	sp, #40	; 0x28
 800c5a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5b2:	463a      	mov	r2, r7
 800c5b4:	1d39      	adds	r1, r7, #4
 800c5b6:	f107 0308 	add.w	r3, r7, #8
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7f4 fda8 	bl	8001110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	9202      	str	r2, [sp, #8]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	460a      	mov	r2, r1
 800c5d2:	491e      	ldr	r1, [pc, #120]	; (800c64c <vTaskStartScheduler+0xa8>)
 800c5d4:	481e      	ldr	r0, [pc, #120]	; (800c650 <vTaskStartScheduler+0xac>)
 800c5d6:	f7ff fcfb 	bl	800bfd0 <xTaskCreateStatic>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4a1d      	ldr	r2, [pc, #116]	; (800c654 <vTaskStartScheduler+0xb0>)
 800c5de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5e0:	4b1c      	ldr	r3, [pc, #112]	; (800c654 <vTaskStartScheduler+0xb0>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	617b      	str	r3, [r7, #20]
 800c5ec:	e001      	b.n	800c5f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d116      	bne.n	800c626 <vTaskStartScheduler+0x82>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	613b      	str	r3, [r7, #16]
}
 800c60a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c60c:	4b12      	ldr	r3, [pc, #72]	; (800c658 <vTaskStartScheduler+0xb4>)
 800c60e:	f04f 32ff 	mov.w	r2, #4294967295
 800c612:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c614:	4b11      	ldr	r3, [pc, #68]	; (800c65c <vTaskStartScheduler+0xb8>)
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c61a:	4b11      	ldr	r3, [pc, #68]	; (800c660 <vTaskStartScheduler+0xbc>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c620:	f000 fe6e 	bl	800d300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c624:	e00e      	b.n	800c644 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62c:	d10a      	bne.n	800c644 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	60fb      	str	r3, [r7, #12]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <vTaskStartScheduler+0x9e>
}
 800c644:	bf00      	nop
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	0800db90 	.word	0x0800db90
 800c650:	0800cbf5 	.word	0x0800cbf5
 800c654:	200003a8 	.word	0x200003a8
 800c658:	200003a4 	.word	0x200003a4
 800c65c:	20000390 	.word	0x20000390
 800c660:	20000388 	.word	0x20000388

0800c664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <vTaskSuspendAll+0x18>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	3301      	adds	r3, #1
 800c66e:	4a03      	ldr	r2, [pc, #12]	; (800c67c <vTaskSuspendAll+0x18>)
 800c670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c672:	bf00      	nop
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	200003ac 	.word	0x200003ac

0800c680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c686:	2300      	movs	r3, #0
 800c688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c68e:	4b41      	ldr	r3, [pc, #260]	; (800c794 <xTaskResumeAll+0x114>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <xTaskResumeAll+0x2c>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	603b      	str	r3, [r7, #0]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6ac:	f000 feca 	bl	800d444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6b0:	4b38      	ldr	r3, [pc, #224]	; (800c794 <xTaskResumeAll+0x114>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	4a37      	ldr	r2, [pc, #220]	; (800c794 <xTaskResumeAll+0x114>)
 800c6b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ba:	4b36      	ldr	r3, [pc, #216]	; (800c794 <xTaskResumeAll+0x114>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d161      	bne.n	800c786 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6c2:	4b35      	ldr	r3, [pc, #212]	; (800c798 <xTaskResumeAll+0x118>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d05d      	beq.n	800c786 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6ca:	e02e      	b.n	800c72a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6cc:	4b33      	ldr	r3, [pc, #204]	; (800c79c <xTaskResumeAll+0x11c>)
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	3318      	adds	r3, #24
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fe ff2e 	bl	800b53a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe ff29 	bl	800b53a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	409a      	lsls	r2, r3
 800c6f0:	4b2b      	ldr	r3, [pc, #172]	; (800c7a0 <xTaskResumeAll+0x120>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	4a2a      	ldr	r2, [pc, #168]	; (800c7a0 <xTaskResumeAll+0x120>)
 800c6f8:	6013      	str	r3, [r2, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fe:	4613      	mov	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4a27      	ldr	r2, [pc, #156]	; (800c7a4 <xTaskResumeAll+0x124>)
 800c708:	441a      	add	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3304      	adds	r3, #4
 800c70e:	4619      	mov	r1, r3
 800c710:	4610      	mov	r0, r2
 800c712:	f7fe feb5 	bl	800b480 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c71a:	4b23      	ldr	r3, [pc, #140]	; (800c7a8 <xTaskResumeAll+0x128>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	429a      	cmp	r2, r3
 800c722:	d302      	bcc.n	800c72a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c724:	4b21      	ldr	r3, [pc, #132]	; (800c7ac <xTaskResumeAll+0x12c>)
 800c726:	2201      	movs	r2, #1
 800c728:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c72a:	4b1c      	ldr	r3, [pc, #112]	; (800c79c <xTaskResumeAll+0x11c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1cc      	bne.n	800c6cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c738:	f000 fb12 	bl	800cd60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c73c:	4b1c      	ldr	r3, [pc, #112]	; (800c7b0 <xTaskResumeAll+0x130>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d010      	beq.n	800c76a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c748:	f000 f836 	bl	800c7b8 <xTaskIncrementTick>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c752:	4b16      	ldr	r3, [pc, #88]	; (800c7ac <xTaskResumeAll+0x12c>)
 800c754:	2201      	movs	r2, #1
 800c756:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1f1      	bne.n	800c748 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c764:	4b12      	ldr	r3, [pc, #72]	; (800c7b0 <xTaskResumeAll+0x130>)
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c76a:	4b10      	ldr	r3, [pc, #64]	; (800c7ac <xTaskResumeAll+0x12c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d009      	beq.n	800c786 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c772:	2301      	movs	r3, #1
 800c774:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c776:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <xTaskResumeAll+0x134>)
 800c778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c786:	f000 fe8d 	bl	800d4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c78a:	68bb      	ldr	r3, [r7, #8]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	200003ac 	.word	0x200003ac
 800c798:	20000384 	.word	0x20000384
 800c79c:	20000344 	.word	0x20000344
 800c7a0:	2000038c 	.word	0x2000038c
 800c7a4:	20000288 	.word	0x20000288
 800c7a8:	20000284 	.word	0x20000284
 800c7ac:	20000398 	.word	0x20000398
 800c7b0:	20000394 	.word	0x20000394
 800c7b4:	e000ed04 	.word	0xe000ed04

0800c7b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7c2:	4b4e      	ldr	r3, [pc, #312]	; (800c8fc <xTaskIncrementTick+0x144>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f040 808e 	bne.w	800c8e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7cc:	4b4c      	ldr	r3, [pc, #304]	; (800c900 <xTaskIncrementTick+0x148>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7d4:	4a4a      	ldr	r2, [pc, #296]	; (800c900 <xTaskIncrementTick+0x148>)
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d120      	bne.n	800c822 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7e0:	4b48      	ldr	r3, [pc, #288]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00a      	beq.n	800c800 <xTaskIncrementTick+0x48>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	603b      	str	r3, [r7, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <xTaskIncrementTick+0x46>
 800c800:	4b40      	ldr	r3, [pc, #256]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	4b40      	ldr	r3, [pc, #256]	; (800c908 <xTaskIncrementTick+0x150>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a3e      	ldr	r2, [pc, #248]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	4a3e      	ldr	r2, [pc, #248]	; (800c908 <xTaskIncrementTick+0x150>)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	4b3d      	ldr	r3, [pc, #244]	; (800c90c <xTaskIncrementTick+0x154>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	4a3c      	ldr	r2, [pc, #240]	; (800c90c <xTaskIncrementTick+0x154>)
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	f000 fa9f 	bl	800cd60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c822:	4b3b      	ldr	r3, [pc, #236]	; (800c910 <xTaskIncrementTick+0x158>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d348      	bcc.n	800c8be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c82c:	4b35      	ldr	r3, [pc, #212]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d104      	bne.n	800c840 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c836:	4b36      	ldr	r3, [pc, #216]	; (800c910 <xTaskIncrementTick+0x158>)
 800c838:	f04f 32ff 	mov.w	r2, #4294967295
 800c83c:	601a      	str	r2, [r3, #0]
					break;
 800c83e:	e03e      	b.n	800c8be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c840:	4b30      	ldr	r3, [pc, #192]	; (800c904 <xTaskIncrementTick+0x14c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	429a      	cmp	r2, r3
 800c856:	d203      	bcs.n	800c860 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c858:	4a2d      	ldr	r2, [pc, #180]	; (800c910 <xTaskIncrementTick+0x158>)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c85e:	e02e      	b.n	800c8be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	3304      	adds	r3, #4
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe fe68 	bl	800b53a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d004      	beq.n	800c87c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	3318      	adds	r3, #24
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fe5f 	bl	800b53a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	2201      	movs	r2, #1
 800c882:	409a      	lsls	r2, r3
 800c884:	4b23      	ldr	r3, [pc, #140]	; (800c914 <xTaskIncrementTick+0x15c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4313      	orrs	r3, r2
 800c88a:	4a22      	ldr	r2, [pc, #136]	; (800c914 <xTaskIncrementTick+0x15c>)
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c892:	4613      	mov	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4a1f      	ldr	r2, [pc, #124]	; (800c918 <xTaskIncrementTick+0x160>)
 800c89c:	441a      	add	r2, r3
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f7fe fdeb 	bl	800b480 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ae:	4b1b      	ldr	r3, [pc, #108]	; (800c91c <xTaskIncrementTick+0x164>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d3b9      	bcc.n	800c82c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8bc:	e7b6      	b.n	800c82c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8be:	4b17      	ldr	r3, [pc, #92]	; (800c91c <xTaskIncrementTick+0x164>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c4:	4914      	ldr	r1, [pc, #80]	; (800c918 <xTaskIncrementTick+0x160>)
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d901      	bls.n	800c8da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8da:	4b11      	ldr	r3, [pc, #68]	; (800c920 <xTaskIncrementTick+0x168>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d007      	beq.n	800c8f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	617b      	str	r3, [r7, #20]
 800c8e6:	e004      	b.n	800c8f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <xTaskIncrementTick+0x16c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	4a0d      	ldr	r2, [pc, #52]	; (800c924 <xTaskIncrementTick+0x16c>)
 800c8f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c8f2:	697b      	ldr	r3, [r7, #20]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3718      	adds	r7, #24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	200003ac 	.word	0x200003ac
 800c900:	20000388 	.word	0x20000388
 800c904:	2000033c 	.word	0x2000033c
 800c908:	20000340 	.word	0x20000340
 800c90c:	2000039c 	.word	0x2000039c
 800c910:	200003a4 	.word	0x200003a4
 800c914:	2000038c 	.word	0x2000038c
 800c918:	20000288 	.word	0x20000288
 800c91c:	20000284 	.word	0x20000284
 800c920:	20000398 	.word	0x20000398
 800c924:	20000394 	.word	0x20000394

0800c928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c92e:	4b27      	ldr	r3, [pc, #156]	; (800c9cc <vTaskSwitchContext+0xa4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d003      	beq.n	800c93e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c936:	4b26      	ldr	r3, [pc, #152]	; (800c9d0 <vTaskSwitchContext+0xa8>)
 800c938:	2201      	movs	r2, #1
 800c93a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c93c:	e03f      	b.n	800c9be <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c93e:	4b24      	ldr	r3, [pc, #144]	; (800c9d0 <vTaskSwitchContext+0xa8>)
 800c940:	2200      	movs	r2, #0
 800c942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c944:	4b23      	ldr	r3, [pc, #140]	; (800c9d4 <vTaskSwitchContext+0xac>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	fab3 f383 	clz	r3, r3
 800c950:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c952:	7afb      	ldrb	r3, [r7, #11]
 800c954:	f1c3 031f 	rsb	r3, r3, #31
 800c958:	617b      	str	r3, [r7, #20]
 800c95a:	491f      	ldr	r1, [pc, #124]	; (800c9d8 <vTaskSwitchContext+0xb0>)
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	4613      	mov	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	440b      	add	r3, r1
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d10a      	bne.n	800c984 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	607b      	str	r3, [r7, #4]
}
 800c980:	bf00      	nop
 800c982:	e7fe      	b.n	800c982 <vTaskSwitchContext+0x5a>
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	4613      	mov	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4a12      	ldr	r2, [pc, #72]	; (800c9d8 <vTaskSwitchContext+0xb0>)
 800c990:	4413      	add	r3, r2
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	605a      	str	r2, [r3, #4]
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	685a      	ldr	r2, [r3, #4]
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3308      	adds	r3, #8
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d104      	bne.n	800c9b4 <vTaskSwitchContext+0x8c>
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	605a      	str	r2, [r3, #4]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	4a08      	ldr	r2, [pc, #32]	; (800c9dc <vTaskSwitchContext+0xb4>)
 800c9bc:	6013      	str	r3, [r2, #0]
}
 800c9be:	bf00      	nop
 800c9c0:	371c      	adds	r7, #28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	200003ac 	.word	0x200003ac
 800c9d0:	20000398 	.word	0x20000398
 800c9d4:	2000038c 	.word	0x2000038c
 800c9d8:	20000288 	.word	0x20000288
 800c9dc:	20000284 	.word	0x20000284

0800c9e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	60fb      	str	r3, [r7, #12]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca06:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <vTaskPlaceOnEventList+0x44>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3318      	adds	r3, #24
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7fe fd5a 	bl	800b4c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca14:	2101      	movs	r1, #1
 800ca16:	6838      	ldr	r0, [r7, #0]
 800ca18:	f000 fb7e 	bl	800d118 <prvAddCurrentTaskToDelayedList>
}
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20000284 	.word	0x20000284

0800ca28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10a      	bne.n	800ca54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	60fb      	str	r3, [r7, #12]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	3318      	adds	r3, #24
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fd6e 	bl	800b53a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca5e:	4b1d      	ldr	r3, [pc, #116]	; (800cad4 <xTaskRemoveFromEventList+0xac>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d11c      	bne.n	800caa0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	3304      	adds	r3, #4
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fd65 	bl	800b53a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	2201      	movs	r2, #1
 800ca76:	409a      	lsls	r2, r3
 800ca78:	4b17      	ldr	r3, [pc, #92]	; (800cad8 <xTaskRemoveFromEventList+0xb0>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	4a16      	ldr	r2, [pc, #88]	; (800cad8 <xTaskRemoveFromEventList+0xb0>)
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4a13      	ldr	r2, [pc, #76]	; (800cadc <xTaskRemoveFromEventList+0xb4>)
 800ca90:	441a      	add	r2, r3
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7fe fcf1 	bl	800b480 <vListInsertEnd>
 800ca9e:	e005      	b.n	800caac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	3318      	adds	r3, #24
 800caa4:	4619      	mov	r1, r3
 800caa6:	480e      	ldr	r0, [pc, #56]	; (800cae0 <xTaskRemoveFromEventList+0xb8>)
 800caa8:	f7fe fcea 	bl	800b480 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab0:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <xTaskRemoveFromEventList+0xbc>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d905      	bls.n	800cac6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800caba:	2301      	movs	r3, #1
 800cabc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cabe:	4b0a      	ldr	r3, [pc, #40]	; (800cae8 <xTaskRemoveFromEventList+0xc0>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	e001      	b.n	800caca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800caca:	697b      	ldr	r3, [r7, #20]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	200003ac 	.word	0x200003ac
 800cad8:	2000038c 	.word	0x2000038c
 800cadc:	20000288 	.word	0x20000288
 800cae0:	20000344 	.word	0x20000344
 800cae4:	20000284 	.word	0x20000284
 800cae8:	20000398 	.word	0x20000398

0800caec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <vTaskInternalSetTimeOutState+0x24>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <vTaskInternalSetTimeOutState+0x28>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	2000039c 	.word	0x2000039c
 800cb14:	20000388 	.word	0x20000388

0800cb18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	613b      	str	r3, [r7, #16]
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10a      	bne.n	800cb5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	60fb      	str	r3, [r7, #12]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb5a:	f000 fc73 	bl	800d444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb5e:	4b1d      	ldr	r3, [pc, #116]	; (800cbd4 <xTaskCheckForTimeOut+0xbc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	69ba      	ldr	r2, [r7, #24]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb76:	d102      	bne.n	800cb7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	e023      	b.n	800cbc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <xTaskCheckForTimeOut+0xc0>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d007      	beq.n	800cb9a <xTaskCheckForTimeOut+0x82>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d302      	bcc.n	800cb9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb94:	2301      	movs	r3, #1
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	e015      	b.n	800cbc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d20b      	bcs.n	800cbbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	1ad2      	subs	r2, r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff ff9b 	bl	800caec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	e004      	b.n	800cbc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cbc6:	f000 fc6d 	bl	800d4a4 <vPortExitCritical>

	return xReturn;
 800cbca:	69fb      	ldr	r3, [r7, #28]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3720      	adds	r7, #32
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20000388 	.word	0x20000388
 800cbd8:	2000039c 	.word	0x2000039c

0800cbdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cbe0:	4b03      	ldr	r3, [pc, #12]	; (800cbf0 <vTaskMissedYield+0x14>)
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	601a      	str	r2, [r3, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	20000398 	.word	0x20000398

0800cbf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbfc:	f000 f852 	bl	800cca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc00:	4b06      	ldr	r3, [pc, #24]	; (800cc1c <prvIdleTask+0x28>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d9f9      	bls.n	800cbfc <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc08:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <prvIdleTask+0x2c>)
 800cc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc18:	e7f0      	b.n	800cbfc <prvIdleTask+0x8>
 800cc1a:	bf00      	nop
 800cc1c:	20000288 	.word	0x20000288
 800cc20:	e000ed04 	.word	0xe000ed04

0800cc24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	607b      	str	r3, [r7, #4]
 800cc2e:	e00c      	b.n	800cc4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4a12      	ldr	r2, [pc, #72]	; (800cc84 <prvInitialiseTaskLists+0x60>)
 800cc3c:	4413      	add	r3, r2
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fbf1 	bl	800b426 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3301      	adds	r3, #1
 800cc48:	607b      	str	r3, [r7, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b06      	cmp	r3, #6
 800cc4e:	d9ef      	bls.n	800cc30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc50:	480d      	ldr	r0, [pc, #52]	; (800cc88 <prvInitialiseTaskLists+0x64>)
 800cc52:	f7fe fbe8 	bl	800b426 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc56:	480d      	ldr	r0, [pc, #52]	; (800cc8c <prvInitialiseTaskLists+0x68>)
 800cc58:	f7fe fbe5 	bl	800b426 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc5c:	480c      	ldr	r0, [pc, #48]	; (800cc90 <prvInitialiseTaskLists+0x6c>)
 800cc5e:	f7fe fbe2 	bl	800b426 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc62:	480c      	ldr	r0, [pc, #48]	; (800cc94 <prvInitialiseTaskLists+0x70>)
 800cc64:	f7fe fbdf 	bl	800b426 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc68:	480b      	ldr	r0, [pc, #44]	; (800cc98 <prvInitialiseTaskLists+0x74>)
 800cc6a:	f7fe fbdc 	bl	800b426 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc6e:	4b0b      	ldr	r3, [pc, #44]	; (800cc9c <prvInitialiseTaskLists+0x78>)
 800cc70:	4a05      	ldr	r2, [pc, #20]	; (800cc88 <prvInitialiseTaskLists+0x64>)
 800cc72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc74:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <prvInitialiseTaskLists+0x7c>)
 800cc76:	4a05      	ldr	r2, [pc, #20]	; (800cc8c <prvInitialiseTaskLists+0x68>)
 800cc78:	601a      	str	r2, [r3, #0]
}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20000288 	.word	0x20000288
 800cc88:	20000314 	.word	0x20000314
 800cc8c:	20000328 	.word	0x20000328
 800cc90:	20000344 	.word	0x20000344
 800cc94:	20000358 	.word	0x20000358
 800cc98:	20000370 	.word	0x20000370
 800cc9c:	2000033c 	.word	0x2000033c
 800cca0:	20000340 	.word	0x20000340

0800cca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ccaa:	e019      	b.n	800cce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ccac:	f000 fbca 	bl	800d444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb0:	4b10      	ldr	r3, [pc, #64]	; (800ccf4 <prvCheckTasksWaitingTermination+0x50>)
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe fc3c 	bl	800b53a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ccc2:	4b0d      	ldr	r3, [pc, #52]	; (800ccf8 <prvCheckTasksWaitingTermination+0x54>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	4a0b      	ldr	r2, [pc, #44]	; (800ccf8 <prvCheckTasksWaitingTermination+0x54>)
 800ccca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cccc:	4b0b      	ldr	r3, [pc, #44]	; (800ccfc <prvCheckTasksWaitingTermination+0x58>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	4a0a      	ldr	r2, [pc, #40]	; (800ccfc <prvCheckTasksWaitingTermination+0x58>)
 800ccd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ccd6:	f000 fbe5 	bl	800d4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f810 	bl	800cd00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cce0:	4b06      	ldr	r3, [pc, #24]	; (800ccfc <prvCheckTasksWaitingTermination+0x58>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e1      	bne.n	800ccac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cce8:	bf00      	nop
 800ccea:	bf00      	nop
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20000358 	.word	0x20000358
 800ccf8:	20000384 	.word	0x20000384
 800ccfc:	2000036c 	.word	0x2000036c

0800cd00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d108      	bne.n	800cd24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 fd82 	bl	800d820 <vPortFree>
				vPortFree( pxTCB );
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fd7f 	bl	800d820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd22:	e018      	b.n	800cd56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d103      	bne.n	800cd36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fd76 	bl	800d820 <vPortFree>
	}
 800cd34:	e00f      	b.n	800cd56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d00a      	beq.n	800cd56 <prvDeleteTCB+0x56>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60fb      	str	r3, [r7, #12]
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <prvDeleteTCB+0x54>
	}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
	...

0800cd60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd66:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <prvResetNextTaskUnblockTime+0x38>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd70:	4b0a      	ldr	r3, [pc, #40]	; (800cd9c <prvResetNextTaskUnblockTime+0x3c>)
 800cd72:	f04f 32ff 	mov.w	r2, #4294967295
 800cd76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd78:	e008      	b.n	800cd8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd7a:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <prvResetNextTaskUnblockTime+0x38>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4a04      	ldr	r2, [pc, #16]	; (800cd9c <prvResetNextTaskUnblockTime+0x3c>)
 800cd8a:	6013      	str	r3, [r2, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	2000033c 	.word	0x2000033c
 800cd9c:	200003a4 	.word	0x200003a4

0800cda0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <xTaskGetSchedulerState+0x34>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d102      	bne.n	800cdb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	e008      	b.n	800cdc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdb4:	4b08      	ldr	r3, [pc, #32]	; (800cdd8 <xTaskGetSchedulerState+0x38>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d102      	bne.n	800cdc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cdbc:	2302      	movs	r3, #2
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	e001      	b.n	800cdc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cdc6:	687b      	ldr	r3, [r7, #4]
	}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	20000390 	.word	0x20000390
 800cdd8:	200003ac 	.word	0x200003ac

0800cddc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d05e      	beq.n	800ceb0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf6:	4b31      	ldr	r3, [pc, #196]	; (800cebc <xTaskPriorityInherit+0xe0>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d24e      	bcs.n	800ce9e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	db06      	blt.n	800ce16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce08:	4b2c      	ldr	r3, [pc, #176]	; (800cebc <xTaskPriorityInherit+0xe0>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0e:	f1c3 0207 	rsb	r2, r3, #7
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	6959      	ldr	r1, [r3, #20]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce1e:	4613      	mov	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4a26      	ldr	r2, [pc, #152]	; (800cec0 <xTaskPriorityInherit+0xe4>)
 800ce28:	4413      	add	r3, r2
 800ce2a:	4299      	cmp	r1, r3
 800ce2c:	d12f      	bne.n	800ce8e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	3304      	adds	r3, #4
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe fb81 	bl	800b53a <uxListRemove>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10a      	bne.n	800ce54 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce42:	2201      	movs	r2, #1
 800ce44:	fa02 f303 	lsl.w	r3, r2, r3
 800ce48:	43da      	mvns	r2, r3
 800ce4a:	4b1e      	ldr	r3, [pc, #120]	; (800cec4 <xTaskPriorityInherit+0xe8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4013      	ands	r3, r2
 800ce50:	4a1c      	ldr	r2, [pc, #112]	; (800cec4 <xTaskPriorityInherit+0xe8>)
 800ce52:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce54:	4b19      	ldr	r3, [pc, #100]	; (800cebc <xTaskPriorityInherit+0xe0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	2201      	movs	r2, #1
 800ce64:	409a      	lsls	r2, r3
 800ce66:	4b17      	ldr	r3, [pc, #92]	; (800cec4 <xTaskPriorityInherit+0xe8>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	4a15      	ldr	r2, [pc, #84]	; (800cec4 <xTaskPriorityInherit+0xe8>)
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce74:	4613      	mov	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	4413      	add	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4a10      	ldr	r2, [pc, #64]	; (800cec0 <xTaskPriorityInherit+0xe4>)
 800ce7e:	441a      	add	r2, r3
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	3304      	adds	r3, #4
 800ce84:	4619      	mov	r1, r3
 800ce86:	4610      	mov	r0, r2
 800ce88:	f7fe fafa 	bl	800b480 <vListInsertEnd>
 800ce8c:	e004      	b.n	800ce98 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce8e:	4b0b      	ldr	r3, [pc, #44]	; (800cebc <xTaskPriorityInherit+0xe0>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	60fb      	str	r3, [r7, #12]
 800ce9c:	e008      	b.n	800ceb0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cea2:	4b06      	ldr	r3, [pc, #24]	; (800cebc <xTaskPriorityInherit+0xe0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d201      	bcs.n	800ceb0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ceac:	2301      	movs	r3, #1
 800ceae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
	}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	20000284 	.word	0x20000284
 800cec0:	20000288 	.word	0x20000288
 800cec4:	2000038c 	.word	0x2000038c

0800cec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d06e      	beq.n	800cfbc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cede:	4b3a      	ldr	r3, [pc, #232]	; (800cfc8 <xTaskPriorityDisinherit+0x100>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d00a      	beq.n	800cefe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	60fb      	str	r3, [r7, #12]
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60bb      	str	r3, [r7, #8]
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf20:	1e5a      	subs	r2, r3, #1
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d044      	beq.n	800cfbc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d140      	bne.n	800cfbc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe fafb 	bl	800b53a <uxListRemove>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d115      	bne.n	800cf76 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4e:	491f      	ldr	r1, [pc, #124]	; (800cfcc <xTaskPriorityDisinherit+0x104>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <xTaskPriorityDisinherit+0xae>
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	2201      	movs	r2, #1
 800cf66:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6a:	43da      	mvns	r2, r3
 800cf6c:	4b18      	ldr	r3, [pc, #96]	; (800cfd0 <xTaskPriorityDisinherit+0x108>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4013      	ands	r3, r2
 800cf72:	4a17      	ldr	r2, [pc, #92]	; (800cfd0 <xTaskPriorityDisinherit+0x108>)
 800cf74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf82:	f1c3 0207 	rsb	r2, r3, #7
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	2201      	movs	r2, #1
 800cf90:	409a      	lsls	r2, r3
 800cf92:	4b0f      	ldr	r3, [pc, #60]	; (800cfd0 <xTaskPriorityDisinherit+0x108>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	4a0d      	ldr	r2, [pc, #52]	; (800cfd0 <xTaskPriorityDisinherit+0x108>)
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4a08      	ldr	r2, [pc, #32]	; (800cfcc <xTaskPriorityDisinherit+0x104>)
 800cfaa:	441a      	add	r2, r3
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	f7fe fa64 	bl	800b480 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfbc:	697b      	ldr	r3, [r7, #20]
	}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20000284 	.word	0x20000284
 800cfcc:	20000288 	.word	0x20000288
 800cfd0:	2000038c 	.word	0x2000038c

0800cfd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b088      	sub	sp, #32
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d077      	beq.n	800d0dc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10a      	bne.n	800d00a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	60fb      	str	r3, [r7, #12]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d902      	bls.n	800d01a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	61fb      	str	r3, [r7, #28]
 800d018:	e002      	b.n	800d020 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d01e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d024:	69fa      	ldr	r2, [r7, #28]
 800d026:	429a      	cmp	r2, r3
 800d028:	d058      	beq.n	800d0dc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	429a      	cmp	r2, r3
 800d032:	d153      	bne.n	800d0dc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d034:	4b2b      	ldr	r3, [pc, #172]	; (800d0e4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	69ba      	ldr	r2, [r7, #24]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d10a      	bne.n	800d054 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	60bb      	str	r3, [r7, #8]
}
 800d050:	bf00      	nop
 800d052:	e7fe      	b.n	800d052 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	69fa      	ldr	r2, [r7, #28]
 800d05e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	db04      	blt.n	800d072 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	f1c3 0207 	rsb	r2, r3, #7
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	6959      	ldr	r1, [r3, #20]
 800d076:	693a      	ldr	r2, [r7, #16]
 800d078:	4613      	mov	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4a19      	ldr	r2, [pc, #100]	; (800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d082:	4413      	add	r3, r2
 800d084:	4299      	cmp	r1, r3
 800d086:	d129      	bne.n	800d0dc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	3304      	adds	r3, #4
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fa54 	bl	800b53a <uxListRemove>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10a      	bne.n	800d0ae <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09c:	2201      	movs	r2, #1
 800d09e:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a2:	43da      	mvns	r2, r3
 800d0a4:	4b11      	ldr	r3, [pc, #68]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	4a10      	ldr	r2, [pc, #64]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	409a      	lsls	r2, r3
 800d0b6:	4b0d      	ldr	r3, [pc, #52]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	4a0b      	ldr	r2, [pc, #44]	; (800d0ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4a06      	ldr	r2, [pc, #24]	; (800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d0ce:	441a      	add	r2, r3
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	f7fe f9d2 	bl	800b480 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0dc:	bf00      	nop
 800d0de:	3720      	adds	r7, #32
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	20000284 	.word	0x20000284
 800d0e8:	20000288 	.word	0x20000288
 800d0ec:	2000038c 	.word	0x2000038c

0800d0f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0f0:	b480      	push	{r7}
 800d0f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d0f4:	4b07      	ldr	r3, [pc, #28]	; (800d114 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d004      	beq.n	800d106 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d0fc:	4b05      	ldr	r3, [pc, #20]	; (800d114 <pvTaskIncrementMutexHeldCount+0x24>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d102:	3201      	adds	r2, #1
 800d104:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d106:	4b03      	ldr	r3, [pc, #12]	; (800d114 <pvTaskIncrementMutexHeldCount+0x24>)
 800d108:	681b      	ldr	r3, [r3, #0]
	}
 800d10a:	4618      	mov	r0, r3
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	20000284 	.word	0x20000284

0800d118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d122:	4b29      	ldr	r3, [pc, #164]	; (800d1c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d128:	4b28      	ldr	r3, [pc, #160]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3304      	adds	r3, #4
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe fa03 	bl	800b53a <uxListRemove>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10b      	bne.n	800d152 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d13a:	4b24      	ldr	r3, [pc, #144]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d140:	2201      	movs	r2, #1
 800d142:	fa02 f303 	lsl.w	r3, r2, r3
 800d146:	43da      	mvns	r2, r3
 800d148:	4b21      	ldr	r3, [pc, #132]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4013      	ands	r3, r2
 800d14e:	4a20      	ldr	r2, [pc, #128]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d150:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d158:	d10a      	bne.n	800d170 <prvAddCurrentTaskToDelayedList+0x58>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d007      	beq.n	800d170 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d160:	4b1a      	ldr	r3, [pc, #104]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3304      	adds	r3, #4
 800d166:	4619      	mov	r1, r3
 800d168:	481a      	ldr	r0, [pc, #104]	; (800d1d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d16a:	f7fe f989 	bl	800b480 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d16e:	e026      	b.n	800d1be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4413      	add	r3, r2
 800d176:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d178:	4b14      	ldr	r3, [pc, #80]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	429a      	cmp	r2, r3
 800d186:	d209      	bcs.n	800d19c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d188:	4b13      	ldr	r3, [pc, #76]	; (800d1d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	4b0f      	ldr	r3, [pc, #60]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3304      	adds	r3, #4
 800d192:	4619      	mov	r1, r3
 800d194:	4610      	mov	r0, r2
 800d196:	f7fe f997 	bl	800b4c8 <vListInsert>
}
 800d19a:	e010      	b.n	800d1be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d19c:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	f7fe f98d 	bl	800b4c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1ae:	4b0c      	ldr	r3, [pc, #48]	; (800d1e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d202      	bcs.n	800d1be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d1b8:	4a09      	ldr	r2, [pc, #36]	; (800d1e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	6013      	str	r3, [r2, #0]
}
 800d1be:	bf00      	nop
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000388 	.word	0x20000388
 800d1cc:	20000284 	.word	0x20000284
 800d1d0:	2000038c 	.word	0x2000038c
 800d1d4:	20000370 	.word	0x20000370
 800d1d8:	20000340 	.word	0x20000340
 800d1dc:	2000033c 	.word	0x2000033c
 800d1e0:	200003a4 	.word	0x200003a4

0800d1e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	3b04      	subs	r3, #4
 800d1f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d1fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3b04      	subs	r3, #4
 800d202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	f023 0201 	bic.w	r2, r3, #1
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3b04      	subs	r3, #4
 800d212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d214:	4a0c      	ldr	r2, [pc, #48]	; (800d248 <pxPortInitialiseStack+0x64>)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	3b14      	subs	r3, #20
 800d21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	3b04      	subs	r3, #4
 800d22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f06f 0202 	mvn.w	r2, #2
 800d232:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3b20      	subs	r3, #32
 800d238:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d23a:	68fb      	ldr	r3, [r7, #12]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	0800d24d 	.word	0x0800d24d

0800d24c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d256:	4b12      	ldr	r3, [pc, #72]	; (800d2a0 <prvTaskExitError+0x54>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25e:	d00a      	beq.n	800d276 <prvTaskExitError+0x2a>
	__asm volatile
 800d260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	60fb      	str	r3, [r7, #12]
}
 800d272:	bf00      	nop
 800d274:	e7fe      	b.n	800d274 <prvTaskExitError+0x28>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60bb      	str	r3, [r7, #8]
}
 800d288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d28a:	bf00      	nop
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0fc      	beq.n	800d28c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d292:	bf00      	nop
 800d294:	bf00      	nop
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	20000010 	.word	0x20000010
	...

0800d2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2b0:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <pxCurrentTCBConst2>)
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	6808      	ldr	r0, [r1, #0]
 800d2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ba:	f380 8809 	msr	PSP, r0
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f04f 0000 	mov.w	r0, #0
 800d2c6:	f380 8811 	msr	BASEPRI, r0
 800d2ca:	4770      	bx	lr
 800d2cc:	f3af 8000 	nop.w

0800d2d0 <pxCurrentTCBConst2>:
 800d2d0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop

0800d2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2d8:	4808      	ldr	r0, [pc, #32]	; (800d2fc <prvPortStartFirstTask+0x24>)
 800d2da:	6800      	ldr	r0, [r0, #0]
 800d2dc:	6800      	ldr	r0, [r0, #0]
 800d2de:	f380 8808 	msr	MSP, r0
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8814 	msr	CONTROL, r0
 800d2ea:	b662      	cpsie	i
 800d2ec:	b661      	cpsie	f
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	df00      	svc	0
 800d2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2fa:	bf00      	nop
 800d2fc:	e000ed08 	.word	0xe000ed08

0800d300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d306:	4b46      	ldr	r3, [pc, #280]	; (800d420 <xPortStartScheduler+0x120>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a46      	ldr	r2, [pc, #280]	; (800d424 <xPortStartScheduler+0x124>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d10a      	bne.n	800d326 <xPortStartScheduler+0x26>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	613b      	str	r3, [r7, #16]
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d326:	4b3e      	ldr	r3, [pc, #248]	; (800d420 <xPortStartScheduler+0x120>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a3f      	ldr	r2, [pc, #252]	; (800d428 <xPortStartScheduler+0x128>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d10a      	bne.n	800d346 <xPortStartScheduler+0x46>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	60fb      	str	r3, [r7, #12]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d346:	4b39      	ldr	r3, [pc, #228]	; (800d42c <xPortStartScheduler+0x12c>)
 800d348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	22ff      	movs	r2, #255	; 0xff
 800d356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	b2db      	uxtb	r3, r3
 800d364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	4b31      	ldr	r3, [pc, #196]	; (800d430 <xPortStartScheduler+0x130>)
 800d36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d36e:	4b31      	ldr	r3, [pc, #196]	; (800d434 <xPortStartScheduler+0x134>)
 800d370:	2207      	movs	r2, #7
 800d372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d374:	e009      	b.n	800d38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d376:	4b2f      	ldr	r3, [pc, #188]	; (800d434 <xPortStartScheduler+0x134>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	4a2d      	ldr	r2, [pc, #180]	; (800d434 <xPortStartScheduler+0x134>)
 800d37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	b2db      	uxtb	r3, r3
 800d388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d38a:	78fb      	ldrb	r3, [r7, #3]
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d392:	2b80      	cmp	r3, #128	; 0x80
 800d394:	d0ef      	beq.n	800d376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d396:	4b27      	ldr	r3, [pc, #156]	; (800d434 <xPortStartScheduler+0x134>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f1c3 0307 	rsb	r3, r3, #7
 800d39e:	2b04      	cmp	r3, #4
 800d3a0:	d00a      	beq.n	800d3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60bb      	str	r3, [r7, #8]
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3b8:	4b1e      	ldr	r3, [pc, #120]	; (800d434 <xPortStartScheduler+0x134>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	4a1d      	ldr	r2, [pc, #116]	; (800d434 <xPortStartScheduler+0x134>)
 800d3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3c2:	4b1c      	ldr	r3, [pc, #112]	; (800d434 <xPortStartScheduler+0x134>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3ca:	4a1a      	ldr	r2, [pc, #104]	; (800d434 <xPortStartScheduler+0x134>)
 800d3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3d6:	4b18      	ldr	r3, [pc, #96]	; (800d438 <xPortStartScheduler+0x138>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a17      	ldr	r2, [pc, #92]	; (800d438 <xPortStartScheduler+0x138>)
 800d3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3e2:	4b15      	ldr	r3, [pc, #84]	; (800d438 <xPortStartScheduler+0x138>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a14      	ldr	r2, [pc, #80]	; (800d438 <xPortStartScheduler+0x138>)
 800d3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3ee:	f000 f8dd 	bl	800d5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3f2:	4b12      	ldr	r3, [pc, #72]	; (800d43c <xPortStartScheduler+0x13c>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3f8:	f000 f8fc 	bl	800d5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3fc:	4b10      	ldr	r3, [pc, #64]	; (800d440 <xPortStartScheduler+0x140>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a0f      	ldr	r2, [pc, #60]	; (800d440 <xPortStartScheduler+0x140>)
 800d402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d408:	f7ff ff66 	bl	800d2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d40c:	f7ff fa8c 	bl	800c928 <vTaskSwitchContext>
	prvTaskExitError();
 800d410:	f7ff ff1c 	bl	800d24c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	e000ed00 	.word	0xe000ed00
 800d424:	410fc271 	.word	0x410fc271
 800d428:	410fc270 	.word	0x410fc270
 800d42c:	e000e400 	.word	0xe000e400
 800d430:	200003b0 	.word	0x200003b0
 800d434:	200003b4 	.word	0x200003b4
 800d438:	e000ed20 	.word	0xe000ed20
 800d43c:	20000010 	.word	0x20000010
 800d440:	e000ef34 	.word	0xe000ef34

0800d444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	607b      	str	r3, [r7, #4]
}
 800d45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d45e:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <vPortEnterCritical+0x58>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	4a0d      	ldr	r2, [pc, #52]	; (800d49c <vPortEnterCritical+0x58>)
 800d466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d468:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <vPortEnterCritical+0x58>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d10f      	bne.n	800d490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <vPortEnterCritical+0x5c>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <vPortEnterCritical+0x4c>
	__asm volatile
 800d47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	603b      	str	r3, [r7, #0]
}
 800d48c:	bf00      	nop
 800d48e:	e7fe      	b.n	800d48e <vPortEnterCritical+0x4a>
	}
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20000010 	.word	0x20000010
 800d4a0:	e000ed04 	.word	0xe000ed04

0800d4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4aa:	4b12      	ldr	r3, [pc, #72]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10a      	bne.n	800d4c8 <vPortExitCritical+0x24>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	607b      	str	r3, [r7, #4]
}
 800d4c4:	bf00      	nop
 800d4c6:	e7fe      	b.n	800d4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	4a09      	ldr	r2, [pc, #36]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4d2:	4b08      	ldr	r3, [pc, #32]	; (800d4f4 <vPortExitCritical+0x50>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d105      	bne.n	800d4e6 <vPortExitCritical+0x42>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	f383 8811 	msr	BASEPRI, r3
}
 800d4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4e6:	bf00      	nop
 800d4e8:	370c      	adds	r7, #12
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	20000010 	.word	0x20000010
	...

0800d500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d500:	f3ef 8009 	mrs	r0, PSP
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	4b15      	ldr	r3, [pc, #84]	; (800d560 <pxCurrentTCBConst>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	f01e 0f10 	tst.w	lr, #16
 800d510:	bf08      	it	eq
 800d512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51a:	6010      	str	r0, [r2, #0]
 800d51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d524:	f380 8811 	msr	BASEPRI, r0
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f7ff f9fa 	bl	800c928 <vTaskSwitchContext>
 800d534:	f04f 0000 	mov.w	r0, #0
 800d538:	f380 8811 	msr	BASEPRI, r0
 800d53c:	bc09      	pop	{r0, r3}
 800d53e:	6819      	ldr	r1, [r3, #0]
 800d540:	6808      	ldr	r0, [r1, #0]
 800d542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d546:	f01e 0f10 	tst.w	lr, #16
 800d54a:	bf08      	it	eq
 800d54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d550:	f380 8809 	msr	PSP, r0
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	f3af 8000 	nop.w

0800d560 <pxCurrentTCBConst>:
 800d560:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop

0800d568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	607b      	str	r3, [r7, #4]
}
 800d580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d582:	f7ff f919 	bl	800c7b8 <xTaskIncrementTick>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d003      	beq.n	800d594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d58c:	4b06      	ldr	r3, [pc, #24]	; (800d5a8 <SysTick_Handler+0x40>)
 800d58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	2300      	movs	r3, #0
 800d596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	f383 8811 	msr	BASEPRI, r3
}
 800d59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	e000ed04 	.word	0xe000ed04

0800d5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5b0:	4b0b      	ldr	r3, [pc, #44]	; (800d5e0 <vPortSetupTimerInterrupt+0x34>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5b6:	4b0b      	ldr	r3, [pc, #44]	; (800d5e4 <vPortSetupTimerInterrupt+0x38>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <vPortSetupTimerInterrupt+0x3c>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a0a      	ldr	r2, [pc, #40]	; (800d5ec <vPortSetupTimerInterrupt+0x40>)
 800d5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5c6:	099b      	lsrs	r3, r3, #6
 800d5c8:	4a09      	ldr	r2, [pc, #36]	; (800d5f0 <vPortSetupTimerInterrupt+0x44>)
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ce:	4b04      	ldr	r3, [pc, #16]	; (800d5e0 <vPortSetupTimerInterrupt+0x34>)
 800d5d0:	2207      	movs	r2, #7
 800d5d2:	601a      	str	r2, [r3, #0]
}
 800d5d4:	bf00      	nop
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	e000e010 	.word	0xe000e010
 800d5e4:	e000e018 	.word	0xe000e018
 800d5e8:	20000000 	.word	0x20000000
 800d5ec:	10624dd3 	.word	0x10624dd3
 800d5f0:	e000e014 	.word	0xe000e014

0800d5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d604 <vPortEnableVFP+0x10>
 800d5f8:	6801      	ldr	r1, [r0, #0]
 800d5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5fe:	6001      	str	r1, [r0, #0]
 800d600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d602:	bf00      	nop
 800d604:	e000ed88 	.word	0xe000ed88

0800d608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d60e:	f3ef 8305 	mrs	r3, IPSR
 800d612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b0f      	cmp	r3, #15
 800d618:	d914      	bls.n	800d644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d61a:	4a17      	ldr	r2, [pc, #92]	; (800d678 <vPortValidateInterruptPriority+0x70>)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d624:	4b15      	ldr	r3, [pc, #84]	; (800d67c <vPortValidateInterruptPriority+0x74>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	7afa      	ldrb	r2, [r7, #11]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d20a      	bcs.n	800d644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	607b      	str	r3, [r7, #4]
}
 800d640:	bf00      	nop
 800d642:	e7fe      	b.n	800d642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d644:	4b0e      	ldr	r3, [pc, #56]	; (800d680 <vPortValidateInterruptPriority+0x78>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d64c:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <vPortValidateInterruptPriority+0x7c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d90a      	bls.n	800d66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d658:	f383 8811 	msr	BASEPRI, r3
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	603b      	str	r3, [r7, #0]
}
 800d666:	bf00      	nop
 800d668:	e7fe      	b.n	800d668 <vPortValidateInterruptPriority+0x60>
	}
 800d66a:	bf00      	nop
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	e000e3f0 	.word	0xe000e3f0
 800d67c:	200003b0 	.word	0x200003b0
 800d680:	e000ed0c 	.word	0xe000ed0c
 800d684:	200003b4 	.word	0x200003b4

0800d688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b08a      	sub	sp, #40	; 0x28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d690:	2300      	movs	r3, #0
 800d692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d694:	f7fe ffe6 	bl	800c664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d698:	4b5b      	ldr	r3, [pc, #364]	; (800d808 <pvPortMalloc+0x180>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6a0:	f000 f920 	bl	800d8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6a4:	4b59      	ldr	r3, [pc, #356]	; (800d80c <pvPortMalloc+0x184>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f040 8093 	bne.w	800d7d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d01d      	beq.n	800d6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4413      	add	r3, r2
 800d6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d014      	beq.n	800d6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f023 0307 	bic.w	r3, r3, #7
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f003 0307 	and.w	r3, r3, #7
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	617b      	str	r3, [r7, #20]
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d06e      	beq.n	800d7d8 <pvPortMalloc+0x150>
 800d6fa:	4b45      	ldr	r3, [pc, #276]	; (800d810 <pvPortMalloc+0x188>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	429a      	cmp	r2, r3
 800d702:	d869      	bhi.n	800d7d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d704:	4b43      	ldr	r3, [pc, #268]	; (800d814 <pvPortMalloc+0x18c>)
 800d706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d708:	4b42      	ldr	r3, [pc, #264]	; (800d814 <pvPortMalloc+0x18c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d70e:	e004      	b.n	800d71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d903      	bls.n	800d72c <pvPortMalloc+0xa4>
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1f1      	bne.n	800d710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d72c:	4b36      	ldr	r3, [pc, #216]	; (800d808 <pvPortMalloc+0x180>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d732:	429a      	cmp	r2, r3
 800d734:	d050      	beq.n	800d7d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2208      	movs	r2, #8
 800d73c:	4413      	add	r3, r2
 800d73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	2308      	movs	r3, #8
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	429a      	cmp	r2, r3
 800d756:	d91f      	bls.n	800d798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00a      	beq.n	800d780 <pvPortMalloc+0xf8>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	613b      	str	r3, [r7, #16]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	1ad2      	subs	r2, r2, r3
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d792:	69b8      	ldr	r0, [r7, #24]
 800d794:	f000 f908 	bl	800d9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <pvPortMalloc+0x188>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	4a1b      	ldr	r2, [pc, #108]	; (800d810 <pvPortMalloc+0x188>)
 800d7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7a6:	4b1a      	ldr	r3, [pc, #104]	; (800d810 <pvPortMalloc+0x188>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <pvPortMalloc+0x190>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d203      	bcs.n	800d7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7b2:	4b17      	ldr	r3, [pc, #92]	; (800d810 <pvPortMalloc+0x188>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a18      	ldr	r2, [pc, #96]	; (800d818 <pvPortMalloc+0x190>)
 800d7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	4b13      	ldr	r3, [pc, #76]	; (800d80c <pvPortMalloc+0x184>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7ce:	4b13      	ldr	r3, [pc, #76]	; (800d81c <pvPortMalloc+0x194>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	4a11      	ldr	r2, [pc, #68]	; (800d81c <pvPortMalloc+0x194>)
 800d7d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7d8:	f7fe ff52 	bl	800c680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00a      	beq.n	800d7fc <pvPortMalloc+0x174>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	60fb      	str	r3, [r7, #12]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <pvPortMalloc+0x172>
	return pvReturn;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3728      	adds	r7, #40	; 0x28
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20003fc0 	.word	0x20003fc0
 800d80c:	20003fd4 	.word	0x20003fd4
 800d810:	20003fc4 	.word	0x20003fc4
 800d814:	20003fb8 	.word	0x20003fb8
 800d818:	20003fc8 	.word	0x20003fc8
 800d81c:	20003fcc 	.word	0x20003fcc

0800d820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d04d      	beq.n	800d8ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d832:	2308      	movs	r3, #8
 800d834:	425b      	negs	r3, r3
 800d836:	697a      	ldr	r2, [r7, #20]
 800d838:	4413      	add	r3, r2
 800d83a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	4b24      	ldr	r3, [pc, #144]	; (800d8d8 <vPortFree+0xb8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4013      	ands	r3, r2
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d10a      	bne.n	800d864 <vPortFree+0x44>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	60fb      	str	r3, [r7, #12]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00a      	beq.n	800d882 <vPortFree+0x62>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	60bb      	str	r3, [r7, #8]
}
 800d87e:	bf00      	nop
 800d880:	e7fe      	b.n	800d880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	4b14      	ldr	r3, [pc, #80]	; (800d8d8 <vPortFree+0xb8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4013      	ands	r3, r2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01e      	beq.n	800d8ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d11a      	bne.n	800d8ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	4b0e      	ldr	r3, [pc, #56]	; (800d8d8 <vPortFree+0xb8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	43db      	mvns	r3, r3
 800d8a2:	401a      	ands	r2, r3
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8a8:	f7fe fedc 	bl	800c664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <vPortFree+0xbc>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4a09      	ldr	r2, [pc, #36]	; (800d8dc <vPortFree+0xbc>)
 800d8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ba:	6938      	ldr	r0, [r7, #16]
 800d8bc:	f000 f874 	bl	800d9a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8c0:	4b07      	ldr	r3, [pc, #28]	; (800d8e0 <vPortFree+0xc0>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <vPortFree+0xc0>)
 800d8c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8ca:	f7fe fed9 	bl	800c680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ce:	bf00      	nop
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20003fd4 	.word	0x20003fd4
 800d8dc:	20003fc4 	.word	0x20003fc4
 800d8e0:	20003fd0 	.word	0x20003fd0

0800d8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8f0:	4b27      	ldr	r3, [pc, #156]	; (800d990 <prvHeapInit+0xac>)
 800d8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00c      	beq.n	800d918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3307      	adds	r3, #7
 800d902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0307 	bic.w	r3, r3, #7
 800d90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	4a1f      	ldr	r2, [pc, #124]	; (800d990 <prvHeapInit+0xac>)
 800d914:	4413      	add	r3, r2
 800d916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d91c:	4a1d      	ldr	r2, [pc, #116]	; (800d994 <prvHeapInit+0xb0>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d922:	4b1c      	ldr	r3, [pc, #112]	; (800d994 <prvHeapInit+0xb0>)
 800d924:	2200      	movs	r2, #0
 800d926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	4413      	add	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d930:	2208      	movs	r2, #8
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f023 0307 	bic.w	r3, r3, #7
 800d93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	4a15      	ldr	r2, [pc, #84]	; (800d998 <prvHeapInit+0xb4>)
 800d944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <prvHeapInit+0xb4>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d94e:	4b12      	ldr	r3, [pc, #72]	; (800d998 <prvHeapInit+0xb4>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	1ad2      	subs	r2, r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d964:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <prvHeapInit+0xb4>)
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4a0a      	ldr	r2, [pc, #40]	; (800d99c <prvHeapInit+0xb8>)
 800d972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4a09      	ldr	r2, [pc, #36]	; (800d9a0 <prvHeapInit+0xbc>)
 800d97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d97c:	4b09      	ldr	r3, [pc, #36]	; (800d9a4 <prvHeapInit+0xc0>)
 800d97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d982:	601a      	str	r2, [r3, #0]
}
 800d984:	bf00      	nop
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	200003b8 	.word	0x200003b8
 800d994:	20003fb8 	.word	0x20003fb8
 800d998:	20003fc0 	.word	0x20003fc0
 800d99c:	20003fc8 	.word	0x20003fc8
 800d9a0:	20003fc4 	.word	0x20003fc4
 800d9a4:	20003fd4 	.word	0x20003fd4

0800d9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9b0:	4b28      	ldr	r3, [pc, #160]	; (800da54 <prvInsertBlockIntoFreeList+0xac>)
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e002      	b.n	800d9bc <prvInsertBlockIntoFreeList+0x14>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d8f7      	bhi.n	800d9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d108      	bne.n	800d9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	441a      	add	r2, r3
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d118      	bne.n	800da30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	4b15      	ldr	r3, [pc, #84]	; (800da58 <prvInsertBlockIntoFreeList+0xb0>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d00d      	beq.n	800da26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	441a      	add	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	e008      	b.n	800da38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da26:	4b0c      	ldr	r3, [pc, #48]	; (800da58 <prvInsertBlockIntoFreeList+0xb0>)
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	e003      	b.n	800da38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d002      	beq.n	800da46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	20003fb8 	.word	0x20003fb8
 800da58:	20003fc0 	.word	0x20003fc0

0800da5c <__libc_init_array>:
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	4d0d      	ldr	r5, [pc, #52]	; (800da94 <__libc_init_array+0x38>)
 800da60:	4c0d      	ldr	r4, [pc, #52]	; (800da98 <__libc_init_array+0x3c>)
 800da62:	1b64      	subs	r4, r4, r5
 800da64:	10a4      	asrs	r4, r4, #2
 800da66:	2600      	movs	r6, #0
 800da68:	42a6      	cmp	r6, r4
 800da6a:	d109      	bne.n	800da80 <__libc_init_array+0x24>
 800da6c:	4d0b      	ldr	r5, [pc, #44]	; (800da9c <__libc_init_array+0x40>)
 800da6e:	4c0c      	ldr	r4, [pc, #48]	; (800daa0 <__libc_init_array+0x44>)
 800da70:	f000 f82e 	bl	800dad0 <_init>
 800da74:	1b64      	subs	r4, r4, r5
 800da76:	10a4      	asrs	r4, r4, #2
 800da78:	2600      	movs	r6, #0
 800da7a:	42a6      	cmp	r6, r4
 800da7c:	d105      	bne.n	800da8a <__libc_init_array+0x2e>
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
 800da80:	f855 3b04 	ldr.w	r3, [r5], #4
 800da84:	4798      	blx	r3
 800da86:	3601      	adds	r6, #1
 800da88:	e7ee      	b.n	800da68 <__libc_init_array+0xc>
 800da8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da8e:	4798      	blx	r3
 800da90:	3601      	adds	r6, #1
 800da92:	e7f2      	b.n	800da7a <__libc_init_array+0x1e>
 800da94:	0800dbe0 	.word	0x0800dbe0
 800da98:	0800dbe0 	.word	0x0800dbe0
 800da9c:	0800dbe0 	.word	0x0800dbe0
 800daa0:	0800dbe4 	.word	0x0800dbe4

0800daa4 <memcpy>:
 800daa4:	440a      	add	r2, r1
 800daa6:	4291      	cmp	r1, r2
 800daa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800daac:	d100      	bne.n	800dab0 <memcpy+0xc>
 800daae:	4770      	bx	lr
 800dab0:	b510      	push	{r4, lr}
 800dab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daba:	4291      	cmp	r1, r2
 800dabc:	d1f9      	bne.n	800dab2 <memcpy+0xe>
 800dabe:	bd10      	pop	{r4, pc}

0800dac0 <memset>:
 800dac0:	4402      	add	r2, r0
 800dac2:	4603      	mov	r3, r0
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d100      	bne.n	800daca <memset+0xa>
 800dac8:	4770      	bx	lr
 800daca:	f803 1b01 	strb.w	r1, [r3], #1
 800dace:	e7f9      	b.n	800dac4 <memset+0x4>

0800dad0 <_init>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	bf00      	nop
 800dad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dad6:	bc08      	pop	{r3}
 800dad8:	469e      	mov	lr, r3
 800dada:	4770      	bx	lr

0800dadc <_fini>:
 800dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dade:	bf00      	nop
 800dae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dae2:	bc08      	pop	{r3}
 800dae4:	469e      	mov	lr, r3
 800dae6:	4770      	bx	lr
